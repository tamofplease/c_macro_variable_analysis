<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/parser/src/parTranslater.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parInt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmdnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>generateDealNodeErrMsg</name><parameter_list>(<parameter><type><name>pCxt</name></type></parameter>, <parameter><type><name>code</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(pCxt-&gt;errCode = generateSyntaxErrMsg(&amp;pCxt-&gt;msgBuf, code, ##__VA_ARGS__), DEAL_RES_ERROR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTABLE_SHOW_TYPE_OFFSET</name></cpp:macro> <cpp:value>QUERY_NODE_SHOW_DNODES_STMT</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>STranslateContext</name> <block>{
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type>   <name>pParseCxt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>errCode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgBuf</name></type>          <name>msgBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>          <name>pNsLevel</name></decl>;</decl_stmt>  <comment type="line">// element is SArray*, the element of this subarray is STableNode*</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>currLevel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>levelNo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ESqlClause</name></type>       <name>currClause</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>           <name>pCurrStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCmdMsgInfo</name><modifier>*</modifier></type>     <name>pCmdMsg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>        <name>pDbs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>        <name>pTables</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>        <name>pTargetTables</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainOptions</name><modifier>*</modifier></type> <name>pExplainOpt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>             <name>createStream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>             <name>stableQuery</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>             <name>showRewrite</name></decl>;</decl_stmt>
}</block></struct></type> <name>STranslateContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SFullDatabaseName</name> <block>{
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullDbName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SFullDatabaseName</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SSysTableShowAdapter</name> <block>{
  <decl_stmt><decl><type><name>ENodeType</name></type>   <name>showType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTableName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfShowCols</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>pShowCols</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SSysTableShowAdapter</name>;</typedef>

<comment type="line">// clang-format off</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SSysTableShowAdapter</name></type> <name><name>sysTableShowAdapter</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_DNODES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_DNODES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_MNODES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_MNODES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_MODULES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_MODULES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_QNODES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_QNODES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_SNODES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_SNODES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_BNODES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_BNODES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_CLUSTER_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_CLUSTER</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_DATABASES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_DATABASES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"name"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_FUNCTIONS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_FUNCTIONS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"name"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_INDEXES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_INDEXES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_STABLES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_STABLES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"stable_name"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_STREAMS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_STREAMS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"stream_name"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_TABLES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_TABLES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"table_name"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_TAGS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_TAGS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_USERS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_USERS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_LICENCES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_LICENCES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_VGROUPS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_VGROUPS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_TOPICS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_TOPICS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"topic_name"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_CONSUMERS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_PERFS_TABLE_CONSUMERS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_CONNECTIONS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_PERFS_TABLE_CONNECTIONS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_QUERIES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_PERFS_TABLE_QUERIES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_APPS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_PERFS_TABLE_APPS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_VARIABLES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_CONFIGS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_DNODE_VARIABLES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_DNODE_VARIABLES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_TRANSACTIONS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_PERFS_TABLE_TRANS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_SUBSCRIPTIONS_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_SUBSCRIPTIONS</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{ <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_VNODES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_VNODES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
  <expr><block>{ <expr><operator>.</operator><name>showType</name> <operator>=</operator> <name>QUERY_NODE_SHOW_USER_PRIVILEGES_STMT</name></expr>,
    <expr><operator>.</operator><name>pDbName</name> <operator>=</operator> <name>TSDB_INFORMATION_SCHEMA_DB</name></expr>,
    <expr><operator>.</operator><name>pTableName</name> <operator>=</operator> <name>TSDB_INS_TABLE_USER_PRIVILEGES</name></expr>,
    <expr><operator>.</operator><name>numOfShowCols</name> <operator>=</operator> <literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>pShowCols</name> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>}</block></expr>
  }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// clang-format on</comment>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>translateSubquery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>translateQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateValue</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>afterGroupBy</name><parameter_list>(<parameter><decl><type><name>ESqlClause</name></type> <name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>clause</name> <operator>&gt;</operator> <name>SQL_CLAUSE_GROUP_BY</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>beforeHaving</name><parameter_list>(<parameter><decl><type><name>ESqlClause</name></type> <name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>clause</name> <operator>&lt;</operator> <name>SQL_CLAUSE_HAVING</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>afterHaving</name><parameter_list>(<parameter><decl><type><name>ESqlClause</name></type> <name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>clause</name> <operator>&gt;</operator> <name>SQL_CLAUSE_HAVING</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>beforeWindow</name><parameter_list>(<parameter><decl><type><name>ESqlClause</name></type> <name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>clause</name> <operator>&lt;</operator> <name>SQL_CLAUSE_WINDOW</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hasSameTableAlias</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable0</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pTable0</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addNamespace</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>currTotalLevel</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>currTotalLevel</name> <operator>&gt;</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTables</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>hasSameTableAlias</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_UNIQUE_TABLE_ALIAS</name></expr></argument>,
                                     <argument><expr><literal type="string">"Not unique table/alias: '%s'"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name>tableAlias</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <do>do <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTables</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TARRAY_MIN_SIZE</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTables</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name> <operator>==</operator> <name>currTotalLevel</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>hasSameTableAlias</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_UNIQUE_TABLE_ALIAS</name></expr></argument>,
                                         <argument><expr><literal type="string">"Not unique table/alias: '%s'"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name>tableAlias</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>currTotalLevel</name></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>currTotalLevel</name> <operator>&lt;=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name></expr>)</condition>;</do>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>collectUseDatabaseImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFullDbName</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pDbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFullDatabaseName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>fullDbName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>fullDbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pFullDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pDbs</name></expr></argument>, <argument><expr><name>pFullDbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pFullDbName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFullDatabaseName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>collectUseDatabase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pDbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>collectUseDatabaseImpl</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>pDbs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>collectUseTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableMetaImpl</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>collectUseDatabase</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseTable</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pParCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMetaFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                               <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                               <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                               <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableMeta</name><argument_list>(<argument><expr><name><name>pParCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogGetTableMeta error, code:%s, dbName:%s, tbName:%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>,
                <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableMeta</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
  <return>return <expr><call><name>getTableMetaImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableCfg</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>collectUseDatabase</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseTable</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pParCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableCfgFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                               <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                               <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                               <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogRefreshGetTableCfg</name><argument_list>(<argument><expr><name><name>pParCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogRefreshGetTableCfg error, code:%s, dbName:%s, tbName:%s"</literal></expr></argument>,
                <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>refreshGetTableMeta</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>,
                                   <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>          <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pParCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMetaFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                             <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                             <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                             <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogRefreshGetTableMeta</name><argument_list>(<argument><expr><name><name>pParCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogRefreshGetTableMeta error, code:%s, dbName:%s, tbName:%s"</literal></expr></argument>,
                <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getDBVgInfoImpl</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>           <name><name>fullDbName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>fullDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>collectUseDatabaseImpl</name><argument_list>(<argument><expr><name>fullDbName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pParCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getDbVgInfoFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><name>fullDbName</name></expr></argument>, <argument><expr><name>pVgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                               <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                               <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                               <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetDBVgList</name><argument_list>(<argument><expr><name><name>pParCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>fullDbName</name></expr></argument>, <argument><expr><name>pVgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogGetDBVgList error, code:%s, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>,
                <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fullDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getDBVgInfo</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFname</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>dbFname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>getDBVgInfoImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>pVgInfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableHashVgroupImpl</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>collectUseDatabase</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseTable</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pParCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableVgroupFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                               <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                               <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                               <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name><name>pParCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogGetTableHashVgroup error, code:%s, dbName:%s, tbName:%s"</literal></expr></argument>,
                <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableHashVgroup</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>,
                                  <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
  <return>return <expr><call><name>getTableHashVgroupImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getDBVgVersion</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbFName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVersion</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pDbId</name></decl></parameter>,
                              <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pTableNum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pStateTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>collectUseDatabaseImpl</name><argument_list>(<argument><expr><name>pDbFName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pParCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getDbVgVersionFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><name>pDbFName</name></expr></argument>, <argument><expr><name>pVersion</name></expr></argument>, <argument><expr><name>pDbId</name></expr></argument>, <argument><expr><name>pTableNum</name></expr></argument>, <argument><expr><name>pStateTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetDBVgVersion</name><argument_list>(<argument><expr><name><name>pParCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><name>pDbFName</name></expr></argument>, <argument><expr><name>pVersion</name></expr></argument>, <argument><expr><name>pDbId</name></expr></argument>, <argument><expr><name>pTableNum</name></expr></argument>, <argument><expr><name>pStateTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogGetDBVgVersion error, code:%s, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>,
                <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pDbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getDBCfg</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>          <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFname</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>dbFname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>collectUseDatabaseImpl</name><argument_list>(<argument><expr><name>dbFname</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pParCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getDbCfgFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><name>dbFname</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                               <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                               <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                               <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetDBCfg</name><argument_list>(<argument><expr><name><name>pParCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>dbFname</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogGetDBCfg error, code:%s, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>dbFname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getUdfInfo</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFuncInfo</name></type>      <name>funcInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pParCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getUdfInfoFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                             <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                             <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                             <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetUdfInfo</name><argument_list>(<argument><expr><name><name>pParCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name> <operator>=</operator> <name>FUNCTION_TYPE_UDF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name> <operator>=</operator> <ternary><condition><expr><name>TSDB_FUNC_TYPE_AGGREGATE</name> <operator>==</operator> <name><name>funcInfo</name><operator>.</operator><name>funcType</name></name></expr> ?</condition><then> <expr><name>FUNC_AGGREGATE_UDF_ID</name></expr> </then><else>: <expr><name>FUNC_SCALAR_UDF_ID</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>funcInfo</name><operator>.</operator><name>outputType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>funcInfo</name><operator>.</operator><name>outputLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>udfBufSize</name></name> <operator>=</operator> <name><name>funcInfo</name><operator>.</operator><name>bufSize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSFuncInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funcInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogGetUdfInfo error, code:%s, funcName:%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>,
                <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableIndex</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pIndexes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>collectUseDatabase</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseTable</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pParCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableIndexFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pIndexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                               <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                               <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                               <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableIndex</name><argument_list>(<argument><expr><name><name>pParCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pIndexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" getTableIndex error, code:%s, dbName:%s, tbName:%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>,
                <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getDnodeList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDnodes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pParCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getDnodeListFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><name>pDnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                             <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                             <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                             <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pParCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetDnodeList</name><argument_list>(<argument><expr><name><name>pParCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>pDnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" getDnodeList error, code:%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initTranslateContext</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParseCxt</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name> <operator>=</operator> <name>pParseCxt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>pParseCxt</name><operator>-&gt;</operator><name>pMsg</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>pParseCxt</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TARRAY_MIN_SIZE</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>levelNo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name> <operator>=</operator> <name>pMetaCache</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>resetTranslateNamespace</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TARRAY_MIN_SIZE</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyTranslateContext</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>pMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isSelectStmt</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCurrStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>NULL</name> <operator>!=</operator> <name>pCurrStmt</name> <operator>&amp;&amp;</operator> <name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pCurrStmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isSetOperator</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCurrStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>NULL</name> <operator>!=</operator> <name>pCurrStmt</name> <operator>&amp;&amp;</operator> <name>QUERY_NODE_SET_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pCurrStmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>getProjectListFromCurrStmt</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCurrStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isSelectStmt</name><argument_list>(<argument><expr><name>pCurrStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pCurrStmt</name><operator>)</operator><operator>-&gt;</operator><name>pProjectionList</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isSetOperator</name><argument_list>(<argument><expr><name>pCurrStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pCurrStmt</name><operator>)</operator><operator>-&gt;</operator><name>pProjectionList</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>getPrecisionFromCurrStmt</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCurrStmt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>defaultVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isSelectStmt</name><argument_list>(<argument><expr><name>pCurrStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pCurrStmt</name><operator>)</operator><operator>-&gt;</operator><name>precision</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isSetOperator</name><argument_list>(<argument><expr><name>pCurrStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pCurrStmt</name><operator>)</operator><operator>-&gt;</operator><name>precision</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>defaultVal</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isAliasColumn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">'\0'</literal> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name><name>tableAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isAggFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fmIsAggFunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isSelectFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fmIsSelectFunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isWindowPseudoColumnFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fmIsWindowPseudoColumnFunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isTimelineFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fmIsTimelineFunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isImplicitTsFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fmIsImplicitTsFunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isScanPseudoColumnFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fmIsScanPseudoColumnFunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isIndefiniteRowsFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fmIsIndefiniteRowsFunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isVectorFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fmIsVectorFunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isDistinctOrderBy</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>SQL_CLAUSE_ORDER_BY</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>&amp;&amp;</operator> <call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
          <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>isDistinct</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>belongTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STableNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>dbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>cmp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name>cmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>getProjectList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pProjectionList</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_SET_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pProjectionList</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isTimeLineQuery</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>isTimeLineResult</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isGlobalTimeLineQuery</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isTimeLineQuery</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name> <operator>||</operator> <name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isPrimaryKeyImpl</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pExpr</name><operator>)</operator><operator>-&gt;</operator><name>colId</name><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>FUNCTION_TYPE_SELECT_VALUE</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name> <operator>||</operator> <name>FUNCTION_TYPE_GROUP_KEY</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name> <operator>||</operator>
        <name>FUNCTION_TYPE_FIRST</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name> <operator>||</operator> <name>FUNCTION_TYPE_LAST</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>isPrimaryKeyImpl</name><argument_list>(<argument><expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>FUNCTION_TYPE_WSTART</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name> <operator>||</operator> <name>FUNCTION_TYPE_WEND</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isPrimaryKey</name><parameter_list>(<parameter><decl><type><name>STempTableNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isTimeLineQuery</name><argument_list>(<argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>pSubquery</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>isPrimaryKeyImpl</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setColumnInfoBySchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRealTableNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>pColSchema</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tagFlag</name></decl></parameter>,
                                  <parameter><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>, <argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableId</name></name> <operator>=</operator> <name><name>pTable</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name><name>pTable</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pColSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>colType</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>tagFlag</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>COLUMN_TYPE_TAG</name></expr> </then><else>: <expr><name>COLUMN_TYPE_COLUMN</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>hasIndex</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name>tagFlag</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pColSchema</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pColSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pTable</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setColumnInfoByExpr</name><parameter_list>(<parameter><decl><type><name>STempTableNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>SColumnNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pColRef</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>*</operator><name>pColRef</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>pAssociation</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pAssociation</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TARRAY_MIN_SIZE</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pAssociation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pColRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isPrimaryKey</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pExpr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>resType</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createColumnsByTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STableNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>igTags</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_REAL_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name>pMeta</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>           <name>nums</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>+</operator>
                   <operator>(</operator><ternary><condition><expr><name>igTags</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nums</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>invisibleColumn</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>enableSysInfo</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>setColumnInfoBySchema</name><argument_list>(<argument><expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>-</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>STempTableNode</name><modifier>*</modifier></type> <name>pTempTable</name> <init>= <expr><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type>      <name>pProjectList</name> <init>= <expr><call><name>getProjectList</name><argument_list>(<argument><expr><name><name>pTempTable</name><operator>-&gt;</operator><name>pSubquery</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>          <name>pNode</name></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pProjectList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SListCell</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><call><name>nodesListGetCell</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setColumnInfoByExpr</name><argument_list>(<argument><expr><name>pTempTable</name></expr></argument>, <argument><expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCell</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isInternalPrimaryKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>&amp;&amp;</operator>
         <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>ROWTS_PSEUDO_COLUMN_NAME</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>C0_PSEUDO_COLUMN_NAME</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>findAndSetColumn</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SColumnNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pColRef</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STableNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>,
                                <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pFound</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>*</operator><name>pColRef</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pFound</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_REAL_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name>pMeta</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isInternalPrimaryKey</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setColumnInfoBySchema</name><argument_list>(<argument><expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nums</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name> <operator>+</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nums</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
          <operator>!</operator><call><name>invisibleColumn</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>enableSysInfo</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setColumnInfoBySchema</name><argument_list>(<argument><expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>-</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>STempTableNode</name><modifier>*</modifier></type> <name>pTempTable</name> <init>= <expr><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type>      <name>pProjectList</name> <init>= <expr><call><name>getProjectList</name><argument_list>(<argument><expr><name><name>pTempTable</name><operator>-&gt;</operator><name>pSubquery</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>          <name>pNode</name></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pProjectList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pFound</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_AMBIGUOUS_COLUMN</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>setColumnInfoByExpr</name><argument_list>(<argument><expr><name>pTempTable</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pColRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isPrimaryKey</name><argument_list>(<argument><expr><name>pTempTable</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isInternalPrimaryKey</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setColumnInfoByExpr</name><argument_list>(<argument><expr><name>pTempTable</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pColRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateColumnWithPrefix</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SColumnNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTables</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>nums</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>foundTable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nums</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>belongTable</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pCol</name><operator>)</operator></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>foundTable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>foundCol</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>findAndSetColumn</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>foundCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>foundCol</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pCol</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundTable</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pCol</name><operator>)</operator><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateColumnWithoutPrefix</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SColumnNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTables</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>nums</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>isInternalPk</name> <init>= <expr><call><name>isInternalPrimaryKey</name><argument_list>(<argument><expr><operator>*</operator><name>pCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nums</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>foundCol</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>findAndSetColumn</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>foundCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>foundCol</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_AMBIGUOUS_COLUMN</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pCol</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>isInternalPk</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>isInternalPk</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pWindow</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_WIN_QUERY</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_INTERNAL_PK</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pCol</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateColumnUseAlias</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SColumnNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pFound</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjectionList</name> <init>= <expr><call><name>getProjectListFromCurrStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>     <name>pNode</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pProjectionList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pCol</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnRefNode</name><modifier>*</modifier></type> <name>pColRef</name> <init>= <expr><operator>(</operator><name>SColumnRefNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN_REF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pColRef</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pColRef</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pCol</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pColRef</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <expr_stmt><expr><operator>*</operator><name>pFound</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateColumn</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SColumnNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name> <operator>||</operator> <call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pCol</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// count(*)/first(*)/last(*) and so on</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pCol</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>EDealRes</name></type> <name>res</name> <init>= <expr><name>DEAL_RES_CONTINUE</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><operator>(</operator><operator>*</operator><name>pCol</name><operator>)</operator><operator>-&gt;</operator><name>tableAlias</name></name><index>[<expr><literal type="number">0</literal></expr>]</index></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>translateColumnWithPrefix</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>SQL_CLAUSE_ORDER_BY</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>translateColumnUseAlias</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>DEAL_RES_ERROR</name> <operator>!=</operator> <name>res</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>isSetOperator</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pCol</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>translateColumnWithoutPrefix</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseTimeFromValueNode</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TSDB_DATA_TYPE_BOOL</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <call><name>taosParseTime</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>,
                                           <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><name>tsDaylight</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pEnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>=</operator> <call><name>taosStr2Int64</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEnd</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>NULL</name> <operator>!=</operator> <name>pEnd</name> <operator>&amp;&amp;</operator> <literal type="char">'\0'</literal> <operator>==</operator> <operator>*</operator><name>pEnd</name><operator>)</operator></expr> ?</condition><then> <expr><name>TSDB_CODE_SUCCESS</name></expr> </then><else>: <expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseBoolFromValueNode</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>taosStr2Int64</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>taosStr2Double</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateDurationValue</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>parseNatualDuration</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>,
                          <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateNormalValue</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>targetDt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>targetDt</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>parseBoolFromValueNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name> <operator>||</operator> <operator>!</operator><call><name>IS_VALID_TINYINT</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name> <operator>||</operator> <operator>!</operator><call><name>IS_VALID_SMALLINT</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name> <operator>||</operator> <operator>!</operator><call><name>IS_VALID_INT</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name> <operator>||</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name> <operator>&gt;</operator> <name>UINT8_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name> <operator>||</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name> <operator>&gt;</operator> <name>UINT16_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name> <operator>||</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name> <operator>&gt;</operator> <name>UINT32_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name> <operator>=</operator> <call><name>taosStr2Double</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_VALID_FLOAT</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name> <operator>=</operator> <call><name>taosStr2Double</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name> <operator>==</operator> <name>HUGE_VAL</name> <operator>||</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name> <operator>==</operator> <operator>-</operator><name>HUGE_VAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator> <operator>||</operator>
                     <call><name>isinf</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <name><name>targetDt</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>targetDt</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><name><name>targetDt</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>parseTimeFromValueNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>targetDt</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosMbsToUcs4</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name><name>targetDt</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DECIMAL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BLOB</name></expr>:</case>
      <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateValueImpl</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>targetDt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>placeholderNo</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVal</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NULL</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <call><name>getPrecisionFromCurrStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>, <argument><expr><name><name>targetDt</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>EDealRes</name></type> <name>res</name> <init>= <expr><name>DEAL_RES_CONTINUE</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>isDuration</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>translateDurationValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>translateNormalValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>targetDt</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name>targetDt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>unit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict</name> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_UBIGINT</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name> <operator>&lt;=</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>calcTypeBytes</name><parameter_list>(<parameter><decl><type><name>SDataType</name></type> <name>dt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>==</operator> <name><name>dt</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>dt</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name><name>dt</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>dt</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>dt</name><operator>.</operator><name>bytes</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateValue</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataType</name></type> <name>dt</name> <init>= <expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>translateValueImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doTranslateValue</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr> </then><else>: <expr><name>TSDB_CODE_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isMultiResFunc</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_FUNCTION</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>fmIsMultiResFunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>FUNCTION_TYPE_TAGS</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcType</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pParameterList</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pParameterList</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pParam</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>dataTypeEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDataType</name><modifier>*</modifier></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataType</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>bytes</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>precision</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>precision</name></name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>scale</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>scale</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// 0 means equal, 1 means the left shall prevail, -1 means the right shall prevail</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dataTypeComp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDataType</name><modifier>*</modifier></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataType</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>bytes</name></name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name><name>l</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>bytes</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>precision</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>precision</name></name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>scale</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>scale</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateOperator</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isMultiResFunc</name><argument_list>(<argument><expr><name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isMultiResFunc</name><argument_list>(<argument><expr><name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>scalarGetOperatorResultType</name><argument_list>(<argument><expr><name>pOp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>haveVectorFunction</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isAggFunc</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isIndefiniteRowsFunc</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isWindowPseudoColumnFunc</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name>pContext</name><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_END</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>findTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTableAlias</name></decl></parameter>, <parameter><decl><type><name>STableNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTables</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>nums</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nums</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTableAlias</name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name>pTableAlias</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pTable</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr></argument>, <argument><expr><name>pTableAlias</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isCountStar</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>FUNCTION_TYPE_COUNT</name> <operator>!=</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name> <operator>||</operator> <literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPara</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pPara</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pPara</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// count(*) is rewritten as count(ts) for scannning optimization</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteCountStar</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pCount</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type>  <name>pTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>findTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><literal type="char">'\0'</literal> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>QUERY_NODE_REAL_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setColumnInfoBySchema</name><argument_list>(<argument><expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isCountTbname</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>FUNCTION_TYPE_COUNT</name> <operator>!=</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name> <operator>||</operator> <literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPara</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pPara</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>FUNCTION_TYPE_TBNAME</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pPara</name><operator>)</operator><operator>-&gt;</operator><name>funcType</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// count(tbname) is rewritten as count(ts) for scannning optimization</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteCountTbname</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pTbname</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pCount</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type>    <name>pTableAlias</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pTbname</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pTableAlias</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pTbname</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>literal</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>findTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTableAlias</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>setColumnInfoBySchema</name><argument_list>(<argument><expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NODES_DESTORY_LIST</name><argument_list>(<argument><expr><name><name>pCount</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCount</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hasInvalidFuncNesting</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pParameterList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasInvalidFunc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesWalkExprs</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>, <argument><expr><name>haveVectorFunction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasInvalidFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>hasInvalidFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getFuncInfo</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// the time precision of the function execution environment</comment>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <call><name>getPrecisionFromCurrStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>fmGetFuncInfo</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_FUNC_NOT_BUILTIN_FUNTION</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getUdfInfo</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateAggFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsAggFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>beforeHaving</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_ILLEGAL_USE_AGG_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasInvalidFuncNesting</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_AGG_FUNC_NESTING</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// The auto-generated COUNT function in the DELETE statement is legal</comment>
  <if_stmt><if>if <condition>(<expr><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>(</operator><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>hasIndefiniteRowsFunc</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>hasMultiRowsFunc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>isCountStar</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>rewriteCountStar</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isCountTbname</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>rewriteCountTbname</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateScanPseudoColumnFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsScanPseudoColumnFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name> <operator>||</operator>
        <name>QUERY_NODE_REAL_TABLE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TBNAME</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>findTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name>pTable</name> <operator>||</operator> <name>QUERY_NODE_REAL_TABLE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TBNAME</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateIndefiniteRowsFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsIndefiniteRowsFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>SQL_CLAUSE_SELECT</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasAggFuncs</name></name> <operator>||</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>hasMultiRowsFunc</name></name> <operator>||</operator>
      <operator>(</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasIndefiniteRowsFunc</name></name> <operator>&amp;&amp;</operator>
       <operator>(</operator><name>FUNC_RETURN_ROWS_INDEFINITE</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>returnRows</name></name> <operator>||</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>returnRows</name></name> <operator>!=</operator> <call><name>fmGetFuncReturnRows</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name> <operator>||</operator> <name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pGroupByList</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>,
                                   <argument><expr><literal type="string">"%s function is not supported in window query or group query"</literal></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasInvalidFuncNesting</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_AGG_FUNC_NESTING</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateMultiRowsFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsMultiRowsFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>SQL_CLAUSE_SELECT</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>||</operator>
      <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>hasIndefiniteRowsFunc</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>hasAggFuncs</name> <operator>||</operator>
      <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>hasMultiRowsFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasInvalidFuncNesting</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_AGG_FUNC_NESTING</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInterpFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsInterpFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>SQL_CLAUSE_SELECT</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasAggFuncs</name></name> <operator>||</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>hasMultiRowsFunc</name></name> <operator>||</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>hasIndefiniteRowsFunc</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name> <operator>||</operator> <name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pGroupByList</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>,
                                   <argument><expr><literal type="string">"%s function is not supported in window query or group query"</literal></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasInvalidFuncNesting</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_AGG_FUNC_NESTING</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTimelineFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsTimelineFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>,
                                   <argument><expr><literal type="string">"%s function must be used in select statements"</literal></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name> <operator>&amp;&amp;</operator> <name>QUERY_NODE_TEMP_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>isTimeLineQuery</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name>pSubquery</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>,
                                   <argument><expr><literal type="string">"%s function requires valid time series input"</literal></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hasFillClause</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCurrStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSelectStmt</name><argument_list>(<argument><expr><name>pCurrStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pCurrStmt</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name> <operator>&amp;&amp;</operator> <name>QUERY_NODE_INTERVAL_WINDOW</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
         <name>NULL</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SIntervalWindowNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name><operator>)</operator><operator>-&gt;</operator><name>pFill</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateForbidFillFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsForbidFillFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasFillClause</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_FILL_NOT_ALLOWED_FUNC</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateWindowPseudoColumnFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsWindowPseudoColumnFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pWindow</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_WINDOW_PC</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>beforeWindow</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_WINDOW_PC</name></expr></argument>, <argument><expr><literal type="string">"There mustn't be %s"</literal></expr></argument>,
                                   <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateForbidStreamFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsForbidStreamFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>createStream</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_STREAM_NOT_ALLOWED_FUNC</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateRepeatScanFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsRepeatScanFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_ONLY_SUPPORT_SINGLE_TABLE</name></expr></argument>,
                                   <argument><expr><literal type="string">"%s is only supported in single table query"</literal></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>       <name>pTable</name> <init>= <expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// select percentile() without from clause is also valid</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>!=</operator> <name>pTable</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>QUERY_NODE_REAL_TABLE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>)</argument_list></call> <operator>||</operator>
                          <operator>(</operator><name>TSDB_CHILD_TABLE</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>&amp;&amp;</operator>
                           <name>TSDB_NORMAL_TABLE</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>
      <name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_ONLY_SUPPORT_SINGLE_TABLE</name></expr></argument>,
                                   <argument><expr><literal type="string">"%s is only supported in single table query"</literal></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isStar</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">'\0'</literal> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name><name>tableAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>
         <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isTableStar</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">'\0'</literal> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name><name>tableAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>
         <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateMultiResFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsMultiResFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>SQL_CLAUSE_SELECT</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPara</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isStar</name><argument_list>(<argument><expr><name>pPara</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isTableStar</name><argument_list>(<argument><expr><name>pPara</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>,
                                     <argument><expr><literal type="string">"%s(*) is only supported in SELECTed list"</literal></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsKeepColumnName</name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>userAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getMultiResFuncNum</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pParameterList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><call><name>isStar</name><argument_list>(<argument><expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>calcSelectFuncNum</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>currSelectFuncNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsCumulativeFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>currSelectFuncNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>currSelectFuncNum</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>currSelectFuncNum</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>fmIsMultiResFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>fmIsLastRowFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>
                                  ?</condition><then> <expr><call><name>getMultiResFuncNum</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>
                                  </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setFuncClassification</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCurrStmt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pCurrStmt</name> <operator>&amp;&amp;</operator> <name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pCurrStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pCurrStmt</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasAggFuncs</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasAggFuncs</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><call><name>fmIsAggFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasRepeatScanFuncs</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasRepeatScanFuncs</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><call><name>fmIsRepeatScanFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fmIsIndefiniteRowsFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasIndefiniteRowsFunc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>returnRows</name></name> <operator>=</operator> <call><name>fmGetFuncReturnRows</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasMultiRowsFunc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasMultiRowsFunc</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><call><name>fmIsMultiRowsFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fmIsSelectFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasSelectFunc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>selectFuncNum</name></name> <operator>=</operator> <call><name>calcSelectFuncNum</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>selectFuncNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fmIsVectorFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasOtherVectorFunc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasUniqueFunc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasUniqueFunc</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><operator>(</operator><name>FUNCTION_TYPE_UNIQUE</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasTailFunc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasTailFunc</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><operator>(</operator><name>FUNCTION_TYPE_TAIL</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasInterpFunc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasInterpFunc</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><operator>(</operator><name>FUNCTION_TYPE_INTERP</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasLastRowFunc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasLastRowFunc</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><operator>(</operator><name>FUNCTION_TYPE_LAST_ROW</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasLastFunc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasLastFunc</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><operator>(</operator><name>FUNCTION_TYPE_LAST</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasTimeLineFunc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasTimeLineFunc</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><call><name>fmIsTimelineFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasUdaf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasUdaf</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fmIsAggFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>onlyHasKeepOrderFunc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSelect</name><operator>-&gt;</operator><name>onlyHasKeepOrderFunc</name></name></expr> ?</condition><then> <expr><call><name>fmIsKeepOrderFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteFuncToValue</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pLiteral</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pLiteral</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name> <operator>=</operator> <name>pLiteral</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pLiteral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>DEAL_RES_ERROR</name> <operator>!=</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pVal</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteDatabaseFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pCurrDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pCurrDb</name> <operator>=</operator> <call><name>taosMemoryStrDup</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCurrDb</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>rewriteFuncToValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pCurrDb</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteClentVersionFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pVer</name> <init>= <expr><call><name>taosMemoryStrDup</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVer</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>rewriteFuncToValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVer</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteServerVersionFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pVer</name> <init>= <expr><call><name>taosMemoryStrDup</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>svrVer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVer</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>rewriteFuncToValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVer</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteServerStatusFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>nodeOffline</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_RPC_NETWORK_UNAVAIL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStatus</name> <init>= <expr><call><name>taosMemoryStrDup</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>rewriteFuncToValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStatus</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteUserFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>userConn</name><index>[<expr><name>TSDB_USER_LEN</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>TSDB_FQDN_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>  <comment type="line">// format 'user@host'</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>userConn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>userConn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s@"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosGetFqdn</name><argument_list>(<argument><expr><name>userConn</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pUserConn</name> <init>= <expr><call><name>taosMemoryStrDup</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>userConn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pUserConn</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>rewriteFuncToValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pUserConn</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteSystemInfoFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FUNCTION_TYPE_DATABASE</name></expr>:</case>
      <return>return <expr><call><name>rewriteDatabaseFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>FUNCTION_TYPE_CLIENT_VERSION</name></expr>:</case>
      <return>return <expr><call><name>rewriteClentVersionFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>FUNCTION_TYPE_SERVER_VERSION</name></expr>:</case>
      <return>return <expr><call><name>rewriteServerVersionFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>FUNCTION_TYPE_SERVER_STATUS</name></expr>:</case>
      <return>return <expr><call><name>rewriteServerStatusFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>FUNCTION_TYPE_CURRENT_USER</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_USER</name></expr>:</case>
      <return>return <expr><call><name>rewriteUserFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_PAR_INTERNAL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateNoramlFunction</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateAggFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateScanPseudoColumnFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateIndefiniteRowsFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateForbidFillFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateWindowPseudoColumnFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateForbidStreamFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateRepeatScanFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateMultiResFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateMultiRowsFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateInterpFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateTimelineFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setFuncClassification</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteQueryTimeFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>INT64_MIN</name> <operator>==</operator> <name>val</name> <operator>||</operator> <name>INT64_MAX</name> <operator>==</operator> <name>val</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>rewriteFuncToValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStr</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pStr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>rewriteFuncToValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteQstartFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>rewriteQueryTimeFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteQendFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>rewriteQueryTimeFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteQdurationFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>range</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>timeRange</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>INT64_MIN</name> <operator>==</operator> <name><name>range</name><operator>.</operator><name>skey</name></name> <operator>||</operator> <name>INT64_MAX</name> <operator>==</operator> <name><name>range</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>rewriteQueryTimeFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>INT64_MIN</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>rewriteQueryTimeFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>ekey</name></name> <operator>-</operator> <name><name>range</name><operator>.</operator><name>skey</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteClientPseudoColumnFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name> <operator>||</operator> <name>QUERY_NODE_SELECT_STMT</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>&lt;=</operator> <name>SQL_CLAUSE_WHERE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr></argument>, <argument><expr><literal type="string">"Illegal pseudo column"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FUNCTION_TYPE_QSTART</name></expr>:</case>
      <return>return <expr><call><name>rewriteQstartFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>FUNCTION_TYPE_QEND</name></expr>:</case>
      <return>return <expr><call><name>rewriteQendFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>FUNCTION_TYPE_QDURATION</name></expr>:</case>
      <return>return <expr><call><name>rewriteQdurationFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_PAR_INTERNAL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateFunctionImpl</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsSystemInfoFunc</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pFunc</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>rewriteSystemInfoFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsClientPseudoColumnFunc</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pFunc</name><operator>)</operator><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>rewriteClientPseudoColumnFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>translateNoramlFunction</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>*</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateFunction</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pParam</argument>, <argument>(*pFunc)-&gt;pParameterList</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isMultiResFunc</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pParam</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>getFuncInfo</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>*</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>translateFunctionImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr> ?</condition><then> <expr><name>DEAL_RES_CONTINUE</name></expr> </then><else>: <expr><name>DEAL_RES_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateExprSubquery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <call><name>translateSubquery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DEAL_RES_CONTINUE</name></expr> </then><else>: <expr><name>DEAL_RES_ERROR</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateLogicCond</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BOOL</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createCastFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCast</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><literal type="string">"cast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name>dt</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>getFuncInfo</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesClearList</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pExpr</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pCast</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateWhenThen</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SWhenThenNode</name><modifier>*</modifier></type> <name>pWhenThen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name><name>pWhenThen</name><operator>-&gt;</operator><name>pThen</name></name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isCondition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>nodesIsComparisonOp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>QUERY_NODE_LOGIC_CONDITION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteIsTrue</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pIsTrue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOp</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_OPERATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>opType</name></name> <operator>=</operator> <name>OP_TYPE_IS_TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>=</operator> <name>pSrc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BOOL</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pIsTrue</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOp</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>translateCaseWhen</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCaseWhenNode</name><modifier>*</modifier></type> <name>pCaseWhen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>   <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>   <name>allNullThen</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pCaseWhen-&gt;pWhenThenList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SWhenThenNode</name><modifier>*</modifier></type> <name>pWhenThen</name> <init>= <expr><operator>(</operator><name>SWhenThenNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCaseWhen</name><operator>-&gt;</operator><name>pCase</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isCondition</name><argument_list>(<argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pIsTrue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>rewriteIsTrue</name><argument_list>(<argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIsTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pWhen</name></name> <operator>=</operator> <name>pIsTrue</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pThenExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NULL</name> <operator>==</operator> <name><name>pThenExpr</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>allNullThen</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>first</name> <operator>||</operator> <call><name>dataTypeComp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pThenExpr</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pThenExpr</name><operator>-&gt;</operator><name>resType</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>allNullThen</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCaseWhen</name><operator>-&gt;</operator><name>pElse</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name><name>pCaseWhen</name><operator>-&gt;</operator><name>pElse</name></name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_NULL</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pCaseWhen-&gt;pWhenThenList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SWhenThenNode</name><modifier>*</modifier></type> <name>pWhenThen</name> <init>= <expr><operator>(</operator><name>SWhenThenNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dataTypeEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCastFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>createCastFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pThen</name></name></expr></argument>, <argument><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCastFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pThen</name></name> <operator>=</operator> <name>pCastFunc</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCaseWhen</name><operator>-&gt;</operator><name>pElse</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>dataTypeEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name><name>pCaseWhen</name><operator>-&gt;</operator><name>pElse</name></name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCastFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>createCastFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>pElse</name></name></expr></argument>, <argument><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCastFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>pElse</name></name> <operator>=</operator> <name>pCastFunc</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name><name>pCaseWhen</name><operator>-&gt;</operator><name>pElse</name></name><operator>)</operator><operator>-&gt;</operator><name>resType</name> <operator>=</operator> <name><name>pCaseWhen</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>doTranslateExpr</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name> <init>= <expr><operator>(</operator><name>STranslateContext</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case>
      <return>return <expr><call><name>translateColumn</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case>
      <return>return <expr><call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
      <return>return <expr><call><name>translateOperator</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case>
      <return>return <expr><call><name>translateFunction</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case>
      <return>return <expr><call><name>translateLogicCond</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_TEMP_TABLE</name></expr>:</case>
      <return>return <expr><call><name>translateExprSubquery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pSubquery</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_WHEN_THEN</name></expr>:</case>
      <return>return <expr><call><name>translateWhenThen</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SWhenThenNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CASE_WHEN</name></expr>:</case>
      <return>return <expr><call><name>translateCaseWhen</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateExpr</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>nodesRewriteExprPostOrder</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>doTranslateExpr</name></expr></argument>, <argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateExprList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>nodesRewriteExprsPostOrder</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>doTranslateExpr</name></expr></argument>, <argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>getGroupByList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isDistinctOrderBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pProjectionList</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pGroupByList</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>getGroupByNode</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_GROUPING_SET</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SGroupingSetNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pParameterList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getGroupByErrorCode</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isDistinctOrderBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_PAR_NOT_SELECTED_EXPRESSION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pGroupByList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_PAR_GROUPBY_LACK_EXPRESSION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_PAR_NO_VALID_FUNC_IN_WIN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>rewriteColToSelectValFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><literal type="string">"_select_value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>userAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>getFuncInfo</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>hasSelectValFunc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><ternary><condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr> ?</condition><then> <expr><name>DEAL_RES_IGNORE_CHILD</name></expr> </then><else>: <expr><name>DEAL_RES_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>rewriteExprToGroupKeyFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><literal type="string">"_group_key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>userAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>fmGetFuncInfo</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><ternary><condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr> ?</condition><then> <expr><name>DEAL_RES_IGNORE_CHILD</name></expr> </then><else>: <expr><name>DEAL_RES_ERROR</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>doCheckExprForGroupBy</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name> <init>= <expr><operator>(</operator><name>STranslateContext</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type>       <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nodesIsExprNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isAliasColumn</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isVectorFunc</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isDistinctOrderBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pGroupNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pGroupNode</argument>, <argument>getGroupByList(pCxt)</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>nodesEqualNode</name><argument_list>(<argument><expr><call><name>getGroupByNode</name><argument_list>(<argument><expr><name>pGroupNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPartKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pPartKey</argument>, <argument>pSelect-&gt;pPartitionByList</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>nodesEqualNode</name><argument_list>(<argument><expr><name>pPartKey</name></expr></argument>, <argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>rewriteExprToGroupKeyFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name> <operator>&amp;&amp;</operator> <name>QUERY_NODE_STATE_WINDOW</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>nodesEqualNode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SStateWindowNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name><operator>)</operator><operator>-&gt;</operator><name>pExpr</name></expr></argument>, <argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasStateKey</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><call><name>rewriteExprToGroupKeyFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isScanPseudoColumnFunc</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSelect</name><operator>-&gt;</operator><name>selectFuncNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>hasOtherVectorFunc</name></name> <operator>||</operator> <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasSelectFunc</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>getGroupByErrorCode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>rewriteColToSelectValFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isVectorFunc</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isDistinctOrderBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>getGroupByErrorCode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkExprForGroupBy</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>nodesRewriteExpr</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>doCheckExprForGroupBy</name></expr></argument>, <argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkExprListForGroupBy</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>getGroupByList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesRewriteExprs</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>doCheckExprForGroupBy</name></expr></argument>, <argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>rewriteColsToSelectValFuncImpl</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isAggFunc</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isIndefiniteRowsFunc</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isScanPseudoColumnFunc</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>rewriteColToSelectValFunc</name><argument_list>(<argument><expr><operator>(</operator><name>STranslateContext</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteColsToSelectValFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>nodesRewriteExprs</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name>rewriteColsToSelectValFuncImpl</name></expr></argument>, <argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>isDistinct</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesRewriteExprs</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>, <argument><expr><name>rewriteColsToSelectValFuncImpl</name></expr></argument>, <argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>CheckAggColCoexistCxt</name> <block>{
  <decl_stmt><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pTranslateCxt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>existCol</name></decl>;</decl_stmt>
}</block></struct></type> <name>CheckAggColCoexistCxt</name>;</typedef>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>doCheckAggColCoexist</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CheckAggColCoexistCxt</name><modifier>*</modifier></type> <name>pCxt</name> <init>= <expr><operator>(</operator><name>CheckAggColCoexistCxt</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isVectorFunc</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPartKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pPartKey</argument>, <argument>((SSelectStmt*)pCxt-&gt;pTranslateCxt-&gt;pCurrStmt)-&gt;pPartitionByList</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>nodesEqualNode</name><argument_list>(<argument><expr><name>pPartKey</name></expr></argument>, <argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>rewriteExprToGroupKeyFunc</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTranslateCxt</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <if_stmt><if>if <condition>(<expr><call><name>isScanPseudoColumnFunc</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>existCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkAggColCoexist</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pGroupByList</name></name> <operator>||</operator> <name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name> <operator>||</operator>
      <operator>(</operator><operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasAggFuncs</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasIndefiniteRowsFunc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasInterpFunc</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>onlyHasKeepOrderFunc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>isTimeLineResult</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>CheckAggColCoexistCxt</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTranslateCxt</name> <operator>=</operator> <name>pCxt</name></expr>, <expr><operator>.</operator><name>existCol</name> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesRewriteExprs</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name>doCheckAggColCoexist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>isDistinct</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesRewriteExprs</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>, <argument><expr><name>doCheckAggColCoexist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>selectFuncNum</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasOtherVectorFunc</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>rewriteColsToSelectValFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cxt</name><operator>.</operator><name>existCol</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_SINGLE_GROUP</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkWindowFuncCoexist</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasAggFuncs</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasStateKey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NO_VALID_FUNC_IN_WIN</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>toVgroupsInfo</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVgs</name></decl></parameter>, <parameter><decl><type><name>SVgroupsInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgsInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>vgroupNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVgsInfo</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupsInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vgroupNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pVgsInfo</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pVgsInfo</name><operator>)</operator><operator>-&gt;</operator><name>numOfVgroups</name></name> <operator>=</operator> <name>vgroupNum</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vgroupNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>vg</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pVgsInfo</name><operator>)</operator><operator>-&gt;</operator><name>vgroups</name></name><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>*</operator><name>vg</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addMnodeToVgroupList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgroupList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pVgroupList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pVgroupList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TARRAY_MIN_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pVgroupList</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vg</name> <init>= <expr><block>{<expr><operator>.</operator><name>vgId</name> <operator>=</operator> <name>MNODE_HANDLE</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vg</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEpSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pVgroupList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dnodeToVgroupsInfo</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDnodes</name></decl></parameter>, <parameter><decl><type><name>SVgroupsInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgsInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ndnode</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDnodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVgsInfo</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupsInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ndnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pVgsInfo</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pVgsInfo</name><operator>)</operator><operator>-&gt;</operator><name>numOfVgroups</name></name> <operator>=</operator> <name>ndnode</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ndnode</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pVgsInfo</name><operator>)</operator><operator>-&gt;</operator><name>vgroups</name></name><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>epSet</name><operator>)</operator></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDnodes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEpSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sysTableFromVnode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TAGS</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sysTableFromDnode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_DNODE_VARIABLES</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getVnodeSysTableVgroupListImpl</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTargetName</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>,
                                              <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgroupList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pTargetName</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>getDBVgInfoImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pVgroupList</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pTargetName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pTargetName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTargetName</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_DB_NAME_T</name> <operator>==</operator> <name><name>pTargetName</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getDBVgInfoImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTargetName</name></expr></argument>, <argument><expr><name>pVgroupList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>TSDB_CODE_MND_DB_NOT_EXIST</name> <operator>==</operator> <name>code</name> <operator>||</operator> <name>TSDB_CODE_MND_DB_IN_CREATING</name> <operator>==</operator> <name>code</name> <operator>||</operator>
                               <name>TSDB_CODE_MND_DB_IN_DROPPING</name> <operator>==</operator> <name>code</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// system table query should not report errors</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>getTableHashVgroupImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTargetName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pVgroupList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pVgroupList</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pVgroupList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TSDB_CODE_MND_DB_NOT_EXIST</name> <operator>==</operator> <name>code</name> <operator>||</operator> <name>TSDB_CODE_MND_DB_IN_CREATING</name> <operator>==</operator> <name>code</name> <operator>||</operator>
             <name>TSDB_CODE_MND_DB_IN_DROPPING</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// system table query should not report errors</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getVnodeSysTableVgroupList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgs</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pHasUserDbCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>        <name>targetName</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>getVnodeSysTableTargetName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>targetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getVnodeSysTableVgroupListImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>targetName</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pVgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pHasUserDbCond</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <name><name>targetName</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><operator>*</operator><name>pVgs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setVnodeSysTableVgroupList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>hasUserDbCond</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVgs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getVnodeSysTableVgroupList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasUserDbCond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TAGS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>isEmptyResult</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasUserDbCond</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addMnodeToVgroupList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>toVgroupsInfo</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRealTable</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setDnodeSysTableVgroupList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDnodes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getDnodeList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDnodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dnodeToVgroupsInfo</name><argument_list>(<argument><expr><name>pDnodes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRealTable</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pDnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setSysTableVgroupList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>sysTableFromVnode</name><argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>setVnodeSysTableVgroupList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sysTableFromDnode</name><argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>setDnodeSysTableVgroupList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setSuperTableVgroupList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>vgroupList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getDBVgInfoImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgroupList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>toVgroupsInfo</name><argument_list>(<argument><expr><name>vgroupList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRealTable</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>vgroupList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setNormalTableVgroupList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>pVgroupList</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupsInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pRealTable</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>numOfVgroups</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>getTableHashVgroupImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setTableVgroupList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>topicQuery</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>pRealTable</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>setSuperTableVgroupList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_SYSTEM_TABLE</name> <operator>==</operator> <name><name>pRealTable</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>setSysTableVgroupList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>setNormalTableVgroupList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>getStmtPrecision</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>precision</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_SET_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>precision</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>stmtIsSingleTable</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name>singleTable</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>calcPrecision</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>lp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>rp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><ternary><condition><expr><name>lp</name> <operator>&gt;</operator> <name>rp</name></expr> ?</condition><then> <expr><name>rp</name></expr> </then><else>: <expr><name>lp</name></expr></else></ternary><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>calcJoinTablePrecision</name><parameter_list>(<parameter><decl><type><name>SJoinTableNode</name><modifier>*</modifier></type> <name>pJoinTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>calcPrecision</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name><name>pJoinTable</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>-&gt;</operator><name>precision</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name><name>pJoinTable</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>-&gt;</operator><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>joinTableIsSingleTable</name><parameter_list>(<parameter><decl><type><name>SJoinTableNode</name><modifier>*</modifier></type> <name>pJoinTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name><name>pJoinTable</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>-&gt;</operator><name>singleTable</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name><name>pJoinTable</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>-&gt;</operator><name>singleTable</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isSingleTable</name><parameter_list>(<parameter><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>tableType</name> <init>= <expr><name><name>pRealTable</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_SYSTEM_TABLE</name> <operator>==</operator> <name>tableType</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
           <literal type="number">0</literal> <operator>!=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TAGS</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>TSDB_CHILD_TABLE</name> <operator>==</operator> <name>tableType</name> <operator>||</operator> <name>TSDB_NORMAL_TABLE</name> <operator>==</operator> <name>tableType</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setTableIndex</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>createStream</name></name> <operator>||</operator> <name>QUERY_SMA_OPTIMIZE_DISABLE</name> <operator>==</operator> <name>tsQuerySmaOptimize</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pWindow</name> <operator>&amp;&amp;</operator>
      <name>QUERY_NODE_INTERVAL_WINDOW</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pWindow</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>getTableIndex</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRealTable</name><operator>-&gt;</operator><name>pSmaIndexes</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setTableCacheLastMode</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasLastRowFunc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasLastFunc</name></name><operator>)</operator> <operator>||</operator> <name>QUERY_NODE_REAL_TABLE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name>TSDB_SYSTEM_TABLE</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbCfgInfo</name></type>      <name>dbCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>getDBCfg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTable</name><operator>-&gt;</operator><name>cacheLastMode</name></name> <operator>=</operator> <name><name>dbCfg</name><operator>.</operator><name>cacheLast</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkJoinTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SJoinTableNode</name><modifier>*</modifier></type> <name>pJoinTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>QUERY_NODE_TEMP_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pJoinTable</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
       <operator>!</operator><call><name>isTimeLineQuery</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name><name>pJoinTable</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>-&gt;</operator><name>pSubquery</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>QUERY_NODE_TEMP_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pJoinTable</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
       <operator>!</operator><call><name>isTimeLineQuery</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name><name>pJoinTable</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>-&gt;</operator><name>pSubquery</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NOT_SUPPORT_JOIN</name></expr></argument>,
                                   <argument><expr><literal type="string">"Join requires valid time series input"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_REAL_TABLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pRealTable</name> <init>= <expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>ratio</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pExplainOpt</name></name></expr> ?</condition><then> <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pExplainOpt</name><operator>-&gt;</operator><name>ratio</name></name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// The SRealTableNode created through ROLLUP already has STableMeta.</comment>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pRealTable</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMetaImpl</name><argument_list>(
            <argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRealTable</name><operator>-&gt;</operator><name>pMeta</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_GET_META_ERROR</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setTableVgroupList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setTableIndex</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pRealTable</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>singleTable</name></name> <operator>=</operator> <call><name>isSingleTable</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>pRealTable</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>stableQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>TSDB_SYSTEM_TABLE</name> <operator>==</operator> <name><name>pRealTable</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>&amp;&amp;</operator> <call><name>isSelectStmt</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>isTimeLineResult</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addNamespace</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_TEMP_TABLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STempTableNode</name><modifier>*</modifier></type> <name>pTempTable</name> <init>= <expr><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateSubquery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pTempTable</name><operator>-&gt;</operator><name>pSubquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTempTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <call><name>getStmtPrecision</name><argument_list>(<argument><expr><name><name>pTempTable</name><operator>-&gt;</operator><name>pSubquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTempTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>singleTable</name></name> <operator>=</operator> <call><name>stmtIsSingleTable</name><argument_list>(<argument><expr><name><name>pTempTable</name><operator>-&gt;</operator><name>pSubquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addNamespace</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTempTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_JOIN_TABLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SJoinTableNode</name><modifier>*</modifier></type> <name>pJoinTable</name> <init>= <expr><operator>(</operator><name>SJoinTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pJoinTable</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pJoinTable</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkJoinTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pJoinTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pJoinTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <call><name>calcJoinTablePrecision</name><argument_list>(<argument><expr><name>pJoinTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pJoinTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>singleTable</name></name> <operator>=</operator> <call><name>joinTableIsSingleTable</name><argument_list>(<argument><expr><name>pJoinTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJoinTable</name><operator>-&gt;</operator><name>pOnCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createAllColumns</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>igTags</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pCols</name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pCols</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTables</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pNsLevel</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>nums</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nums</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>createColumnsByTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><name>igTags</name></expr></argument>, <argument><expr><operator>*</operator><name>pCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createMultiResFunc</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pSrcFunc</name></decl></parameter>, <parameter><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>||</operator>
      <name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>resType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name> <operator>=</operator> <name><name>pSrcFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name> <operator>=</operator> <name><name>pSrcFunc</name><operator>-&gt;</operator><name>funcType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name> <operator>+</operator> <name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>TSDB_COL_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s(%s.%s)"</literal></expr></argument>, <argument><expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tsKeepColumnName</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s(%s)"</literal></expr></argument>, <argument><expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s(%s)"</literal></expr></argument>, <argument><expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createTableAllCols</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>igTags</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>findTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <operator>*</operator><name>pOutput</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pOutput</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createColumnsByTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><name>igTags</name></expr></argument>, <argument><expr><operator>*</operator><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createMultiResFuncsParas</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pSrcParas</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pExprs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>     <name>pPara</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pPara</argument>, <argument>pSrcParas</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isStar</name><argument_list>(<argument><expr><name>pPara</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createAllColumns</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isTableStar</name><argument_list>(<argument><expr><name>pPara</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createTableAllCols</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pPara</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pExprs</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pPara</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pExprs</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createMultiResFuncs</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pSrcFunc</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pExprs</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pFuncs</name> <init>= <expr><call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFuncs</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pExpr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pExpr</argument>, <argument>pExprs</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>, <argument><expr><call><name>createMultiResFunc</name><argument_list>(<argument><expr><name>pSrcFunc</name></expr></argument>, <argument><expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pFuncs</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createMultiResFuncsFromStar</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pSrcFunc</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pExprs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>createMultiResFuncsParas</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pExprs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createMultiResFuncs</name><argument_list>(<argument><expr><name>pSrcFunc</name></expr></argument>, <argument><expr><name>pExprs</name></expr></argument>, <argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createTags</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_REAL_TABLE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TAGS_PC</name></expr></argument>,
                                   <argument><expr><literal type="string">"The _TAGS pseudo column can only be used for subtable and supertable queries"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRealTableNode</name><modifier>*</modifier></type>   <name>pTable</name> <init>= <expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><name><name>pTable</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>!=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>&amp;&amp;</operator> <name>TSDB_CHILD_TABLE</name> <operator>!=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TAGS_PC</name></expr></argument>,
                                <argument><expr><literal type="string">"The _TAGS pseudo column can only be used for subtable and supertable queries"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagsSchema</name> <init>= <expr><call><name>getTableTagSchema</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setColumnInfoBySchema</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>, <argument><expr><name>pTagsSchema</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>NODES_DESTORY_LIST</name><argument_list>(<argument><expr><operator>*</operator><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateStar</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>WHERE_EACH</name><argument_list>(<argument>pNode</argument>, <argument>pSelect-&gt;pProjectionList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isStar</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCols</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createAllColumns</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>INSERT_LIST</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name>pCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ERASE_NODE</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isMultiResFunc</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pNodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>FUNCTION_TYPE_TAGS</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcType</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createTags</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createMultiResFuncsFromStar</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>INSERT_LIST</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ERASE_NODE</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isTableStar</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCols</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createTableAllCols</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>INSERT_LIST</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name>pCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ERASE_NODE</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>WHERE_NEXT</name></expr>;</expr_stmt>
  </block_content>}</block>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getPositionValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <return>return <expr><operator>(</operator><ternary><condition><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <return>return <expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <return>return <expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <return>return <expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateOrderByPosition</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjectionList</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pOrderByList</name></decl></parameter>,
                                        <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pOther</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pOther</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>WHERE_EACH</name><argument_list>(<argument>pNode</argument>, <argument>pOrderByList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><call><name>getPositionValue</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ERASE_NODE</name><argument_list>(<argument><expr><name>pOrderByList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>pos</name> <operator>||</operator> <name>pos</name> <operator>&gt;</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pProjectionList</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_NUMBER_OF_SELECT</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SColumnRefNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnRefNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN_REF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pProjectionList</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pExpr</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pOther</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>WHERE_NEXT</name></expr>;</expr_stmt>
  </block_content>}</block>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateOrderBy</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>other</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateOrderByPosition</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>other</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_ORDER_BY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExprList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkExprListForGroupBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>needFillImpl</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isAggFunc</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>FUNCTION_TYPE_GROUP_KEY</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>funcType</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name>pContext</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_END</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>needFill</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasFillFunc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesWalkExpr</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>needFillImpl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasFillFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>hasFillFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>convertFillValue</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pValues</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SListCell</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><call><name>nodesListGetCell</name><argument_list>(<argument><expr><name>pValues</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dataTypeEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name><name>pCell</name><operator>-&gt;</operator><name>pNode</name></name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pCaseFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createCastFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><name>dt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCaseFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scalarCalculateConstants</name><argument_list>(<argument><expr><name>pCaseFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCell</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkFillValues</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFillNode</name><modifier>*</modifier></type> <name>pFill</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjectionList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>FILL_MODE_VALUE</name> <operator>!=</operator> <name><name>pFill</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>        <name>fillNo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>pFillValues</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name><name>pFill</name><operator>-&gt;</operator><name>pValues</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>         <name>pProject</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pProject</argument>, <argument>pProjectionList</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>needFill</name><argument_list>(<argument><expr><name>pProject</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>fillNo</name> <operator>&gt;=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFillValues</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"Filled values number mismatch"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator>
          <call><name>convertFillValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pProject</name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></argument>, <argument><expr><name><name>pFillValues</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><name>fillNo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"Filled data type mismatch"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>++</operator><name>fillNo</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <if_stmt><if>if <condition>(<expr><name>fillNo</name> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFillValues</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"Filled values number mismatch"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateFillValues</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name> <operator>||</operator> <name>QUERY_NODE_INTERVAL_WINDOW</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name>NULL</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SIntervalWindowNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name><operator>)</operator><operator>-&gt;</operator><name>pFill</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>checkFillValues</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SFillNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>SIntervalWindowNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name><operator>)</operator><operator>-&gt;</operator><name>pFill</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteProjectAlias</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjectionList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>no</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pProject</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pProject</argument>, <argument>pProjectionList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pProject</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>, <argument><expr><literal type="string">"#expr_%d"</literal></expr></argument>, <argument><expr><name>no</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkProjectAlias</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjectionList</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUserAliasSet</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pProjectionList</name></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>    <name>pProject</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pProject</argument>, <argument>pProjectionList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pProject</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>pUserAliasSet</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pUserAliasSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_AMBIGUOUS_COLUMN</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pUserAliasSet</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pExpr</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOutput</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pUserAliasSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pUserAliasSet</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateProjectionList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSelect</name><operator>-&gt;</operator><name>isSubquery</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>checkProjectAlias</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>rewriteProjectAlias</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSelectList</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_SELECT</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateExprList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateStar</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateProjectionList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkExprListForGroupBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateFillValues</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateHaving</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pGroupByList</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pHaving</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_GROUPBY_LACK_EXPRESSION</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_HAVING</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pHaving</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkExprForGroupBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pHaving</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateGroupBy</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pGroupByList</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_GROUPBY_WINDOW_COEXIST</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_GROUP_BY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>isTimeLineResult</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><call><name>translateExprList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pGroupByList</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTimeRange</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPrimaryKeyCond</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pTimeRange</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pIsStrict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pNew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>scalarCalculateConstants</name><argument_list>(<argument><expr><operator>*</operator><name>pPrimaryKeyCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPrimaryKeyCond</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterGetTimeRange</name><argument_list>(<argument><expr><operator>*</operator><name>pPrimaryKeyCond</name></expr></argument>, <argument><expr><name>pTimeRange</name></expr></argument>, <argument><expr><name>pIsStrict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getQueryTimeRange</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pWhere</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pTimeRange</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pWhere</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pTimeRange</name> <operator>=</operator> <name>TSWINDOW_INITIALIZER</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCond</name> <init>= <expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pWhere</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCond</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPrimaryKeyCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>filterPartitionCond</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrimaryKeyCond</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pPrimaryKeyCond</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>isStrict</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTimeRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pPrimaryKeyCond</name></expr></argument>, <argument><expr><name>pTimeRange</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isStrict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pTimeRange</name> <operator>=</operator> <name>TSWINDOW_INITIALIZER</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pPrimaryKeyCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkFill</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SFillNode</name><modifier>*</modifier></type> <name>pFill</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isInterpFill</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>FILL_MODE_NONE</name> <operator>==</operator> <name><name>pFill</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>isInterpFill</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"Unsupported fill type"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>createStream</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>TSWINDOW_IS_EQUAL</name><argument_list>(<argument><expr><name><name>pFill</name><operator>-&gt;</operator><name>timeRange</name></name></expr></argument>, <argument><expr><name>TSWINDOW_INITIALIZER</name></expr></argument>)</argument_list></call> <operator>||</operator>
                              <call><name>TSWINDOW_IS_EQUAL</name><argument_list>(<argument><expr><name><name>pFill</name><operator>-&gt;</operator><name>timeRange</name></name></expr></argument>, <argument><expr><name>TSWINDOW_DESC_INITIALIZER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_FILL_TIME_RANGE</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// interp FILL clause</comment>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pInterval</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>timeRange</name> <init>= <expr><call><name>TABS</name><argument_list>(<argument><expr><name><name>pFill</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name> <operator>-</operator> <name><name>pFill</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>intervalRange</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>TIME_IS_VAR_DURATION</name><argument_list>(<argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>unit</name></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">30LL</literal> <operator>*</operator> <name>MILLISECOND_PER_DAY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>unit</name></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">365LL</literal> <operator>*</operator> <name>MILLISECOND_PER_DAY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>intervalRange</name> <operator>=</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>*</operator> <name>f</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>intervalRange</name> <operator>=</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>timeRange</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>timeRange</name> <operator>/</operator> <name>intervalRange</name><operator>)</operator> <operator>&gt;=</operator> <name>MAX_INTERVAL_TIME_WINDOW</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_FILL_TIME_RANGE</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateFill</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>, <parameter><decl><type><name>SIntervalWindowNode</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>pFill</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SFillNode</name><operator>*</operator><operator>)</operator><name><name>pInterval</name><operator>-&gt;</operator><name>pFill</name></name><operator>)</operator><operator>-&gt;</operator><name>timeRange</name> <operator>=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>timeRange</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>checkFill</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SFillNode</name><operator>*</operator><operator>)</operator><name><name>pInterval</name><operator>-&gt;</operator><name>pFill</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pInterval</name><operator>-&gt;</operator><name>pInterval</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>getMonthsFromTimeVal</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fromPrecision</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>days</name> <init>= <expr><call><name>convertTimeFromPrecisionToUnit</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>fromPrecision</name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>unit</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'b'</literal></expr>:</case>
    <case>case <expr><literal type="char">'u'</literal></expr>:</case>
    <case>case <expr><literal type="char">'a'</literal></expr>:</case>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case>
    <case>case <expr><literal type="char">'m'</literal></expr>:</case>
    <case>case <expr><literal type="char">'h'</literal></expr>:</case>
    <case>case <expr><literal type="char">'d'</literal></expr>:</case>
    <case>case <expr><literal type="char">'w'</literal></expr>:</case>
      <return>return <expr><name>days</name> <operator>/</operator> <literal type="number">28</literal></expr>;</return>
    <case>case <expr><literal type="char">'n'</literal></expr>:</case>
      <return>return <expr><name>val</name></expr>;</return>
    <case>case <expr><literal type="char">'y'</literal></expr>:</case>
      <return>return <expr><name>val</name> <operator>*</operator> <literal type="number">12</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>getPrecisionStr</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>precision</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case>
      <return>return <expr><name>TSDB_TIME_PRECISION_MILLI_STR</name></expr>;</return>
    <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case>
      <return>return <expr><name>TSDB_TIME_PRECISION_MICRO_STR</name></expr>;</return>
    <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case>
      <return>return <expr><name>TSDB_TIME_PRECISION_NANO_STR</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkIntervalWindow</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SIntervalWindowNode</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>precision</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pInterval</name><operator>-&gt;</operator><name>pCol</name></name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pInter</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pInterval</name><operator>-&gt;</operator><name>pInterval</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>valInter</name> <init>= <expr><call><name>TIME_IS_VAR_DURATION</name><argument_list>(<argument><expr><name><name>pInter</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInter</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><name>valInter</name> <operator>&amp;&amp;</operator> <name><name>pInter</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name>tsMinIntervalTime</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INTER_VALUE_TOO_SMALL</name></expr></argument>, <argument><expr><name>tsMinIntervalTime</name></expr></argument>,
                                <argument><expr><call><name>getPrecisionStr</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>pOffset</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pOffset</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pInterval</name><operator>-&gt;</operator><name>pOffset</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INTER_OFFSET_NEGATIVE</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInter</name><operator>-&gt;</operator><name>unit</name></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>pOffset</name><operator>-&gt;</operator><name>unit</name></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INTER_OFFSET_UNIT</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fixed</name> <init>= <expr><operator>!</operator><call><name>TIME_IS_VAR_DURATION</name><argument_list>(<argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>valInter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fixed</name> <operator>&amp;&amp;</operator> <name><name>pOffset</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>pInter</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><operator>!</operator><name>fixed</name> <operator>&amp;&amp;</operator> <call><name>getMonthsFromTimeVal</name><argument_list>(<argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator>
                       <call><name>getMonthsFromTimeVal</name><argument_list>(<argument><expr><name><name>pInter</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name><name>pInter</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INTER_OFFSET_TOO_BIG</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>pSliding</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>int32_t</name></type> <name>INTERVAL_SLIDING_FACTOR</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pSliding</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pInterval</name><operator>-&gt;</operator><name>pSliding</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TIME_IS_VAR_DURATION</name><argument_list>(<argument><expr><name><name>pSliding</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INTER_SLIDING_UNIT</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pSliding</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>tsMinSlidingTime</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>pInter</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>/</operator> <name><name>pSliding</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <name>INTERVAL_SLIDING_FACTOR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INTER_SLIDING_TOO_SMALL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSliding</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <name><name>pInter</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INTER_SLIDING_TOO_BIG</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateIntervalWindow</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalWindowNode</name><modifier>*</modifier></type> <name>pInterval</name> <init>= <expr><operator>(</operator><name>SIntervalWindowNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>code</name> <init>= <expr><call><name>checkIntervalWindow</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateFill</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkStateExpr</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_STATE_WIN_TYPE</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>COLUMN_TYPE_TAG</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>colType</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_STATE_WIN_COL</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hasPartitionByTbname</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPartitionByList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPartKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pPartKey</argument>, <argument>pPartitionByList</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pPartKey</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>FUNCTION_TYPE_TBNAME</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pPartKey</name><operator>)</operator><operator>-&gt;</operator><name>funcType</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkStateWindowForStream</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>createStream</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>hasPartitionByTbname</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_STREAM_QUERY</name></expr></argument>, <argument><expr><literal type="string">"Unsupported stream query"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateStateWindow</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_TEMP_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>isGlobalTimeLineQuery</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name>pSubquery</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TIMELINE_QUERY</name></expr></argument>,
                                   <argument><expr><literal type="string">"STATE_WINDOW requires valid time series input"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStateWindowNode</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><operator>(</operator><name>SStateWindowNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><call><name>checkStateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkStateWindowForStream</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSessionWindow</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_TEMP_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>isGlobalTimeLineQuery</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name>pSubquery</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TIMELINE_QUERY</name></expr></argument>,
                                   <argument><expr><literal type="string">"SESSION requires valid time series input"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSessionWindowNode</name><modifier>*</modifier></type> <name>pSession</name> <init>= <expr><operator>(</operator><name>SSessionWindowNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="char">'y'</literal> <operator>==</operator> <name><name>pSession</name><operator>-&gt;</operator><name>pGap</name><operator>-&gt;</operator><name>unit</name></name> <operator>||</operator> <literal type="char">'n'</literal> <operator>==</operator> <name><name>pSession</name><operator>-&gt;</operator><name>pGap</name><operator>-&gt;</operator><name>unit</name></name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>pSession</name><operator>-&gt;</operator><name>pGap</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INTER_SESSION_GAP</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>!=</operator> <name><name>pSession</name><operator>-&gt;</operator><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INTER_SESSION_COL</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSpecificWindow</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_STATE_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>translateStateWindow</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SESSION_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>translateSessionWindow</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_INTERVAL_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>translateIntervalWindow</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateWindow</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_WINDOW</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateSpecificWindow</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createDefaultFillNode</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillNode</name><modifier>*</modifier></type> <name>pFill</name> <init>= <expr><operator>(</operator><name>SFillNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FILL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFill</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFill</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>FILL_MODE_NONE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>ROWTS_PSEUDO_COLUMN_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFill</name><operator>-&gt;</operator><name>pWStartTs</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFill</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkEvery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>pInterval</name><operator>-&gt;</operator><name>literal</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>unit</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <operator>*</operator><name>unit</name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>,
                                   <argument><expr><literal type="string">"Unsupported time unit in EVERY clause"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInterpEvery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pEvery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkEvery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pEvery</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pEvery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>interval</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pEvery</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>interval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>,
                                   <argument><expr><literal type="string">"Unsupported time unit in EVERY clause"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInterpFill</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pFill</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createDefaultFillNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getQueryTimeRange</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pRange</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SFillNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFill</name></name><operator>)</operator><operator>-&gt;</operator><name>timeRange</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkFill</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SFillNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFill</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pEvery</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInterp</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasInterpFunc</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pRange</name></name> <operator>||</operator> <name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pEvery</name></name> <operator>||</operator> <name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pFill</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_INTERP_CLAUSE</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pRange</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pEvery</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pFill</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_INTERP_CLAUSE</name></expr></argument>,
                                   <argument><expr><literal type="string">"Missing RANGE clause, EVERY clause or FILL clause"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pRange</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateInterpEvery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pEvery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateInterpFill</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translatePartitionBy</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_PARTITION_BY</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateExprList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExprList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateWhere</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_WHERE</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getQueryTimeRange</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>timeRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateFrom</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_FROM</name></expr>;</expr_stmt>
  <return>return <expr><call><name>translateTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkLimit</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pLimit</name></name> <operator>&amp;&amp;</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pLimit</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pSlimit</name></name> <operator>&amp;&amp;</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pSlimit</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_OFFSET_LESS_ZERO</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pSlimit</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_SLIMIT_LEAK_PARTITION_BY</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createPrimaryKeyColByTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPrimaryKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>ROWTS_PSEUDO_COLUMN_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>findAndSetColumn</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCol</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name> <operator>||</operator> <operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TIMELINE_FUNC</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pPrimaryKey</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createPrimaryKeyCol</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPrimaryKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>findTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createPrimaryKeyColByTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><name>pPrimaryKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>appendTsForImplicitTsFuncImpl</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name> <init>= <expr><name>pContext</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isImplicitTsFunc</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>         <name>pPrimaryKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>createPrimaryKeyCol</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrimaryKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>pPrimaryKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr> ?</condition><then> <expr><name>DEAL_RES_IGNORE_CHILD</name></expr> </then><else>: <expr><name>DEAL_RES_ERROR</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>appendTsForImplicitTsFunc</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>nodesWalkSelectStmt</name><argument_list>(<argument><expr><name>pSelect</name></expr></argument>, <argument><expr><name>SQL_CLAUSE_FROM</name></expr></argument>, <argument><expr><name>appendTsForImplicitTsFuncImpl</name></expr></argument>, <argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SReplaceOrderByAliasCxt</name> <block>{
  <decl_stmt><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pTranslateCxt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type>         <name>pProjectionList</name></decl>;</decl_stmt>
}</block></struct></type> <name>SReplaceOrderByAliasCxt</name>;</typedef>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>replaceOrderByAliasImpl</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SReplaceOrderByAliasCxt</name><modifier>*</modifier></type> <name>pCxt</name> <init>= <expr><name>pContext</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN_REF</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjectionList</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>     <name>pProject</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pProject</argument>, <argument>pProjectionList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pProject</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnRefNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNew</name> <init>= <expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pProject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNew</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTranslateCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNew</name><operator>)</operator><operator>-&gt;</operator><name>orderAlias</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>replaceOrderByAlias</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjectionList</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pOrderByList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOrderByList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SReplaceOrderByAliasCxt</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTranslateCxt</name> <operator>=</operator> <name>pCxt</name></expr>, <expr><operator>.</operator><name>pProjectionList</name> <operator>=</operator> <name>pProjectionList</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesRewriteExprsPostOrder</name><argument_list>(<argument><expr><name>pOrderByList</name></expr></argument>, <argument><expr><name>replaceOrderByAliasImpl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resetResultTimeline</name><parameter_list>(<parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOrder</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>QUERY_NODE_TEMP_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
       <call><name>isPrimaryKey</name><argument_list>(<argument><expr><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>, <argument><expr><name>pOrder</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>QUERY_NODE_TEMP_TABLE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isPrimaryKeyImpl</name><argument_list>(<argument><expr><name>pOrder</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>isTimeLineResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>isTimeLineResult</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>replaceOrderByAliasForSelect</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>replaceOrderByAlias</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>resetResultTimeline</name><argument_list>(<argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSelectWithoutFrom</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_SELECT</name></expr>;</expr_stmt>
  <return>return <expr><call><name>translateExprList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSelectFrom</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateFrom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name>precision</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateWhere</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translatePartitionBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateWindow</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateGroupBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateHaving</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateSelectList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateOrderBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkAggColCoexist</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkWindowFuncCoexist</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkLimit</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateInterp</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendTsForImplicitTsFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>replaceOrderByAliasForSelect</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setTableCacheLastMode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSelect</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>translateSelectWithoutFrom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>translateSelectFrom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createSetOperProject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTableAlias</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pTableAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>userAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSetOperProject</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSetOperator</name><modifier>*</modifier></type> <name>pSetOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pLeftProjections</name> <init>= <expr><call><name>getProjectList</name><argument_list>(<argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pRightProjections</name> <init>= <expr><call><name>getProjectList</name><argument_list>(<argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pLeftProjections</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pRightProjections</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INCORRECT_NUM_OF_COL</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pLeft</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRight</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FORBOTH</name><argument_list>(<argument>pLeft</argument>, <argument>pLeftProjections</argument>, <argument>pRight</argument>, <argument>pRightProjections</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pLeftExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pLeft</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pRightExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pRight</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>comp</name> <init>= <expr><call><name>dataTypeComp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeftExpr</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRightExpr</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>comp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pRightFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createCastFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pRight</name></expr></argument>, <argument><expr><name><name>pLeftExpr</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRightFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>REPLACE_LIST2_NODE</name><argument_list>(<argument><expr><name>pRightFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pRightExpr</name> <operator>=</operator> <operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pRightFunc</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>comp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pLeftFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createCastFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pLeft</name></expr></argument>, <argument><expr><name><name>pRightExpr</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pLeftFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>REPLACE_LIST1_NODE</name><argument_list>(<argument><expr><name>pLeftFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pLeftFuncExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pLeftFunc</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pLeftFuncExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pLeftFuncExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pLeftExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pLeftFuncExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pLeftFuncExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pLeftExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pLeft</name> <operator>=</operator> <name>pLeftFunc</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pLeftExpr</name> <operator>=</operator> <name>pLeftFuncExpr</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pRightExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRightExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pLeftExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSetOperator</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>,
                                                       <argument><expr><call><name>createSetOperProject</name><argument_list>(<argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>stmtName</name></name></expr></argument>, <argument><expr><name>pLeft</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>calcSetOperatorPrecision</name><parameter_list>(<parameter><decl><type><name>SSetOperator</name><modifier>*</modifier></type> <name>pSetOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>calcPrecision</name><argument_list>(<argument><expr><call><name>getStmtPrecision</name><argument_list>(<argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getStmtPrecision</name><argument_list>(<argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSetOperOrderBy</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSetOperator</name><modifier>*</modifier></type> <name>pSetOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>other</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateOrderByPosition</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>other</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_ORDER_BY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSetOperator</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExprList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>replaceOrderByAlias</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkSetOperLimit</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLimitNode</name><modifier>*</modifier></type> <name>pLimit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>!=</operator> <name>pLimit</name> <operator>&amp;&amp;</operator> <name><name>pLimit</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_OFFSET_LESS_ZERO</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSetOperator</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSetOperator</name><modifier>*</modifier></type> <name>pSetOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>resetTranslateNamespace</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSetOperator</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <call><name>calcSetOperatorPrecision</name><argument_list>(<argument><expr><name>pSetOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateSetOperProject</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSetOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateSetOperOrderBy</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSetOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkSetOperLimit</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLimitNode</name><operator>*</operator><operator>)</operator><name><name>pSetOperator</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>partitionDeleteWhere</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDeleteStmt</name><modifier>*</modifier></type> <name>pDelete</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pDelete</name><operator>-&gt;</operator><name>pWhere</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDelete</name><operator>-&gt;</operator><name>timeRange</name></name> <operator>=</operator> <name>TSWINDOW_INITIALIZER</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pPrimaryKeyCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pOtherCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>filterPartitionCond</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDelete</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrimaryKeyCond</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelete</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pOtherCond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pOtherCond</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DELETE_WHERE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>isStrict</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTimeRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pPrimaryKeyCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelete</name><operator>-&gt;</operator><name>timeRange</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isStrict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isStrict</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DELETE_WHERE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pPrimaryKeyCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pOtherCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDeleteWhere</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDeleteStmt</name><modifier>*</modifier></type> <name>pDelete</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_WHERE</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelete</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>partitionDeleteWhere</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDelete</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDeleteStmt</name><modifier>*</modifier></type> <name>pDelete</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pDelete</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateFrom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pDelete</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDeleteWhere</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>SQL_CLAUSE_SELECT</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelete</name><operator>-&gt;</operator><name>pCountFunc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelete</name><operator>-&gt;</operator><name>pFirstFunc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelete</name><operator>-&gt;</operator><name>pLastFunc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInsertCols</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SInsertStmt</name><modifier>*</modifier></type> <name>pInsert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pInsert</name><operator>-&gt;</operator><name>pCols</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>createAllColumns</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInsert</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>translateExprList</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pInsert</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInsertQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SInsertStmt</name><modifier>*</modifier></type> <name>pInsert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>resetTranslateNamespace</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pInsert</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addOrderByPrimaryKeyToQueryImpl</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPrimaryKeyExpr</name></decl></parameter>,
                                               <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOrderByList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOrderByExprNode</name><modifier>*</modifier></type> <name>pOrderByExpr</name> <init>= <expr><operator>(</operator><name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ORDER_BY_EXPR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOrderByExpr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pOrderByExpr</name><operator>-&gt;</operator><name>nullOrder</name></name> <operator>=</operator> <name>NULL_ORDER_FIRST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOrderByExpr</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>ORDER_ASC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOrderByExpr</name><operator>-&gt;</operator><name>pExpr</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pPrimaryKeyExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pOrderByExpr</name><operator>-&gt;</operator><name>pExpr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOrderByExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name><name>pOrderByExpr</name><operator>-&gt;</operator><name>pExpr</name></name><operator>)</operator><operator>-&gt;</operator><name>orderAlias</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NODES_DESTORY_LIST</name><argument_list>(<argument><expr><operator>*</operator><name>pOrderByList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><name>pOrderByList</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOrderByExpr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addOrderByPrimaryKeyToQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPrimaryKeyExpr</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>addOrderByPrimaryKeyToQueryImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pPrimaryKeyExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pOrderByList</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>addOrderByPrimaryKeyToQueryImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pPrimaryKeyExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pOrderByList</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInsertProject</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SInsertStmt</name><modifier>*</modifier></type> <name>pInsert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjects</name> <init>= <expr><call><name>getProjectList</name><argument_list>(<argument><expr><name><name>pInsert</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pInsert</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pProjects</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMNS_NUM</name></expr></argument>, <argument><expr><literal type="string">"Illegal number of columns"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPrimaryKeyExpr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pBoundCol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pProj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FORBOTH</name><argument_list>(<argument>pBoundCol</argument>, <argument>pInsert-&gt;pCols</argument>, <argument>pProj</argument>, <argument>pProjects</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pBoundCol</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type>   <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pProj</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dataTypeEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createCastFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pProj</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>REPLACE_LIST2_NODE</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pExpr</name> <operator>=</operator> <operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pPrimaryKeyExpr</name> <operator>=</operator> <name>pProj</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pPrimaryKeyExpr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMNS_NUM</name></expr></argument>,
                                   <argument><expr><literal type="string">"Primary timestamp column can not be null"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>addOrderByPrimaryKeyToQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pPrimaryKeyExpr</name></expr></argument>, <argument><expr><name><name>pInsert</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInsertTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateFrom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>TSDB_CHILD_TABLE</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>&amp;&amp;</operator>
      <name>TSDB_NORMAL_TABLE</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr></argument>,
                                   <argument><expr><literal type="string">"insert data into super table is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInsert</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SInsertStmt</name><modifier>*</modifier></type> <name>pInsert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pInsert</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateInsertTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pInsert</name><operator>-&gt;</operator><name>pTable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateInsertCols</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateInsertQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateInsertProject</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>getUnitPerMinute</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>precision</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case>
      <return>return <expr><name>MILLISECOND_PER_MINUTE</name></expr>;</return>
    <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case>
      <return>return <expr><name>MILLISECOND_PER_MINUTE</name> <operator>*</operator> <literal type="number">1000LL</literal></expr>;</return>
    <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case>
      <return>return <expr><name>NANOSECOND_PER_MINUTE</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>MILLISECOND_PER_MINUTE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>getBigintFromValueNode</name><parameter_list>(<parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>isDuration</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>/</operator> <call><name>getUnitPerMinute</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateDbRetentions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>pRetentions</name></decl></parameter>, <parameter><decl><type><name>SCreateDbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pRetentions</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>pRetensions</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pRetentions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetention</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>pRetensions</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pFreq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pKeep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>      <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pRetentions</argument>)</argument_list></macro> <block>{<block_content>
      <expr_stmt><expr><name>pFreq</name> <operator>=</operator> <operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pNodeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pKeep</name> <operator>=</operator> <operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pNodeList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SRetention</name></type> <name>retention</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>freq</name> <operator>=</operator> <name><name>pFreq</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>, <expr><operator>.</operator><name>freqUnit</name> <operator>=</operator> <name><name>pFreq</name><operator>-&gt;</operator><name>unit</name></name></expr>, <expr><operator>.</operator><name>keep</name> <operator>=</operator> <name><name>pKeep</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>, <expr><operator>.</operator><name>keepUnit</name> <operator>=</operator> <name><name>pKeep</name><operator>-&gt;</operator><name>unit</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pRetensions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retention</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>numOfRetensions</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pRetensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateDbReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SCreateDbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>numOfVgroups</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>numOfStables</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>singleStable</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pagesize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pages</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>daysPerFile</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>daysPerFile</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>daysToKeep0</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>daysToKeep1</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>daysToKeep2</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>minRows</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>minRowsPerBlock</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>maxRows</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>maxRowsPerBlock</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>walFsyncPeriod</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>fsyncPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>walLevel</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>walLevel</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>compressionLevel</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>replications</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>replica</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>strict</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>strict</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>cacheLast</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>cacheModel</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>cacheLastSize</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>cacheLastSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>schemaless</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>schemaless</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>walRetentionPeriod</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>walRetentionPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>walRetentionSize</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>walRetentionSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>walRollPeriod</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>walRollPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>walSegmentSize</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>walSegmentSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>sstTrigger</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>sstTrigger</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>hashPrefix</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>tablePrefix</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>hashSuffix</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>tableSuffix</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>tsdbPageSize</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>tsdbPageSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>ignoreExist</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>buildCreateDbRetentions</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pRetentions</name></name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkRangeOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>minVal</name></decl></parameter>,
                                <parameter><decl><type><name>int64_t</name></type> <name>maxVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>val</name> <argument_list type="generic">&lt; <argument><expr><name>minVal</name> <operator>||</operator> <name>val</name></expr></argument> &gt;</argument_list></name> <name>maxVal</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid option %s: %"</literal> <name>PRId64</name> <literal type="string">" valid range: [%"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">"]"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,
                                   <argument><expr><name>minVal</name></expr></argument>, <argument><expr><name>maxVal</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkDbRangeOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>minVal</name></decl></parameter>,
                                  <parameter><decl><type><name>int32_t</name></type> <name>maxVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>checkRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>minVal</name></expr></argument>, <argument><expr><name>maxVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTableRangeOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>minVal</name></decl></parameter>,
                                     <parameter><decl><type><name>int64_t</name></type> <name>maxVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>checkRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>minVal</name></expr></argument>, <argument><expr><name>maxVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkDbDaysOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>pDaysPerFile</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pDaysPerFile</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TIME_UNIT_MINUTE</name> <operator>!=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>pDaysPerFile</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator> <name>TIME_UNIT_HOUR</name> <operator>!=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>pDaysPerFile</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator>
        <name>TIME_UNIT_DAY</name> <operator>!=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>pDaysPerFile</name><operator>-&gt;</operator><name>unit</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>,
                                     <argument><expr><literal type="string">"Invalid option duration unit: %c, only %c, %c, %c allowed"</literal></expr></argument>,
                                     <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pDaysPerFile</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>, <argument><expr><name>TIME_UNIT_MINUTE</name></expr></argument>, <argument><expr><name>TIME_UNIT_HOUR</name></expr></argument>, <argument><expr><name>TIME_UNIT_DAY</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>daysPerFile</name></name> <operator>=</operator> <call><name>getBigintFromValueNode</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pDaysPerFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"daysPerFile"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>daysPerFile</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_DAYS_PER_FILE</name></expr></argument>, <argument><expr><name>TSDB_MAX_DAYS_PER_FILE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkDbKeepOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>pKeep</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfKeep</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pKeep</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfKeep</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>numOfKeep</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of keep options"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pOptions-&gt;pKeep</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>isDuration</name></name> <operator>&amp;&amp;</operator> <name>TIME_UNIT_MINUTE</name> <operator>!=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator> <name>TIME_UNIT_HOUR</name> <operator>!=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator>
        <name>TIME_UNIT_DAY</name> <operator>!=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>unit</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>,
                                     <argument><expr><literal type="string">"Invalid option keep unit: %c, only m, h, d allowed"</literal></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pVal</name><operator>-&gt;</operator><name>isDuration</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>*</operator> <literal type="number">1440</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>getBigintFromValueNode</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pKeep</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfKeep</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>getBigintFromValueNode</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pKeep</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfKeep</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>getBigintFromValueNode</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pKeep</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsdbMaxKeep</name> <init>= <expr><name>TSDB_MAX_KEEP</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOptions</name><operator>-&gt;</operator><name>precision</name></name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsdbMaxKeep</name> <operator>=</operator> <name>TSDB_MAX_KEEP_NS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>TSDB_MIN_KEEP</name> <operator>||</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>TSDB_MIN_KEEP</name> <operator>||</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <name>TSDB_MIN_KEEP</name> <operator>||</operator>
      <name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>tsdbMaxKeep</name> <operator>||</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>tsdbMaxKeep</name> <operator>||</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name>tsdbMaxKeep</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid option keep: %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">" valid range: [%dm, %dm]"</literal></expr></argument>,
                                   <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TSDB_MIN_KEEP</name></expr></argument>, <argument><expr><name>tsdbMaxKeep</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid keep value, should be keep0 &lt;= keep1 &lt;= keep2"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkDbCacheModelOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>cacheModelStr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModelStr</name></name></expr></argument>, <argument><expr><name>TSDB_CACHE_MODEL_NONE_STR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModel</name></name> <operator>=</operator> <name>TSDB_CACHE_MODEL_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModelStr</name></name></expr></argument>, <argument><expr><name>TSDB_CACHE_MODEL_LAST_ROW_STR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModel</name></name> <operator>=</operator> <name>TSDB_CACHE_MODEL_LAST_ROW</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModelStr</name></name></expr></argument>, <argument><expr><name>TSDB_CACHE_MODEL_LAST_VALUE_STR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModel</name></name> <operator>=</operator> <name>TSDB_CACHE_MODEL_LAST_VALUE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModelStr</name></name></expr></argument>, <argument><expr><name>TSDB_CACHE_MODEL_BOTH_STR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModel</name></name> <operator>=</operator> <name>TSDB_CACHE_MODEL_BOTH</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>, <argument><expr><literal type="string">"Invalid option cacheModel: %s"</literal></expr></argument>,
                                     <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModelStr</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkDbPrecisionOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>precisionStr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>precisionStr</name></name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI_STR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>precisionStr</name></name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MICRO_STR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>precisionStr</name></name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_NANO_STR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>, <argument><expr><literal type="string">"Invalid option precision: %s"</literal></expr></argument>,
                                     <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>precisionStr</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkDbStrictOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>strictStr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>strictStr</name></name></expr></argument>, <argument><expr><name>TSDB_DB_STRICT_OFF_STR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>strict</name></name> <operator>=</operator> <name>TSDB_DB_STRICT_OFF</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>strictStr</name></name></expr></argument>, <argument><expr><name>TSDB_DB_STRICT_ON_STR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>strict</name></name> <operator>=</operator> <name>TSDB_DB_STRICT_ON</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>, <argument><expr><literal type="string">"Invalid option strict: %s"</literal></expr></argument>,
                                     <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>strictStr</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkDbEnumOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>!=</operator> <name>v1</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>!=</operator> <name>v2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid option %s: %d, only %d, %d allowed"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkDbRetentionsOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pRetentions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRetentions</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pRetentions</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>, <argument><expr><literal type="string">"Invalid option retentions"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pPrevFreq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pPrevKeep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>      <name>pRetention</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pRetention</argument>, <argument>pRetentions</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>((SNodeListNode*)pRetention)-&gt;pNodeList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pFreq</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name>pRetention</name><operator>)</operator><operator>-&gt;</operator><name>pNodeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pKeep</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name>pRetention</name><operator>)</operator><operator>-&gt;</operator><name>pNodeList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFreq</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <literal type="char">'n'</literal> <operator>==</operator> <name><name>pFreq</name><operator>-&gt;</operator><name>unit</name></name> <operator>||</operator> <literal type="char">'y'</literal> <operator>==</operator> <name><name>pFreq</name><operator>-&gt;</operator><name>unit</name></name> <operator>||</operator> <name><name>pFreq</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>pKeep</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>||</operator>
        <operator>(</operator><name>NULL</name> <operator>!=</operator> <name>pPrevFreq</name> <operator>&amp;&amp;</operator> <name><name>pPrevFreq</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>pFreq</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>NULL</name> <operator>!=</operator> <name>pPrevKeep</name> <operator>&amp;&amp;</operator> <name><name>pPrevKeep</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <name><name>pKeep</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>, <argument><expr><literal type="string">"Invalid option retentions"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pPrevFreq</name> <operator>=</operator> <name>pFreq</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pPrevKeep</name> <operator>=</operator> <name>pKeep</name></expr>;</expr_stmt>
  </block_content>}</block>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkOptionsDependency</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>daysPerFile</name> <init>= <expr><name><name>pOptions</name><operator>-&gt;</operator><name>daysPerFile</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>daysToKeep0</name> <init>= <expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>daysPerFile</name> <operator>&amp;&amp;</operator> <operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>daysToKeep0</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>daysPerFile</name> <operator>||</operator> <operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>daysToKeep0</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDbCfgInfo</name></type> <name>dbCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>getDBCfg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>daysPerFile</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>daysPerFile</name></expr> ?</condition><then> <expr><name><name>dbCfg</name><operator>.</operator><name>daysPerFile</name></name></expr> </then><else>: <expr><name>daysPerFile</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>daysToKeep0</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>daysToKeep0</name></expr> ?</condition><then> <expr><name><name>dbCfg</name><operator>.</operator><name>daysToKeep0</name></name></expr> </then><else>: <expr><name>daysToKeep0</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>daysPerFile</name> <operator>&gt;</operator> <name>daysToKeep0</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DB_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid duration value, should be keep2 &gt;= keep1 &gt;= keep0 &gt;= duration"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkDatabaseOptions</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_BUFFER_PER_VNODE</name></expr></argument>, <argument><expr><name>TSDB_MAX_BUFFER_PER_VNODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbCacheModelOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator>
        <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"cacheSize"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheLastSize</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_DB_CACHE_SIZE</name></expr></argument>, <argument><expr><name>TSDB_MAX_DB_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator>
        <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"compression"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>compressionLevel</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_COMP_LEVEL</name></expr></argument>, <argument><expr><name>TSDB_MAX_COMP_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbDaysOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"fsyncPeriod"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>fsyncPeriod</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_FSYNC_PERIOD</name></expr></argument>, <argument><expr><name>TSDB_MAX_FSYNC_PERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"maxRowsPerBlock"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>maxRowsPerBlock</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_MAXROWS_FBLOCK</name></expr></argument>,
                              <argument><expr><name>TSDB_MAX_MAXROWS_FBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"minRowsPerBlock"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>minRowsPerBlock</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_MINROWS_FBLOCK</name></expr></argument>,
                              <argument><expr><name>TSDB_MAX_MINROWS_FBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbPrecisionOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbKeepOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// use precision</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"pages"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_PAGES_PER_VNODE</name></expr></argument>, <argument><expr><name>TSDB_MAX_PAGES_PER_VNODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"pagesize"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pagesize</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_PAGESIZE_PER_VNODE</name></expr></argument>,
                              <argument><expr><name>TSDB_MAX_PAGESIZE_PER_VNODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"tsdbPagesize"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>tsdbPageSize</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_TSDB_PAGESIZE</name></expr></argument>,
                              <argument><expr><name>TSDB_MAX_TSDB_PAGESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbEnumOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"replications"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>replica</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_DB_REPLICA</name></expr></argument>, <argument><expr><name>TSDB_MAX_DB_REPLICA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbStrictOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbEnumOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"walLevel"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walLevel</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_WAL_LEVEL</name></expr></argument>, <argument><expr><name>TSDB_MAX_WAL_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"vgroups"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_VNODES_PER_DB</name></expr></argument>, <argument><expr><name>TSDB_MAX_VNODES_PER_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbEnumOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"singleStable"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>singleStable</name></name></expr></argument>, <argument><expr><name>TSDB_DB_SINGLE_STABLE_ON</name></expr></argument>,
                             <argument><expr><name>TSDB_DB_SINGLE_STABLE_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRetentionsOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pRetentions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbEnumOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"schemaless"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>schemaless</name></name></expr></argument>, <argument><expr><name>TSDB_DB_SCHEMALESS_ON</name></expr></argument>, <argument><expr><name>TSDB_DB_SCHEMALESS_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"walRetentionPeriod"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walRetentionPeriod</name></name></expr></argument>,
                              <argument><expr><name>TSDB_DB_MIN_WAL_RETENTION_PERIOD</name></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"walRetentionSize"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walRetentionSize</name></name></expr></argument>, <argument><expr><name>TSDB_DB_MIN_WAL_RETENTION_SIZE</name></expr></argument>,
                              <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"walRollPeriod"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walRollPeriod</name></name></expr></argument>, <argument><expr><name>TSDB_DB_MIN_WAL_ROLL_PERIOD</name></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator>
        <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"walSegmentSize"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walSegmentSize</name></name></expr></argument>, <argument><expr><name>TSDB_DB_MIN_WAL_SEGMENT_SIZE</name></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"sstTrigger"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>sstTrigger</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_STT_TRIGGER</name></expr></argument>, <argument><expr><name>TSDB_MAX_STT_TRIGGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"tablePrefix"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>tablePrefix</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_HASH_PREFIX</name></expr></argument>, <argument><expr><name>TSDB_MAX_HASH_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkDbRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"tableSuffix"</literal></expr></argument>, <argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>tableSuffix</name></name></expr></argument>, <argument><expr><name>TSDB_MIN_HASH_SUFFIX</name></expr></argument>, <argument><expr><name>TSDB_MAX_HASH_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkOptionsDependency</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkCreateDatabase</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_IDENTIFIER_NAME</name></expr></argument>,
                                   <argument><expr><literal type="string">"The database name cannot contain '.'"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>checkDatabaseOptions</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>FSerializeFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufLen</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCmdMsg</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>FSerializeFunc</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCmdMsgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>pMsg</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>pMsg</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateDatabase</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCreateDbReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>checkCreateDatabase</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCreateDbReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_DB</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSCreateDbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tFreeSCreateDbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropDatabase</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDropDbReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>      <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>ignoreNotExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name></expr>;</expr_stmt>

  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_DB</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSDropDbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildAlterDbReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SAlterDbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pages</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>daysPerFile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>daysToKeep0</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>daysToKeep1</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>daysToKeep2</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>walFsyncPeriod</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>fsyncPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>walLevel</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>walLevel</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>strict</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>strict</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>cacheLast</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>cacheModel</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>cacheLastSize</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>cacheLastSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>replications</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>replica</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>sstTrigger</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>sstTrigger</name></name></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateAlterDatabase</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>checkDatabaseOptions</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SAlterDbReq</name></type> <name>alterReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>buildAlterDbReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_ALTER_DB</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSAlterDbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTrimDatabase</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>STrimDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrimDbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><operator>.</operator><name>maxSpeed</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>maxSpeed</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>      <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_TRIM_DB</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSTrimDbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>columnDefNodeToField</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pArray</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnDefNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SField</name></type>          <name>field</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name></expr>, <expr><operator>.</operator><name>bytes</name> <operator>=</operator> <macro><name>calcTypeBytes</name><argument_list>(<argument>pCol-&gt;dataType</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>sma</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>field</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>COL_SMA_ON</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SColumnDefNode</name><modifier>*</modifier></type> <name>findColDef</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCols</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pColDef</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pColDef</argument>, <argument>pCols</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pColDef</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pColDef</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTableSmaOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pSma</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pStmt-&gt;pCols</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>sma</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> </block_content>}</block>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pStmt-&gt;pOptions-&gt;pSma</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type>    <name>pSmaCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnDefNode</name><modifier>*</modifier></type> <name>pColDef</name> <init>= <expr><call><name>findColDef</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>, <argument><expr><name>pSmaCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pColDef</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><name><name>pSmaCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pSmaCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pColDef</name><operator>-&gt;</operator><name>dataType</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColDef</name><operator>-&gt;</operator><name>sma</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validRollupFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type>   <name><name>rollupFuncs</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"avg"</literal></expr>, <expr><literal type="string">"sum"</literal></expr>, <expr><literal type="string">"min"</literal></expr>, <expr><literal type="string">"max"</literal></expr>, <expr><literal type="string">"last"</literal></expr>, <expr><literal type="string">"first"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>numOfRollupFuncs</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rollupFuncs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRollupFuncs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>rollupFuncs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTableRollupOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pFuncs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>createStable</name></decl></parameter>,
                                      <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pDbCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFuncs</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pDbCfg</name><operator>-&gt;</operator><name>pRetensions</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>,
                                     <argument><expr><literal type="string">"To create a super table in databases configured with the 'RETENTIONS' option, "</literal>
                                     <literal type="string">"the 'ROLLUP' option must be present"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>createStable</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pDbCfg</name><operator>-&gt;</operator><name>pRetensions</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid option rollup: Only supported for create super table in databases "</literal>
                                   <literal type="string">"configured with the 'RETENTIONS' option"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid option rollup: only one function is allowed"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>functionName</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validRollupFunc</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid option rollup: %s function is not supported"</literal></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTableTagsSchema</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pTags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ntags</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pTags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>ntags</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ntags</name> <operator>&gt;</operator> <name>TSDB_MAX_TAGS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TAGS_NUM</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tagsSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pTags</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnDefNode</name><modifier>*</modifier></type> <name>pTag</name> <init>= <expr><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>         <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_DUPLICATED_COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>pTag</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <name>ntags</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_ONLY_ONE_JSON_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>TSDB_DATA_TYPE_VARCHAR</name> <operator>==</operator> <name><name>pTag</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_MAX_BINARY_LEN</name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name><name>pTag</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_MAX_NCHAR_LEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_VAR_COLUMN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tagsSize</name> <operator>+=</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>tagsSize</name> <operator>&gt;</operator> <name>TSDB_MAX_TAGS_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TAGS_LENGTH</name></expr></argument>, <argument><expr><name>TSDB_MAX_TAGS_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTableColsSchema</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ntags</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ncols</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ncols</name> <operator>&lt;</operator> <name>TSDB_MIN_COLUMNS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMNS_NUM</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ncols</name> <operator>+</operator> <name>ntags</name> <operator>&gt;</operator> <name>TSDB_MAX_COLUMNS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_TOO_MANY_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pCols</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnDefNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>!=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_FIRST_COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>pCol</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COL_JSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_DUPLICATED_COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>TSDB_DATA_TYPE_VARCHAR</name> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_MAX_BINARY_LEN</name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_MAX_NCHAR_LEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_VAR_COLUMN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCol</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>rowSize</name> <operator>&gt;</operator> <name>TSDB_MAX_BYTES_PER_ROW</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ROW_LENGTH</name></expr></argument>, <argument><expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTableSchema</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pHash</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>checkTableTagsSchema</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pHash</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkTableColsSchema</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pHash</name></expr></argument>, <argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableDelayOrWatermarkOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>minVal</name></decl></parameter>,
                                              <parameter><decl><type><name>int64_t</name></type> <name>maxVal</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pMaxDelay</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr> </then><else>: <expr><name>TSDB_CODE_SUCCESS</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>TIME_UNIT_MILLISECOND</name> <operator>!=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator> <name>TIME_UNIT_SECOND</name> <operator>!=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator>
      <name>TIME_UNIT_MINUTE</name> <operator>!=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>unit</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid option %s unit: %c, only %c, %c, %c allowed"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>,
                                   <argument><expr><name>TIME_UNIT_MILLISECOND</name></expr></argument>, <argument><expr><name>TIME_UNIT_SECOND</name></expr></argument>, <argument><expr><name>TIME_UNIT_MINUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkTableRangeOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name>minVal</name></expr></argument>, <argument><expr><name>maxVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pMaxDelay</name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableMaxDelayOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pMaxDelay</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>getTableDelayOrWatermarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"maxDelay"</literal></expr></argument>, <argument><expr><name>TSDB_MIN_ROLLUP_MAX_DELAY</name></expr></argument>, <argument><expr><name>TSDB_MAX_ROLLUP_MAX_DELAY</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>,
                                        <argument><expr><name>pMaxDelay</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTableMaxDelayOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>STableOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>createStable</name></decl></parameter>,
                                        <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pDbCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>pMaxDelay</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>createStable</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pDbCfg</name><operator>-&gt;</operator><name>pRetensions</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid option maxdelay: Only supported for create super table in databases "</literal>
                                   <literal type="string">"configured with the 'RETENTIONS' option"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pMaxDelay</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>, <argument><expr><literal type="string">"Invalid option maxdelay"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>getTableMaxDelayOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pMaxDelay</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOptions</name><operator>-&gt;</operator><name>maxDelay1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pMaxDelay</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMaxDelayOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pMaxDelay</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOptions</name><operator>-&gt;</operator><name>maxDelay2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableWatermarkOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pMaxDelay</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>getTableDelayOrWatermarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"watermark"</literal></expr></argument>, <argument><expr><name>TSDB_MIN_ROLLUP_WATERMARK</name></expr></argument>, <argument><expr><name>TSDB_MAX_ROLLUP_WATERMARK</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>,
                                        <argument><expr><name>pMaxDelay</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTableWatermarkOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>STableOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>createStable</name></decl></parameter>,
                                         <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pDbCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>pWatermark</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>createStable</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pDbCfg</name><operator>-&gt;</operator><name>pRetensions</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid option watermark: Only supported for create super table in databases "</literal>
                                   <literal type="string">"configured with the 'RETENTIONS' option"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pWatermark</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>, <argument><expr><literal type="string">"Invalid option watermark"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>getTableWatermarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pWatermark</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOptions</name><operator>-&gt;</operator><name>watermark1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pWatermark</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableWatermarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pWatermark</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOptions</name><operator>-&gt;</operator><name>watermark2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableDeleteMarkOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pMaxDelay</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>getTableDelayOrWatermarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"delete_mark"</literal></expr></argument>, <argument><expr><name>TSDB_MIN_ROLLUP_DELETE_MARK</name></expr></argument>, <argument><expr><name>TSDB_MAX_ROLLUP_DELETE_MARK</name></expr></argument>,
                                        <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pMaxDelay</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTableDeleteMarkOption</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>STableOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>createStable</name></decl></parameter>,
                                          <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pDbCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pOptions</name><operator>-&gt;</operator><name>pDeleteMark</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>createStable</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pDbCfg</name><operator>-&gt;</operator><name>pRetensions</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>,
                                   <argument><expr><literal type="string">"Invalid option delete_mark: Only supported for create super table in databases "</literal>
                                   <literal type="string">"configured with the 'RETENTIONS' option"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pDeleteMark</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>, <argument><expr><literal type="string">"Invalid option delete_mark"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>getTableDeleteMarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pDeleteMark</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOptions</name><operator>-&gt;</operator><name>deleteMark1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pDeleteMark</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator>
        <call><name>getTableDeleteMarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pDeleteMark</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOptions</name><operator>-&gt;</operator><name>deleteMark2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkCreateTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>createStable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_IDENTIFIER_NAME</name></expr></argument>,
                                   <argument><expr><literal type="string">"The table name cannot contain '.'"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDbCfgInfo</name></type> <name>dbCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>getDBCfg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>createStable</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>dbCfg</name><operator>.</operator><name>pRetensions</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsgExt</name><argument_list>(
        <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TABLE_OPTION</name></expr></argument>,
        <argument><expr><literal type="string">"Only super table creation is supported in databases configured with the 'RETENTIONS' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkTableMaxDelayOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name></expr></argument>, <argument><expr><name>createStable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkTableWatermarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name></expr></argument>, <argument><expr><name>createStable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkTableDeleteMarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name></expr></argument>, <argument><expr><name>createStable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkTableRollupOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pRollupFuncs</name></name></expr></argument>, <argument><expr><name>createStable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkTableSmaOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkTableSchema</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>toSchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SColumnDefNode</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>sma</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>COL_SMA_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name>colId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SSampleAstInfo</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTableName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type>  <name>pFuncs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>      <name>pInterval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>      <name>pOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>      <name>pSliding</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type>  <name>pPartitionByList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pRollupTableMeta</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSampleAstInfo</name>;</typedef>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildSampleAst</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSampleAstInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pAst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>,
                              <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pExprLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SELECT_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSelect</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>stmtName</name></name></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_REAL_TABLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRollupTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pTable</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><literal type="string">"_wstart"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesListPushFront</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pProject</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pProject</argument>, <argument>pSelect-&gt;pProjectionList</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pProject</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>, <argument><expr><literal type="string">"#%p"</literal></expr></argument>, <argument><expr><name>pProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SIntervalWindowNode</name><modifier>*</modifier></type> <name>pInterval</name> <init>= <expr><operator>(</operator><name>SIntervalWindowNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_INTERVAL_WINDOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pInterval</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pInterval</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>pInterval</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>pOffset</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>pSliding</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInterval</name><operator>-&gt;</operator><name>pCol</name></name> <operator>=</operator> <call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>pCol</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pInterval</name><operator>-&gt;</operator><name>pCol</name></name><operator>)</operator><operator>-&gt;</operator><name>colId</name> <operator>=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pInterval</name><operator>-&gt;</operator><name>pCol</name></name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>, <argument><expr><name>ROWTS_PSEUDO_COLUMN_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>createStream</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesNodeToString</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pAst</name></expr></argument>, <argument><expr><name>pLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pExpr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListToString</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pExprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearSampleAstInfo</name><parameter_list>(<parameter><decl><type><name>SSampleAstInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>makeIntervalVal</name><parameter_list>(<parameter><decl><type><name>SRetention</name><modifier>*</modifier></type> <name>pRetension</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timeVal</name> <init>= <expr><call><name>convertTimeFromPrecisionToUnit</name><argument_list>(<argument><expr><name><name>pRetension</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name><name>pRetension</name><operator>-&gt;</operator><name>freqUnit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>timeVal</name></expr></argument>, <argument><expr><name><name>pRetension</name><operator>-&gt;</operator><name>freqUnit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>isDuration</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pVal</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createColumnFromDef</name><parameter_list>(<parameter><decl><type><name>SColumnDefNode</name><modifier>*</modifier></type> <name>pDef</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pDef</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createRollupFunc</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pSrcFunc</name></decl></parameter>, <parameter><decl><type><name>SColumnDefNode</name><modifier>*</modifier></type> <name>pColDef</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pSrcFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><call><name>createColumnFromDef</name><argument_list>(<argument><expr><name>pColDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>createRollupFuncs</name><parameter_list>(<parameter><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pFuncs</name> <init>= <expr><call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFuncs</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pFunc</argument>, <argument>pStmt-&gt;pOptions-&gt;pRollupFuncs</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>   <name>primaryKey</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pCol</argument>, <argument>pStmt-&gt;pCols</argument>)</argument_list></macro> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>primaryKey</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>primaryKey</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>, <argument><expr><call><name>createRollupFunc</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block>

  <return>return <expr><name>pFuncs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>createRollupTableMeta</name><parameter_list>(<parameter><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfField</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMeta</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>numOfField</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMeta</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name>TSDB_SUPER_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pCol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pCol</argument>, <argument>pStmt-&gt;pCols</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>toSchema</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name></name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt>
  </block_content>}</block>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pTag</argument>, <argument>pStmt-&gt;pTags</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>toSchema</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pTag</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name></name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt>
  </block_content>}</block>

  <return>return <expr><name>pMeta</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createTbnameFunction</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><literal type="string">"tbname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><literal type="string">"tbname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>userAlias</name></name></expr></argument>, <argument><expr><literal type="string">"tbname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildSampleAstInfoByTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SRetention</name><modifier>*</modifier></type> <name>pRetension</name></decl></parameter>,
                                         <parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>SSampleAstInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDbName</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableName</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>=</operator> <call><name>createRollupFuncs</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInterval</name></name> <operator>=</operator> <call><name>makeIntervalVal</name><argument_list>(<argument><expr><name>pRetension</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRollupTableMeta</name></name> <operator>=</operator> <call><name>createRollupTableMeta</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pInterval</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRollupTableMeta</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr></argument>, <argument><expr><call><name>createTbnameFunction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getRollupAst</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SRetention</name><modifier>*</modifier></type> <name>pRetension</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>,
                            <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pAst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSampleAstInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>buildSampleAstInfoByTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pRetension</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSampleAst</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>pAst</name></expr></argument>, <argument><expr><name>pLen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>clearSampleAstInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildRollupAst</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SMCreateStbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDbCfgInfo</name></type> <name>dbCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>getDBCfg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>dbCfg</name><operator>.</operator><name>pRetensions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name> <operator>||</operator> <name>num</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRetention</name><modifier>*</modifier></type>       <name>pRetension</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dbCfg</name><operator>.</operator><name>pRetensions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STranslateContext</name></type> <name>cxt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>initTranslateContext</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getRollupAst</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pRetension</name></expr></argument>, <argument><expr><name><name>dbCfg</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><ternary><condition><expr><literal type="number">1</literal> <operator>==</operator> <name>i</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>pAst1</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>pAst2</name></name></expr></else></ternary></expr></argument>,
                        <argument><expr><ternary><condition><expr><literal type="number">1</literal> <operator>==</operator> <name>i</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>ast1Len</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>ast2Len</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyTranslateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildRollupFuncs</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pFuncs</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFuncs</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pArray</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pFuncs</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pArray</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>functionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateStbReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SMCreateStbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>igExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>delay1</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>maxDelay1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>delay2</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>maxDelay2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>watermark1</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>watermark1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>watermark2</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>watermark2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>deleteMark1</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>deleteMark1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>deleteMark2</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>deleteMark2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colVer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>tagVer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>TD_REQ_FROM_APP</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>columnDefNodeToField</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>columnDefNodeToField</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>commentNull</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>pComment</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>pComment</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>buildRollupFuncs</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pRollupFuncs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>numOfFuncs</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>tableName</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>collectUseTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRollupAst</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateSuperTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMCreateStbReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>checkCreateTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCreateStbReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_STB</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMCreateStbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tFreeSMCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doTranslateDropSuperTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreNotExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>collectUseTable</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMDropStbReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>igNotExists</name></name> <operator>=</operator> <name>ignoreNotExists</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_STB</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMDropStbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDropTableClause</name><modifier>*</modifier></type> <name>pClause</name> <init>= <expr><operator>(</operator><name>SDropTableClause</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>             <name>tableName</name></decl>;</decl_stmt>
  <return>return <expr><call><name>doTranslateDropSuperTable</name><argument_list>(
      <argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pClause</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pClause</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pClause</name><operator>-&gt;</operator><name>ignoreNotExists</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropSuperTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropSuperTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>tableName</name></decl>;</decl_stmt>
  <return>return <expr><call><name>doTranslateDropSuperTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildAlterSuperTableReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SMAlterStbReq</name><modifier>*</modifier></type> <name>pAlterReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>tableName</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>alterType</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_ALTER_TABLE_UPDATE_OPTIONS</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    pAlterReq-&gt;ttl = pStmt-&gt;pOptions-&gt;ttl;</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>commentNull</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pAlterReq</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>pFields</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_FIELD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pAlterReq</name><operator>-&gt;</operator><name>pFields</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_TAG</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_TAG</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_COLUMN</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_COLUMN</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_BYTES</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_BYTES</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>TAOS_FIELD</name></type> <name>field</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name></expr>, <expr><operator>.</operator><name>bytes</name> <operator>=</operator> <macro><name>calcTypeBytes</name><argument_list>(<argument>pStmt-&gt;dataType</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_NAME</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_NAME</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>TAOS_FIELD</name></type> <name>oldField</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>oldField</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>TAOS_FIELD</name></type> <name>newField</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>newField</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>newColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>numOfFields</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pAlterReq</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>getColSchema</name><parameter_list>(<parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfFields</name> <init>= <expr><call><name>getNumOfTags</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getNumOfColumns</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfFields</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>pColName</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>pSchema</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>getTagSchema</name><parameter_list>(<parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTagName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>numOfTags</name> <init>= <expr><call><name>getNumOfTags</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagsSchema</name> <init>= <expr><call><name>getTableTagSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTags</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><name>pTagsSchema</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>pTagName</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>pSchema</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkAlterSuperTableBySchema</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagsSchema</name> <init>= <expr><call><name>getTableTagSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>getNumOfTags</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pTagsSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_TABLE_ADD_TAG</name> <operator>||</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_TABLE_DROP_TAG</name> <operator>||</operator>
       <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_TABLE_UPDATE_TAG_BYTES</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_ONLY_ONE_JSON_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tagsLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>tagsLen</name> <operator>+=</operator> <name><name>pTagsSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_BYTES</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>||</operator>
      <name>TSDB_ALTER_TABLE_UPDATE_TAG_BYTES</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>!=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr></argument>, <argument><expr><literal type="string">"Table is not super table"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>getColSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSchema</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>||</operator>
               <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;=</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_MODIFY_COL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_BYTES</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>&amp;&amp;</operator>
        <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>rowSize</name></name> <operator>+</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;</operator> <name>TSDB_MAX_BYTES_PER_ROW</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ROW_LENGTH</name></expr></argument>, <argument><expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_BYTES</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>&amp;&amp;</operator>
        <name>tagsLen</name> <operator>+</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;</operator> <name>TSDB_MAX_TAGS_LEN</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TAGS_LENGTH</name></expr></argument>, <argument><expr><name>TSDB_MAX_TAGS_LEN</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_ALTER_TABLE_ADD_COLUMN</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_MAX_COLUMNS</name> <operator>==</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_TOO_MANY_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>rowSize</name></name> <operator>+</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_MAX_BYTES_PER_ROW</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ROW_LENGTH</name></expr></argument>, <argument><expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_ALTER_TABLE_ADD_TAG</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_MAX_TAGS</name> <operator>==</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TAGS_NUM</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>tagsLen</name> <operator>+</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_MAX_TAGS_LEN</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TAGS_LENGTH</name></expr></argument>, <argument><expr><name>TSDB_MAX_TAGS_LEN</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkAlterSuperTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_VAL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr></argument>,
                                   <argument><expr><literal type="string">"Set tag value only available for child table"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_NAME</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr></argument>,
                                   <argument><expr><literal type="string">"Rename column only available for normal table"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_TABLE_UPDATE_OPTIONS</name> <operator>&amp;&amp;</operator> <operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>ttl</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_TABLE_ADD_TAG</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_ONLY_ONE_JSON_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_TABLE_ADD_COLUMN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COL_JSON</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDbCfgInfo</name></type> <name>dbCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>getDBCfg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>dbCfg</name><operator>.</operator><name>pRetensions</name></name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>TSDB_ALTER_TABLE_ADD_COLUMN</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>||</operator> <name>TSDB_ALTER_TABLE_DROP_COLUMN</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>||</operator>
       <name>TSDB_ALTER_TABLE_UPDATE_COLUMN_BYTES</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr></argument>,
                                   <argument><expr><literal type="string">"Modifying the table schema is not supported in databases "</literal>
                                   <literal type="string">"configured with the 'RETENTIONS' option"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMeta</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkAlterSuperTableBySchema</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateAlterSuperTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMAlterStbReq</name></type> <name>alterReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><call><name>checkAlterSuperTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildAlterSuperTableReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_ALTER_STB</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMAlterStbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tFreeSMAltertbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateUseDatabase</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SUseDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUseDbReq</name></type> <name>usedbReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>     <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>usedbReq</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>getDBVgVersion</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>usedbReq</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usedbReq</name><operator>.</operator><name>vgVersion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usedbReq</name><operator>.</operator><name>dbId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usedbReq</name><operator>.</operator><name>numOfTable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usedbReq</name><operator>.</operator><name>stateTs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_USE_DB</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSUseDbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateUser</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateUserStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCreateUserReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>createReq</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>createType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>superUser</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>sysInfo</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sysinfo</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>enable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>createReq</name><operator>.</operator><name>pass</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_USER</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSCreateUserReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateAlterUser</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterUserStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAlterUserReq</name></type> <name>alterReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>superUser</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>enable</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>enable</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>sysInfo</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sysinfo</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>pass</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>pass</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_ALTER_USER</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSAlterUserReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropUser</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropUserStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDropUserReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dropReq</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_USER</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSDropUserReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateDnode</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateDnodeStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCreateDnodeReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>createReq</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>

  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_DNODE</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSCreateDnodeReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropDnode</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropDnodeStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDropDnodeReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dropReq</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>force</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>force</name></name></expr>;</expr_stmt>

  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_DNODE</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSDropDnodeReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateAlterDnode</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterDnodeStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMCfgDnodeReq</name></type> <name>cfgReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cfgReq</name><operator>.</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_CONFIG_DNODE</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMCfgDnodeReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getSmaIndexDstVgId</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>,
                                  <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>getTableHashVgroup</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pVgId</name> <operator>=</operator> <name><name>vg</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getSmaIndexSql</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSql</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pSql</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pSql</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>sqlLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildSampleAstInfoByIndex</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SSampleAstInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDbName</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableName</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>=</operator> <call><name>nodesCloneList</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInterval</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pOffset</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSliding</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pSliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pInterval</name></name> <operator>||</operator>
      <operator>(</operator><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pOffset</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pOffset</name></name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pSliding</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pSliding</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getSmaIndexAst</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pAst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>,
                              <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pExprLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSampleAstInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>buildSampleAstInfoByIndex</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSampleAst</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>pAst</name></expr></argument>, <argument><expr><name>pLen</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pExprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>clearSampleAstInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateSmaReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SMCreateSmaReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexDbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>stb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>igExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pInterval</name></name><operator>)</operator><operator>-&gt;</operator><name><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pInterval</name></name><operator>)</operator><operator>-&gt;</operator><name>unit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pOffset</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pOffset</name></name><operator>)</operator><operator>-&gt;</operator><name><name>datum</name><operator>.</operator><name>i</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>sliding</name></name> <operator>=</operator>
      <operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pSliding</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pSliding</name></name><operator>)</operator><operator>-&gt;</operator><name><name>datum</name><operator>.</operator><name>i</name></name></expr> </then><else>: <expr><name><name>pReq</name><operator>-&gt;</operator><name>interval</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>slidingUnit</name></name> <operator>=</operator>
      <operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pSliding</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pSliding</name></name><operator>)</operator><operator>-&gt;</operator><name>unit</name></expr> </then><else>: <expr><name><name>pReq</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pStreamOptions</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamOptions</name><modifier>*</modifier></type> <name>pStreamOpt</name> <init>= <expr><operator>(</operator><name>SStreamOptions</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pStreamOptions</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStreamOpt</name><operator>-&gt;</operator><name>pDelay</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMaxDelayOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStreamOpt</name><operator>-&gt;</operator><name>pDelay</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>maxDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>maxDelay</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStreamOpt</name><operator>-&gt;</operator><name>pWatermark</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableWatermarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStreamOpt</name><operator>-&gt;</operator><name>pWatermark</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>watermark</name></name> <operator>=</operator> <name>TSDB_DEFAULT_ROLLUP_WATERMARK</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStreamOpt</name><operator>-&gt;</operator><name>pDeleteMark</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableDeleteMarkOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStreamOpt</name><operator>-&gt;</operator><name>pDeleteMark</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>deleteMark</name></name> <operator>=</operator> <name>TSDB_DEFAULT_ROLLUP_DELETE_MARK</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getSmaIndexDstVgId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>dstVgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getSmaIndexSql</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>sqlLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getSmaIndexAst</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>astLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>exprLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkCreateSmaIndex</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDbCfgInfo</name></type> <name>dbCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>getDBCfg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>dbCfg</name><operator>.</operator><name>pRetensions</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_SMA_INDEX</name></expr></argument>,
                                   <argument><expr><literal type="string">"Tables configured with the 'ROLLUP' option do not support creating sma index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doTranslateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pOffset</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doTranslateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pSliding</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doTranslateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pSliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateSmaIndex</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMCreateSmaReq</name></type> <name>createSmaReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>checkCreateSmaIndex</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCreateSmaReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createSmaReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_SMA</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMCreateSmaReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createSmaReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tFreeSMCreateSmaReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createSmaReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateFullTextReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SMCreateFullTextReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateFullTextIndex</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMCreateFullTextReq</name></type> <name>createFTReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><call><name>buildCreateFullTextReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createFTReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_INDEX</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMCreateFullTextReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createFTReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tFreeSMCreateFullTextReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createFTReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateIndex</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>INDEX_TYPE_FULLTEXT</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>indexType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>translateCreateFullTextIndex</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>translateCreateSmaIndex</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropIndex</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMDropSmaReq</name></type> <name>dropSmaReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>        <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexDbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dropSmaReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dropSmaReq</name><operator>.</operator><name>igNotExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_SMA</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMDropSmaReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropSmaReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>getCreateComponentNodeMsgType</name><parameter_list>(<parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_CREATE_QNODE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_MND_CREATE_QNODE</name></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_BNODE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_MND_CREATE_BNODE</name></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_SNODE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_MND_CREATE_SNODE</name></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_MNODE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_MND_CREATE_MNODE</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateComponentNode</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateComponentNodeStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMCreateQnodeReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><operator>.</operator><name>dnodeId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>getCreateComponentNodeMsgType</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSCreateDropMQSNodeReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>getDropComponentNodeMsgType</name><parameter_list>(<parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_DROP_QNODE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_MND_DROP_QNODE</name></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_BNODE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_MND_DROP_BNODE</name></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_SNODE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_MND_DROP_SNODE</name></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_MNODE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_MND_DROP_MNODE</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropComponentNode</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropComponentNodeStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDDropQnodeReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><operator>.</operator><name>dnodeId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>getDropComponentNodeMsgType</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSCreateDropMQSNodeReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTopicQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasAggFuncs</name></name> <operator>||</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>hasInterpFunc</name></name> <operator>||</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>hasIndefiniteRowsFunc</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TOPIC_QUERY</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateTopicReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTopicStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SCMCreateTopicReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>igExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>withMeta</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>withMeta</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>sql</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>   <name>name</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>subSTbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>subType</name></name> <operator>=</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>subDbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>subSTbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subDbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subStbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>subDbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>subType</name></name> <operator>=</operator> <name>TOPIC_SUB_TYPE__DB</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>subDbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>subDbName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subDbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>subType</name></name> <operator>=</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subDbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>topicQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkTopicQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesNodeToString</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkCreateTopic</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTopicStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>isDistinct</name></name> <operator>&amp;&amp;</operator> <name>QUERY_NODE_REAL_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pGroupByList</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pLimit</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pSlimit</name></name> <operator>&amp;&amp;</operator>
        <name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TOPIC_QUERY</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateTopic</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateTopicStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCMCreateTopicReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><call><name>checkCreateTopic</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCreateTopicReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_CREATE_TOPIC</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSCMCreateTopicReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tFreeSCMCreateTopicReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropTopic</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropTopicStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMDropTopicReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>igNotExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name></expr>;</expr_stmt>

  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_DROP_TOPIC</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMDropTopicReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropCGroup</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropCGroupStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMDropCgroupReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>topic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>igNotExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dropReq</name><operator>.</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_DROP_CGROUP</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMDropCgroupReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateAlterLocal</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterLocalStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateExplain</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SExplainStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>analyze</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pExplainOpt</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>translateQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDescribe</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDescribeStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>refreshGetTableMeta</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateKillConnection</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SKillStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SKillConnReq</name></type> <name>killReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>killReq</name><operator>.</operator><name>connId</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>targetId</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_KILL_CONN</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSKillConnReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>killReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateKillQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SKillQueryStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SKillQueryReq</name></type> <name>killReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>killReq</name><operator>.</operator><name>queryStrId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_KILL_QUERY</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSKillQueryReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>killReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateKillTransaction</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SKillStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SKillTransReq</name></type> <name>killReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>killReq</name><operator>.</operator><name>transId</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>targetId</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_KILL_TRANS</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSKillTransReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>killReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>crossTableWithoutAggOper</name><parameter_list>(<parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasAggFuncs</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasIndefiniteRowsFunc</name></name> <operator>&amp;&amp;</operator>
         <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>hasInterpFunc</name></name> <operator>&amp;&amp;</operator> <name>TSDB_SUPER_TABLE</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>&amp;&amp;</operator>
         <operator>!</operator><call><name>hasPartitionByTbname</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>crossTableWithUdaf</name><parameter_list>(<parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pSelect</name><operator>-&gt;</operator><name>hasUdaf</name></name> <operator>&amp;&amp;</operator> <name>TSDB_SUPER_TABLE</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>&amp;&amp;</operator>
         <operator>!</operator><call><name>hasPartitionByTbname</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkCreateStream</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateStreamStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pWatermark</name></name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pWatermark</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pDelay</name></name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pDelay</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name> <operator>||</operator>
      <name>QUERY_NODE_REAL_TABLE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_STREAM_QUERY</name></expr></argument>, <argument><expr><literal type="string">"Unsupported stream query"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getSourceDatabase</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pDbFName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DB_NAME_T</name></expr>, <expr><operator>.</operator><name>acctId</name> <operator>=</operator> <name>acctId</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>pDbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getStreamQueryFirstProjectAliasName</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUserAliasSet</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>aliasName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>pUserAliasSet</name></expr></argument>, <argument><expr><literal type="string">"_wstart"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"_wstart"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>aliasName</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"_wstart"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>pUserAliasSet</name></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"ts"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>aliasName</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><call><name>taosRandStr</name><argument_list>(<argument><expr><name>aliasName</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aliasName</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>pUserAliasSet</name></expr></argument>, <argument><expr><name>aliasName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>aliasName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addWstartTsToCreateStreamQueryImpl</name><parameter_list>(<parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUserAliasSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pProj</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pWindow</name></name> <operator>||</operator>
      <operator>(</operator><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pProj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"_wstart"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pProj</name><operator>)</operator><operator>-&gt;</operator><name>functionName</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><literal type="string">"_wstart"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>getStreamQueryFirstProjectAliasName</name><argument_list>(<argument><expr><name>pUserAliasSet</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodesListPushFront</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addWstartTsToCreateStreamQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>    <name>pUserAliasSet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>checkProjectAlias</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pUserAliasSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addWstartTsToCreateStreamQueryImpl</name><argument_list>(<argument><expr><name>pSelect</name></expr></argument>, <argument><expr><name>pUserAliasSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pUserAliasSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addTagsToCreateStreamQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateStreamStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pTag</argument>, <argument>pStmt-&gt;pTags</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>   <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPart</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pPart</argument>, <argument>pSelect-&gt;pPartitionByList</argument>)</argument_list></macro> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pTag</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pPart</name><operator>)</operator><operator>-&gt;</operator><name>userAlias</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pPart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pTag</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SRewriteSubtableCxt</name> <block>{
  <decl_stmt><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type>         <name>pPartitionList</name></decl>;</decl_stmt>
}</block></struct></type> <name>SRewriteSubtableCxt</name>;</typedef>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>rewriteSubtable</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRewriteSubtableCxt</name><modifier>*</modifier></type> <name>pCxt</name> <init>= <expr><name>pContext</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                 <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>               <name>pPart</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pPart</argument>, <argument>pCxt-&gt;pPartitionList</argument>)</argument_list></macro> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pPart</name><operator>)</operator><operator>-&gt;</operator><name>userAlias</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNew</name> <init>= <expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pPart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNew</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateDealNodeErrMsg</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCxt</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addSubtableNameToCreateStreamQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateStreamStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>,
                                                  <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pSubtable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pSubtable</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pSubtable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SRewriteSubtableCxt</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>pCxt</name> <operator>=</operator> <name>pCxt</name></expr>, <expr><operator>.</operator><name>pPartitionList</name> <operator>=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesRewriteExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>, <argument><expr><name>rewriteSubtable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addSubtableInfoToCreateStreamQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateStreamStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name> <operator>||</operator> <name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pSubtable</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_STREAM_QUERY</name></expr></argument>, <argument><expr><literal type="string">"Unsupported stream query"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addTagsToCreateStreamQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addSubtableNameToCreateStreamQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkStreamQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>||</operator>
      <operator>!</operator><name><name>pSelect</name><operator>-&gt;</operator><name>isTimeLineResult</name></name> <operator>||</operator> <call><name>crossTableWithoutAggOper</name><argument_list>(<argument><expr><name>pSelect</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pOrderByList</name></name> <operator>||</operator>
      <call><name>crossTableWithUdaf</name><argument_list>(<argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_STREAM_QUERY</name></expr></argument>, <argument><expr><literal type="string">"Unsupported stream query"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pSubtable</name></name> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_VARCHAR</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pSubtable</name></name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_STREAM_QUERY</name></expr></argument>,
                                   <argument><expr><literal type="string">"SUBTABLE expression must be of VARCHAR type"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateStreamQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateStreamStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SCMCreateStreamReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>createStream</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addWstartTsToCreateStreamQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addSubtableInfoToCreateStreamQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkStreamQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>getSourceDatabase</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>sourceDB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesNodeToString</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateStreamReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateStreamStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SCMCreateStreamReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>igExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>streamName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>streamName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>targetTabName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>targetDbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>targetTabName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>targetStbFullName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>buildCreateStreamQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>sql</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>triggerType</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>triggerType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>maxDelay</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pDelay</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pDelay</name></name><operator>)</operator><operator>-&gt;</operator><name><name>datum</name><operator>.</operator><name>i</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>watermark</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pWatermark</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>pWatermark</name></name><operator>)</operator><operator>-&gt;</operator><name><name>datum</name><operator>.</operator><name>i</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>fillHistory</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>fillHistory</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>igExpired</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>ignoreExpired</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>columnDefNodeToField</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateStream</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateStreamStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCMCreateStreamReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>checkCreateStream</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCreateStreamReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_STREAM</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSCMCreateStreamReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tFreeSCMCreateStreamReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropStream</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropStreamStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMDropStreamReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>           <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>streamName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>streamName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>igNotExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_STREAM</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMDropStreamReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>readFromFile</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>filesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filesize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>filesize</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_FILE_EMPTY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>tfile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>tfile</name></expr></argument>, <argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <operator>*</operator><name>len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCreateFunction</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateFunctionStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsBuiltinFunc</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>funcName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_FUNCTION_NAME</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SCreateFuncReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>funcName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>igExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>funcType</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pStmt</name><operator>-&gt;</operator><name>isAgg</name></name></expr> ?</condition><then> <expr><name>TSDB_FUNC_TYPE_AGGREGATE</name></expr> </then><else>: <expr><name>TSDB_FUNC_TYPE_SCALAR</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>scriptType</name></name> <operator>=</operator> <name>TSDB_FUNC_SCRIPT_BIN_LIB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>outputType</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>outputDt</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>outputLen</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>outputDt</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>bufSize</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>bufSize</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>readFromFile</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>libraryPath</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>codeLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>pCode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_FUNC</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSCreateFuncReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tFreeSCreateFuncReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDropFunction</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropFunctionStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDropFuncReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>funcName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>igNotExists</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_FUNC</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSDropFuncReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateGrant</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SGrantStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAlterUserReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_ALL</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>(</operator><call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_READ</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
       <call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_WRITE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>alterType</name></name> <operator>=</operator> <name>TSDB_ALTER_USER_ADD_ALL_DB</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_READ</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>alterType</name></name> <operator>=</operator> <name>TSDB_ALTER_USER_ADD_READ_DB</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_WRITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>alterType</name></name> <operator>=</operator> <name>TSDB_ALTER_USER_ADD_WRITE_DB</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_SUBSCRIBE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>alterType</name></name> <operator>=</operator> <name>TSDB_ALTER_USER_ADD_SUBSCRIBE_TOPIC</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>userName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>objName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_ALTER_USER</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSAlterUserReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateRevoke</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SRevokeStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAlterUserReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_ALL</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>(</operator><call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_READ</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
       <call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_WRITE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>alterType</name></name> <operator>=</operator> <name>TSDB_ALTER_USER_REMOVE_ALL_DB</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_READ</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>alterType</name></name> <operator>=</operator> <name>TSDB_ALTER_USER_REMOVE_READ_DB</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_WRITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>alterType</name></name> <operator>=</operator> <name>TSDB_ALTER_USER_REMOVE_WRITE_DB</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>PRIVILEGE_TYPE_TEST_MASK</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name></expr></argument>, <argument><expr><name>PRIVILEGE_TYPE_SUBSCRIBE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>alterType</name></name> <operator>=</operator> <name>TSDB_ALTER_USER_REMOVE_SUBSCRIBE_TOPIC</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>userName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>objName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_ALTER_USER</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSAlterUserReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateBalanceVgroup</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SBalanceVgroupStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBalanceVgroupReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_BALANCE_VGROUP</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSBalanceVgroupReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateMergeVgroup</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SMergeVgroupStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergeVgroupReq</name></type> <name>req</name> <init>= <expr><block>{<expr><operator>.</operator><name>vgId1</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>vgId1</name></name></expr>, <expr><operator>.</operator><name>vgId2</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>vgId2</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_MERGE_VGROUP</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSMergeVgroupReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkDnodeIds</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SRedistributeVgroupStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfDnodes</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDnodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfDnodes</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>numOfDnodes</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_REDISTRIBUTE_VG</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pStmt-&gt;pDnodes</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId1</name></name> <operator>=</operator> <call><name>getBigintFromValueNode</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDnodes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId2</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId3</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfDnodes</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId2</name></name> <operator>=</operator> <call><name>getBigintFromValueNode</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDnodes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfDnodes</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId3</name></name> <operator>=</operator> <call><name>getBigintFromValueNode</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDnodes</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateRedistributeVgroup</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SRedistributeVgroupStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRedistributeVgroupReq</name></type> <name>req</name> <init>= <expr><block>{<expr><operator>.</operator><name>vgId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>vgId</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                <name>code</name> <init>= <expr><call><name>checkDnodeIds</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>dnodeId3</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId3</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_REDISTRIBUTE_VGROUP</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSRedistributeVgroupReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSplitVgroup</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSplitVgroupStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSplitVgroupReq</name></type> <name>req</name> <init>= <expr><block>{<expr><operator>.</operator><name>vgId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>vgId</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_SPLIT_VGROUP</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSSplitVgroupReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateShowVariables</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SShowStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowVariablesReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>buildCmdMsg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TDMT_MND_SHOW_VARIABLES</name></expr></argument>, <argument><expr><operator>(</operator><name>FSerializeFunc</name><operator>)</operator><name>tSerializeSShowVariablesReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateShowCreateDatabase</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SShowCreateDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCfg</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbCfgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pCfg</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>getDBCfg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SDbCfgInfo</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pCfg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateShowCreateTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SShowCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbCfg</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbCfgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getDBCfg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SDbCfgInfo</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableCfg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>STableCfg</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_SELECT_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateSelect</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SET_OPERATOR</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateSetOperator</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DELETE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDelete</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDeleteStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_INSERT_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateInsert</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SInsertStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_DATABASE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateCreateDatabase</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SCreateDatabaseStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_DATABASE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropDatabase</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropDatabaseStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ALTER_DATABASE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateAlterDatabase</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SAlterDatabaseStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_TRIM_DATABASE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateTrimDatabase</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>STrimDatabaseStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_TABLE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateCreateSuperTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SCreateTableStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_TABLE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropTableStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_SUPER_TABLE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropSuperTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropSuperTableStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_ALTER_SUPER_TABLE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateAlterSuperTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SAlterTableStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_USER_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateCreateUser</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SCreateUserStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ALTER_USER_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateAlterUser</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SAlterUserStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_USER_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropUser</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropUserStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_USE_DATABASE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateUseDatabase</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SUseDatabaseStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_DNODE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateCreateDnode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SCreateDnodeStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_DNODE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropDnode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropDnodeStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ALTER_DNODE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateAlterDnode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SAlterDnodeStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_INDEX_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateCreateIndex</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SCreateIndexStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_INDEX_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropIndex</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropIndexStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_QNODE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_CREATE_BNODE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_CREATE_SNODE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_CREATE_MNODE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateCreateComponentNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SCreateComponentNodeStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_QNODE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_DROP_BNODE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_DROP_SNODE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_DROP_MNODE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropComponentNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropComponentNodeStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_TOPIC_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateCreateTopic</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SCreateTopicStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_TOPIC_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropTopic</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropTopicStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_CGROUP_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropCGroup</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropCGroupStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ALTER_LOCAL_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateAlterLocal</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SAlterLocalStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_EXPLAIN_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateExplain</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SExplainStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DESCRIBE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDescribe</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDescribeStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_KILL_CONNECTION_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateKillConnection</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SKillStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_KILL_QUERY_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateKillQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SKillQueryStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_KILL_TRANSACTION_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateKillTransaction</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SKillStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_STREAM_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateCreateStream</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SCreateStreamStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_STREAM_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropStream</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropStreamStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_FUNCTION_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateCreateFunction</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SCreateFunctionStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_FUNCTION_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateDropFunction</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropFunctionStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_GRANT_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateGrant</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SGrantStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_REVOKE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateRevoke</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SRevokeStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_BALANCE_VGROUP_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateBalanceVgroup</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SBalanceVgroupStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_MERGE_VGROUP_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateMergeVgroup</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SMergeVgroupStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_REDISTRIBUTE_VGROUP_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateRedistributeVgroup</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SRedistributeVgroupStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SPLIT_VGROUP_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateSplitVgroup</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SSplitVgroupStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SHOW_VARIABLES_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateShowVariables</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SShowStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_DATABASE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateShowCreateDatabase</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SShowCreateDatabaseStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_TABLE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_STABLE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateShowCreateTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SShowCreateTableStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSubquery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ESqlClause</name></type> <name>currClause</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>     <name>pCurrStmt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>currLevel</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name> <operator>=</operator> <operator>++</operator><operator>(</operator><name><name>pCxt</name><operator>-&gt;</operator><name>levelNo</name></name><operator>)</operator></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currClause</name></name> <operator>=</operator> <name>currClause</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCurrStmt</name></name> <operator>=</operator> <name>pCurrStmt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>currLevel</name></name> <operator>=</operator> <name>currLevel</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>extractQueryResultSchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>pProjections</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>numOfCols</name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pProjections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSchema</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>numOfCols</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pProjections</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NULL</name> <operator>==</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>.</operator><name>colId</name> <operator>=</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int8_t</name></type> <name>extractResultTsPrecision</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pSelect</name><operator>-&gt;</operator><name>precision</name></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>extractExplainResultSchema</name><parameter_list>(<parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>numOfCols</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSchema</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>numOfCols</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>TSDB_EXPLAIN_RESULT_COLUMN_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>extractDescribeResultSchema</name><parameter_list>(<parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>numOfCols</name> <operator>=</operator> <name>DESCRIBE_RESULT_COLS</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSchema</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>numOfCols</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name>DESCRIBE_RESULT_FIELD_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name>DESCRIBE_RESULT_TYPE_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_INT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name>DESCRIBE_RESULT_NOTE_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"note"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>extractShowCreateDatabaseResultSchema</name><parameter_list>(<parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>numOfCols</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSchema</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>numOfCols</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_DB_NAME_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_MAX_BINARY_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Create Database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>extractShowCreateTableResultSchema</name><parameter_list>(<parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>numOfCols</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSchema</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>numOfCols</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name>SHOW_CREATE_TB_RESULT_FIELD1_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name>SHOW_CREATE_TB_RESULT_FIELD2_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Create Table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>extractShowVariablesResultSchema</name><parameter_list>(<parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>numOfCols</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSchema</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>numOfCols</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_CONFIG_OPTION_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_CONFIG_VALUE_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pSchema</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>extractResultSchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pRoot</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRoot</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_SELECT_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SET_OPERATOR</name></expr>:</case>
      <return>return <expr><call><name>extractQueryResultSchema</name><argument_list>(<argument><expr><call><name>getProjectList</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_EXPLAIN_STMT</name></expr>:</case>
      <return>return <expr><call><name>extractExplainResultSchema</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DESCRIBE_STMT</name></expr>:</case>
      <return>return <expr><call><name>extractDescribeResultSchema</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_DATABASE_STMT</name></expr>:</case>
      <return>return <expr><call><name>extractShowCreateDatabaseResultSchema</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_TABLE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_STABLE_STMT</name></expr>:</case>
      <return>return <expr><call><name>extractShowCreateTableResultSchema</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_LOCAL_VARIABLES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_VARIABLES_STMT</name></expr>:</case>
      <return>return <expr><call><name>extractShowVariablesResultSchema</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createStarCol</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createProjectCol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pProjCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pProjCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>createProjectCols</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>ncols</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>pCols</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>ncols</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pProjections</name></expr></argument>, <argument><expr><call><name>createStarCol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>pProjections</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pProjections</name></expr></argument>, <argument><expr><call><name>createProjectCol</name><argument_list>(<argument><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pProjections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>pProjections</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createSimpleSelectStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfProjs</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>pProjCol</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SELECT_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSelect</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>stmtName</name></name></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pRealTable</name> <init>= <expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_REAL_TABLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRealTable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRealTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableAlias</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfProjs</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name> <operator>=</operator> <call><name>createProjectCols</name><argument_list>(<argument><expr><name>numOfProjs</name></expr></argument>, <argument><expr><name>pProjCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pStmt</name> <operator>=</operator> <name>pSelect</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createSelectStmtForShow</name><parameter_list>(<parameter><decl><type><name>ENodeType</name></type> <name>showType</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSysTableShowAdapter</name><modifier>*</modifier></type> <name>pShow</name> <init>= <expr><operator>&amp;</operator><name><name>sysTableShowAdapter</name><index>[<expr><name>showType</name> <operator>-</operator> <name>SYSTABLE_SHOW_TYPE_OFFSET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>createSimpleSelectStmt</name><argument_list>(<argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pDbName</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pTableName</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfShowCols</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pShowCols</name></name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createSelectStmtForShowTableDist</name><parameter_list>(<parameter><decl><type><name>SShowTableDistributedStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>createSimpleSelectStmt</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createOperatorNode</name><parameter_list>(<parameter><decl><type><name>EOperatorType</name></type> <name>opType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pColName</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRight</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_OPERATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOper</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name> <operator>=</operator> <name>opType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>=</operator> <call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>, <argument><expr><name>pColName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pOp</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOper</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>getTbNameColName</name><parameter_list>(<parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>QUERY_NODE_SHOW_STABLES_STMT</name> <operator>==</operator> <name>type</name></expr> ?</condition><then> <expr><literal type="string">"stable_name"</literal></expr> </then><else>: <expr><literal type="string">"table_name"</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createLogicCondNode</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCond1</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCond2</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pCondition</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCondition</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCondition</name><operator>-&gt;</operator><name>condType</name></name> <operator>=</operator> <name>LOGIC_COND_TYPE_AND</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCondition</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCondition</name><operator>-&gt;</operator><name>pParameterList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListAppend</name><argument_list>(<argument><expr><name><name>pCondition</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>pCond1</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListAppend</name><argument_list>(<argument><expr><name><name>pCondition</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>pCond2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pCond</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCondition</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createShowCondition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SShowStmt</name><modifier>*</modifier></type> <name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pDbCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTbCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>createOperatorNode</name><argument_list>(<argument><expr><name>OP_TYPE_EQUAL</name></expr></argument>, <argument><expr><literal type="string">"db_name"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pDbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDbCond</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name>TSDB_CODE_SUCCESS</name> <operator>!=</operator>
          <call><name>createOperatorNode</name><argument_list>(<argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>tableCondType</name></name></expr></argument>, <argument><expr><call><name>getTbNameColName</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pShow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pTbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTbCond</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pDbCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pTbCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pDbCond</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pTbCond</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>createLogicCondNode</name><argument_list>(<argument><expr><name>pDbCond</name></expr></argument>, <argument><expr><name>pTbCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pDbCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pTbCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWhere</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>==</operator> <name>pDbCond</name></expr> ?</condition><then> <expr><name>pTbCond</name></expr> </then><else>: <expr><name>pDbCond</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pShow</name><operator>-&gt;</operator><name>pDbName</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name>qualDbName</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pShow</name><operator>-&gt;</operator><name>pDbName</name></name><operator>)</operator><operator>-&gt;</operator><name>literal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteShow</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>createSelectStmtForShow</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createShowCondition</name><argument_list>(<argument><expr><operator>(</operator><name>SShowStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkShowVgroups</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SShowStmt</name><modifier>*</modifier></type> <name>pShow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// just to verify whether the database exists</comment>
  <decl_stmt><decl><type><name>SDbCfgInfo</name></type> <name>dbCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>getDBCfg</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pShow</name><operator>-&gt;</operator><name>pDbName</name></name><operator>)</operator><operator>-&gt;</operator><name>literal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteShowVgroups</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>checkShowVgroups</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SShowStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteShow</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createTagsFunction</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><literal type="string">"_tags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createShowTableTagsProjections</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pProjections</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>*</operator><name>pTags</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><operator>*</operator><name>pProjections</name></expr></argument>, <argument><expr><operator>*</operator><name>pTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><name>pProjections</name></expr></argument>, <argument><expr><call><name>createTbnameFunction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><operator>*</operator><name>pProjections</name></expr></argument>, <argument><expr><call><name>createTagsFunction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteShowStableTags</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowTableTagsStmt</name><modifier>*</modifier></type> <name>pShow</name> <init>= <expr><operator>(</operator><name>SShowTableTagsStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type>        <name>pSelect</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createSimpleSelectStmt</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pShow</name><operator>-&gt;</operator><name>pDbName</name></name><operator>)</operator><operator>-&gt;</operator><name>literal</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pShow</name><operator>-&gt;</operator><name>pTbName</name></name><operator>)</operator><operator>-&gt;</operator><name>literal</name></expr></argument>,
                                        <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createShowTableTagsProjections</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pShow</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>tagScan</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteShowDnodeVariables</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowDnodeVariablesStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SShowDnodeVariablesStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>                   <name>pDnodeCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>                   <name>pLikeCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type>             <name>pSelect</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                  <name>code</name> <init>= <expr><call><name>createSelectStmtForShow</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createOperatorNode</name><argument_list>(<argument><expr><name>OP_TYPE_EQUAL</name></expr></argument>, <argument><expr><literal type="string">"dnode_id"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDnodeId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDnodeCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createOperatorNode</name><argument_list>(<argument><expr><name>OP_TYPE_LIKE</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pLikePattern</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pLikeCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pLikeCond</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createLogicCondNode</name><argument_list>(<argument><expr><name>pDnodeCond</name></expr></argument>, <argument><expr><name>pLikeCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWhere</name></name> <operator>=</operator> <name>pDnodeCond</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSelect</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteShowVnodes</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowVnodesStmt</name><modifier>*</modifier></type> <name>pShow</name> <init>= <expr><operator>(</operator><name>SShowVnodesStmt</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type>     <name>pStmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>createSelectStmtForShow</name><argument_list>(<argument><expr><name>QUERY_NODE_SHOW_VNODES_STMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pShow</name><operator>-&gt;</operator><name>pDnodeId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createOperatorNode</name><argument_list>(<argument><expr><name>OP_TYPE_EQUAL</name></expr></argument>, <argument><expr><literal type="string">"dnode_id"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pDnodeId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createOperatorNode</name><argument_list>(<argument><expr><name>OP_TYPE_EQUAL</name></expr></argument>, <argument><expr><literal type="string">"dnode_ep"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pDnodeEndpoint</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createBlockDistInfoFunc</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><literal type="string">"_block_dist_info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><literal type="string">"_block_dist_info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createBlockDistFunc</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><literal type="string">"_block_dist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><literal type="string">"_block_dist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><call><name>createBlockDistInfoFunc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteShowTableDist</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>createSelectStmtForShowTableDist</name><argument_list>(<argument><expr><operator>(</operator><name>SShowTableDistributedStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>NODES_DESTORY_LIST</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><call><name>createBlockDistFunc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SVgroupCreateTableBatch</name> <block>{
  <decl_stmt><decl><type><name>SVCreateTbBatchReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type>        <name>info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>dbName</name><index>[<expr><name>TSDB_DB_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SVgroupCreateTableBatch</name>;</typedef>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildNormalTableBatchReq</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgroupInfo</name></decl></parameter>,
                                        <parameter><decl><type><name>SVgroupCreateTableBatch</name><modifier>*</modifier></type> <name>pBatch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>  <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DB_NAME_T</name></expr>, <expr><operator>.</operator><name>acctId</name> <operator>=</operator> <name>acctId</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVCreateTbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TD_NORMAL_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>commentNull</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>req</name><operator>.</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ntb</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ntb</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ntb</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>ntb</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>req</name><operator>.</operator><name>name</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>req</name><operator>.</operator><name>ntb</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TD_CREATE_IF_NOT_EXISTS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>   <name>pCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>col_id_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pCol</argument>, <argument>pStmt-&gt;pCols</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>toSchema</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>ntb</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name></name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><name><name>pBatch</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>pVgroupInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SVCreateTbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>serializeVgroupCreateTableBatch</name><parameter_list>(<parameter><decl><type><name>SVgroupCreateTableBatch</name><modifier>*</modifier></type> <name>pTbBatch</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>      <name>tlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVCreateTbBatchReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pTbBatch</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>contLen</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>tlen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSVCreateTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>pVgData</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVgData</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>vg</name></name> <operator>=</operator> <name><name>pTbBatch</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>tlen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pBufArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyCreateTbReqBatch</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupCreateTableBatch</name><modifier>*</modifier></type> <name>pTbBatch</name> <init>= <expr><operator>(</operator><name>SVgroupCreateTableBatch</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>                   <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type> <name>pTableReq</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><name>pTableReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>rewriteToVnodeModifyOpStmt</name><parameter_list>(<parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pNewStmt</name> <init>= <expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VNODE_MODIF_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNewStmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pNewStmt</name><operator>-&gt;</operator><name>sqlNodeType</name></name> <operator>=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewStmt</name><operator>-&gt;</operator><name>pDataBlocks</name></name> <operator>=</operator> <name>pBufArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pNewStmt</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyCreateTbReqArray</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pVg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateTableDataBlock</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVgroupInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                         <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBufArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pBufArray</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pBufArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVgroupCreateTableBatch</name></type> <name>tbatch</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                 <name>code</name> <init>= <expr><call><name>buildNormalTableBatchReq</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>serializeVgroupCreateTableBatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tbatch</name></expr></argument>, <argument><expr><operator>*</operator><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>destroyCreateTbReqBatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tbatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyCreateTbReqArray</name><argument_list>(<argument><expr><operator>*</operator><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteCreateTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateTableStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>checkCreateTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>       <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableHashVgroupImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCreateTableDataBlock</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteToVnodeModifyOpStmt</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>destroyCreateTbReqArray</name><argument_list>(<argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addCreateTbReqIntoVgroup</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgroupHashmap</name></decl></parameter>, <parameter><decl><type><name>SCreateSubTableClause</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>STag</name><modifier>*</modifier></type> <name>pTag</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sTableNmae</name></decl></parameter>, <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgInfo</name></decl></parameter>,
                                     <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tagNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//  char  dbFName[TSDB_DB_FNAME_LEN] = {0};</comment>
  <comment type="line">//  SName name = {.type = TSDB_DB_NAME_T, .acctId = acctId};</comment>
  <comment type="line">//  strcpy(name.dbname, pStmt-&gt;dbName);</comment>
  <comment type="line">//  tNameGetFullDbName(&amp;name, dbFName);</comment>

  <decl_stmt><decl><type><name><name>struct</name> <name>SVCreateTbReq</name></name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TD_CHILD_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>commentNull</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagNum</name></name> <operator>=</operator> <name>tagNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>stbName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>sTableNmae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>pTag</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pTag</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TD_CREATE_IF_NOT_EXISTS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVgroupCreateTableBatch</name><modifier>*</modifier></type> <name>pTableBatch</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTableBatch</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgroupCreateTableBatch</name></type> <name>tBatch</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tBatch</name><operator>.</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>pVgInfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>tBatch</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tBatch</name><operator>.</operator><name>req</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SVCreateTbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>tBatch</name><operator>.</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>tBatch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// add to the correct vgroup</comment>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTableBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SDataType</name></type> <name>schemaToDataType</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataType</name></type> <name>dt</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>, <expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>, <expr><operator>.</operator><name>precision</name> <operator>=</operator> <name>precision</name></expr>, <expr><operator>.</operator><name>scale</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>dt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createCastFuncForTag</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCast</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pExpr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translateExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createCastFunc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>, <argument><expr><name>pCast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createTagValFromExpr</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>targetDt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pCast</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createCastFuncForTag</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>targetDt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pNew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scalarCalculateConstants</name><argument_list>(<argument><expr><name>pCast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pCast</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pCast</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pCast</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pCast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createTagValFromVal</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>targetDt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pTempVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTempVal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValueImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTempVal</name></expr></argument>, <argument><expr><name>targetDt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pTempVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>pTempVal</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createTagVal</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>,
                            <parameter><decl><type><name>SValueNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>createTagValFromVal</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>schemaToDataType</name><argument_list>(<argument><expr><name>precision</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>createTagValFromExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>schemaToDataType</name><argument_list>(<argument><expr><name>precision</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildJsonTagVal</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagSchema</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagArray</name></decl></parameter>,
                               <parameter><decl><type><name>STag</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>TSDB_MAX_JSON_TAG_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"json string too long than 4095"</literal></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>parseJsontoTagData</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><name>ppTag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildNormalTagVal</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagSchema</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>nodeVal</name> <init>= <expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STagVal</name></type> <name>val</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <comment type="line">//    strcpy(val.colName, pTagSchema-&gt;name);</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name>nodeVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name>nodeVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>i64</name></name></expr></argument>, <argument><expr><name>nodeVal</name></expr></argument>, <argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildKVRowForBindTags</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateSubTableClause</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pSuperTableMeta</name></decl></parameter>,
                                     <parameter><decl><type><name>STag</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppTag</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTags</name> <init>= <expr><call><name>getNumOfTags</name><argument_list>(<argument><expr><name>pSuperTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pValsOfTags</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSpecificTags</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name>numOfTags</name> <operator>&lt;</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pValsOfTags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_TAGS_NOT_MATCHED</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pValsOfTags</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTagArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>       <name>isJson</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pVals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type>    <name>pTag</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FORBOTH</name><argument_list>(<argument>pTag</argument>, <argument>pStmt-&gt;pSpecificTags</argument>, <argument>pNode</argument>, <argument>pStmt-&gt;pValsOfTags</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pTag</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type>     <name>pSchema</name> <init>= <expr><call><name>getTagSchema</name><argument_list>(<argument><expr><name>pSuperTableMeta</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSchema</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_TAG_NAME</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createTagVal</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSuperTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>isJson</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildJsonTagVal</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><name>ppTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildNormalTagVal</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pTagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pVals</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tTagNew</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ppTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildKVRowForAllTags</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateSubTableClause</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pSuperTableMeta</name></decl></parameter>,
                                    <parameter><decl><type><name>STag</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppTag</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>getNumOfTags</name><argument_list>(<argument><expr><name>pSuperTableMeta</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pValsOfTags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_TAGS_NOT_MATCHED</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pValsOfTags</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTagArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>       <name>isJson</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type>   <name>pTagSchemas</name> <init>= <expr><call><name>getTableTagSchema</name><argument_list>(<argument><expr><name>pSuperTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pVals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>     <name>pNode</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pStmt-&gt;pValsOfTags</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type>    <name>pTagSchema</name> <init>= <expr><name>pTagSchemas</name> <operator>+</operator> <name>index</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createTagVal</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSuperTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><name>pTagSchema</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>isJson</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildJsonTagVal</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTagSchema</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><name>ppTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pVal</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>tmpVal</name> <init>= <expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>STagVal</name></type> <name>val</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <comment type="line">//        strcpy(val.colName, pTagSchema-&gt;name);</comment>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>val</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>i64</name></name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>, <argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pVals</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tTagNew</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ppTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkCreateSubTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateSubTableClause</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useDbName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_CORRESPONDING_STABLE_ERR</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_IDENTIFIER_NAME</name></expr></argument>,
                                   <argument><expr><literal type="string">"The table name cannot contain '.'"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteCreateSubTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCreateSubTableClause</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgroupHashmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>checkCreateSubTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pSuperTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMeta</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useDbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSuperTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type>   <name>pTag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pSpecificTags</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildKVRowForBindTags</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pSuperTableMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>, <argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildKVRowForAllTags</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pSuperTableMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>, <argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableHashVgroup</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>addCreateTbReqIntoVgroup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTag</name></expr></argument>, <argument><expr><name><name>pSuperTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
                             <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>tagName</name></expr></argument>, <argument><expr><name><name>pSuperTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pSuperTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>serializeVgroupsCreateTableBatch</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgroupHashmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBufArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>                  <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupCreateTableBatch</name><modifier>*</modifier></type> <name>pTbBatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>pTbBatch</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><name>pTbBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTbBatch</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>serializeVgroupCreateTableBatch</name><argument_list>(<argument><expr><name>pTbBatch</name></expr></argument>, <argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

  <return>return <expr><name>pBufArray</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteCreateMultiTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCreateMultiTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateMultiTableStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgroupHashmap</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVgroupHashmap</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><name>destroyCreateTbReqBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pNode</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pStmt-&gt;pSubTables</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SCreateSubTableClause</name><modifier>*</modifier></type> <name>pClause</name> <init>= <expr><operator>(</operator><name>SCreateSubTableClause</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteCreateSubTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pClause</name></expr></argument>, <argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name> <init>= <expr><call><name>serializeVgroupsCreateTableBatch</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBufArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>rewriteToVnodeModifyOpStmt</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SVgroupDropTableBatch</name> <block>{
  <decl_stmt><decl><type><name>SVDropTbBatchReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type>      <name>info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>             <name><name>dbName</name><index>[<expr><name>TSDB_DB_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SVgroupDropTableBatch</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addDropTbReqIntoVgroup</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgroupHashmap</name></decl></parameter>, <parameter><decl><type><name>SDropTableClause</name><modifier>*</modifier></type> <name>pClause</name></decl></parameter>, <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgInfo</name></decl></parameter>,
                                   <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVDropTbReq</name></type>            <name>req</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <name><name>pClause</name><operator>-&gt;</operator><name>tableName</name></name></expr>, <expr><operator>.</operator><name>suid</name> <operator>=</operator> <name>suid</name></expr>, <expr><operator>.</operator><name>igNotExists</name> <operator>=</operator> <name><name>pClause</name><operator>-&gt;</operator><name>ignoreNotExists</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupDropTableBatch</name><modifier>*</modifier></type> <name>pTableBatch</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTableBatch</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgroupDropTableBatch</name></type> <name>tBatch</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tBatch</name><operator>.</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>pVgInfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tBatch</name><operator>.</operator><name>req</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TARRAY_MIN_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVDropTbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>tBatch</name><operator>.</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>tBatch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// add to the correct vgroup</comment>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTableBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildDropTableVgroupHashmap</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropTableClause</name><modifier>*</modifier></type> <name>pClause</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pIsSuperTable</name></decl></parameter>,
                                           <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgroupHashmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pClause</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pClause</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>getTableMetaImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pIsSuperTable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <goto>goto <name>over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>pClause</name><operator>-&gt;</operator><name>ignoreNotExists</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
    <goto>goto <name>over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pIsSuperTable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableHashVgroup</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pClause</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pClause</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>addDropTbReqIntoVgroup</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><name>pClause</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>over</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyDropTbReqBatch</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupDropTableBatch</name><modifier>*</modifier></type> <name>pTbBatch</name> <init>= <expr><operator>(</operator><name>SVgroupDropTableBatch</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>serializeVgroupDropTableBatch</name><parameter_list>(<parameter><decl><type><name>SVgroupDropTableBatch</name><modifier>*</modifier></type> <name>pTbBatch</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>      <name>tlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVDropTbBatchReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pTbBatch</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>contLen</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>tlen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSVDropTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>pVgData</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVgData</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>vg</name></name> <operator>=</operator> <name><name>pTbBatch</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>tlen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pBufArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>serializeVgroupsDropTableBatch</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgroupHashmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBufArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>                <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupDropTableBatch</name><modifier>*</modifier></type> <name>pTbBatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>pTbBatch</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><name>pTbBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTbBatch</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>serializeVgroupDropTableBatch</name><argument_list>(<argument><expr><name>pTbBatch</name></expr></argument>, <argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

  <return>return <expr><name>pBufArray</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteDropTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDropTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropTableStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgroupHashmap</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVgroupHashmap</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><name>destroyDropTbReqBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type>   <name>isSuperTable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pStmt-&gt;pTables</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>buildDropTableVgroupHashmap</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropTableClause</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isSuperTable</name></expr></argument>, <argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>isSuperTable</name> <operator>&amp;&amp;</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DROP_STABLE</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>isSuperTable</name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name> <init>= <expr><call><name>serializeVgroupsDropTableBatch</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBufArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>rewriteToVnodeModifyOpStmt</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildUpdateTagValReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>,
                                    <parameter><decl><type><name>SVAlterTbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>getTagSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSchema</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr></argument>, <argument><expr><literal type="string">"Invalid tag name: %s"</literal></expr></argument>,
                                   <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>tagName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>tagName</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataType</name></type> <name>targetDt</name> <init>= <expr><call><name>schemaToDataType</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>createTagValFromExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>targetDt</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name></name> <operator>=</operator> <name>pVal</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>DEAL_RES_ERROR</name> <operator>==</operator> <call><name>translateValueImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><name>targetDt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>tagType</name></name> <operator>=</operator> <name><name>targetDt</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>targetDt</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name><operator>-&gt;</operator><name>literal</name></name> <operator>&amp;&amp;</operator>
        <call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>TSDB_MAX_JSON_TAG_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"json string too long than 4095"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagVals</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type>   <name>pTag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseJsontoTagData</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>nTagVal</name></name> <operator>=</operator> <name><name>pTag</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTagVal</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pTag</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pTag</name></expr>;</expr_stmt>  <comment type="line">// for free</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name><operator>-&gt;</operator><name>isNull</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>nTagVal</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTagVal</name></name> <operator>=</operator> <call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// data and length are seperated for new tag format STagVal</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>nTagVal</name></name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTagVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTagVal</name></name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTagVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildAddColReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>,
                              <parameter><decl><type><name>SVAlterTbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>getColSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_DUPLICATED_COLUMN</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_MAX_COLUMNS</name> <operator>==</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_TOO_MANY_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>rowSize</name></name> <operator>+</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_MAX_BYTES_PER_ROW</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ROW_LENGTH</name></expr></argument>, <argument><expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>colName</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>COL_SMA_ON</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildDropColReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>,
                               <parameter><decl><type><name>SVAlterTbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <call><name>getNumOfColumns</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_DROP_COL</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>getColSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSchema</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_CANNOT_DROP_PRIMARY_KEY</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>colName</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildUpdateColReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>,
                                 <parameter><decl><type><name>SVAlterTbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colModBytes</name></name> <operator>=</operator> <call><name>calcTypeBytes</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colModType</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>getColSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSchema</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>||</operator>
             <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>colModBytes</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_MODIFY_COL</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>rowSize</name></name> <operator>+</operator> <name><name>pReq</name><operator>-&gt;</operator><name>colModBytes</name></name> <operator>-</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;</operator> <name>TSDB_MAX_BYTES_PER_ROW</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ROW_LENGTH</name></expr></argument>, <argument><expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>colName</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildRenameColReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>,
                                 <parameter><decl><type><name>SVAlterTbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>getColSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>getColSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>newColName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_DUPLICATED_COLUMN</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>colNewName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>newColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>colName</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>colNewName</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildUpdateOptionsReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SVAlterTbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>ttl</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>updateTTL</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>newTTL</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>commentNull</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>newComment</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>newComment</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>newCommentLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>newComment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>newCommentLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildAlterTbReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>,
                               <parameter><decl><type><name>SVAlterTbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>tbName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pReq</name><operator>-&gt;</operator><name>tbName</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_TAG</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_TAG</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_NAME</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_BYTES</name></expr>:</case>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_VAL</name></expr>:</case>
      <return>return <expr><call><name>buildUpdateTagValReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_COLUMN</name></expr>:</case>
      <return>return <expr><call><name>buildAddColReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_COLUMN</name></expr>:</case>
      <return>return <expr><call><name>buildDropColReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_BYTES</name></expr>:</case>
      <return>return <expr><call><name>buildUpdateColReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_OPTIONS</name></expr>:</case>
      <return>return <expr><call><name>buildUpdateOptionsReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_NAME</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CHILD_TABLE</name> <operator>==</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>buildRenameColReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>serializeAlterTbReq</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SVAlterTbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>,
                                   <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>getTableHashVgroup</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVAlterTbReq</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMsg</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>pMsg</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>pMsg</name><operator>)</operator><operator>-&gt;</operator><name>contLen</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>pBuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SEncoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>tlen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncodeSVAlterTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>pVgData</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVgData</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>vg</name></name> <operator>=</operator> <name>vg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>pMsg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>tlen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildModifyVnodeArray</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SVAlterTbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>,
                                     <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTmpArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTmpArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>serializeAlterTbReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pTmpArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pArray</name> <operator>=</operator> <name>pTmpArray</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTmpArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destoryAlterTbReq</name><parameter_list>(<parameter><decl><type><name>SVAlterTbReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>colNewName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>newComment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteAlterTableImpl</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>,
                                     <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>getNumOfTags</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_TABLE_DROP_TAG</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TSDB_CHILD_TABLE</name> <operator>!=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>&amp;&amp;</operator> <name>TSDB_NORMAL_TABLE</name> <operator>!=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVAlterTbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>buildAlterTbReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildModifyVnodeArray</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteToVnodeModifyOpStmt</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>destoryAlterTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteAlterTable</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SAlterTableStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_TABLE_ADD_COLUMN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COL_JSON</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>getTableMeta</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteAlterTableImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>serializeFlushVgroup</name><parameter_list>(<parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVg</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>contLen</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>pVgData</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVgData</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>vg</name></name> <operator>=</operator> <operator>*</operator><name>pVg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pBufArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>serializeFlushDb</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVgs</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVgs</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfVgs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBufArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfVgs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>serializeFlushVgroup</name><argument_list>(<argument><expr><operator>(</operator><name>SVgroupInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pBufArray</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteFlushDatabase</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFlushDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SFlushDatabaseStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVgs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getDBVgInfo</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>serializeFlushDb</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteToVnodeModifyOpStmt</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_SHOW_LICENCES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_DATABASES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_TABLES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_STABLES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_USERS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_DNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_MNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_MODULES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_QNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_FUNCTIONS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_INDEXES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_STREAMS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_BNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_SNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CONNECTIONS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_QUERIES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CLUSTER_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_TOPICS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_TRANSACTIONS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_APPS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CONSUMERS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_SUBSCRIPTIONS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_TAGS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_USER_PRIVILEGES_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteShow</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SHOW_VGROUPS_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteShowVgroups</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SHOW_TABLE_TAGS_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteShowStableTags</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SHOW_DNODE_VARIABLES_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteShowDnodeVariables</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SHOW_VNODES_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteShowVnodes</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SHOW_TABLE_DISTRIBUTED_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteShowTableDist</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_TABLE_STMT</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SCreateTableStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name><operator>)</operator><operator>-&gt;</operator><name>pTags</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteCreateTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_MULTI_TABLE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteCreateMultiTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DROP_TABLE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteDropTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteAlterTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_FLUSH_DATABASE_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteFlushDatabase</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>toMsgType</name><parameter_list>(<parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_CREATE_TABLE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_VND_CREATE_TABLE</name></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_VND_ALTER_TABLE</name></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_TABLE_STMT</name></expr>:</case>
      <return>return <expr><name>TDMT_VND_DROP_TABLE</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>TDMT_VND_CREATE_TABLE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setRefreshMate</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pDbList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pDbList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pDbList</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SFullDatabaseName</name><modifier>*</modifier></type> <name>pDb</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pDb</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pDbList</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>fullDbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pDbs</name></name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pTableList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pTableList</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTable</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTable</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pTargetTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pTargetTableList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pTargetTableList</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTable</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pTargetTableList</name></name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTable</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTargetTables</name></name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setQuery</name><parameter_list>(<parameter><decl><type><name>STranslateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_SELECT_STMT</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_LOCAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    <case>case <expr><name>QUERY_NODE_SET_OPERATOR</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_EXPLAIN_STMT</name></expr>:</case>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SCH_QUERY</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DELETE_STMT</name></expr>:</case>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_DELETE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_INSERT_STMT</name></expr>:</case>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_VNODE_MODIF_STMT</name></expr>:</case>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <call><name>toMsgType</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name><operator>)</operator><operator>-&gt;</operator><name>sqlNodeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DESCRIBE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_DATABASE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_TABLE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_STABLE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_LOCAL_VARIABLES_STMT</name></expr>:</case>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_LOCAL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_RESET_QUERY_CACHE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_ALTER_LOCAL_STMT</name></expr>:</case>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_LOCAL</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SHOW_VARIABLES_STMT</name></expr>:</case>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_RPC</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_RPC</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>stableQuery</name></name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>stableQuery</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pResSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>extractResultSchema</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pQuery</name><operator>-&gt;</operator><name>numOfResCols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pResSchema</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_SELECT_STMT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <call><name>extractResultTsPrecision</name><argument_list>(<argument><expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>translate</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParseCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STranslateContext</name></type> <name>cxt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initTranslateContext</name><argument_list>(<argument><expr><name>pParseCxt</name></expr></argument>, <argument><expr><name>pMetaCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteQuery</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translateQuery</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setQuery</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>setRefreshMate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyTranslateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
