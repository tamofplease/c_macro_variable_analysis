<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/parser/src/parInsertSql.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parInsertUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parToken.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_TOKEN_WITH_PREV</name><parameter_list>(<parameter><type><name>pSql</name></type></parameter>, <parameter><type><name>token</name></type></parameter>)</parameter_list></cpp:macro>     \
  <cpp:value>do {                                        \
    int32_t index = 0;                        \
    token = tStrGetToken(pSql, &amp;index, true); \
    pSql += index;                            \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_TOKEN_KEEP_SQL</name><parameter_list>(<parameter><type><name>pSql</name></type></parameter>, <parameter><type><name>token</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                          \
    token = tStrGetToken(pSql, &amp;index, false);  \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_VALID_TOKEN</name><parameter_list>(<parameter><type><name>pSql</name></type></parameter>, <parameter><type><name>token</name></type></parameter>)</parameter_list></cpp:macro>           \
  <cpp:value>do {                                          \
    (token).n = tGetToken(pSql, &amp;(token).type); \
    (token).z = (char*)pSql;                    \
    pSql += (token).n;                          \
  } while (TK_NK_SPACE == (token).type)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SInsertParseContext</name> <block>{
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type>     <name>pComCxt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgBuf</name></type>            <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>tmpTokenBuf</name><index>[<expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SParsedDataColInfo</name></type> <name>tags</name></decl>;</decl_stmt>  <comment type="line">// for stmt</comment>
  <decl_stmt><decl><type><name>bool</name></type>               <name>missCache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>usingDuplicateTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>forceUpdate</name></decl>;</decl_stmt>
}</block></struct></type> <name>SInsertParseContext</name>;</typedef>

<typedef>typedef <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>_row_append_fn_t</name>)<parameter_list>(<parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pMsgBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>TRUE_VALUE</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>TSDB_TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>FALSE_VALUE</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>TSDB_FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isNullStr</name><parameter_list>(<parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_STRING</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>TSDB_DATA_NULL_STR_L</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pToken</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>(</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>TSDB_DATA_NULL_STR_L</name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isNullValue</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>TK_NULL</name> <operator>==</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isNullStr</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>toDouble</name><parameter_list>(<parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>endPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>taosStr2Double</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>endPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// not a valid integer number, return error</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>endPtr</name> <operator>-</operator> <name><name>pToken</name><operator>-&gt;</operator><name>z</name></name><operator>)</operator> <operator>!=</operator> <name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TK_NK_ILLEGAL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>skipInsertInto</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSql</name></decl></parameter>, <parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SToken</name></type> <name>token</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_INSERT</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>TK_IMPORT</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"keyword INSERT is expected"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_INTO</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"keyword INTO is expected"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>skipParentheses</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SToken</name></type>  <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>expectRightParenthesis</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TK_NK_LP</name> <operator>==</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>expectRightParenthesis</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TK_NK_RP</name> <operator>==</operator> <name><name>token</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <operator>--</operator><name>expectRightParenthesis</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>token</name><operator>.</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">") expected"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>skipTableOptions</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SToken</name></type>  <name>token</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NEXT_TOKEN_KEEP_SQL</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TK_TTL</name> <operator>==</operator> <name><name>token</name><operator>.</operator><name>type</name></name> <operator>||</operator> <name>TK_COMMENT</name> <operator>==</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pSql</name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NEXT_TOKEN_WITH_PREV</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// pSql -&gt; stb_name [(tag1_name, ...)] TAGS (tag1_value, ...)</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>ignoreUsingClause</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SToken</name></type>  <name>token</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_NK_LP</name> <operator>==</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>skipParentheses</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pSql -&gt; TAGS (tag1_value, ...)</comment>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TK_TAGS</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"TAGS is expected"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TK_NK_LP</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"( is expected"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>skipParentheses</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>skipTableOptions</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseDuplicateUsingClause</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pDuplicate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pDuplicate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSubTableHashObj</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pMeta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDuplicate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>ignoreUsingClause</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>cloneTableMeta</name><argument_list>(<argument><expr><operator>*</operator><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// pStmt-&gt;pSql -&gt; field1_name, ...)</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseBoundColumns</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSql</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTags</name></decl></parameter>,
                                 <parameter><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>pColList</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>col_id_t</name></type> <name>nCols</name> <init>= <expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundNullLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>col_id_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>col_id_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valStat</name> <operator>=</operator> <name>VAL_STAT_NONE</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SToken</name></type>   <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>isOrdered</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>col_id_t</name></type> <name>lastColIdx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// last column found</comment>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>TK_NK_RP</name> <operator>==</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>tmpTokenBuf</name><index>[<expr><name>TSDB_COL_NAME_LEN</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>  <comment type="line">// used for deleting Escape character backstick(`)</comment>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>tmpTokenBuf</name></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>token</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>tmpTokenBuf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>token</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>strdequote</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>col_id_t</name></type> <name>t</name> <init>= <expr><name>lastColIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>col_id_t</name></type> <name>index</name> <init>= <expr><call><name>insFindCol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>nCols</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>index</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>t</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>insFindCol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>isOrdered</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColList</name><operator>-&gt;</operator><name>cols</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>valStat</name> <operator>==</operator> <name>VAL_STAT_HAS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"duplicated column name"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastColIdx</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>cols</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>valStat</name> <operator>=</operator> <name>VAL_STAT_HAS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>pSchema</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
        <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundNullLen</name></name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>CHAR_BYTES</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
        <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundNullLen</name></name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>TSDB_NCHAR_SIZE</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundNullLen</name></name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pSchema</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isTags</name> <operator>&amp;&amp;</operator> <name><name>pColList</name><operator>-&gt;</operator><name>cols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valStat</name> <operator>==</operator> <name>VAL_STAT_NONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"primary timestamp column can not be null"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>orderStatus</name></name> <operator>=</operator> <ternary><condition><expr><name>isOrdered</name></expr> ?</condition><then> <expr><name>ORDER_STATUS_ORDERED</name></expr> </then><else>: <expr><name>ORDER_STATUS_DISORDERED</name></expr></else></ternary></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isOrdered</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>colIdxInfo</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBoundIdxInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pColList</name><operator>-&gt;</operator><name>colIdxInfo</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SBoundIdxInfo</name><modifier>*</modifier></type> <name>pColIdx</name> <init>= <expr><name><name>pColList</name><operator>-&gt;</operator><name>colIdxInfo</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>col_id_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pColIdx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>schemaColIdx</name> <operator>=</operator> <name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColIdx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>boundIdx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name>pColIdx</name></expr></argument>, <argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBoundIdxInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>insSchemaIdxCompar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>col_id_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pColIdx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>finalIdx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name>pColIdx</name></expr></argument>, <argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBoundIdxInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>insBoundIdxCompar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>&gt;</operator> <name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
           <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>col_id_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pColList</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parseTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pMsgBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>interval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTokenEnd</name> <init>= <expr><operator>*</operator><name>end</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NOW</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>taosGetTimestamp</name><argument_list>(<argument><expr><name>timePrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_TODAY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>taosGetTimestampToday</name><argument_list>(<argument><expr><name>timePrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_INTEGER</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid timestamp format"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// parse the RFC-3339/ISO-8601 timestamp format string</comment>
    <if_stmt><if>if <condition>(<expr><call><name>taosParseTime</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>, <argument><expr><name>tsDaylight</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid timestamp format"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</init> <condition><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>pToken</name><operator>-&gt;</operator><name>z</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>pToken</name><operator>-&gt;</operator><name>z</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// for insert NOW()/TODAY()</comment>
      <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>pTokenEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>z</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>pTokenEnd</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>time</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <break>break;</break>
  </block_content>}</block></for>

  <comment type="block">/*
   * time expression:
   * e.g., now+12a, now-5h
   */</comment>
  <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SToken</name></type> <name>token</name> <init>= <expr><call><name>tStrGetToken</name><argument_list>(<argument><expr><name>pTokenEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pTokenEnd</name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_MINUS</name> <operator>||</operator> <name><name>token</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_PLUS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SToken</name></type> <name>valueToken</name> <init>= <expr><call><name>tStrGetToken</name><argument_list>(<argument><expr><name>pTokenEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pTokenEnd</name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>valueToken</name><operator>.</operator><name>n</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"value expected in timestamp"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name>unit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>parseAbsoluteDuration</name><argument_list>(<argument><expr><name><name>valueToken</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>valueToken</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unit</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_PLUS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ts</name> <operator>+=</operator> <name>interval</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ts</name> <operator>=</operator> <name>ts</name> <operator>-</operator> <name>interval</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>pTokenEnd</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>time</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseTagToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>STagVal</name><modifier>*</modifier></type> <name>val</name></decl></parameter>,
                             <parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pMsgBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>iv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>endptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>isNullValue</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"primary timestamp should not be null"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  strcpy(val-&gt;colName, pSchema-&gt;name);</comment>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_BOOL</name> <operator>||</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_STRING</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>TRUE_VALUE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>FALSE_VALUE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid bool data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_INTEGER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>taosStr2Int64</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FALSE_VALUE</name></expr> </then><else>: <expr><name>TRUE_VALUE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_FLOAT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>taosStr2Double</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FALSE_VALUE</name></expr> </then><else>: <expr><name>TRUE_VALUE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid bool data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid tinyint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IS_VALID_TINYINT</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"tinyint data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid unsigned tinyint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uv</name> <operator>&gt;</operator> <name>UINT8_MAX</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"unsigned tinyint data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>uv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid smallint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IS_VALID_SMALLINT</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"smallint data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid unsigned smallint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uv</name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"unsigned smallint data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>uv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid int data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IS_VALID_INT</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"int data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid unsigned int data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uv</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"unsigned int data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>uv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid bigint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>i64</name></name> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid unsigned bigint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>uv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>dv</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TK_NK_ILLEGAL</name> <operator>==</operator> <call><name>toDouble</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"illegal float data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>dv</name> <operator>==</operator> <name>HUGE_VAL</name> <operator>||</operator> <name>dv</name> <operator>==</operator> <operator>-</operator><name>HUGE_VAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator> <operator>||</operator> <name>dv</name> <operator>&gt;</operator> <name>FLT_MAX</name> <operator>||</operator> <name>dv</name> <operator>&lt;</operator> <operator>-</operator><name>FLT_MAX</name> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call> <operator>||</operator>
          <call><name>isnan</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"illegal float data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>dv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>dv</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TK_NK_ILLEGAL</name> <operator>==</operator> <call><name>toDouble</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"illegal double data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>dv</name> <operator>==</operator> <name>HUGE_VAL</name> <operator>||</operator> <name>dv</name> <operator>==</operator> <operator>-</operator><name>HUGE_VAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"illegal double data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator> <operator>=</operator> <name>dv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case> <block>{<block_content>
      <comment type="line">// Too long values will raise the invalid sql error message</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>&gt;</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_VALUE_TOO_LONG</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosMbsToUcs4</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>E2BIG</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_VALUE_TOO_LONG</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" taosMbsToUcs4 error:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>parseTime</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv</name></expr></argument>, <argument><expr><name>pMsgBuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid timestamp"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>i64</name></name> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input pStmt-&gt;pSql:  [(tag1_name, ...)] TAGS (tag1_value, ...) ...</comment>
<comment type="line">// output pStmt-&gt;pSql: TAGS (tag1_value, ...) ...</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseBoundTagsClause</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagsSchema</name> <init>= <expr><call><name>getTableTagSchema</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>insSetBoundColumnInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name>pTagsSchema</name></expr></argument>, <argument><expr><call><name>getNumOfTags</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SToken</name></type>  <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NEXT_TOKEN_KEEP_SQL</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_NK_LP</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>
  <return>return <expr><call><name>parseBoundColumns</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name>pTagsSchema</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseTagValue</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagSchema</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>,
                             <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagVals</name></decl></parameter>, <parameter><decl><type><name>STag</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNullValue</name><argument_list>(<argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTagName</name></expr></argument>, <argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;</operator> <operator>(</operator><name>TSDB_MAX_JSON_TAG_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"json string too long than 4095"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isNullValue</name><argument_list>(<argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>tTagNew</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>parseJsontoTagData</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>pTag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STagVal</name></type> <name>val</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>parseTagToken</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>pTagSchema</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildCreateTbReq</name><parameter_list>(<parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STag</name><modifier>*</modifier></type> <name>pTag</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>insBuildCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>createTblReq</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>pTag</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>,
                      <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>pTagName</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></argument>,
                      <argument><expr><name>TSDB_DEFAULT_TABLE_TTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkAndTrimValue</name><parameter_list>(<parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>tmpTokenBuf</name></decl></parameter>, <parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pMsgBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TK_NOW</name> <operator>&amp;&amp;</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TK_TODAY</name> <operator>&amp;&amp;</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TK_NK_INTEGER</name> <operator>&amp;&amp;</operator>
       <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TK_NK_STRING</name> <operator>&amp;&amp;</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TK_NK_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TK_NK_BOOL</name> <operator>&amp;&amp;</operator>
       <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TK_NULL</name> <operator>&amp;&amp;</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TK_NK_HEX</name> <operator>&amp;&amp;</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TK_NK_OCT</name> <operator>&amp;&amp;</operator>
       <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TK_NK_BIN</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_RP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalid data or symbol"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Remove quotation marks</comment>
  <if_stmt><if>if <condition>(<expr><name>TK_NK_STRING</name> <operator>==</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <name>TSDB_MAX_BYTES_PER_ROW</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"too long string"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>trimString</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>tmpTokenBuf</name></expr></argument>, <argument><expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name>tmpTokenBuf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// pSql -&gt; tag1_value, ...)</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseTagsClauseImpl</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>getTableTagSchema</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>  <name>pTagVals</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>tags</name><operator>.</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>  <name>pTagName</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SToken</name></type>   <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>isParseBindParam</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>isJson</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type>    <name>pTag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>tags</name><operator>.</operator><name>numOfBound</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>NEXT_TOKEN_WITH_PREV</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_QUESTION</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>isParseBindParam</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"? only used in stmt"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>isParseBindParam</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"no mix usage for ? and tag values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pSchema</name><index>[<expr><name><name>pCxt</name><operator>-&gt;</operator><name>tags</name><operator>.</operator><name>boundColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>isJson</name> <operator>=</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkAndTrimValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>tmpTokenBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseTagValue</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTagSchema</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><name>pTagName</name></expr></argument>, <argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isParseBindParam</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tTagNew</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isParseBindParam</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildCreateTbReq</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTag</name></expr></argument>, <argument><expr><name>pTagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTag</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STagVal</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>STagVal</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tTagFree</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input pStmt-&gt;pSql:  TAGS (tag1_value, ...) [table_options] ...</comment>
<comment type="line">// output pStmt-&gt;pSql: [table_options] ...</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseTagsClause</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SToken</name></type> <name>token</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_TAGS</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"TAGS is expected"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_NK_LP</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"( is expected"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>parseTagsClauseImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>NEXT_VALID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TK_NK_COMMA</name> <operator>==</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_TAGS_NOT_MATCHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TK_NK_RP</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">") is expected"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>storeTableMeta</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>totalTbNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name>TSDB_CHILD_TABLE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pBackup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>cloneTableMeta</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBackup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSubTableHashObj</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBackup</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseTableOptions</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SToken</name></type>  <name>token</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NEXT_TOKEN_KEEP_SQL</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TK_TTL</name> <operator>==</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NEXT_TOKEN_WITH_PREV</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TK_NK_INTEGER</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid option ttl"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>createTblReq</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>createTblReq</name><operator>.</operator><name>ttl</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid option ttl"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TK_COMMENT</name> <operator>==</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TK_NK_STRING</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid option comment"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>n</name></name> <operator>&gt;=</operator> <name>TSDB_TB_COMMENT_LEN</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"comment too long"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>trimString</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>tmpTokenBuf</name></name></expr></argument>, <argument><expr><name>TSDB_TB_COMMENT_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>createTblReq</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>tmpTokenBuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>createTblReq</name><operator>.</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>createTblReq</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input pStmt-&gt;pSql:</comment>
<comment type="line">//   1. [(tag1_name, ...)] ...</comment>
<comment type="line">//   2. VALUES ... | FILE ...</comment>
<comment type="line">// output pStmt-&gt;pSql:</comment>
<comment type="line">//   1. [(field1_name, ...)]</comment>
<comment type="line">//   2. VALUES ... | FILE ...</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseUsingClauseBottom</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableProcessing</name></name> <operator>||</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>usingDuplicateTable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>parseBoundTagsClause</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseTagsClause</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseTableOptions</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkAuth</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTbName</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pMissCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTbName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>pass</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>exists</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogChkAuthFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>AUTH_TYPE_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                             <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                             <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                             <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogChkAuth</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>AUTH_TYPE_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>exists</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pMissCache</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>pass</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_PERMISSION_DENIED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableMeta</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTbName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStb</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>,
                            <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pMissCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pComCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pComCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>isStb</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetCachedSTableMeta</name><argument_list>(<argument><expr><name><name>pComCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><name>pTbName</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetCachedTableMeta</name><argument_list>(<argument><expr><name><name>pComCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><name>pTbName</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pComCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                             <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pComCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                             <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pComCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                             <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pComCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>isStb</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetSTableMeta</name><argument_list>(<argument><expr><name><name>pComCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>pTbName</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableMeta</name><argument_list>(<argument><expr><name><name>pComCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>pTbName</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pTableMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pMissCache</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>isStb</name> <operator>&amp;&amp;</operator> <name>TSDB_SUPER_TABLE</name> <operator>!=</operator> <name><operator>(</operator><operator>*</operator><name>pTableMeta</name><operator>)</operator><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"create table only from super table is allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>isStb</name> <operator>&amp;&amp;</operator> <name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><operator>(</operator><operator>*</operator><name>pTableMeta</name><operator>)</operator><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"insert data into super table is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableVgroup</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStb</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pMissCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>exists</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetCachedTableHashVgroup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                             <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                             <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                             <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>exists</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>isStb</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>vg</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>pMissCache</name> <operator>=</operator> <operator>!</operator><name>exists</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableMetaAndVgroupImpl</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pMissCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>catalogGetCachedTableVgMeta</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>pMissCache</name> <operator>=</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableMetaAndVgroup</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pMissCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pComCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pComCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMetaAndVgroupImpl</name><argument_list>(<argument><expr><name>pComCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pMissCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMeta</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name>pMissCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableVgroup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name></name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>collectUseTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>collectUseDatabase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pDbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pDbs</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTargetTableSchema</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>forceUpdate</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>checkAuth</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (TSDB_CODE_SUCCESS == code &amp;&amp; !pCxt-&gt;missCache) {
    code = getTableMeta(pCxt, &amp;pStmt-&gt;targetTableName, false, &amp;pStmt-&gt;pTableMeta, &amp;pCxt-&gt;missCache);
  }
  if (TSDB_CODE_SUCCESS == code &amp;&amp; !pCxt-&gt;missCache) {
    code = getTableVgroup(pCxt-&gt;pComCxt, pStmt, false, &amp;pCxt-&gt;missCache);
  }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMetaAndVgroup</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseDatabase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbFNameHashObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableNameHashObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>preParseUsingTableName</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>insCreateSName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableName</name></name></expr></argument>, <argument><expr><name>pTbName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getUsingTableSchema</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>forceUpdate</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>checkAuth</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMeta</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableName</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableVgroup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name></name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseDatabase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbFNameHashObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectUseTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableNameHashObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseUsingTableNameImpl</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SToken</name></type> <name>token</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>preParseUsingTableName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getUsingTableSchema</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>storeTableMeta</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input pStmt-&gt;pSql:</comment>
<comment type="line">//   1(care). [USING stb_name [(tag1_name, ...)] TAGS (tag1_value, ...) [table_options]] ...</comment>
<comment type="line">//   2. VALUES ... | FILE ...</comment>
<comment type="line">// output pStmt-&gt;pSql:</comment>
<comment type="line">//   1. [(tag1_name, ...)] TAGS (tag1_value, ...) [table_options]] ...</comment>
<comment type="line">//   2. VALUES ... | FILE ...</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseUsingTableName</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SToken</name></type>  <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NEXT_TOKEN_KEEP_SQL</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_USING</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>getTargetTableSchema</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableProcessing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <comment type="line">// pStmt-&gt;pSql -&gt; stb_name [(tag1_name, ...)</comment>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>parseDuplicateUsingClause</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>usingDuplicateTable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>usingDuplicateTable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>parseUsingTableNameImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>preParseTargetTableName</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>insCreateSName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><name>pTbName</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input pStmt-&gt;pSql:</comment>
<comment type="line">//   1(care). [(field1_name, ...)] ...</comment>
<comment type="line">//   2. [ USING ... ] ...</comment>
<comment type="line">//   3. VALUES ... | FILE ...</comment>
<comment type="line">// output pStmt-&gt;pSql:</comment>
<comment type="line">//   1. [ USING ... ] ...</comment>
<comment type="line">//   2. VALUES ... | FILE ...</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>preParseBoundColumnsClause</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SToken</name></type>  <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NEXT_TOKEN_KEEP_SQL</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_NK_LP</name> <operator>!=</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pStmt-&gt;pSql -&gt; field1_name, ...)</comment>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pBoundCols</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>skipParentheses</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableDataBlocks</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableProcessing</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>insGetDataBlockFromList</name><argument_list>(
        <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TSDB_DEFAULT_PAYLOAD_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>,
        <argument><expr><call><name>getTableInfo</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>rowSize</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>createTblReq</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>insGetDataBlockFromList</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_DEFAULT_PAYLOAD_SIZE</name></expr></argument>,
                                 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>getTableInfo</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>rowSize</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>,
                                 <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>createTblReq</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseBoundColumnsClause</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>,
                                       <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SToken</name></type>  <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NEXT_TOKEN_KEEP_SQL</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_NK_LP</name> <operator>==</operator> <name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pBoundCols</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"keyword VALUES or FILE is expected"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// pStmt-&gt;pSql -&gt; field1_name, ...)</comment>
    <return>return <expr><call><name>parseBoundColumns</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></argument>,
                             <argument><expr><call><name>getTableColumnSchema</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pBoundCols</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>parseBoundColumns</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pBoundCols</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></argument>,
                             <argument><expr><call><name>getTableColumnSchema</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input pStmt-&gt;pSql:</comment>
<comment type="line">//   1. [(tag1_name, ...)] ...</comment>
<comment type="line">//   2. VALUES ... | FILE ...</comment>
<comment type="line">// output pStmt-&gt;pSql: VALUES ... | FILE ...</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseSchemaClauseBottom</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>,
                                       <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>parseUsingClauseBottom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableDataBlocks</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseBoundColumnsClause</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>*</operator><name>pDataBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input pStmt-&gt;pSql: [(field1_name, ...)] [ USING ... ] VALUES ... | FILE ...</comment>
<comment type="line">// output pStmt-&gt;pSql:</comment>
<comment type="line">//   1. [(tag1_name, ...)] ...</comment>
<comment type="line">//   2. VALUES ... | FILE ...</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseSchemaClauseTop</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>preParseTargetTableName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTbName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// option: [(field1_name, ...)]</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>preParseBoundColumnsClause</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// option: [USING stb_name]</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseUsingTableName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseValueTokenImpl</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSql</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>,
                                   <parameter><decl><type><name>int16_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>_row_append_fn_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>iv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>endptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_BOOL</name> <operator>||</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_STRING</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TRUE_VALUE</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FALSE_VALUE</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid bool data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_INTEGER</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>taosStr2Int64</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>FALSE_VALUE</name></expr> </then><else>: <expr><operator>&amp;</operator><name>TRUE_VALUE</name></expr></else></ternary><operator>)</operator></expr></argument>,
                    <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_FLOAT</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>taosStr2Double</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>FALSE_VALUE</name></expr> </then><else>: <expr><operator>&amp;</operator><name>TRUE_VALUE</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>,
                    <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid bool data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid tinyint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IS_VALID_TINYINT</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"tinyint data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>uint8_t</name></type> <name>tmpVal</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>iv</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpVal</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid unsigned tinyint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uv</name> <operator>&gt;</operator> <name>UINT8_MAX</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"unsigned tinyint data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>tmpVal</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>uv</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpVal</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid smallint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IS_VALID_SMALLINT</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"smallint data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int16_t</name></type> <name>tmpVal</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>iv</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpVal</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid unsigned smallint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uv</name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"unsigned smallint data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>uint16_t</name></type> <name>tmpVal</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>uv</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpVal</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid int data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IS_VALID_INT</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"int data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>tmpVal</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>iv</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpVal</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid unsigned int data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uv</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"unsigned int data overflow"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpVal</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>uv</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpVal</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid bigint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>toUInteger</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid unsigned bigint data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uv</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>dv</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TK_NK_ILLEGAL</name> <operator>==</operator> <call><name>toDouble</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"illegal float data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>dv</name> <operator>==</operator> <name>HUGE_VAL</name> <operator>||</operator> <name>dv</name> <operator>==</operator> <operator>-</operator><name>HUGE_VAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator> <operator>||</operator> <name>dv</name> <operator>&gt;</operator> <name>FLT_MAX</name> <operator>||</operator> <name>dv</name> <operator>&lt;</operator> <operator>-</operator><name>FLT_MAX</name> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call> <operator>||</operator>
          <call><name>isnan</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"illegal float data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>tmpVal</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>dv</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpVal</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>dv</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TK_NK_ILLEGAL</name> <operator>==</operator> <call><name>toDouble</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"illegal double data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>dv</name> <operator>==</operator> <name>HUGE_VAL</name> <operator>||</operator> <name>dv</name> <operator>==</operator> <operator>-</operator><name>HUGE_VAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"illegal double data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dv</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case> <block>{<block_content>
      <comment type="line">// Too long values will raise the invalid sql error message</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>&gt;</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_VALUE_TOO_LONG</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;</operator> <operator>(</operator><name>TSDB_MAX_JSON_TAG_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"json string too long than 4095"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>tmpVal</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>parseTime</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid timestamp"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpVal</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseValueToken</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSql</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>,
                               <parameter><decl><type><name>int16_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>_row_append_fn_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>checkAndTrimValue</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>tmpTokenBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <call><name>isNullValue</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"primary timestamp should not be null"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid numeric data"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseValueTokenImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSql</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parseOneRow</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSql</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pGotRow</name></decl></parameter>,
                       <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRowBuilder</name><modifier>*</modifier></type>        <name>pBuilder</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type>             <name>row</name> <init>= <expr><operator>(</operator><name>STSRow</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pDataBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="line">// skip the SSubmitBlk header</comment>
  <decl_stmt><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>pCols</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                <name>isParseBindParam</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type>            <name>pSchemas</name> <init>= <expr><call><name>getTableColumnSchema</name><argument_list>(<argument><expr><name><name>pDataBuf</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemParam</name></type>           <name>param</name> <init>= <expr><block>{<expr><operator>.</operator><name>rb</name> <operator>=</operator> <name>pBuilder</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// 1. set the parsed value from sql string</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCols</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>&amp;&amp;</operator> <name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>NEXT_TOKEN_WITH_PREV</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><operator>*</operator><name>pToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pSchemas</name><index>[<expr><name><name>pCols</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_QUESTION</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>isParseBindParam</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"? only used in stmt"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>TK_NK_RP</name> <operator>==</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMNS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>isParseBindParam</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"no mix usage for ? and values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>param</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <name>pSchema</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>insGetSTSRowAppendInfo</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name></expr></argument>, <argument><expr><name>pCols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>toffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>colIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseValueToken</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSql</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><call><name>getTableInfo</name><argument_list>(<argument><expr><name><name>pDataBuf</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>precision</name></expr></argument>, <argument><expr><name>insMemRowAppend</name></expr></argument>,
                             <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>pCols</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>NEXT_VALID_TOKEN</name><argument_list>(<argument><expr><operator>*</operator><name>pSql</name></expr></argument>, <argument><expr><operator>*</operator><name>pToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TK_NK_COMMA</name> <operator>!=</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">", expected"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>tsKey</name> <init>= <expr><call><name>TD_ROW_KEY</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>insCheckTimestamp</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tsKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isParseBindParam</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// set the null value for the columns that do not assign values</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pCols</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>&lt;</operator> <name><name>pCols</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>TD_IS_TP_ROW</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNone</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>pGotRow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_DEBUG_PRINT_ROW</name></cpp:ifdef>
    <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSTSchema</name> <init>= <expr><call><name>tdGetSTSChemaFromSSChema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name><name>spd</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdSRowPrint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>pSTSchema</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>allocateMemIfNeed</name><parameter_list>(<parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>    <name>remain</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>-</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>factor</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>nAllocSizeOld</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// expand the allocated size</comment>
  <if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&lt;</operator> <name>rowSize</name> <operator>*</operator> <name>factor</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name>remain</name> <operator>&lt;</operator> <name>rowSize</name> <operator>*</operator> <name>factor</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>*</operator> <literal type="number">1.5</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>remain</name> <operator>=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>-</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>-</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// do nothing, if allocate more memory failed</comment>
      <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>=</operator> <name>nAllocSizeOld</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>numOfRows</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>-</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>headerSize</name></name><operator>)</operator> <operator>/</operator> <name>rowSize</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>numOfRows</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>-</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>headerSize</name></name><operator>)</operator> <operator>/</operator> <name>rowSize</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// pSql -&gt; (field1_value, ...) [(field1_value2, ...) ...]</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseValues</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>,
                           <parameter><decl><type><name>int32_t</name></type> <name>maxRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pNumOfRows</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>insInitRowBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></argument>, <argument><expr><name><name>pDataBuf</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>extendedRowSize</name> <init>= <expr><call><name>insGetExtendedRowSize</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pNumOfRows</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NEXT_TOKEN_KEEP_SQL</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pToken</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TK_NK_LP</name> <operator>!=</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pNumOfRows</name><operator>)</operator> <operator>&gt;=</operator> <name>maxRows</name> <operator>||</operator> <name><name>pDataBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>extendedRowSize</name> <operator>&gt;=</operator> <name><name>pDataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>allocateMemIfNeed</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name>extendedRowSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>gotRow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseOneRow</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gotRow</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>NEXT_VALID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TK_NK_COMMA</name> <operator>==</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_COLUMNS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TK_NK_RP</name> <operator>!=</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">") expected"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>gotRow</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDataBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>extendedRowSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pNumOfRows</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pNumOfRows</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><operator>!</operator><call><name>TSDB_QUERY_HAS_TYPE</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>insertType</name></name></expr></argument>, <argument><expr><name>TSDB_QUERY_TYPE_STMT_INSERT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"no any data points"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// VALUES (field1_value, ...) [(field1_value2, ...) ...]</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseValuesClause</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>,
                                 <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxNumOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>allocateMemIfNeed</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><call><name>insGetExtendedRowSize</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxNumOfRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseValues</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name>maxNumOfRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfRows</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>insSetBlockInfo</name><argument_list>(<argument><expr><operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDataBuf</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>totalRowsNum</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>totalTbNum</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_QUERY_SET_TYPE</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>insertType</name></name></expr></argument>, <argument><expr><name>TSDB_QUERY_TYPE_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseCsvFile</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>maxRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pNumOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>insInitRowBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></argument>, <argument><expr><name><name>pDataBuf</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>extendedRowSize</name> <init>= <expr><call><name>insGetExtendedRowSize</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pNumOfRows</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>pLine</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>readLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>fileProcessing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>readLen</name> <operator>=</operator> <call><name>taosGetLineFile</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pLine</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="char">'\r'</literal> <operator>==</operator> <name><name>pLine</name><index>[<expr><name>readLen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'\n'</literal> <operator>==</operator> <name><name>pLine</name><index>[<expr><name>readLen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pLine</name><index>[<expr><operator>--</operator><name>readLen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>readLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pNumOfRows</name><operator>)</operator> <operator>&gt;=</operator> <name>maxRows</name> <operator>||</operator> <name><name>pDataBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>extendedRowSize</name> <operator>&gt;=</operator> <name><name>pDataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>allocateMemIfNeed</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name>extendedRowSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>gotRow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SToken</name></type> <name>token</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strtolower</name><argument_list>(<argument><expr><name>pLine</name></expr></argument>, <argument><expr><name>pLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pRow</name> <init>= <expr><name>pLine</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseOneRow</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pRow</name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gotRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>gotRow</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDataBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>extendedRowSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pNumOfRows</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>pDataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>&gt;</operator> <name>tsMaxMemUsedByInsert</name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>fileProcessing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pNumOfRows</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><operator>!</operator><call><name>TSDB_QUERY_HAS_TYPE</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>insertType</name></name></expr></argument>, <argument><expr><name>TSDB_QUERY_TYPE_STMT_INSERT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pStmt</name><operator>-&gt;</operator><name>fileProcessing</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"no any data points"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseDataFromFileImpl</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxNumOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>allocateMemIfNeed</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><call><name>insGetExtendedRowSize</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxNumOfRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseCsvFile</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name>maxNumOfRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>insSetBlockInfo</name><argument_list>(<argument><expr><operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDataBuf</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDataBuf</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>totalRowsNum</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>totalTbNum</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_QUERY_SET_TYPE</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>insertType</name></name></expr></argument>, <argument><expr><name>TSDB_QUERY_TYPE_FILE_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pStmt</name><operator>-&gt;</operator><name>fileProcessing</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>parserDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" insert from csv. File is too large, do it in batches."</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseDataFromFile</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pFilePath</name></decl></parameter>,
                                 <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>filePathStr</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_NK_STRING</name> <operator>==</operator> <name><name>pFilePath</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>trimString</name><argument_list>(<argument><expr><name><name>pFilePath</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pFilePath</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>filePathStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filePathStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>filePathStr</name></expr></argument>, <argument><expr><name><name>pFilePath</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pFilePath</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filePathStr</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>parseDataFromFileImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseFileClause</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>,
                               <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>||</operator> <operator>(</operator><name>TK_NK_STRING</name> <operator>!=</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>TK_NK_ID</name> <operator>!=</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"file path is required following keyword FILE"</literal></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>parseDataFromFile</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// VALUES (field1_value, ...) [(field1_value2, ...) ...] | FILE csv_file_path</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseDataClause</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SToken</name></type> <name>token</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TK_VALUES</name></expr>:</case>
      <return>return <expr><call><name>parseValuesClause</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TK_FILE</name></expr>:</case>
      <return>return <expr><call><name>parseFileClause</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"keyword VALUES or FILE is expected"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input pStmt-&gt;pSql:</comment>
<comment type="line">//   1. [(tag1_name, ...)] ...</comment>
<comment type="line">//   2. VALUES ... | FILE ...</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseInsertTableClauseBottom</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><call><name>parseSchemaClauseBottom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDataBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseDataClause</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resetEnvPreTable</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>destroyBoundColumnInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>createTblReq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>usingDuplicateTable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pBoundCols</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableProcessing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>fileProcessing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// input pStmt-&gt;pSql: [(field1_name, ...)] [ USING ... ] VALUES ... | FILE ...</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseInsertTableClause</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>resetEnvPreTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>parseSchemaClauseTop</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTbName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseInsertTableClauseBottom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkTableClauseFirstToken</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTbName</name></decl></parameter>,
                                          <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pHasData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// no data in the sql string anymore.</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pTbName</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>pTbName</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"invalid charactor in SQL"</literal></expr></argument>, <argument><expr><name><name>pTbName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>totalRowsNum</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>TSDB_QUERY_HAS_TYPE</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>insertType</name></name></expr></argument>, <argument><expr><name>TSDB_QUERY_TYPE_STMT_INSERT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"no data in sql"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>pHasData</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TSDB_QUERY_HAS_TYPE</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>insertType</name></name></expr></argument>, <argument><expr><name>TSDB_QUERY_TYPE_STMT_INSERT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>totalTbNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"single table allowed in one stmt"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TK_NK_QUESTION</name> <operator>==</operator> <name><name>pTbName</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"? only used in stmt"</literal></expr></argument>, <argument><expr><name><name>pTbName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>tbName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name><operator>-&gt;</operator><name>getTbNameFn</name></name>)<argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTbName</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name>tbName</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTbName</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pHasData</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setStmtInfo</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>tags</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tags</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SStmtCallback</name><modifier>*</modifier></type> <name>pStmtCb</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pStmtCb</name><operator>-&gt;</operator><name>setInfoFn</name></name>)<argument_list>(<argument><expr><name><name>pStmtCb</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>,
                                       <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableProcessing</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name></expr></argument>,
                                       <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseInsertBodyBottom</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>TSDB_QUERY_HAS_TYPE</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>insertType</name></name></expr></argument>, <argument><expr><name>TSDB_QUERY_TYPE_STMT_INSERT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>setStmtInfo</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// merge according to vgId</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>insMergeTableDataBlocks</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pVgDataBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>insBuildOutput</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVgDataBlocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// tb_name</comment>
<comment type="line">//     [USING stb_name [(tag1_name, ...)] TAGS (tag1_value, ...)]</comment>
<comment type="line">//     [(field1_name, ...)]</comment>
<comment type="line">//     VALUES (field1_value, ...) [(field1_value2, ...) ...] | FILE csv_file_path</comment>
<comment type="line">// [...];</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseInsertBody</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SToken</name></type>  <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>hasData</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// for each table</comment>
  <while>while <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>hasData</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pStmt</name><operator>-&gt;</operator><name>fileProcessing</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// pStmt-&gt;pSql -&gt; tb_name ...</comment>
    <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>checkTableClauseFirstToken</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>hasData</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseInsertTableClause</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseInsertBodyBottom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroySubTableHashElem</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>STableMeta</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createVnodeModifOpStmt</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reentry</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VNODE_MODIF_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pStmt</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TSDB_QUERY_SET_TYPE</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>insertType</name></name></expr></argument>, <argument><expr><name>TSDB_QUERY_TYPE_STMT_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pSql</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>freeHashFunc</name></name> <operator>=</operator> <name>insDestroyBlockHashmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>freeArrayFunc</name></name> <operator>=</operator> <name>insDestroyBlockArrayList</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>reentry</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name> <operator>=</operator>
        <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSubTableHashObj</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableNameHashObj</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbFNameHashObj</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>reentry</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>
      <name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pSubTableHashObj</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pTableNameHashObj</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pDbFNameHashObj</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSubTableHashObj</name></name></expr></argument>, <argument><expr><name>destroySubTableHashElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createInsertQuery</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name> <init>= <expr><operator>(</operator><name>SQuery</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_QUERY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pQuery</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createVnodeModifOpStmt</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pQuery</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkAuthFromMetaData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pUsers</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pUsers</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pUsers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>TSDB_CODE_SUCCESS</name></expr> </then><else>: <expr><name>TSDB_CODE_PAR_PERMISSION_DENIED</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableMetaFromMetaData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pTables</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pMeta</name> <operator>=</operator> <call><name>tableMetaDup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STableMeta</name><operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pMeta</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableVgroupFromMetaData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pTables</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>isStb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pVg</name></expr></argument>,
                     <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableSchemaFromMetaData</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaData</name><modifier>*</modifier></type> <name>pMetaData</name></decl></parameter>,
                                          <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>checkAuthFromMetaData</name><argument_list>(<argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableMetaFromMetaData</name><argument_list>(<argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isStb</name> <operator>&amp;&amp;</operator> <name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><literal type="string">"insert data into super table is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableVgroupFromMetaData</name><argument_list>(<argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>isStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destoryTablesReq</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>(</operator><name>STablesReq</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearCatalogReq</name><parameter_list>(<parameter><decl><type><name>SCatalogReq</name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCatalogReq</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name>destoryTablesReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableMeta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><name>destoryTablesReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableHash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pUser</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setVnodeModifOpStmt</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCatalogReq</name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaData</name><modifier>*</modifier></type> <name>pMetaData</name></decl></parameter>,
                                   <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>clearCatalogReq</name><argument_list>(<argument><expr><name>pCatalogReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableProcessing</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>getTableSchemaFromMetaData</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pMetaData</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>getTableSchemaFromMetaData</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pMetaData</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>resetVnodeModifOpStmt</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createVnodeModifOpStmt</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name><operator>-&gt;</operator><name>getExecInfoFn</name></name>)<argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name></expr></argument>,
                                             <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name> <operator>=</operator>
          <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pVgroupsHashObj</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pTableBlockHashObj</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initInsertQuery</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SCatalogReq</name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaData</name><modifier>*</modifier></type> <name>pMetaData</name></decl></parameter>,
                               <parameter><decl><type><name>SQuery</name><modifier>*</modifier><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pQuery</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>createInsertQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>resetVnodeModifOpStmt</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>*</operator><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><name><operator>(</operator><operator>*</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pStmt</name><operator>-&gt;</operator><name>fileProcessing</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>setVnodeModifOpStmt</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pCatalogReq</name></expr></argument>, <argument><expr><name>pMetaData</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setRefreshMate</name><parameter_list>(<parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableNameHashObj</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pTableList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableNameHashObj</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableNameHashObj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTable</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTable</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableNameHashObj</name></name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbFNameHashObj</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pDbList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pDbList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbFNameHashObj</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pDb</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbFNameHashObj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pDb</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pDbList</name></name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbFNameHashObj</name></name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// INSERT INTO</comment>
<comment type="line">//   tb_name</comment>
<comment type="line">//       [USING stb_name [(tag1_name, ...)] TAGS (tag1_value, ...) [table_options]]</comment>
<comment type="line">//       [(field1_name, ...)]</comment>
<comment type="line">//       VALUES (field1_value, ...) [(field1_value2, ...) ...] | FILE csv_file_path</comment>
<comment type="line">//   [...];</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseInsertSqlFromStart</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>skipInsertInto</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseInsertBody</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseInsertSqlFromCsv</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><call><name>getTableDataBlocks</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDataBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseDataFromFileImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>fileProcessing</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseInsertBodyBottom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseInsertBody</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseInsertSqlFromTable</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>parseInsertTableClauseBottom</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseInsertBody</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseInsertSqlImpl</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSql</name></name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pSql</name></name> <operator>||</operator> <name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pStmtCb</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>parseInsertSqlFromStart</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>fileProcessing</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>parseInsertSqlFromCsv</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>parseInsertSqlFromTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildInsertTableReq</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pTables</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pTables</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pTables</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildInsertDbReq</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDbs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDbs</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STablesReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDbs</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STablesReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>buildInsertTableReq</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pDbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildInsertUserAuthReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pUser</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pUserAuth</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pUserAuth</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUserAuthInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pUserAuth</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SUserAuthInfo</name></type> <name>userAuth</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AUTH_TYPE_WRITE</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>userAuth</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>userAuth</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>userAuth</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pUserAuth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>userAuth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildInsertCatalogReq</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SCatalogReq</name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>buildInsertUserAuthReq</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>usingTableName</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInsertDbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInsertDbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>usingTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInsertDbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>targetTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setNextStageInfo</name><parameter_list>(<parameter><decl><type><name>SInsertParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SCatalogReq</name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>missCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>parserDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" %d rows of %d tables have been inserted before cache miss"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>,
                <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>totalRowsNum</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>totalTbNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execStage</name></name> <operator>=</operator> <name>QUERY_EXEC_STAGE_PARSE</name></expr>;</expr_stmt>
    <return>return <expr><call><name>buildInsertCatalogReq</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pCatalogReq</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>parserDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" %d rows of %d tables have been inserted"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pComCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>totalRowsNum</name></name></expr></argument>,
              <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>totalTbNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execStage</name></name> <operator>=</operator> <name>QUERY_EXEC_STAGE_SCHEDULE</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>parseInsertSql</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SCatalogReq</name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaData</name><modifier>*</modifier></type> <name>pMetaData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInsertParseContext</name></type> <name>context</name> <init>= <expr><block>{<expr><operator>.</operator><name>pComCxt</name> <operator>=</operator> <name>pCxt</name></expr>,
                                 <expr><operator>.</operator><name>msg</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pMsg</name></name></expr>, <expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>msgLen</name></name></expr>}</block></expr>,
                                 <expr><operator>.</operator><name>missCache</name> <operator>=</operator> <name>false</name></expr>,
                                 <expr><operator>.</operator><name>usingDuplicateTable</name> <operator>=</operator> <name>false</name></expr>,
                                 <expr><operator>.</operator><name>forceUpdate</name> <operator>=</operator> <operator>(</operator><name>NULL</name> <operator>!=</operator> <name>pCatalogReq</name> <operator>?</operator> <name><name>pCatalogReq</name><operator>-&gt;</operator><name>forceUpdate</name></name> <operator>:</operator> <name>false</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initInsertQuery</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>pCatalogReq</name></expr></argument>, <argument><expr><name>pMetaData</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseInsertSqlImpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><name><operator>(</operator><operator>*</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNextStageInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><operator>*</operator><name>pQuery</name></expr></argument>, <argument><expr><name>pCatalogReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>||</operator> <call><name>NEED_CLIENT_HANDLE_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
      <name>QUERY_EXEC_STAGE_SCHEDULE</name> <operator>==</operator> <name><operator>(</operator><operator>*</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>execStage</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setRefreshMate</name><argument_list>(<argument><expr><operator>*</operator><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>destroyBoundColumnInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
