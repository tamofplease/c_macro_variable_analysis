<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/parser/src/parser.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parToken.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>qIsInsertValuesSql</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pStr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pSql</name> <init>= <expr><name>pStr</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SToken</name></type>  <name>t</name> <init>= <expr><call><name>tStrGetToken</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_INSERT</name> <operator>!=</operator> <name><name>t</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>TK_IMPORT</name> <operator>!=</operator> <name><name>t</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>pStr</name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>tStrGetToken</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TK_USING</name> <operator>==</operator> <name><name>t</name><operator>.</operator><name>type</name></name> <operator>||</operator> <name>TK_VALUES</name> <operator>==</operator> <name><name>t</name><operator>.</operator><name>type</name></name> <operator>||</operator> <name>TK_FILE</name> <operator>==</operator> <name><name>t</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TK_SELECT</name> <operator>==</operator> <name><name>t</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>t</name><operator>.</operator><name>type</name></name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>t</name><operator>.</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>pStr</name> <operator>-</operator> <name>pSql</name> <operator>&lt;</operator> <name>length</name></expr>)</condition>;</do>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>analyseSemantic</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>authenticate</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pMetaCache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>placeholderNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pPrepareRoot</name></name></expr></argument>, <argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>translate</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pMetaCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>calculateConstant</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseSqlIntoAst</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>analyseSemantic</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>*</operator><name>pQuery</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseSqlSyntax</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>collectMetaKey</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>*</operator><name>pQuery</name></expr></argument>, <argument><expr><name>pMetaCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setValueByBindParam</name><parameter_list>(<parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>pParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pParam</name><operator>-&gt;</operator><name>is_null</name></name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name><name>pParam</name><operator>-&gt;</operator><name>is_null</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_NULL</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>inputSize</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name><name>pParam</name><operator>-&gt;</operator><name>length</name></name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name><name>pParam</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>tDataTypes</name><index>[<expr><name><name>pParam</name><operator>-&gt;</operator><name>buffer_type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pParam</name><operator>-&gt;</operator><name>buffer_type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>inputSize</name></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>pParam</name><operator>-&gt;</operator><name>buffer_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>pParam</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>*=</operator> <name>TSDB_NCHAR_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosMbsToUcs4</name><argument_list>(<argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>errno</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>output</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodesSetValueNodeValue</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>rewriteQueryExprAliasImpl</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>nodesIsExprNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>QUERY_NODE_COLUMN</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>, <argument><expr><literal type="string">"#%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pContext</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rewriteQueryExprAlias</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRoot</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pNo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_SELECT_STMT</name></expr>:</case>
      <expr_stmt><expr><call><name>nodesWalkSelectStmt</name><argument_list>(<argument><expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pRoot</name></expr></argument>, <argument><expr><name>SQL_CLAUSE_FROM</name></expr></argument>, <argument><expr><name>rewriteQueryExprAliasImpl</name></expr></argument>, <argument><expr><name>pNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SET_OPERATOR</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSetOperator</name><modifier>*</modifier></type> <name>pSetOper</name> <init>= <expr><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pRoot</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>rewriteQueryExprAlias</name><argument_list>(<argument><expr><name><name>pSetOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><name>pNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rewriteQueryExprAlias</name><argument_list>(<argument><expr><name><name>pSetOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><name>pNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rewriteExprAlias</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRoot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>no</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rewriteQueryExprAlias</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qParseSql</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>qIsInsertValuesSql</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>sqlLen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseInsertSql</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseSqlIntoAst</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseQuerySyntax</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SCatalogReq</name></name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseMetaCache</name></type> <name>metaCache</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>parseSqlSyntax</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaCache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildCatalogReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaCache</name></expr></argument>, <argument><expr><name>pCatalogReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>destoryParseMetaCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaCache</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qParseSqlSyntax</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SCatalogReq</name></name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodesAcquireAllocator</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>allocatorId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>qIsInsertValuesSql</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>sqlLen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseInsertSql</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pCatalogReq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseQuerySyntax</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pCatalogReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesReleaseAllocator</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>allocatorId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qAnalyseSqlSemantic</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>SCatalogReq</name></name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>SMetaData</name></name><modifier>*</modifier></type> <name>pMetaData</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseMetaCache</name></type> <name>metaCache</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>nodesAcquireAllocator</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>allocatorId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putMetaDataToCache</name><argument_list>(<argument><expr><name>pCatalogReq</name></expr></argument>, <argument><expr><name>pMetaData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>analyseSemantic</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesReleaseAllocator</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>allocatorId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destoryParseMetaCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaCache</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qContinueParseSql</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SCatalogReq</name></name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>SMetaData</name></name><modifier>*</modifier></type> <name>pMetaData</name></decl></parameter>,
                          <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>parseInsertSql</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pQuery</name></expr></argument>, <argument><expr><name>pCatalogReq</name></expr></argument>, <argument><expr><name>pMetaData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qDestroyParseContext</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCxt</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTableMetaPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pTableVgroupPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qDestroyQuery</name><parameter_list>(<parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQueryNode</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pQueryNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExtractResultSchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pRoot</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>extractResultSchema</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qSetSTableIdForRsma</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTable</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_REAL_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qCleanupKeywordsTable</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosCleanupKeywordsTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qStmtBindParams</name><parameter_list>(<parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>pParams</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>colIdx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pPlaceholderValues</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setValueByBindParam</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pPlaceholderValues</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pParams</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setValueByBindParam</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pPlaceholderValues</name></name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>colIdx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>colIdx</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>placeholderNum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pPrepareRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rewriteExprAlias</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qStmtParseQuerySql</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>translate</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>calculateConstant</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
