<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/parser/src/parUtil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_AUTH_KEY_MAX_LEN</name></cpp:macro> <cpp:value>TSDB_USER_LEN + TSDB_DB_FNAME_LEN + 2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>nullPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>getSyntaxErrFormat</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>errCode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr>:</case>
      <return>return <expr><literal type="string">"syntax error near \"%s\""</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INCOMPLETE_SQL</name></expr>:</case>
      <return>return <expr><literal type="string">"Incomplete SQL statement"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_COLUMN</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid column name: %s"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>:</case>
      <return>return <expr><literal type="string">"Table does not exist: %s"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_GET_META_ERROR</name></expr>:</case>
      <return>return <expr><literal type="string">"Fail to get table info, error: %s"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_AMBIGUOUS_COLUMN</name></expr>:</case>
      <return>return <expr><literal type="string">"Column ambiguously defined: %s"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_WRONG_VALUE_TYPE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid value type: %s"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_ILLEGAL_USE_AGG_FUNCTION</name></expr>:</case>
      <return>return <expr><literal type="string">"There mustn't be aggregation"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_WRONG_NUMBER_OF_SELECT</name></expr>:</case>
      <return>return <expr><literal type="string">"ORDER BY item must be the number of a SELECT-list expression"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_GROUPBY_LACK_EXPRESSION</name></expr>:</case>
      <return>return <expr><literal type="string">"Not a GROUP BY expression"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_NOT_SELECTED_EXPRESSION</name></expr>:</case>
      <return>return <expr><literal type="string">"Not SELECTed expression"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_NOT_SINGLE_GROUP</name></expr>:</case>
      <return>return <expr><literal type="string">"Not a single-group group function"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_TAGS_NOT_MATCHED</name></expr>:</case>
      <return>return <expr><literal type="string">"Tags number not matched"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_TAG_NAME</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid tag name: %s"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_NAME_OR_PASSWD_TOO_LONG</name></expr>:</case>
      <return>return <expr><literal type="string">"Name or password too long"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_PASSWD_EMPTY</name></expr>:</case>
      <return>return <expr><literal type="string">"Password can not be empty"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_PORT</name></expr>:</case>
      <return>return <expr><literal type="string">"Port should be an integer that is less than 65535 and greater than 0"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_ENDPOINT</name></expr>:</case>
      <return>return <expr><literal type="string">"Endpoint should be in the format of 'fqdn:port'"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_EXPRIE_STATEMENT</name></expr>:</case>
      <return>return <expr><literal type="string">"This statement is no longer supported"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INTER_VALUE_TOO_SMALL</name></expr>:</case>
      <return>return <expr><literal type="string">"Interval cannot be less than %d %s"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>:</case>
      <return>return <expr><literal type="string">"Database not specified"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_IDENTIFIER_NAME</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid identifier name: %s"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_CORRESPONDING_STABLE_ERR</name></expr>:</case>
      <return>return <expr><literal type="string">"Corresponding super table not in this db"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_GROUPBY_WINDOW_COEXIST</name></expr>:</case>
      <return>return <expr><literal type="string">"GROUP BY and WINDOW-clause can't be used together"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_AGG_FUNC_NESTING</name></expr>:</case>
      <return>return <expr><literal type="string">"Aggregate functions do not support nesting"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_STATE_WIN_TYPE</name></expr>:</case>
      <return>return <expr><literal type="string">"Only support STATE_WINDOW on integer/bool/varchar column"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_STATE_WIN_COL</name></expr>:</case>
      <return>return <expr><literal type="string">"Not support STATE_WINDOW on tag column"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_STATE_WIN_TABLE</name></expr>:</case>
      <return>return <expr><literal type="string">"STATE_WINDOW not support for super table query"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INTER_SESSION_GAP</name></expr>:</case>
      <return>return <expr><literal type="string">"SESSION gap should be fixed time window, and greater than 0"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INTER_SESSION_COL</name></expr>:</case>
      <return>return <expr><literal type="string">"Only support SESSION on primary timestamp column"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INTER_OFFSET_NEGATIVE</name></expr>:</case>
      <return>return <expr><literal type="string">"Interval offset cannot be negative"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INTER_OFFSET_UNIT</name></expr>:</case>
      <return>return <expr><literal type="string">"Cannot use 'year' as offset when interval is 'month'"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INTER_OFFSET_TOO_BIG</name></expr>:</case>
      <return>return <expr><literal type="string">"Interval offset should be shorter than interval"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INTER_SLIDING_UNIT</name></expr>:</case>
      <return>return <expr><literal type="string">"Does not support sliding when interval is natural month/year"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INTER_SLIDING_TOO_BIG</name></expr>:</case>
      <return>return <expr><literal type="string">"sliding value no larger than the interval value"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INTER_SLIDING_TOO_SMALL</name></expr>:</case>
      <return>return <expr><literal type="string">"sliding value can not less than 1%% of interval value"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_ONLY_ONE_JSON_TAG</name></expr>:</case>
      <return>return <expr><literal type="string">"Only one tag if there is a json tag"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INCORRECT_NUM_OF_COL</name></expr>:</case>
      <return>return <expr><literal type="string">"Query block has incorrect number of result columns"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INCORRECT_TIMESTAMP_VAL</name></expr>:</case>
      <return>return <expr><literal type="string">"Incorrect TIMESTAMP value: %s"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_OFFSET_LESS_ZERO</name></expr>:</case>
      <return>return <expr><literal type="string">"soffset/offset can not be less than 0"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_SLIMIT_LEAK_PARTITION_BY</name></expr>:</case>
      <return>return <expr><literal type="string">"slimit/soffset only available for PARTITION BY query"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_TOPIC_QUERY</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid topic query"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_DROP_STABLE</name></expr>:</case>
      <return>return <expr><literal type="string">"Cannot drop super table in batch"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_FILL_TIME_RANGE</name></expr>:</case>
      <return>return <expr><literal type="string">"Start(end) time of query range required or time range too large"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_DUPLICATED_COLUMN</name></expr>:</case>
      <return>return <expr><literal type="string">"Duplicated column names"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_TAGS_LENGTH</name></expr>:</case>
      <return>return <expr><literal type="string">"Tags length exceeds max length %d"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_ROW_LENGTH</name></expr>:</case>
      <return>return <expr><literal type="string">"Row length exceeds max length %d"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_COLUMNS_NUM</name></expr>:</case>
      <return>return <expr><literal type="string">"Illegal number of columns"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_TOO_MANY_COLUMNS</name></expr>:</case>
      <return>return <expr><literal type="string">"Too many columns"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_FIRST_COLUMN</name></expr>:</case>
      <return>return <expr><literal type="string">"First column must be timestamp"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_VAR_COLUMN_LEN</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid binary/nchar column length"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_TAGS_NUM</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid number of tag columns"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_INTERNAL_PK</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid _c0 or _rowts expression"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_TIMELINE_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid timeline function"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_PASSWD</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid password"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_ALTER_TABLE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid alter table statement"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_CANNOT_DROP_PRIMARY_KEY</name></expr>:</case>
      <return>return <expr><literal type="string">"Primary timestamp column cannot be dropped"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_MODIFY_COL</name></expr>:</case>
      <return>return <expr><literal type="string">"Only binary/nchar column length could be modified, and the length can only be increased, not decreased"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_TBNAME</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid tbname pseudo column"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_FUNCTION_NAME</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid function name"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_COMMENT_TOO_LONG</name></expr>:</case>
      <return>return <expr><literal type="string">"Comment too long"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_NOT_ALLOWED_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"Some functions are allowed only in the SELECT list of a query. "</literal>
             <literal type="string">"And, cannot be mixed with other non scalar functions or columns."</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_NOT_ALLOWED_WIN_QUERY</name></expr>:</case>
      <return>return <expr><literal type="string">"Window query not supported, since the result of subquery not include valid timestamp column"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_DROP_COL</name></expr>:</case>
      <return>return <expr><literal type="string">"No columns can be dropped"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_COL_JSON</name></expr>:</case>
      <return>return <expr><literal type="string">"Only tag can be json type"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_VALUE_TOO_LONG</name></expr>:</case>
      <return>return <expr><literal type="string">"Value too long for column/tag: %s"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_DELETE_WHERE</name></expr>:</case>
      <return>return <expr><literal type="string">"The DELETE statement must have a definite time window range"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_REDISTRIBUTE_VG</name></expr>:</case>
      <return>return <expr><literal type="string">"The REDISTRIBUTE VGROUP statement only support 1 to 3 dnodes"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_FILL_NOT_ALLOWED_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"%s function is not supported in fill query"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_WINDOW_PC</name></expr>:</case>
      <return>return <expr><literal type="string">"_WSTART, _WEND and _WDURATION can only be used in window query"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_WINDOW_NOT_ALLOWED_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"%s function is not supported in time window query"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_STREAM_NOT_ALLOWED_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"%s function is not supported in stream query"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_GROUP_BY_NOT_ALLOWED_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"%s function is not supported in group query"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_INVALID_INTERP_CLAUSE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid usage of RANGE clause, EVERY clause or FILL clause"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_PAR_NO_VALID_FUNC_IN_WIN</name></expr>:</case>
      <return>return <expr><literal type="string">"No valid function in window query"</literal></expr>;</return>
    <case>case <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>:</case>
      <return>return <expr><literal type="string">"Out of memory"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>generateSyntaxErrMsg</name><parameter_list>(<parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>vArgList</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vArgList</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><call><name>getSyntaxErrFormat</name><argument_list>(<argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vArgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vArgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>errCode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>generateSyntaxErrMsgExt</name><parameter_list>(<parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>vArgList</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vArgList</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>vArgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vArgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>errCode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildInvalidOperationMsg</name><parameter_list>(<parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildSyntaxErrMsg</name><parameter_list>(<parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>additionalInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sourceStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_TSC_SQL_SYNTAX_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msgFormat1</name> <init>= <expr><literal type="string">"syntax error near \'%s\'"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msgFormat2</name> <init>= <expr><literal type="string">"syntax error near \'%s\' (%s)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msgFormat3</name> <init>= <expr><literal type="string">"%s"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>prefix</name> <init>= <expr><literal type="string">"syntax error"</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sourceStr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>msgFormat1</name></expr></argument>, <argument><expr><name>additionalInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_SQL_SYNTAX_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>  <comment type="line">// only extract part of sql string</comment>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sourceStr</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>additionalInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>msgFormat2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>additionalInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msgFormat</name> <init>= <expr><ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>sourceStr</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>msgFormat3</name></expr> </then><else>: <expr><name>msgFormat1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>msgFormat</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_TSC_SQL_SYNTAX_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSchema</name><modifier>*</modifier></type> <name>getTableColumnSchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>SSchema</name><operator>*</operator><operator>)</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>getOneColumnSchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><operator>(</operator><name>SSchema</name><operator>*</operator><operator>)</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>pSchema</name><index>[<expr><name>colIndex</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSchema</name><modifier>*</modifier></type> <name>getTableTagSchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>getOneColumnSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><call><name>getTableInfo</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call><operator>.</operator><name>numOfColumns</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getNumOfColumns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// table created according to super table, use data from super table</comment>
  <return>return <expr><call><name>getTableInfo</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call><operator>.</operator><name>numOfColumns</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getNumOfTags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getTableInfo</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call><operator>.</operator><name>numOfTags</name></expr>;</return> </block_content>}</block></function>

<function><type><name>STableComInfo</name></type> <name>getTableInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>STableMeta</name><modifier>*</modifier></type> <name>tableMetaDup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfFields</name> <init>= <expr><call><name>TABLE_TOTAL_COL_NUM</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfFields</name> <operator>&gt;</operator> <name>TSDB_MAX_COLUMNS</name> <operator>||</operator> <name>numOfFields</name> <operator>&lt;</operator> <name>TSDB_MIN_COLUMNS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type>      <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMeta</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>numOfFields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>trimString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>dlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name>delim</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>dlen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <return>return <expr><name>j</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>delim</name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>delim</name></expr>)</condition> <block>{<block_content>  <comment type="line">// deal with "", ''</comment>
      <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// deal with escape character</comment>
      <if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>||</operator> <name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isValidateTag</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x20</literal> <operator>||</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x7E</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>parseJsontoTagData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>json</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagVals</name></decl></parameter>, <parameter><decl><type><name>STag</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppTag</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pMsgBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>retCode</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>    <name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>keyHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// set json NULL data</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name> <operator>||</operator> <call><name>strtrim</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>json</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>TSDB_DATA_NULL_STR_L</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>retCode</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set json real data</comment>
  <expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>retCode</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"json parse error"</literal></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsObject</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>retCode</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"json error invalide value"</literal></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>keyHash</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>cJSON_GetArrayItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"json inner error:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>retCode</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"json inner error"</literal></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>jsonKey</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidateTag</name><argument_list>(<argument><expr><name>jsonKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>retCode</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"json key not validate"</literal></expr></argument>, <argument><expr><name>jsonKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>keyLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>jsonKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>keyLen</name> <operator>&gt;</operator> <name>TSDB_MAX_JSON_KEY_LEN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"json key too long error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>retCode</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"json key too long, more than 256"</literal></expr></argument>, <argument><expr><name>jsonKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>keyLen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>keyHash</name></expr></argument>, <argument><expr><name>jsonKey</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>STagVal</name></type> <name>val</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <comment type="line">//    strcpy(val.colName, colName);</comment>
    <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pKey</name></name> <operator>=</operator> <name>jsonKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>keyHash</name></expr></argument>, <argument><expr><name>jsonKey</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>,
                <argument><expr><name>CHAR_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// add key to hash to remove dumplicate, value is useless</comment>

    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_String</name></expr>)</condition> <block>{<block_content>  <comment type="line">// add json value  format: type|data</comment>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>jsonValue</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>valuestring</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>valLen</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>jsonValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>tmp</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>valLen</name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>retCode</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>valLen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>taosMbsToUcs4</name><argument_list>(<argument><expr><name>jsonValue</name></expr></argument>, <argument><expr><name>valLen</name></expr></argument>, <argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>valLen</name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>valLen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"charset:%s to %s. val:%s, errno:%s, convert failed."</literal></expr></argument>, <argument><expr><name>DEFAULT_UNICODE_ENCODEC</name></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>, <argument><expr><name>jsonValue</name></expr></argument>,
               <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retCode</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"charset convert json error"</literal></expr></argument>, <argument><expr><name>jsonValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name>valLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isfinite</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"json value is invalidate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retCode</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"json value number is illegal"</literal></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>val</name><operator>.</operator><name>i64</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_True</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_False</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>val</name><operator>.</operator><name>i64</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>valueint</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>retCode</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><literal type="string">"invalidate json value"</literal></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>keyHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>retCode</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTagNew</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ppTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STagVal</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>STagVal</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>retCode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getInsTagsTableTargetNameFromOp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>OP_TYPE_EQUAL</name> <operator>!=</operator> <name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>  <name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pCol</name> <operator>=</operator> <operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pVal</name> <operator>=</operator> <operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pCol</name> <operator>=</operator> <operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pVal</name> <operator>=</operator> <operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pVal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><literal type="string">"db_name"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><literal type="string">"table_name"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>tNameAddTbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getInsTagsTableTargetObjName</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>getInsTagsTableTargetNameFromOp</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getInsTagsTableTargetNameFromCond</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>LOGIC_COND_TYPE_AND</name> <operator>!=</operator> <name><name>pCond</name><operator>-&gt;</operator><name>condType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pCond-&gt;pParameterList</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>getInsTagsTableTargetObjName</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <name><name>pName</name><operator>-&gt;</operator><name>dbname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pName</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getVnodeSysTableTargetName</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pWhere</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pWhere</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pWhere</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getInsTagsTableTargetNameFromOp</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pWhere</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <literal type="char">'\0'</literal> <operator>==</operator> <name><name>pName</name><operator>-&gt;</operator><name>dbname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pName</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_LOGIC_CONDITION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pWhere</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>getInsTagsTableTargetNameFromCond</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pWhere</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>userAuthToString</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pUser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><name>AUTH_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">"%s*%d.%s*%d"</literal></expr></argument>, <argument><expr><name>pUser</name></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>userAuthToStringExt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pUser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbFName</name></decl></parameter>, <parameter><decl><type><name>AUTH_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">"%s*%s*%d"</literal></expr></argument>, <argument><expr><name>pUser</name></expr></argument>, <argument><expr><name>pDbFName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stringToUserAuth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SUserAuthInfo</name><modifier>*</modifier></type> <name>pUserAuth</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pUserAuth</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>p1</name> <operator>-</operator> <name>pStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name>p1</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p2</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pUserAuth</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name> <operator>-</operator> <name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name>p2</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>p2</name> <operator>-</operator> <name>pStr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pUserAuth</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildTableReq</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pTablesHash</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTablesHash</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pTables</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pTablesHash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pTables</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pTablesHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>pKey</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>   <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pTables</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pTablesHash</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildDbReq</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pDbsHash</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pDbsHash</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDbs</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pDbsHash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDbs</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pDbsHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>pKey</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>   <name><name>fullName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pDbs</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pDbsHash</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildTableReqFromDb</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pDbsHash</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pDbsHash</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDbs</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pDbs</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pDbsHash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STablesReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDbs</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SParseTablesMetaReq</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pDbsHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STablesReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>buildTableReq</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pDbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pDbsHash</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildUserAuthReq</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUserAuthHash</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pUserAuth</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pUserAuthHash</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pUserAuth</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pUserAuthHash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUserAuthInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pUserAuth</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pUserAuthHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type>        <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>         <name>pKey</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SUserAuthInfo</name></type> <name>userAuth</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>stringToUserAuth</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>userAuth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pUserAuth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>userAuth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pUserAuthHash</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildUdfReq</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUdfHash</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pUdf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pUdfHash</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pUdf</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pUdfHash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pUdf</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pUdfHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>pFunc</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>   <name><name>func</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pUdf</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pUdfHash</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildCatalogReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><name>SCatalogReq</name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>buildTableReqFromDb</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildDbReq</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildTableReqFromDb</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableVgroup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildDbReq</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildDbReq</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildUserAuthReq</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUserAuth</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildUdfReq</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUdf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pUdf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildTableReq</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildTableReq</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>dNodeRequired</name></name> <operator>=</operator> <name><name>pMetaCache</name><operator>-&gt;</operator><name>dnodeRequired</name></name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>putMetaDataToHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pHash</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pHash</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pHash</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><operator>*</operator><name>pHash</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRes</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getMetaDataFromHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRes</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>*</operator><name>pRes</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_PAR_INTERNAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><operator>(</operator><operator>*</operator><name>pRes</name><operator>)</operator><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>pRes</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><operator>(</operator><operator>*</operator><name>pRes</name><operator>)</operator><operator>-&gt;</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>putTableDataToCache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pTableReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pTableData</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ntables</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTableReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntables</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTableReq</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>putMetaDataToHash</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTableData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>putDbDataToCache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pDbReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pDbData</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nvgs</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDbReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvgs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pDbFName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDbReq</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>putMetaDataToHash</name><argument_list>(<argument><expr><name>pDbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pDbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pDbData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>putDbTableDataToCache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pDbReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pTableData</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ndbs</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDbReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tableNo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ndbs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDbReq</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>ntables</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ntables</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>putMetaDataToHash</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTableData</name></expr></argument>, <argument><expr><name>tableNo</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>++</operator><name>tableNo</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>putUserAuthToCache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pUserAuthReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pUserAuthData</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pUserAuth</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nvgs</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pUserAuthReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvgs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SUserAuthInfo</name><modifier>*</modifier></type> <name>pUser</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pUserAuthReq</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>           <name><name>key</name><index>[<expr><name>USER_AUTH_KEY_MAX_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>        <name>len</name> <init>= <expr><call><name>userAuthToStringExt</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>putMetaDataToHash</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pUserAuthData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pUserAuth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>putUdfToCache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pUdfReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pUdfData</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pUdf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pUdfReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pUdfReq</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>putMetaDataToHash</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pUdfData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pUdf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>putMetaDataToCache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SCatalogReq</name><modifier>*</modifier></type> <name>pCatalogReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaData</name><modifier>*</modifier></type> <name>pMetaData</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>putDbTableDataToCache</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putDbDataToCache</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putDbTableDataToCache</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putDbDataToCache</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putDbDataToCache</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putUserAuthToCache</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUserAuth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putUdfToCache</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pUdf</name></name></expr></argument>, <argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pUdfList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUdf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putTableDataToCache</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>, <argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putTableDataToCache</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>, <argument><expr><name><name>pMetaData</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDnodes</name></name> <operator>=</operator> <name><name>pMetaData</name><operator>-&gt;</operator><name>pDnodeList</name></name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>reserveTableReqInCacheImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTbFName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pTables</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pTables</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pTables</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><operator>*</operator><name>pTables</name></expr></argument>, <argument><expr><name>pTbFName</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nullPointer</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>reserveTableReqInCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%s.%s"</literal></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>reserveTableReqInCacheImpl</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>reserveTableReqInDbCacheImpl</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pDbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseTablesMetaReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><call><name>reserveTableReqInCache</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name>pDbs</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SParseTablesMetaReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>reserveTableReqInDbCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDbs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDbs</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDbs</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type>                 <name><name>fullName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SParseTablesMetaReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><operator>*</operator><name>pDbs</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pReq</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>reserveTableReqInDbCacheImpl</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>*</operator><name>pDbs</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>reserveTableReqInCache</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveTableMetaInCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveTableReqInDbCache</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveTableMetaInCacheExt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveTableReqInDbCache</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getTableMetaFromCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>getMetaDataFromHash</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pMeta</name> <operator>=</operator> <call><name>tableMetaDup</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>reserveDbReqInCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDbs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDbs</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDbs</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><operator>*</operator><name>pDbs</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nullPointer</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveDbVgInfoInCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveDbReqInCache</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getDbVgInfoFromCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbFName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVgList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getMetaDataFromHash</name><argument_list>(<argument><expr><name>pDbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pDbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// pVgList is null, which is a legal value, indicating that the user DB has not been created</comment>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pVgList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pVgInfo</name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name>pVgList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pVgInfo</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveTableVgroupInCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveTableReqInDbCache</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableVgroup</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveTableVgroupInCacheExt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveTableReqInDbCache</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableVgroup</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getTableVgroupFromCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>getMetaDataFromHash</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableVgroup</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pVg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveDbVgVersionInCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveDbReqInCache</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getDbVgVersionFromCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbFName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVersion</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pDbId</name></decl></parameter>,
                                <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pTableNum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pStateTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDbInfo</name><modifier>*</modifier></type> <name>pDbInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><call><name>getMetaDataFromHash</name><argument_list>(<argument><expr><name>pDbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pDbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDbInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pVersion</name> <operator>=</operator> <name><name>pDbInfo</name><operator>-&gt;</operator><name>vgVer</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pDbId</name> <operator>=</operator> <name><name>pDbInfo</name><operator>-&gt;</operator><name>dbId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pTableNum</name> <operator>=</operator> <name><name>pDbInfo</name><operator>-&gt;</operator><name>tbNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pStateTs</name> <operator>=</operator> <name><name>pDbInfo</name><operator>-&gt;</operator><name>stateTs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveDbCfgInCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveDbReqInCache</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getDbCfgFromCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbFName</name></decl></parameter>, <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pDbCfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>getMetaDataFromHash</name><argument_list>(<argument><expr><name>pDbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pDbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDbCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pDbCfg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbCfgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>reserveUserAuthInCacheImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMetaCache</name><operator>-&gt;</operator><name>pUserAuth</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUserAuth</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMetaCache</name><operator>-&gt;</operator><name>pUserAuth</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>pass</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUserAuth</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveUserAuthInCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pUser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><name>AUTH_TYPE</name></type> <name>type</name></decl></parameter>,
                               <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>key</name><index>[<expr><name>USER_AUTH_KEY_MAX_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>userAuthToString</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>reserveUserAuthInCacheImpl</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pMetaCache</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveUserAuthInCacheExt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pUser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>AUTH_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>key</name><index>[<expr><name>USER_AUTH_KEY_MAX_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>userAuthToStringExt</name><argument_list>(<argument><expr><name>pUser</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>reserveUserAuthInCacheImpl</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pMetaCache</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getUserAuthFromCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pUser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbFName</name></decl></parameter>, <parameter><decl><type><name>AUTH_TYPE</name></type> <name>type</name></decl></parameter>,
                             <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pPass</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>key</name><index>[<expr><name>USER_AUTH_KEY_MAX_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>userAuthToStringExt</name><argument_list>(<argument><expr><name>pUser</name></expr></argument>, <argument><expr><name>pDbFName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name><modifier>*</modifier></type>   <name>pRes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getMetaDataFromHash</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUserAuth</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPass</name> <operator>=</operator> <operator>*</operator><name>pRes</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveUdfInCache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMetaCache</name><operator>-&gt;</operator><name>pUdf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUdf</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMetaCache</name><operator>-&gt;</operator><name>pUdf</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUdf</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nullPointer</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getUdfInfoFromCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFuncInfo</name><modifier>*</modifier></type> <name>pFuncInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>getMetaDataFromHash</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUdf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pFuncInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pFuncInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFuncInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroySmaIndex</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STableIndexInfo</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SArray</name><modifier>*</modifier></type> <name>smaIndexesDup</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayDup</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>STableIndexInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>expr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableIndexInfo</name><modifier>*</modifier></type> <name>pIndex</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pIndex</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <call><name>taosMemoryStrDup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STableIndexInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pIndex</name><operator>-&gt;</operator><name>expr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>destroySmaIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveTableIndexInCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveTableReqInCache</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveTableCfgInCache</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveTableReqInCache</name><argument_list>(<argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getTableIndexFromCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pIndexes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pSmaIndexes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getMetaDataFromHash</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pSmaIndexes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pSmaIndexes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pIndexes</name> <operator>=</operator> <call><name>smaIndexesDup</name><argument_list>(<argument><expr><name>pSmaIndexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pIndexes</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STableCfg</name><modifier>*</modifier></type> <name>tableCfgDup</name><parameter_list>(<parameter><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pNew</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>pComment</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pComment</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pComment</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pComment</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>pFuncs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>tagsLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>tagsLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaSize</name> <init>= <expr><operator>(</operator><name><name>pCfg</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>numOfTags</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>schemaSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pSchemas</name></name></expr></argument>, <argument><expr><name>schemaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>=</operator> <name>pSchema</name></expr>;</expr_stmt>

  <return>return <expr><name>pNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getTableCfgFromCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pCfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>getMetaDataFromHash</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <call><name>tableCfgDup</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pOutput</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>reserveDnodeRequiredInCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>dnodeRequired</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getDnodeListFromCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDnodes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDnodes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pDnodes</name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDnodes</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destoryParseTablesMetaReqHash</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseTablesMetaReq</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destoryParseMetaCache</name><parameter_list>(<parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>request</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destoryParseTablesMetaReqHash</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destoryParseTablesMetaReqHash</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUserAuth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pUdf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMetaCache</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
