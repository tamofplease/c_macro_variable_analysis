<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/parser/src/parTokenizer.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parToken.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taosdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttokendef.h"</cpp:file></cpp:include>

<comment type="line">// All the keywords of the SQL language are stored in a hash table</comment>
<typedef>typedef <type><struct>struct <name>SKeyword</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>  <comment type="line">// The keyword name</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type>    <name>type</name></decl>;</decl_stmt>  <comment type="line">// type</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>     <name>len</name></decl>;</decl_stmt>   <comment type="line">// length</comment>
}</block></struct></type> <name>SKeyword</name>;</typedef>

<comment type="line">// clang-format off</comment>
<comment type="line">// keywords in sql string</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>SKeyword</name></type> <name><name>keywordTable</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"ACCOUNT"</literal></expr>,              <expr><name>TK_ACCOUNT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ACCOUNTS"</literal></expr>,             <expr><name>TK_ACCOUNTS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ADD"</literal></expr>,                  <expr><name>TK_ADD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"AGGREGATE"</literal></expr>,            <expr><name>TK_AGGREGATE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ALL"</literal></expr>,                  <expr><name>TK_ALL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ALTER"</literal></expr>,                <expr><name>TK_ALTER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ANALYZE"</literal></expr>,              <expr><name>TK_ANALYZE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"AND"</literal></expr>,                  <expr><name>TK_AND</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"APPS"</literal></expr>,                 <expr><name>TK_APPS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"AS"</literal></expr>,                   <expr><name>TK_AS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ASC"</literal></expr>,                  <expr><name>TK_ASC</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"AT_ONCE"</literal></expr>,              <expr><name>TK_AT_ONCE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BALANCE"</literal></expr>,              <expr><name>TK_BALANCE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BETWEEN"</literal></expr>,              <expr><name>TK_BETWEEN</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BIGINT"</literal></expr>,               <expr><name>TK_BIGINT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BINARY"</literal></expr>,               <expr><name>TK_BINARY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BNODE"</literal></expr>,                <expr><name>TK_BNODE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BNODES"</literal></expr>,               <expr><name>TK_BNODES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BOOL"</literal></expr>,                 <expr><name>TK_BOOL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BUFFER"</literal></expr>,               <expr><name>TK_BUFFER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BUFSIZE"</literal></expr>,              <expr><name>TK_BUFSIZE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BY"</literal></expr>,                   <expr><name>TK_BY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CACHE"</literal></expr>,                <expr><name>TK_CACHE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CACHEMODEL"</literal></expr>,           <expr><name>TK_CACHEMODEL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CACHESIZE"</literal></expr>,            <expr><name>TK_CACHESIZE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CASE"</literal></expr>,                 <expr><name>TK_CASE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CAST"</literal></expr>,                 <expr><name>TK_CAST</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CLIENT_VERSION"</literal></expr>,       <expr><name>TK_CLIENT_VERSION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CLUSTER"</literal></expr>,              <expr><name>TK_CLUSTER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"COLUMN"</literal></expr>,               <expr><name>TK_COLUMN</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"COMMENT"</literal></expr>,              <expr><name>TK_COMMENT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"COMP"</literal></expr>,                 <expr><name>TK_COMP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CONNECTION"</literal></expr>,           <expr><name>TK_CONNECTION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CONNECTIONS"</literal></expr>,          <expr><name>TK_CONNECTIONS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CONNS"</literal></expr>,                <expr><name>TK_CONNS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CONSUMER"</literal></expr>,             <expr><name>TK_CONSUMER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CONSUMERS"</literal></expr>,            <expr><name>TK_CONSUMERS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CONTAINS"</literal></expr>,             <expr><name>TK_CONTAINS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"COUNT"</literal></expr>,                <expr><name>TK_COUNT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CREATE"</literal></expr>,               <expr><name>TK_CREATE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CURRENT_USER"</literal></expr>,         <expr><name>TK_CURRENT_USER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DATABASE"</literal></expr>,             <expr><name>TK_DATABASE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DATABASES"</literal></expr>,            <expr><name>TK_DATABASES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DBS"</literal></expr>,                  <expr><name>TK_DBS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DELETE"</literal></expr>,               <expr><name>TK_DELETE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DELETE_MARK"</literal></expr>,          <expr><name>TK_DELETE_MARK</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DESC"</literal></expr>,                 <expr><name>TK_DESC</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DESCRIBE"</literal></expr>,             <expr><name>TK_DESCRIBE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DISTINCT"</literal></expr>,             <expr><name>TK_DISTINCT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DISTRIBUTED"</literal></expr>,          <expr><name>TK_DISTRIBUTED</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DNODE"</literal></expr>,                <expr><name>TK_DNODE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DNODES"</literal></expr>,               <expr><name>TK_DNODES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DOUBLE"</literal></expr>,               <expr><name>TK_DOUBLE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DROP"</literal></expr>,                 <expr><name>TK_DROP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DURATION"</literal></expr>,             <expr><name>TK_DURATION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ELSE"</literal></expr>,                 <expr><name>TK_ELSE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ENABLE"</literal></expr>,               <expr><name>TK_ENABLE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"END"</literal></expr>,                  <expr><name>TK_END</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"EXISTS"</literal></expr>,               <expr><name>TK_EXISTS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"EXPIRED"</literal></expr>,              <expr><name>TK_EXPIRED</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"EXPLAIN"</literal></expr>,              <expr><name>TK_EXPLAIN</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"EVERY"</literal></expr>,                <expr><name>TK_EVERY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"FILE"</literal></expr>,                 <expr><name>TK_FILE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"FILL"</literal></expr>,                 <expr><name>TK_FILL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"FILL_HISTORY"</literal></expr>,         <expr><name>TK_FILL_HISTORY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"FIRST"</literal></expr>,                <expr><name>TK_FIRST</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"FLOAT"</literal></expr>,                <expr><name>TK_FLOAT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"FLUSH"</literal></expr>,                <expr><name>TK_FLUSH</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"FROM"</literal></expr>,                 <expr><name>TK_FROM</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"FORCE"</literal></expr>,                <expr><name>TK_FORCE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"FUNCTION"</literal></expr>,             <expr><name>TK_FUNCTION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"FUNCTIONS"</literal></expr>,            <expr><name>TK_FUNCTIONS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"GRANT"</literal></expr>,                <expr><name>TK_GRANT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"GRANTS"</literal></expr>,               <expr><name>TK_GRANTS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"GROUP"</literal></expr>,                <expr><name>TK_GROUP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"HAVING"</literal></expr>,               <expr><name>TK_HAVING</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"IF"</literal></expr>,                   <expr><name>TK_IF</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"IGNORE"</literal></expr>,               <expr><name>TK_IGNORE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"IMPORT"</literal></expr>,               <expr><name>TK_IMPORT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"IN"</literal></expr>,                   <expr><name>TK_IN</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"INDEX"</literal></expr>,                <expr><name>TK_INDEX</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"INDEXES"</literal></expr>,              <expr><name>TK_INDEXES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"INNER"</literal></expr>,                <expr><name>TK_INNER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"INSERT"</literal></expr>,               <expr><name>TK_INSERT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"INT"</literal></expr>,                  <expr><name>TK_INT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"INTEGER"</literal></expr>,              <expr><name>TK_INTEGER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"INTERVAL"</literal></expr>,             <expr><name>TK_INTERVAL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"INTO"</literal></expr>,                 <expr><name>TK_INTO</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"IS"</literal></expr>,                   <expr><name>TK_IS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"JOIN"</literal></expr>,                 <expr><name>TK_JOIN</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"JSON"</literal></expr>,                 <expr><name>TK_JSON</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"KEEP"</literal></expr>,                 <expr><name>TK_KEEP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"KILL"</literal></expr>,                 <expr><name>TK_KILL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LAST"</literal></expr>,                 <expr><name>TK_LAST</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LAST_ROW"</literal></expr>,             <expr><name>TK_LAST_ROW</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LICENCES"</literal></expr>,             <expr><name>TK_LICENCES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LIKE"</literal></expr>,                 <expr><name>TK_LIKE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LIMIT"</literal></expr>,                <expr><name>TK_LIMIT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LINEAR"</literal></expr>,               <expr><name>TK_LINEAR</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LOCAL"</literal></expr>,                <expr><name>TK_LOCAL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MATCH"</literal></expr>,                <expr><name>TK_MATCH</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MAXROWS"</literal></expr>,              <expr><name>TK_MAXROWS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MAX_DELAY"</literal></expr>,            <expr><name>TK_MAX_DELAY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MAX_SPEED"</literal></expr>,            <expr><name>TK_MAX_SPEED</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MERGE"</literal></expr>,                <expr><name>TK_MERGE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"META"</literal></expr>,                 <expr><name>TK_META</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MINROWS"</literal></expr>,              <expr><name>TK_MINROWS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MINUS"</literal></expr>,                <expr><name>TK_MINUS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MNODE"</literal></expr>,                <expr><name>TK_MNODE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MNODES"</literal></expr>,               <expr><name>TK_MNODES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MODIFY"</literal></expr>,               <expr><name>TK_MODIFY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"MODULES"</literal></expr>,              <expr><name>TK_MODULES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"NCHAR"</literal></expr>,                <expr><name>TK_NCHAR</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"NEXT"</literal></expr>,                 <expr><name>TK_NEXT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"NMATCH"</literal></expr>,               <expr><name>TK_NMATCH</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"NONE"</literal></expr>,                 <expr><name>TK_NONE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"NOT"</literal></expr>,                  <expr><name>TK_NOT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"NOW"</literal></expr>,                  <expr><name>TK_NOW</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"NULL"</literal></expr>,                 <expr><name>TK_NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"NULLS"</literal></expr>,                <expr><name>TK_NULLS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"OFFSET"</literal></expr>,               <expr><name>TK_OFFSET</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ON"</literal></expr>,                   <expr><name>TK_ON</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"OR"</literal></expr>,                   <expr><name>TK_OR</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ORDER"</literal></expr>,                <expr><name>TK_ORDER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"OUTPUTTYPE"</literal></expr>,           <expr><name>TK_OUTPUTTYPE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PAGES"</literal></expr>,                <expr><name>TK_PAGES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PAGESIZE"</literal></expr>,             <expr><name>TK_PAGESIZE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PARTITION"</literal></expr>,            <expr><name>TK_PARTITION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PASS"</literal></expr>,                 <expr><name>TK_PASS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PORT"</literal></expr>,                 <expr><name>TK_PORT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PPS"</literal></expr>,                  <expr><name>TK_PPS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PRECISION"</literal></expr>,            <expr><name>TK_PRECISION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PREV"</literal></expr>,                 <expr><name>TK_PREV</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PRIVILEGES"</literal></expr>,           <expr><name>TK_PRIVILEGES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"QNODE"</literal></expr>,                <expr><name>TK_QNODE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"QNODES"</literal></expr>,               <expr><name>TK_QNODES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"QTIME"</literal></expr>,                <expr><name>TK_QTIME</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"QUERIES"</literal></expr>,              <expr><name>TK_QUERIES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"QUERY"</literal></expr>,                <expr><name>TK_QUERY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"RANGE"</literal></expr>,                <expr><name>TK_RANGE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"RATIO"</literal></expr>,                <expr><name>TK_RATIO</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"READ"</literal></expr>,                 <expr><name>TK_READ</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"REDISTRIBUTE"</literal></expr>,         <expr><name>TK_REDISTRIBUTE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"RENAME"</literal></expr>,               <expr><name>TK_RENAME</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"REPLICA"</literal></expr>,              <expr><name>TK_REPLICA</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"RESET"</literal></expr>,                <expr><name>TK_RESET</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"RETENTIONS"</literal></expr>,           <expr><name>TK_RETENTIONS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"REVOKE"</literal></expr>,               <expr><name>TK_REVOKE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ROLLUP"</literal></expr>,               <expr><name>TK_ROLLUP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SCHEMALESS"</literal></expr>,           <expr><name>TK_SCHEMALESS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SCORES"</literal></expr>,               <expr><name>TK_SCORES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SELECT"</literal></expr>,               <expr><name>TK_SELECT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SERVER_STATUS"</literal></expr>,        <expr><name>TK_SERVER_STATUS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SERVER_VERSION"</literal></expr>,       <expr><name>TK_SERVER_VERSION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SESSION"</literal></expr>,              <expr><name>TK_SESSION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SET"</literal></expr>,                  <expr><name>TK_SET</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SHOW"</literal></expr>,                 <expr><name>TK_SHOW</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SINGLE_STABLE"</literal></expr>,        <expr><name>TK_SINGLE_STABLE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SLIDING"</literal></expr>,              <expr><name>TK_SLIDING</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SLIMIT"</literal></expr>,               <expr><name>TK_SLIMIT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SMA"</literal></expr>,                  <expr><name>TK_SMA</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SMALLINT"</literal></expr>,             <expr><name>TK_SMALLINT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SNODE"</literal></expr>,                <expr><name>TK_SNODE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SNODES"</literal></expr>,               <expr><name>TK_SNODES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SOFFSET"</literal></expr>,              <expr><name>TK_SOFFSET</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SPLIT"</literal></expr>,                <expr><name>TK_SPLIT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STT_TRIGGER"</literal></expr>,          <expr><name>TK_STT_TRIGGER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STABLE"</literal></expr>,               <expr><name>TK_STABLE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STABLES"</literal></expr>,              <expr><name>TK_STABLES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STATE"</literal></expr>,                <expr><name>TK_STATE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STATE_WINDOW"</literal></expr>,         <expr><name>TK_STATE_WINDOW</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STORAGE"</literal></expr>,              <expr><name>TK_STORAGE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STREAM"</literal></expr>,               <expr><name>TK_STREAM</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STREAMS"</literal></expr>,              <expr><name>TK_STREAMS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STRICT"</literal></expr>,               <expr><name>TK_STRICT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SUBSCRIBE"</literal></expr>,            <expr><name>TK_SUBSCRIBE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SUBSCRIPTIONS"</literal></expr>,        <expr><name>TK_SUBSCRIPTIONS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SUBTABLE"</literal></expr>,             <expr><name>TK_SUBTABLE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SYSINFO"</literal></expr>,              <expr><name>TK_SYSINFO</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TABLE"</literal></expr>,                <expr><name>TK_TABLE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TABLES"</literal></expr>,               <expr><name>TK_TABLES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TABLE_PREFIX"</literal></expr>,         <expr><name>TK_TABLE_PREFIX</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TABLE_SUFFIX"</literal></expr>,         <expr><name>TK_TABLE_SUFFIX</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TAG"</literal></expr>,                  <expr><name>TK_TAG</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TAGS"</literal></expr>,                 <expr><name>TK_TAGS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TBNAME"</literal></expr>,               <expr><name>TK_TBNAME</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"THEN"</literal></expr>,                 <expr><name>TK_THEN</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TIMESTAMP"</literal></expr>,            <expr><name>TK_TIMESTAMP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TIMEZONE"</literal></expr>,             <expr><name>TK_TIMEZONE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TINYINT"</literal></expr>,              <expr><name>TK_TINYINT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TO"</literal></expr>,                   <expr><name>TK_TO</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TODAY"</literal></expr>,                <expr><name>TK_TODAY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TOPIC"</literal></expr>,                <expr><name>TK_TOPIC</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TOPICS"</literal></expr>,               <expr><name>TK_TOPICS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TRANSACTION"</literal></expr>,          <expr><name>TK_TRANSACTION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TRANSACTIONS"</literal></expr>,         <expr><name>TK_TRANSACTIONS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TRIGGER"</literal></expr>,              <expr><name>TK_TRIGGER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TRIM"</literal></expr>,                 <expr><name>TK_TRIM</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TSDB_PAGESIZE"</literal></expr>,        <expr><name>TK_TSDB_PAGESIZE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TSERIES"</literal></expr>,              <expr><name>TK_TSERIES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TTL"</literal></expr>,                  <expr><name>TK_TTL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"UNION"</literal></expr>,                <expr><name>TK_UNION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"UNSIGNED"</literal></expr>,             <expr><name>TK_UNSIGNED</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"USE"</literal></expr>,                  <expr><name>TK_USE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"USER"</literal></expr>,                 <expr><name>TK_USER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"USERS"</literal></expr>,                <expr><name>TK_USERS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"USING"</literal></expr>,                <expr><name>TK_USING</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"VALUE"</literal></expr>,                <expr><name>TK_VALUE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"VALUES"</literal></expr>,               <expr><name>TK_VALUES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"VARCHAR"</literal></expr>,              <expr><name>TK_VARCHAR</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"VARIABLES"</literal></expr>,            <expr><name>TK_VARIABLES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"VERBOSE"</literal></expr>,              <expr><name>TK_VERBOSE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"VGROUP"</literal></expr>,               <expr><name>TK_VGROUP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"VGROUPS"</literal></expr>,              <expr><name>TK_VGROUPS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"VNODES"</literal></expr>,               <expr><name>TK_VNODES</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WAL_FSYNC_PERIOD"</literal></expr>,     <expr><name>TK_WAL_FSYNC_PERIOD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WAL_LEVEL"</literal></expr>,            <expr><name>TK_WAL_LEVEL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WAL_RETENTION_PERIOD"</literal></expr>, <expr><name>TK_WAL_RETENTION_PERIOD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WAL_RETENTION_SIZE"</literal></expr>,   <expr><name>TK_WAL_RETENTION_SIZE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WAL_ROLL_PERIOD"</literal></expr>,      <expr><name>TK_WAL_ROLL_PERIOD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WAL_SEGMENT_SIZE"</literal></expr>,     <expr><name>TK_WAL_SEGMENT_SIZE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WATERMARK"</literal></expr>,            <expr><name>TK_WATERMARK</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WHEN"</literal></expr>,                 <expr><name>TK_WHEN</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WHERE"</literal></expr>,                <expr><name>TK_WHERE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WINDOW_CLOSE"</literal></expr>,         <expr><name>TK_WINDOW_CLOSE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WITH"</literal></expr>,                 <expr><name>TK_WITH</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WRITE"</literal></expr>,                <expr><name>TK_WRITE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"_C0"</literal></expr>,                  <expr><name>TK_ROWTS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"_IROWTS"</literal></expr>,              <expr><name>TK_IROWTS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"_QDURATION"</literal></expr>,           <expr><name>TK_QDURATION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"_QEND"</literal></expr>,                <expr><name>TK_QEND</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"_QSTART"</literal></expr>,              <expr><name>TK_QSTART</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"_ROWTS"</literal></expr>,               <expr><name>TK_ROWTS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"_TAGS"</literal></expr>,                <expr><name>TK_QTAGS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"_WDURATION"</literal></expr>,           <expr><name>TK_WDURATION</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"_WEND"</literal></expr>,                <expr><name>TK_WEND</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"_WSTART"</literal></expr>,              <expr><name>TK_WSTART</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// clang-format on</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>isIdChar</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <comment type="block">/* 0x */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <comment type="block">/* 1x */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <comment type="block">/* 2x */</comment>
    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <comment type="block">/* 3x */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <comment type="block">/* 4x */</comment>
    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <comment type="block">/* 5x */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <comment type="block">/* 6x */</comment>
    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <comment type="block">/* 7x */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>keywordHashTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doInitKeywordsTable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>numOfEntries</name> <init>= <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>keywordTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>keywordHashTable</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>numOfEntries</name></expr></argument>, <argument><expr><name>MurmurHash3_32</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfEntries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>keywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>keywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><operator>&amp;</operator><name><name>keywordTable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>keywordHashTable</name></expr></argument>, <argument><expr><name><name>keywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>keywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type> <name>keywordsHashTableInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tKeywordCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keywordsHashTableInit</name></expr></argument>, <argument><expr><name>doInitKeywordsTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// too long token, can not be any other token type</comment>
    <return>return <expr><name>TK_NK_ID</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>key</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xDF</literal><operator>)</operator></expr>;</expr_stmt>  <comment type="line">// to uppercase and set the null-terminated</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>key</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>keywordHashTable</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TK_NK_ILLEGAL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SKeyword</name><modifier>*</modifier><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><operator>(</operator><name>SKeyword</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name>keywordHashTable</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>pKey</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><operator>(</operator><operator>*</operator><name>pKey</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>TK_NK_ID</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the length of the token that begins at z[0].
 * Store the token type in *type before returning.
 */</comment>
<function><type><name>uint32_t</name></type> <name>tGetToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>tokenId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><operator>*</operator><name>z</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">' '</literal></expr>:</case>
    <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
    <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
    <case>case <expr><literal type="char">'\f'</literal></expr>:</case>
    <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      </block_content>}</block></for>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_SPACE</name></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">':'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_COLON</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'-'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        </block_content>}</block></for>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_COMMENT</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_ARROW</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_MINUS</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'('</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_LP</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">')'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_RP</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">';'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_SEMI</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'+'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_PLUS</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'*'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_STAR</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'/'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_SLASH</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_COMMENT</name></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'%'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_REM</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'='</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_EQ</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_LE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_NE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_LSHIFT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_LT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_GE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_RSHIFT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_GT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><literal type="char">'!'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_ILLEGAL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_NE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><literal type="char">'|'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_BITOR</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_CONCAT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><literal type="char">','</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_COMMA</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_BITAND</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'~'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_BITNOT</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'?'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_QUESTION</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'`'</literal></expr>:</case>
    <case>case <expr><literal type="char">'\''</literal></expr>:</case>
    <case>case <expr><literal type="char">'"'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type>  <name>delim</name> <init>= <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>strEnd</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>delim</name> <operator>!=</operator> <literal type="char">'`'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// ignore the escaped character that follows this backslash</comment>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>delim</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>delim</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>strEnd</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>strEnd</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>delim</name> <operator>==</operator> <literal type="char">'`'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TK_NK_ID</name></expr> </then><else>: <expr><name>TK_NK_STRING</name></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'.'</literal></expr>:</case> <block>{<block_content>
      <comment type="block">/*
       * handle the the float number with out integer part
       * .123
       * .123e4
       */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_FLOAT</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_DOT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <case>case <expr><literal type="char">'0'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>next</name> <init>= <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// bin number</comment>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_BIN</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// hex number</comment>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_HEX</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <case>case <expr><literal type="char">'1'</literal></expr>:</case>
    <case>case <expr><literal type="char">'2'</literal></expr>:</case>
    <case>case <expr><literal type="char">'3'</literal></expr>:</case>
    <case>case <expr><literal type="char">'4'</literal></expr>:</case>
    <case>case <expr><literal type="char">'5'</literal></expr>:</case>
    <case>case <expr><literal type="char">'6'</literal></expr>:</case>
    <case>case <expr><literal type="char">'7'</literal></expr>:</case>
    <case>case <expr><literal type="char">'8'</literal></expr>:</case>
    <case>case <expr><literal type="char">'9'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_INTEGER</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      </block_content>}</block></for>

      <comment type="block">/* here is the 1u/1a/2s/3m/9y */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator>
           <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'U'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>||</operator>
           <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'H'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'Y'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>(</operator><name><name>isIdChar</name><index>[<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_VARIABLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>seg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>seg</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if <condition>(<expr><name>seg</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// ip address</comment>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_IPTOKEN</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>seg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>(</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_FLOAT</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <comment type="line">// case '[': {</comment>
    <comment type="line">//   for (i = 1; z[i] &amp;&amp; z[i - 1] != ']'; i++) {</comment>
    <comment type="line">//   }</comment>
    <comment type="line">//   *tokenId = TK_NK_ID;</comment>
    <comment type="line">//   return i;</comment>
    <comment type="line">// }</comment>
    <case>case <expr><literal type="char">'T'</literal></expr>:</case>
    <case>case <expr><literal type="char">'t'</literal></expr>:</case>
    <case>case <expr><literal type="char">'F'</literal></expr>:</case>
    <case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>isIdChar</name><index>[<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_BOOL</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <call><name>tKeywordCode</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>isIdChar</name><index>[<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>z</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>isIdChar</name><index>[<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      </block_content>}</block></for>
      <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <call><name>tKeywordCode</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>

  <expr_stmt><expr><operator>*</operator><name>tokenId</name> <operator>=</operator> <name>TK_NK_ILLEGAL</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SToken</name></type> <name>tStrGetToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isPrevOptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SToken</name></type> <name>t0</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// here we reach the end of sql string, null-terminated string</comment>
  <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>t0</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// IGNORE TK_NK_SPACE, TK_NK_COMMA, and specified tokens</comment>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>i</name> <operator>+=</operator> <name><name>t0</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfComma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name>t</name> <init>= <expr><name><name>str</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">'\f'</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>++</operator><name>numOfComma</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="line">// comma only allowed once</comment>
        <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>t0</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>str</name><index>[<expr><operator>++</operator><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>tGetToken</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t0</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>

    <comment type="line">// not support user specfied ignored symbol list</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    bool ignore = false;
    for (uint32_t k = 0; k &lt; numOfIgnoreToken; k++) {
      if (t0.type == ignoreTokenTypes[k]) {
        ignore = true;
        break;
      }
    }

    if (!ignore) {
      break;
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>t0</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_SEMI</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>t0</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name></decl>;</decl_stmt>

  <comment type="line">// support parse the 'db.tbl' format, notes: There should be no space on either side of the dot!</comment>
  <if_stmt><if>if <condition>(<expr><literal type="char">'.'</literal> <operator>==</operator> <name><name>str</name><index>[<expr><operator>*</operator><name>i</name> <operator>+</operator> <name><name>t0</name><operator>.</operator><name>n</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>tGetToken</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><operator>*</operator><name>i</name> <operator>+</operator> <name><name>t0</name><operator>.</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// only id and string are valid</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>TK_NK_STRING</name> <operator>!=</operator> <name><name>t0</name><operator>.</operator><name>type</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>TK_NK_ID</name> <operator>!=</operator> <name><name>t0</name><operator>.</operator><name>type</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TK_NK_ILLEGAL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <return>return <expr><name>t0</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>n</name></name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// support parse the -/+number format</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isPrevOptr</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>t0</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_MINUS</name> <operator>||</operator> <name><name>t0</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TK_NK_PLUS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>tGetToken</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><operator>*</operator><name>i</name> <operator>+</operator> <name><name>t0</name><operator>.</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TK_NK_INTEGER</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TK_NK_FLOAT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>n</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>str</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>i</name> <operator>+=</operator> <name><name>t0</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

  <return>return <expr><name>t0</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosIsKeyWordToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>tKeywordCode</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TK_NK_ID</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCleanupKeywordsTable</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>m</name> <init>= <expr><name>keywordHashTable</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>atomic_val_compare_exchange_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keywordHashTable</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>m</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SToken</name></type> <name>taosTokenDup</name><parameter_list>(<parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pToken</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SToken</name></type> <name>token</name> <init>= <expr><operator>*</operator><name>pToken</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>token</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <return>return <expr><name>token</name></expr>;</return>
</block_content>}</block></function>
</unit>
