<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/parser/src/parInsertUtil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parInsertUtil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tRealloc.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SBlockKeyTuple</name> <block>{
  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>skey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>payloadAddr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>index</name></decl>;</decl_stmt>
}</block></struct></type> <name>SBlockKeyTuple</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SBlockKeyInfo</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>maxBytesAlloc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockKeyTuple</name><modifier>*</modifier></type> <name>pKeyTuple</name></decl>;</decl_stmt>
}</block></struct></type> <name>SBlockKeyInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>rowArray</name></decl>;</decl_stmt>  <comment type="line">// array of merged rows(mem allocated by tRealloc/free by tFree)</comment>
  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>tbUid</name></decl>;</decl_stmt>  <comment type="line">// suid for child table, uid for normal table</comment>
}</block></struct></type> <name>SBlockRowMerger</name>;</typedef>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tdResetSBlockRowMerger</name><parameter_list>(<parameter><decl><type><name>SBlockRowMerger</name><modifier>*</modifier></type> <name>pMerger</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMerger</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMerger</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdFreeSBlockRowMerger</name><parameter_list>(<parameter><decl><type><name>SBlockRowMerger</name><modifier>*</modifier></type> <name>pMerger</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMerger</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>rowArray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>rowArray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>rowArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMerger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rowDataCompar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>left</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name>lhs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>right</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name>rhs</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>right</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>left</name> <operator>&gt;</operator> <name>right</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rowDataComparStable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>left</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name>lhs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>right</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name>rhs</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>right</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SBlockKeyTuple</name><operator>*</operator><operator>)</operator><name>lhs</name><operator>)</operator><operator>-&gt;</operator><name>index</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>SBlockKeyTuple</name><operator>*</operator><operator>)</operator><name>rhs</name><operator>)</operator><operator>-&gt;</operator><name>index</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>left</name> <operator>&gt;</operator> <name>right</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insGetExtendedRowSize</name><parameter_list>(<parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableComInfo</name><modifier>*</modifier></type> <name>pTableInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>rowSize</name></name> <operator>==</operator> <name><name>pTableInfo</name><operator>-&gt;</operator><name>rowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pBlock</name><operator>-&gt;</operator><name>rowSize</name></name> <operator>+</operator> <name>TD_ROW_HEAD_LEN</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name><operator>.</operator><name>extendedVarLen</name></name> <operator>+</operator>
         <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name><name>pTableInfo</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>insGetSTSRowAppendInfo</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>rowType</name></decl></parameter>, <parameter><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>spd</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>toffset</name></decl></parameter>,
                            <parameter><decl><type><name>col_id_t</name><modifier>*</modifier></type> <name>colIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>col_id_t</name></type> <name>schemaIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_DATA_COL_ORDERED</name><argument_list>(<argument><expr><name>spd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>schemaIdx</name> <operator>=</operator> <name><name>spd</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TD_IS_TP_ROW_T</name><argument_list>(<argument><expr><name>rowType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>toffset</name> <operator>=</operator> <operator>(</operator><name><name>spd</name><operator>-&gt;</operator><name>cols</name></name> <operator>+</operator> <name>schemaIdx</name><operator>)</operator><operator>-&gt;</operator><name>toffset</name></expr>;</expr_stmt>  <comment type="line">// the offset of firstPart</comment>
      <expr_stmt><expr><operator>*</operator><name>colIdx</name> <operator>=</operator> <name>schemaIdx</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>toffset</name> <operator>=</operator> <name>idx</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>  <comment type="line">// the offset of SKvRowIdx</comment>
      <expr_stmt><expr><operator>*</operator><name>colIdx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>==</operator> <operator>(</operator><name><name>spd</name><operator>-&gt;</operator><name>colIdxInfo</name></name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>-&gt;</operator><name>boundIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>schemaIdx</name> <operator>=</operator> <operator>(</operator><name><name>spd</name><operator>-&gt;</operator><name>colIdxInfo</name></name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>-&gt;</operator><name>schemaColIdx</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TD_IS_TP_ROW_T</name><argument_list>(<argument><expr><name>rowType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>toffset</name> <operator>=</operator> <operator>(</operator><name><name>spd</name><operator>-&gt;</operator><name>cols</name></name> <operator>+</operator> <name>schemaIdx</name><operator>)</operator><operator>-&gt;</operator><name>toffset</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>colIdx</name> <operator>=</operator> <name>schemaIdx</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>toffset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>spd</name><operator>-&gt;</operator><name>colIdxInfo</name></name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>-&gt;</operator><name>finalIdx</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>colIdx</name> <operator>=</operator> <operator>(</operator><name><name>spd</name><operator>-&gt;</operator><name>colIdxInfo</name></name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>-&gt;</operator><name>finalIdx</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insSetBlockInfo</name><parameter_list>(<parameter><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pBlocks</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>dataBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>TSDB_NORMAL_TABLE</name> <operator>==</operator> <name><name>dataBuf</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>dataBuf</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <name><name>dataBuf</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <name><name>dataBuf</name><operator>-&gt;</operator><name>createTbReqLen</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlocks</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name>numOfRows</name> <operator>&gt;=</operator> <name>INT32_MAX</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"too many rows in sql, total number of rows should be less than INT32_MAX"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>insSetBoundColumnInfo</name><parameter_list>(<parameter><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>pColList</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>orderStatus</name></name> <operator>=</operator> <name>ORDER_STATUS_ORDERED</name></expr>;</expr_stmt>  <comment type="line">// default is ORDERED for non-bound mode</comment>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>col_id_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBoundColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>colIdxInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>flen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>allNullLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nVar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pColList</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name> <init>= <expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pColList</name><operator>-&gt;</operator><name>cols</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>pSchema</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>toffset</name> <operator>=</operator> <name><name>pColList</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>flen</name></name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
        <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>allNullLen</name></name> <operator>+=</operator> <operator>(</operator><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>CHAR_BYTES</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>nVar</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
        <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>allNullLen</name></name> <operator>+=</operator> <operator>(</operator><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>TSDB_NCHAR_SIZE</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>nVar</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>allNullLen</name></name> <operator>+=</operator> <name><name>pColList</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundNullLen</name></name> <operator>=</operator> <name><name>pColList</name><operator>-&gt;</operator><name>allNullLen</name></name></expr>;</expr_stmt>  <comment type="line">// default set allNullLen</comment>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>extendedVarLen</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>nVar</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insSchemaIdxCompar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>left</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>lhs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>right</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>rhs</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>right</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>left</name> <operator>&gt;</operator> <name>right</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insBoundIdxCompar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>left</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>right</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>right</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>left</name> <operator>&gt;</operator> <name>right</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyBoundColumnInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBoundInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBoundInfo</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>pColList</name> <init>= <expr><operator>(</operator><name>SParsedDataColInfo</name><operator>*</operator><operator>)</operator><name>pBoundInfo</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>colIdxInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createDataBlock</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>defaultSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>startOffset</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>,
                               <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>dataBlocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>dataBuf</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dataBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>defaultSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>headerSize</name></name> <operator>=</operator> <name>startOffset</name></expr>;</expr_stmt>

  <comment type="line">// the header size will always be the startOffset value, reserved for the subumit block header</comment>
  <if_stmt><if>if <condition>(<expr><name><name>dataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>&lt;=</operator> <name><name>dataBuf</name><operator>-&gt;</operator><name>headerSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>=</operator> <name><name>dataBuf</name><operator>-&gt;</operator><name>headerSize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>dataBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pTableMeta</name></name> <operator>=</operator> <call><name>tableMetaDup</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><operator>&amp;</operator><name><name>dataBuf</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type>            <name>pSchema</name> <init>= <expr><call><name>getTableColumnSchema</name><argument_list>(<argument><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>insSetBoundColumnInfo</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>ordered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>prevTS</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>rowSize</name></name> <operator>=</operator> <name>rowSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>startOffset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>dataBuf</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>defaultSize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pTableMeta</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dataBuf</name><operator>-&gt;</operator><name>pTableMeta</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>dataBlocks</name> <operator>=</operator> <name>dataBuf</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insBuildCreateTbMsg</name><parameter_list>(<parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pBlocks</name></decl></parameter>, <parameter><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type> <name>pCreateTbReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>pBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVCreateTbReq</name></expr></argument>, <argument><expr><name>pCreateTbReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlocks</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>-</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>+=</operator> <name>len</name> <operator>+</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>rowSize</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pTmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>-</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>-=</operator> <name>len</name> <operator>+</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>rowSize</name></name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pBuf</name> <operator>=</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tEncodeSVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pCreateTbReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>createTbReqLen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>insDestroyDataBlock</name><parameter_list>(<parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pDataBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyBoundColumnInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insGetDataBlockFromList</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHashList</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>idLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>startOffset</name></decl></parameter>,
                                <parameter><decl><type><name>int32_t</name></type> <name>rowSize</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>dataBlocks</name></decl></parameter>,
                                <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBlockList</name></decl></parameter>, <parameter><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type> <name>pCreateTbReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>dataBlocks</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>t1</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHashList</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>id</name></expr></argument>, <argument><expr><name>idLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dataBlocks</name> <operator>=</operator> <operator>*</operator><name>t1</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dataBlocks</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>createDataBlock</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>rowSize</name></expr></argument>, <argument><expr><name>startOffset</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>dataBlocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pCreateTbReq</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pCreateTbReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>pTag</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insBuildCreateTbMsg</name><argument_list>(<argument><expr><operator>*</operator><name>dataBlocks</name></expr></argument>, <argument><expr><name>pCreateTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>insDestroyDataBlock</name><argument_list>(<argument><expr><operator>*</operator><name>dataBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// converting to 'const char*' is to handle coverity scan errors</comment>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pHashList</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>id</name></expr></argument>, <argument><expr><name>idLen</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>dataBlocks</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlockList</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><name>dataBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>insDestroyBlockArrayList</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDataBlockList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pDataBlockList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDataBlockList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pDataBlockList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>insDestroyDataBlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pDataBlockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>insDestroyBlockHashmap</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pDataBlockHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pDataBlockHash</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pDataBlockHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pBlocks</name> <init>= <expr><operator>*</operator><name>p1</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>insDestroyDataBlock</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pDataBlockHash</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pDataBlockHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// data block is disordered, sort it in ascending order</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sortRemoveDataBlockDupRows</name><parameter_list>(<parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>dataBuf</name></decl></parameter>, <parameter><decl><type><name>SBlockKeyInfo</name><modifier>*</modifier></type> <name>pBlkKeyInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pBlocks</name> <init>= <expr><operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><name><name>dataBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>     <name>nRows</name> <init>= <expr><name><name>pBlocks</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// size is less than the total size, since duplicated rows may be removed yet.</comment>

  <comment type="line">// allocate memory</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nAlloc</name> <init>= <expr><name>nRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SBlockKeyTuple</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>maxBytesAlloc</name></name> <operator>&lt;</operator> <name>nAlloc</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name></expr></argument>, <argument><expr><name>nAlloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name> <operator>=</operator> <operator>(</operator><name>SBlockKeyTuple</name><operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>maxBytesAlloc</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>nAlloc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>         <name>extendedRowSize</name> <init>= <expr><call><name>insGetExtendedRowSize</name><argument_list>(<argument><expr><name>dataBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockKeyTuple</name><modifier>*</modifier></type> <name>pBlkKeyTuple</name> <init>= <expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>           <name>pBlockData</name> <init>= <expr><name><name>pBlocks</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>schemaLen</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>nRows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlkKeyTuple</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <call><name>TD_ROW_KEY</name><argument_list>(<argument><expr><operator>(</operator><name>STSRow</name><operator>*</operator><operator>)</operator><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlkKeyTuple</name><operator>-&gt;</operator><name>payloadAddr</name></name> <operator>=</operator> <name>pBlockData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlkKeyTuple</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

    <comment type="line">// next loop</comment>
    <expr_stmt><expr><name>pBlockData</name> <operator>+=</operator> <name>extendedRowSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>pBlkKeyTuple</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dataBuf</name><operator>-&gt;</operator><name>ordered</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pBlkKeyTuple</name> <operator>=</operator> <name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name></expr>;</expr_stmt>

    <comment type="line">// todo. qsort is unstable, if timestamp is same, should get the last one</comment>
    <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name>pBlkKeyTuple</name></expr></argument>, <argument><expr><name>nRows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockKeyTuple</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rowDataComparStable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pBlkKeyTuple</name> <operator>=</operator> <name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>nRows</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSKEY</name></type> <name>ti</name> <init>= <expr><operator>(</operator><name>pBlkKeyTuple</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>-&gt;</operator><name>skey</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TSKEY</name></type> <name>tj</name> <init>= <expr><operator>(</operator><name>pBlkKeyTuple</name> <operator>+</operator> <name>j</name><operator>)</operator><operator>-&gt;</operator><name>skey</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>ti</name> <operator>==</operator> <name>tj</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>nextPos</name> <init>= <expr><operator>(</operator><operator>++</operator><name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>nextPos</name> <operator>!=</operator> <name>j</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pBlkKeyTuple</name> <operator>+</operator> <name>nextPos</name></expr></argument>, <argument><expr><name>pBlkKeyTuple</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockKeyTuple</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>ordered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>*</operator> <name>extendedRowSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>prevTS</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>tdGetCurRowFromBlockMerger</name><parameter_list>(<parameter><decl><type><name>SBlockRowMerger</name><modifier>*</modifier></type> <name>pBlkRowMerger</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBlkRowMerger</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pBlkRowMerger</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlkRowMerger</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlkRowMerger</name><operator>-&gt;</operator><name>rowArray</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlkRowMerger</name><operator>-&gt;</operator><name>rowArray</name></name></expr></argument>, <argument><expr><name><name>pBlkRowMerger</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdBlockRowMerge</name><parameter_list>(<parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>, <parameter><decl><type><name>SBlockKeyTuple</name><modifier>*</modifier></type> <name>pEndKeyTp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nDupRows</name></decl></parameter>,
                               <parameter><decl><type><name>SBlockRowMerger</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBlkRowMerger</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nDupRows</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SBlockKeyTuple</name><modifier>*</modifier></type> <name>pStartKeyTp</name> <init>= <expr><name>pEndKeyTp</name> <operator>-</operator> <operator>(</operator><name>nDupRows</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pStartKeyTp</name><operator>-&gt;</operator><name>skey</name></name> <operator>==</operator> <name><name>pEndKeyTp</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TODO: optimization if end row is all normal</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  STSRow* pEndRow = (STSRow*)pEndKeyTp-&gt;payloadAddr;
  if(isNormal(pEndRow)) { <comment type="line">// set the end row if it is normal and return directly</comment>
    pStartKeyTp-&gt;payloadAddr = pEndKeyTp-&gt;payloadAddr;
    return TSDB_CODE_SUCCESS;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pBlkRowMerger</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>rowArray</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>rowArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>rowArray</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>pSchema</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name><name>pSchema</name><operator>-&gt;</operator><name>version</name></name></name> <operator>!=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>tbUid</name></name> <operator>!=</operator> <operator>(</operator><ternary><condition><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr> </then><else>: <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>pSchema</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator>
        <call><name>tdGetSTSChemaFromSSChema</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>pSchema</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>tbUid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr> </then><else>: <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pDestRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>++</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>index</name></name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>rowArray</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pAlloc</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>rowArray</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pAlloc</name></expr></argument>, <argument><expr><name>rowSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pDestRow</name> <operator>=</operator> <operator>*</operator><name>pAlloc</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDestRow</name></expr></argument>, <argument><expr><name>rowSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>rowArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDestRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// merge rows to pDestRow</comment>
  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pBlkRowMerger</name><operator>)</operator><operator>-&gt;</operator><name>pSchema</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColVal</name></type> <name>colVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nDupRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tTSRowGetVal</name><argument_list>(<argument><expr><operator>(</operator><name>pEndKeyTp</name> <operator>-</operator> <name>j</name><operator>)</operator><operator>-&gt;</operator><name>payloadAddr</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>colVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>tdSTSRowNew</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><operator>(</operator><name>STSRow</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDestRow</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// data block is disordered, sort it in ascending order, and merge dup rows if exists</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sortMergeDataBlockDupRows</name><parameter_list>(<parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>dataBuf</name></decl></parameter>, <parameter><decl><type><name>SBlockKeyInfo</name><modifier>*</modifier></type> <name>pBlkKeyInfo</name></decl></parameter>,
                                     <parameter><decl><type><name>SBlockRowMerger</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppBlkRowMerger</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pBlocks</name> <init>= <expr><operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><name><name>dataBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name> <init>= <expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nRows</name> <init>= <expr><name><name>pBlocks</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// size is less than the total size, since duplicated rows may be removed.</comment>

  <comment type="line">// allocate memory</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nAlloc</name> <init>= <expr><name>nRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SBlockKeyTuple</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>maxBytesAlloc</name></name> <operator>&lt;</operator> <name>nAlloc</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name></expr></argument>, <argument><expr><name>nAlloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name> <operator>=</operator> <operator>(</operator><name>SBlockKeyTuple</name><operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>maxBytesAlloc</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>nAlloc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdResetSBlockRowMerger</name><argument_list>(<argument><expr><operator>*</operator><name>ppBlkRowMerger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>         <name>extendedRowSize</name> <init>= <expr><call><name>insGetExtendedRowSize</name><argument_list>(<argument><expr><name>dataBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockKeyTuple</name><modifier>*</modifier></type> <name>pBlkKeyTuple</name> <init>= <expr><name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>           <name>pBlockData</name> <init>= <expr><name><name>pBlocks</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>schemaLen</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>nRows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlkKeyTuple</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <call><name>TD_ROW_KEY</name><argument_list>(<argument><expr><operator>(</operator><name>STSRow</name><operator>*</operator><operator>)</operator><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlkKeyTuple</name><operator>-&gt;</operator><name>payloadAddr</name></name> <operator>=</operator> <name>pBlockData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlkKeyTuple</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

    <comment type="line">// next loop</comment>
    <expr_stmt><expr><name>pBlockData</name> <operator>+=</operator> <name>extendedRowSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>pBlkKeyTuple</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dataBuf</name><operator>-&gt;</operator><name>ordered</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pBlkKeyTuple</name> <operator>=</operator> <name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name>pBlkKeyTuple</name></expr></argument>, <argument><expr><name>nRows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockKeyTuple</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rowDataComparStable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pBlkKeyTuple</name> <operator>=</operator> <name><name>pBlkKeyInfo</name><operator>-&gt;</operator><name>pKeyTuple</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>hasDup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nextPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>nRows</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSKEY</name></type> <name>ti</name> <init>= <expr><operator>(</operator><name>pBlkKeyTuple</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>-&gt;</operator><name>skey</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TSKEY</name></type> <name>tj</name> <init>= <expr><operator>(</operator><name>pBlkKeyTuple</name> <operator>+</operator> <name>j</name><operator>)</operator><operator>-&gt;</operator><name>skey</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>ti</name> <operator>==</operator> <name>tj</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>tdBlockRowMerge</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><operator>(</operator><name>pBlkKeyTuple</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>ppBlkRowMerger</name></expr></argument>, <argument><expr><name>extendedRowSize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>(</operator><name>pBlkKeyTuple</name> <operator>+</operator> <name>nextPos</name><operator>)</operator><operator>-&gt;</operator><name>payloadAddr</name> <operator>=</operator> <call><name>tdGetCurRowFromBlockMerger</name><argument_list>(<argument><expr><operator>*</operator><name>ppBlkRowMerger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasDup</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>hasDup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>hasDup</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pBlkKeyTuple</name> <operator>+</operator> <name>nextPos</name></expr></argument>, <argument><expr><name>pBlkKeyTuple</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockKeyTuple</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><operator>++</operator><name>nextPos</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>pBlkKeyTuple</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>-&gt;</operator><name>skey</name> <operator>==</operator> <operator>(</operator><name>pBlkKeyTuple</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tdBlockRowMerge</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><operator>(</operator><name>pBlkKeyTuple</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>ppBlkRowMerger</name></expr></argument>, <argument><expr><name>extendedRowSize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>(</operator><name>pBlkKeyTuple</name> <operator>+</operator> <name>nextPos</name><operator>)</operator><operator>-&gt;</operator><name>payloadAddr</name> <operator>=</operator> <call><name>tdGetCurRowFromBlockMerger</name><argument_list>(<argument><expr><operator>*</operator><name>ppBlkRowMerger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hasDup</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pBlkKeyTuple</name> <operator>+</operator> <name>nextPos</name></expr></argument>, <argument><expr><name>pBlkKeyTuple</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockKeyTuple</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>ordered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name>nextPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>*</operator> <name>extendedRowSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>prevTS</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Erase the empty space reserved for binary data</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>trimDataBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pTableDataBlock</name></decl></parameter>, <parameter><decl><type><name>SBlockKeyTuple</name><modifier>*</modifier></type> <name>blkKeyTuple</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO: optimize this function, handle the case while binary is not presented</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nonDataLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pTableDataBlock</name><operator>-&gt;</operator><name>createTbReqLen</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>pDataBlock</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name><name>pTableDataBlock</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>nonDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pDataBlock</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pDataBlock</name> <operator>+</operator> <name>nonDataLen</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <name><name>pTableDataBlock</name><operator>-&gt;</operator><name>createTbReqLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>     <name>payload</name> <init>= <expr><operator>(</operator><name>blkKeyTuple</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>-&gt;</operator><name>payloadAddr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TDRowLenT</name></type> <name>rowTLen</name> <init>= <expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><operator>(</operator><name>STSRow</name><operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>rowTLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pDataBlock</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>rowTLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>+=</operator> <name>rowTLen</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name><name>pBlock</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>+</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>schemaLen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insMergeTableDataBlocks</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgDataBlocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INSERT_HEAD_SIZE</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVnodeDataBlockHashList</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>pVnodeDataBlockList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type>  <name>pOneTableBlock</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockKeyInfo</name></type>      <name>blkKeyInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>  <comment type="line">// share by pOneTableBlock</comment>
  <decl_stmt><decl><type><name>SBlockRowMerger</name><modifier>*</modifier></type>   <name>pBlkRowMerger</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pOneTableBlock</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pBlocks</name> <init>= <expr><operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><name><name>pOneTableBlock</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBlocks</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>dataBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pOneTableBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pOneTableBlock</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>  <comment type="line">// for schemaless, restore origin vgId</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>insGetDataBlockFromList</name><argument_list>(<argument><expr><name>pVnodeDataBlockHashList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOneTableBlock</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
                                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pOneTableBlock</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TSDB_PAYLOAD_SIZE</name></expr></argument>, <argument><expr><name>INSERT_HEAD_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                            <argument><expr><name><name>pOneTableBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBuf</name></expr></argument>, <argument><expr><name>pVnodeDataBlockList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdFreeSBlockRowMerger</name><argument_list>(<argument><expr><name>pBlkRowMerger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVnodeDataBlockHashList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>insDestroyBlockArrayList</name><argument_list>(<argument><expr><name>pVnodeDataBlockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>blkKeyInfo</name><operator>.</operator><name>pKeyTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pOneTableBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>rowSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// the maximum expanded size in byte when a row-wise data is converted to SDataRow format</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>destSize</name> <init>= <expr><name><name>dataBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>pOneTableBlock</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator>
                         <sizeof>sizeof<argument_list>(<argument><expr><name>STColumn</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>getNumOfColumns</name><argument_list>(<argument><expr><name><name>pOneTableBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
                         <name><name>pOneTableBlock</name><operator>-&gt;</operator><name>createTbReqLen</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>dataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>&lt;</operator> <name>destSize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>destSize</name> <operator>*</operator> <literal type="number">1.5</literal><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// failed to allocate memory, free already allocated memory and return error code</comment>
          <expr_stmt><expr><call><name>tdFreeSBlockRowMerger</name><argument_list>(<argument><expr><name>pBlkRowMerger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVnodeDataBlockHashList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>insDestroyBlockArrayList</name><argument_list>(<argument><expr><name>pVnodeDataBlockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>blkKeyInfo</name><operator>.</operator><name>pKeyTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>sortMergeDataBlockDupRows</name><argument_list>(<argument><expr><name>pOneTableBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blkKeyInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlkRowMerger</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdFreeSBlockRowMerger</name><argument_list>(<argument><expr><name>pBlkRowMerger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVnodeDataBlockHashList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>insDestroyBlockArrayList</name><argument_list>(<argument><expr><name>pVnodeDataBlockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>blkKeyInfo</name><operator>.</operator><name>pKeyTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>blkKeyInfo</name><operator>.</operator><name>pKeyTuple</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// erase the empty space reserved for binary data</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>finalLen</name> <init>= <expr><call><name>trimDataBlock</name><argument_list>(<argument><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>dataBuf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>pOneTableBlock</name></expr></argument>, <argument><expr><name><name>blkKeyInfo</name><operator>.</operator><name>pKeyTuple</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <operator>(</operator><name>finalLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name><name>dataBuf</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dataBuf</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pOneTableBlock</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// free the table data blocks;</comment>
  <expr_stmt><expr><call><name>tdFreeSBlockRowMerger</name><argument_list>(<argument><expr><name>pBlkRowMerger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVnodeDataBlockHashList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>blkKeyInfo</name><operator>.</operator><name>pKeyTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVgDataBlocks</name> <operator>=</operator> <name>pVnodeDataBlockList</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insAllocateMemForSize</name><parameter_list>(<parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>allSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>   <name>remain</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>-</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>nAllocSizeOld</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// expand the allocated size</comment>
  <if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&lt;</operator> <name>allSize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>=</operator> <operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>allSize</name><operator>)</operator> <operator>*</operator> <literal type="number">1.5</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>-</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// do nothing, if allocate more memory failed</comment>
      <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>=</operator> <name>nAllocSizeOld</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insInitRowBuilder</name><parameter_list>(<parameter><decl><type><name>SRowBuilder</name><modifier>*</modifier></type> <name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>schemaVer</name></decl></parameter>, <parameter><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>pColInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pColInfo</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>&lt;=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdSRowInit</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>schemaVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdSRowSetExtendedInfo</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>allNullLen</name></name></expr></argument>,
                        <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>boundNullLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>tableNameGetPosition</name><parameter_list>(<parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>inEscape</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>inQuote</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>quotaStr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>==</operator> <name>target</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>inEscape</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>inQuote</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name> <operator>+</operator> <name>i</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>==</operator> <name>TS_ESCAPE_CHAR</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inQuote</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>inEscape</name> <operator>=</operator> <operator>!</operator><name>inEscape</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inEscape</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inQuote</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>quotaStr</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>inQuote</name> <operator>=</operator> <operator>!</operator><name>inQuote</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>quotaStr</name> <operator>==</operator> <operator>*</operator><operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name> <operator>+</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>inQuote</name> <operator>=</operator> <operator>!</operator><name>inQuote</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insCreateSName</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>, <parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pMsgBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg1</name> <init>= <expr><literal type="string">"name too long"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg2</name> <init>= <expr><literal type="string">"invalid database name"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg3</name> <init>= <expr><literal type="string">"db is not specified"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg4</name> <init>= <expr><literal type="string">"invalid table name"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><call><name>tableNameGetPosition</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name><name>TS_PATH_DELIMITER</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// db has been specified in sql string so we ignore current db path</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>p</name> <operator>==</operator> <name><name>TS_PATH_DELIMITER</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>dbLen</name> <init>= <expr><name>p</name> <operator>-</operator> <name><name>pTableName</name><operator>-&gt;</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dbLen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>dbLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>actualDbLen</name> <init>= <expr><call><name>strdequote</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tNameSetDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>actualDbLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>msg1</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>tbLen</name> <init>= <expr><name><name>pTableName</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>dbLen</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tbLen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>msg4</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>tbname</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tbLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*tbLen = */</comment> <expr_stmt><expr><call><name>strdequote</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tNameFromString</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>msg1</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// get current DB name first, and then set it into path</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pTableName</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <name>TSDB_TABLE_NAME_LEN</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>msg1</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strdequote</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>dbName</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>msg3</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tNameSetDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tNameFromString</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>msg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsgExt</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_IDENTIFIER_NAME</name></expr></argument>, <argument><expr><literal type="string">"The table name cannot contain '.'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insFindCol</name><parameter_list>(<parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pColname</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pSchema</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pColname</name><operator>-&gt;</operator><name>n</name></name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>pColname</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>pColname</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>start</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><name>start</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>insBuildCreateTbReq</name><parameter_list>(<parameter><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type> <name>pTbReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tname</name></decl></parameter>, <parameter><decl><type><name>STag</name><modifier>*</modifier></type> <name>pTag</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sname</name></decl></parameter>,
                         <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tagNum</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ttl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pTbReq</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TD_CHILD_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbReq</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagNum</name></name> <operator>=</operator> <name>tagNum</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pTbReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>stbName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pTbReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>pTag</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pTag</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagName</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbReq</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbReq</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insMemRowAppend</name><parameter_list>(<parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>pMsgBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMemParam</name><modifier>*</modifier></type>   <name>pa</name> <init>= <expr><operator>(</operator><name>SMemParam</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowBuilder</name><modifier>*</modifier></type> <name>rb</name> <init>= <expr><name><name>pa</name><operator>-&gt;</operator><name>rb</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// it is a null data</comment>
    <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>toffset</name></name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>colIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>==</operator> <name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>rowEnd</name> <init>= <expr><call><name>tdRowEnd</name><argument_list>(<argument><expr><name><name>rb</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_SIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>rowEnd</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>rowEnd</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>toffset</name></name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>colIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// if the converted output len is over than pColumnModel-&gt;bytes, return error: 'Argument list too long'</comment>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>rowEnd</name> <init>= <expr><call><name>tdRowEnd</name><argument_list>(<argument><expr><name><name>rb</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosMbsToUcs4</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>rowEnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>E2BIG</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_VALUE_TOO_LONG</name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>pMsgBuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>rowEnd</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>rowEnd</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>toffset</name></name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>colIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>toffset</name></name></expr></argument>, <argument><expr><name><name>pa</name><operator>-&gt;</operator><name>colIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insCheckTimestamp</name><parameter_list>(<parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBlocks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// once the data block is disordered, we do NOT keep previous timestamp any more</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pDataBlocks</name><operator>-&gt;</operator><name>ordered</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>k</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name>start</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name><name>pDataBlocks</name><operator>-&gt;</operator><name>prevTS</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDataBlocks</name><operator>-&gt;</operator><name>ordered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDataBlocks</name><operator>-&gt;</operator><name>prevTS</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildMsgHeader</name><parameter_list>(<parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>blocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>submit</name> <init>= <expr><operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><name><name>blocks</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>submit</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blocks</name><operator>-&gt;</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>submit</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blocks</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>submit</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>submit</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>contLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>submit</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blocks</name><operator>-&gt;</operator><name>numOfTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><operator>(</operator><name>submit</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfBlocks</name> <init>= <expr><name><name>blocks</name><operator>-&gt;</operator><name>numOfTables</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>numOfBlocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><name><name>blk</name><operator>-&gt;</operator><name>dataLen</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaLen</name> <init>= <expr><name><name>blk</name><operator>-&gt;</operator><name>schemaLen</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>schemaLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>blk</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>dataLen</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>insBuildOutput</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgroupsHashObj</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVgDataBlocks</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDataBlocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfVg</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pVgDataBlocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pDataBlocks</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfVg</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDataBlocks</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfVg</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pVgDataBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type>    <name>dst</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashGetDup</name><argument_list>(<argument><expr><name>pVgroupsHashObj</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>vg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>numOfTables</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>buildMsgHeader</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pDataBlocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
