<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/parser/src/parAstCreater.c">
<comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parAst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_OUT_OF_MEM</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                                                      \
  <cpp:value>do {                                                                           \
    if (NULL == (p)) {                                                           \
      pCxt-&gt;errCode = TSDB_CODE_OUT_OF_MEMORY;                                   \
      snprintf(pCxt-&gt;pQueryCxt-&gt;pMsg, pCxt-&gt;pQueryCxt-&gt;msgLen, "Out of memory"); \
      return NULL;                                                               \
    }                                                                            \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_PARSER_STATUS</name><parameter_list>(<parameter><type><name>pCxt</name></type></parameter>)</parameter_list></cpp:macro>             \
  <cpp:value>do {                                        \
    if (TSDB_CODE_SUCCESS != pCxt-&gt;errCode) { \
      return NULL;                            \
    }                                         \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_STRING_FORM_ID_TOKEN</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>pToken</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strncpy(buf, (pToken)-&gt;z, TMIN((pToken)-&gt;n, sizeof(buf) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_STRING_FORM_STR_TOKEN</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>pToken</name></type></parameter>)</parameter_list></cpp:macro>                              \
  <cpp:value>do {                                                                       \
    if ((pToken)-&gt;n &gt; 2) {                                                   \
      strncpy(buf, (pToken)-&gt;z + 1, TMIN((pToken)-&gt;n - 2, sizeof(buf) - 1)); \
    }                                                                        \
  } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>SToken</name></type> <name>nil_token</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TK_NK_NIL</name></expr>, <expr><operator>.</operator><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>z</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initAstCreateContext</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParseCxt</name></decl></parameter>, <parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SAstCreateContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pQueryCxt</name></name> <operator>=</operator> <name>pParseCxt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>pParseCxt</name><operator>-&gt;</operator><name>pMsg</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>pParseCxt</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>notSupport</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pRootNode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>placeholderNo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pPlaceholderValues</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trimEscape</name><parameter_list>(<parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo need to deal with `ioo``ii` -&gt; ioo`ii</comment>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pName</name> <operator>&amp;&amp;</operator> <name><name>pName</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="char">'`'</literal> <operator>==</operator> <name><name>pName</name><operator>-&gt;</operator><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pName</name><operator>-&gt;</operator><name>z</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pName</name><operator>-&gt;</operator><name>n</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkUserName</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pUserName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pUserName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pUserName</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <name>TSDB_USER_LEN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NAME_OR_PASSWD_TOO_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>trimEscape</name><argument_list>(<argument><expr><name>pUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>invalidPassword</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pPassword</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>regex_t</name></type> <name>regex</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><literal type="string">"[ '\"`\\]"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Execute regular expression */</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>res</name> <init>= <expr><call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name>pPassword</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal> <operator>==</operator> <name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkPassword</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pPasswordToken</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pPassword</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pPasswordToken</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pPasswordToken</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <operator>(</operator><name>TSDB_USET_PASSWORD_LEN</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NAME_OR_PASSWD_TOO_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>pPassword</name></expr></argument>, <argument><expr><name><name>pPasswordToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pPasswordToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strdequote</name><argument_list>(<argument><expr><name>pPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strtrim</name><argument_list>(<argument><expr><name>pPassword</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_PASSWD_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>invalidPassword</name><argument_list>(<argument><expr><name>pPassword</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_PASSWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parsePort</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pPort</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pPort</name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pPort</name> <operator>&gt;=</operator> <name>UINT16_MAX</name> <operator>||</operator> <operator>*</operator><name>pPort</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_PORT</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseEndpoint</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pEp</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pFqdn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pPort</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pEp</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>==</operator> <name>pPort</name></expr> ?</condition><then> <expr><operator>(</operator><name>TSDB_FQDN_LEN</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr> </then><else>: <expr><name>TSDB_FQDN_LEN</name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="line">// format 'fqdn:port' or 'fqdn'</comment>
    <return>return <expr><call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_NAME_OR_PASSWD_TOO_LONG</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>ep</name><index>[<expr><name>TSDB_FQDN_LEN</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>pEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strdequote</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strtrim</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pPort</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pFqdn</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pColon</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pColon</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPort</name> <operator>=</operator> <name>tsServerPort</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pFqdn</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>pFqdn</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>pColon</name> <operator>-</operator> <name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>parsePort</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pColon</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pPort</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkAndSplitEndpoint</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pEp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pPortToken</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pFqdn</name></decl></parameter>,
                                  <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pPort</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pEp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pPortToken</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>parsePort</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pPortToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>pPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>parseEndpoint</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pEp</name></expr></argument>, <argument><expr><name>pFqdn</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name>pPortToken</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pPort</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkDbName</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>demandDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDbName</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>demandDb</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pQueryCxt</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>trimEscape</name><argument_list>(<argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDbName</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <name>TSDB_DB_NAME_LEN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_IDENTIFIER_NAME</name></expr></argument>, <argument><expr><name><name>pDbName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkTableName</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>trimEscape</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTableName</name> <operator>&amp;&amp;</operator> <name><name>pTableName</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <name>TSDB_TABLE_NAME_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_IDENTIFIER_NAME</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkColumnName</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pColumnName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>trimEscape</name><argument_list>(<argument><expr><name>pColumnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pColumnName</name> <operator>&amp;&amp;</operator> <name><name>pColumnName</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <name>TSDB_COL_NAME_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_IDENTIFIER_NAME</name></expr></argument>, <argument><expr><name><name>pColumnName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkIndexName</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pIndexName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>trimEscape</name><argument_list>(<argument><expr><name>pIndexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pIndexName</name> <operator>&amp;&amp;</operator> <name><name>pIndexName</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <name>TSDB_INDEX_NAME_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_INVALID_IDENTIFIER_NAME</name></expr></argument>, <argument><expr><name><name>pIndexName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkComment</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pCommentToken</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>demand</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCommentToken</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <ternary><condition><expr><name>demand</name></expr> ?</condition><then> <expr><name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr> </then><else>: <expr><name>TSDB_CODE_SUCCESS</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCommentToken</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <operator>(</operator><name>TSDB_TB_COMMENT_LEN</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_COMMENT_TOO_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createRawExprNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pToken</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRawExprNode</name><modifier>*</modifier></type> <name>target</name> <init>= <expr><operator>(</operator><name>SRawExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_RAW_EXPR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>target</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createRawExprNodeExt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pStart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pEnd</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRawExprNode</name><modifier>*</modifier></type> <name>target</name> <init>= <expr><operator>(</operator><name>SRawExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_RAW_EXPR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>pStart</name><operator>-&gt;</operator><name>z</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <operator>(</operator><name><name>pEnd</name><operator>-&gt;</operator><name>z</name></name> <operator>+</operator> <name><name>pEnd</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator> <operator>-</operator> <name><name>pStart</name><operator>-&gt;</operator><name>z</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>target</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>releaseRawExprNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRawExprNode</name><modifier>*</modifier></type> <name>pRawExpr</name> <init>= <expr><operator>(</operator><name>SRawExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>        <name>pRealizedExpr</name> <init>= <expr><name><name>pRawExpr</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodesIsExprNode</name><argument_list>(<argument><expr><name>pRealizedExpr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pRealizedExpr</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pExpr</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pExpr</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pRawExpr</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>, <argument><expr><name><name>pRawExpr</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>, <argument><expr><name><name>pRawExpr</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pRawExpr</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRealizedExpr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SToken</name></type> <name>getTokenFromRawExprNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name> <operator>||</operator> <name>QUERY_NODE_RAW_EXPR</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>nil_token</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SRawExprNode</name><modifier>*</modifier></type> <name>target</name> <init>= <expr><operator>(</operator><name>SRawExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SToken</name></type>        <name>t</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>z</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>p</name></name></expr>, <expr><operator>.</operator><name>n</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>n</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNodeList</name><modifier>*</modifier></type> <name>createNodeList</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>nodesListAppend</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNodeList</name><modifier>*</modifier></type> <name>addNodeToList</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>nodesListAppend</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pList</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createColumnNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTableAlias</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pColumnName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkTableName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTableAlias</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>checkColumnName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pColumnName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>col</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTableAlias</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name>pTableAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>pColumnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>col</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createValueNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pLiteral</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>pLiteral</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pLiteral</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_NK_ID</name> <operator>!=</operator> <name><name>pLiteral</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>TK_TIMEZONE</name> <operator>!=</operator> <name><name>pLiteral</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator>
      <operator>(</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name>dataType</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>trimString</name><argument_list>(<argument><expr><name><name>pLiteral</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pLiteral</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name><name>pLiteral</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <ternary><condition><expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>tDataTypes</name><index>[<expr><name>dataType</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name>dataType</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>isDuration</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createIdentifierValueNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pLiteral</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>trimEscape</name><argument_list>(<argument><expr><name>pLiteral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>createValueNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>, <argument><expr><name>pLiteral</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDurationValueNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pLiteral</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>pLiteral</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pLiteral</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>isDuration</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDefaultDatabaseCondValue</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pQueryCxt</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pQueryCxt</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>isDuration</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createPlaceholderValueNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pLiteral</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pQueryCxt</name><operator>-&gt;</operator><name>pStmtCb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCxt</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr></argument>, <argument><expr><name><name>pLiteral</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>pLiteral</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pLiteral</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>placeholderNo</name></name> <operator>=</operator> <operator>++</operator><name><name>pCxt</name><operator>-&gt;</operator><name>placeholderNo</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pPlaceholderValues</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pPlaceholderValues</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TARRAY_MIN_SIZE</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pPlaceholderValues</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pPlaceholderValues</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addParamToLogicConditionNode</name><parameter_list>(<parameter><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_LOGIC_CONDITION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pCond</name><operator>-&gt;</operator><name>condType</name></name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pParam</name><operator>)</operator><operator>-&gt;</operator><name>condType</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodesListAppendList</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pParam</name><operator>)</operator><operator>-&gt;</operator><name>pParameterList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pParam</name><operator>)</operator><operator>-&gt;</operator><name>pParameterList</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createLogicConditionNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>ELogicConditionType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParam1</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParam2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>cond</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>condType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addParamToLogicConditionNode</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>pParam1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pParam2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addParamToLogicConditionNode</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>pParam2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>cond</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>getMinusDataType</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>orgType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>orgType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <return>return <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>orgType</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createOperatorNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>EOperatorType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pLeft</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>OP_TYPE_MINUS</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name>QUERY_NODE_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pLeft</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pLeft</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>       <name>pNewLiteral</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pNewLiteral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="char">'+'</literal> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pNewLiteral</name></expr></argument>, <argument><expr><literal type="string">"-%s"</literal></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="char">'-'</literal> <operator>==</operator> <name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pNewLiteral</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pNewLiteral</name></expr></argument>, <argument><expr><literal type="string">"-%s"</literal></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name> <operator>=</operator> <name>pNewLiteral</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>getMinusDataType</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>pLeft</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>op</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_OPERATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>=</operator> <name>pLeft</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>pRight</name></name> <operator>=</operator> <name>pRight</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createBetweenAnd</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pLeft</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>createLogicConditionNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>LOGIC_COND_TYPE_AND</name></expr></argument>,
                                  <argument><expr><call><name>createOperatorNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>OP_TYPE_GREATER_EQUAL</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pLeft</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name>createOperatorNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>OP_TYPE_LOWER_EQUAL</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createNotBetweenAnd</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pLeft</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>createLogicConditionNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>LOGIC_COND_TYPE_OR</name></expr></argument>, <argument><expr><call><name>createOperatorNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>OP_TYPE_LOWER_THAN</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pLeft</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name>createOperatorNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>OP_TYPE_GREATER_THAN</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createPrimaryKeyCol</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pFuncName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFuncName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>ROWTS_PSEUDO_COLUMN_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pFuncName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pFuncName</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createFunctionNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pFuncName</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pParameterList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><literal type="string">"_rowts"</literal></expr></argument>, <argument><expr><name><name>pFuncName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pFuncName</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><literal type="string">"_c0"</literal></expr></argument>, <argument><expr><name><name>pFuncName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pFuncName</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>createPrimaryKeyCol</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFuncName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>func</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><name>pFuncName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>func</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>=</operator> <name>pParameterList</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>func</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCastFunctionNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>dt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>func</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><literal type="string">"cast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>func</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name>dt</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_VARCHAR</name> <operator>==</operator> <name><name>dt</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>func</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>func</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name><name>dt</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>func</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>func</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>func</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>func</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createNodeListNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_NODE_LIST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>pNodeList</name></name> <operator>=</operator> <name>pList</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createNodeListNodeEx</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_NODE_LIST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>pNodeList</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createRealTableNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTableAlias</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkDbName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>checkTableName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>checkTableName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTableAlias</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>realTable</name> <init>= <expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_REAL_TABLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>realTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pDbName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>realTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>realTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>realTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pQueryCxt</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTableAlias</name> <operator>&amp;&amp;</operator> <name>TK_NK_NIL</name> <operator>!=</operator> <name><name>pTableAlias</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>realTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name>pTableAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>realTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>realTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>realTable</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createTempTableNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pSubquery</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pTableAlias</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STempTableNode</name><modifier>*</modifier></type> <name>tempTable</name> <init>= <expr><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_TEMP_TABLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>tempTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tempTable</name><operator>-&gt;</operator><name>pSubquery</name></name> <operator>=</operator> <name>pSubquery</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTableAlias</name> <operator>&amp;&amp;</operator> <name>TK_NK_NIL</name> <operator>!=</operator> <name><name>pTableAlias</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>tempTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name>pTableAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosRandStr</name><argument_list>(<argument><expr><name><name>tempTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pSubquery</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pSubquery</name><operator>)</operator><operator>-&gt;</operator><name>stmtName</name></expr></argument>, <argument><expr><name><name>tempTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pSubquery</name><operator>)</operator><operator>-&gt;</operator><name>isSubquery</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_SET_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pSubquery</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pSubquery</name><operator>)</operator><operator>-&gt;</operator><name>stmtName</name></expr></argument>, <argument><expr><name><name>tempTable</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>tempTable</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createJoinTableNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>EJoinType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pLeft</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pJoinCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SJoinTableNode</name><modifier>*</modifier></type> <name>joinTable</name> <init>= <expr><operator>(</operator><name>SJoinTableNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_JOIN_TABLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>joinTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>joinTable</name><operator>-&gt;</operator><name>joinType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>joinTable</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>=</operator> <name>pLeft</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>joinTable</name><operator>-&gt;</operator><name>pRight</name></name> <operator>=</operator> <name>pRight</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>joinTable</name><operator>-&gt;</operator><name>pOnCond</name></name> <operator>=</operator> <name>pJoinCond</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>joinTable</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createLimitNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pLimit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SLimitNode</name><modifier>*</modifier></type> <name>limitNode</name> <init>= <expr><operator>(</operator><name>SLimitNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_LIMIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>limitNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>limitNode</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <call><name>taosStr2Int64</name><argument_list>(<argument><expr><name><name>pLimit</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pOffset</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>limitNode</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>taosStr2Int64</name><argument_list>(<argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>limitNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createOrderByExprNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>EOrder</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>ENullOrder</name></type> <name>nullOrder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SOrderByExprNode</name><modifier>*</modifier></type> <name>orderByExpr</name> <init>= <expr><operator>(</operator><name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ORDER_BY_EXPR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>orderByExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>orderByExpr</name><operator>-&gt;</operator><name>pExpr</name></name> <operator>=</operator> <name>pExpr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>orderByExpr</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL_ORDER_DEFAULT</name> <operator>==</operator> <name>nullOrder</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nullOrder</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>ORDER_ASC</name> <operator>==</operator> <name>order</name></expr> ?</condition><then> <expr><name>NULL_ORDER_FIRST</name></expr> </then><else>: <expr><name>NULL_ORDER_LAST</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>orderByExpr</name><operator>-&gt;</operator><name>nullOrder</name></name> <operator>=</operator> <name>nullOrder</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>orderByExpr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createSessionWindowNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pGap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSessionWindowNode</name><modifier>*</modifier></type> <name>session</name> <init>= <expr><operator>(</operator><name>SSessionWindowNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SESSION_WINDOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>pCol</name></name> <operator>=</operator> <operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>pGap</name></name> <operator>=</operator> <operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pGap</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>session</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createStateWindowNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SStateWindowNode</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator><name>SStateWindowNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_STATE_WINDOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pCol</name></name> <operator>=</operator> <call><name>createPrimaryKeyCol</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>pCol</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pExpr</name></name> <operator>=</operator> <name>pExpr</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createIntervalWindowNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOffset</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pSliding</name></decl></parameter>,
                                <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pFill</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SIntervalWindowNode</name><modifier>*</modifier></type> <name>interval</name> <init>= <expr><operator>(</operator><name>SIntervalWindowNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_INTERVAL_WINDOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>pCol</name></name> <operator>=</operator> <call><name>createPrimaryKeyCol</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>interval</name><operator>-&gt;</operator><name>pCol</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>pInterval</name></name> <operator>=</operator> <name>pInterval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>pOffset</name></name> <operator>=</operator> <name>pOffset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>pSliding</name></name> <operator>=</operator> <name>pSliding</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>pFill</name></name> <operator>=</operator> <name>pFill</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>interval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createFillNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>EFillMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SFillNode</name><modifier>*</modifier></type> <name>fill</name> <init>= <expr><operator>(</operator><name>SFillNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FILL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fill</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fill</name><operator>-&gt;</operator><name>pValues</name></name> <operator>=</operator> <name>pValues</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fill</name><operator>-&gt;</operator><name>pWStartTs</name></name> <operator>=</operator> <call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>fill</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name><name>fill</name><operator>-&gt;</operator><name>pWStartTs</name></name><operator>)</operator><operator>-&gt;</operator><name>functionName</name></expr></argument>, <argument><expr><literal type="string">"_wstart"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>fill</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createGroupingSetNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SGroupingSetNode</name><modifier>*</modifier></type> <name>groupingSet</name> <init>= <expr><operator>(</operator><name>SGroupingSetNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_GROUPING_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>groupingSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>groupingSet</name><operator>-&gt;</operator><name>groupingSetType</name></name> <operator>=</operator> <name>GP_TYPE_NORMAL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>groupingSet</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><name><name>groupingSet</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>groupingSet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createInterpTimeRange</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStart</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>createBetweenAnd</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>createPrimaryKeyCol</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createWhenThenNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pWhen</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pThen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWhenThenNode</name><modifier>*</modifier></type> <name>pWhenThen</name> <init>= <expr><operator>(</operator><name>SWhenThenNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_WHEN_THEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pWhenThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pWhen</name></name> <operator>=</operator> <name>pWhen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pThen</name></name> <operator>=</operator> <name>pThen</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pWhenThen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCaseWhenNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCase</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pWhenThenList</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pElse</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCaseWhenNode</name><modifier>*</modifier></type> <name>pCaseWhen</name> <init>= <expr><operator>(</operator><name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CASE_WHEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pCaseWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>pCase</name></name> <operator>=</operator> <name>pCase</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>pWhenThenList</name></name> <operator>=</operator> <name>pWhenThenList</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCaseWhen</name><operator>-&gt;</operator><name>pElse</name></name> <operator>=</operator> <name>pElse</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCaseWhen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>setProjectionAlias</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pAlias</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>trimEscape</name><argument_list>(<argument><expr><name>pAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>len</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pAlias</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>, <argument><expr><name><name>pAlias</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pExpr</name><operator>-&gt;</operator><name>aliasName</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>, <argument><expr><name><name>pAlias</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pExpr</name><operator>-&gt;</operator><name>userAlias</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addWhereClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pWhere</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pWhere</name> <operator>=</operator> <name>pWhere</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addPartitionByClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPartitionByList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pPartitionByList</name> <operator>=</operator> <name>pPartitionByList</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addWindowClauseClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pWindow</name> <operator>=</operator> <name>pWindow</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addGroupByClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroupByList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pGroupByList</name> <operator>=</operator> <name>pGroupByList</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addHavingClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pHaving</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pHaving</name> <operator>=</operator> <name>pHaving</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addOrderByClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pOrderByList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOrderByList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>pStmt</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pOrderByList</name> <operator>=</operator> <name>pOrderByList</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pOrderByList</name> <operator>=</operator> <name>pOrderByList</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addSlimitClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pSlimit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSlimit</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>pStmt</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pSlimit</name> <operator>=</operator> <operator>(</operator><name>SLimitNode</name><operator>*</operator><operator>)</operator><name>pSlimit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addLimitClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pLimit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pLimit</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>pStmt</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pLimit</name> <operator>=</operator> <operator>(</operator><name>SLimitNode</name><operator>*</operator><operator>)</operator><name>pLimit</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pLimit</name> <operator>=</operator> <name>pLimit</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addRangeClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRange</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pRange</name> <operator>=</operator> <name>pRange</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addEveryClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pEvery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pEvery</name> <operator>=</operator> <name>pEvery</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>addFillClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pFill</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pFill</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFillNode</name><modifier>*</modifier></type> <name>pFillClause</name> <init>= <expr><operator>(</operator><name>SFillNode</name><operator>*</operator><operator>)</operator><name>pFill</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pFillClause</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFillClause</name><operator>-&gt;</operator><name>pWStartTs</name></name> <operator>=</operator> <call><name>createPrimaryKeyCol</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>pFill</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFillClause</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createSelectStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isDistinct</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjectionList</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>select</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SELECT_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>isDistinct</name></name> <operator>=</operator> <name>isDistinct</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>pProjectionList</name></name> <operator>=</operator> <name>pProjectionList</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>pFromTable</name></name> <operator>=</operator> <name>pTable</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>stmtName</name></name></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name>select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>isTimeLineResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>onlyHasKeepOrderFunc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>timeRange</name></name> <operator>=</operator> <name>TSWINDOW_INITIALIZER</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>select</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setSubquery</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>isSubquery</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createSetOperator</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>ESetOperatorType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pLeft</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSetOperator</name><modifier>*</modifier></type> <name>setOp</name> <init>= <expr><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SET_OPERATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>setOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>setOp</name><operator>-&gt;</operator><name>opType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>setOp</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>=</operator> <name>pLeft</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setSubquery</name><argument_list>(<argument><expr><name><name>setOp</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>setOp</name><operator>-&gt;</operator><name>pRight</name></name> <operator>=</operator> <name>pRight</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setSubquery</name><argument_list>(<argument><expr><name><name>setOp</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>setOp</name><operator>-&gt;</operator><name>stmtName</name></name></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name>setOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>setOp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>updateWalOptionsDefault</name><parameter_list>(<parameter><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pOptions</name><operator>-&gt;</operator><name>walRetentionPeriodIsSet</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walRetentionPeriod</name></name> <operator>=</operator>
        <ternary><condition><expr><name><name>pOptions</name><operator>-&gt;</operator><name>replica</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TSDB_REPS_DEF_DB_WAL_RET_PERIOD</name></expr> </then><else>: <expr><name>TSDB_REP_DEF_DB_WAL_RET_PERIOD</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pOptions</name><operator>-&gt;</operator><name>walRetentionSizeIsSet</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walRetentionSize</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pOptions</name><operator>-&gt;</operator><name>replica</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TSDB_REPS_DEF_DB_WAL_RET_SIZE</name></expr> </then><else>: <expr><name>TSDB_REP_DEF_DB_WAL_RET_SIZE</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pOptions</name><operator>-&gt;</operator><name>walRollPeriodIsSet</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walRollPeriod</name></name> <operator>=</operator>
        <ternary><condition><expr><name><name>pOptions</name><operator>-&gt;</operator><name>replica</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TSDB_REPS_DEF_DB_WAL_ROLL_PERIOD</name></expr> </then><else>: <expr><name>TSDB_REP_DEF_DB_WAL_ROLL_PERIOD</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDefaultDatabaseOptions</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pOptions</name> <init>= <expr><operator>(</operator><name>SDatabaseOptions</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DATABASE_OPTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>TSDB_DEFAULT_BUFFER_PER_VNODE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModel</name></name> <operator>=</operator> <name>TSDB_DEFAULT_CACHE_MODEL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheLastSize</name></name> <operator>=</operator> <name>TSDB_DEFAULT_CACHE_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>compressionLevel</name></name> <operator>=</operator> <name>TSDB_DEFAULT_COMP_LEVEL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>daysPerFile</name></name> <operator>=</operator> <name>TSDB_DEFAULT_DAYS_PER_FILE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>fsyncPeriod</name></name> <operator>=</operator> <name>TSDB_DEFAULT_FSYNC_PERIOD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>maxRowsPerBlock</name></name> <operator>=</operator> <name>TSDB_DEFAULT_MAXROWS_FBLOCK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>minRowsPerBlock</name></name> <operator>=</operator> <name>TSDB_DEFAULT_MINROWS_FBLOCK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>TSDB_DEFAULT_KEEP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>TSDB_DEFAULT_KEEP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>TSDB_DEFAULT_KEEP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <name>TSDB_DEFAULT_PAGES_PER_VNODE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>=</operator> <name>TSDB_DEFAULT_PAGESIZE_PER_VNODE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>tsdbPageSize</name></name> <operator>=</operator> <name>TSDB_DEFAULT_TSDB_PAGESIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_DEFAULT_PRECISION</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>replica</name></name> <operator>=</operator> <name>TSDB_DEFAULT_DB_REPLICA</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>strict</name></name> <operator>=</operator> <name>TSDB_DEFAULT_DB_STRICT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walLevel</name></name> <operator>=</operator> <name>TSDB_DEFAULT_WAL_LEVEL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>numOfVgroups</name></name> <operator>=</operator> <name>TSDB_DEFAULT_VN_PER_DB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>singleStable</name></name> <operator>=</operator> <name>TSDB_DEFAULT_DB_SINGLE_STABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>schemaless</name></name> <operator>=</operator> <name>TSDB_DEFAULT_DB_SCHEMALESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>updateWalOptionsDefault</name><argument_list>(<argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walSegmentSize</name></name> <operator>=</operator> <name>TSDB_DEFAULT_DB_WAL_SEGMENT_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>sstTrigger</name></name> <operator>=</operator> <name>TSDB_DEFAULT_SST_TRIGGER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>tablePrefix</name></name> <operator>=</operator> <name>TSDB_DEFAULT_HASH_PREFIX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>tableSuffix</name></name> <operator>=</operator> <name>TSDB_DEFAULT_HASH_SUFFIX</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterDatabaseOptions</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pOptions</name> <init>= <expr><operator>(</operator><name>SDatabaseOptions</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DATABASE_OPTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheModel</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>cacheLastSize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>compressionLevel</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>daysPerFile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>fsyncPeriod</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>maxRowsPerBlock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>minRowsPerBlock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>keep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>tsdbPageSize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>replica</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>strict</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walLevel</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>numOfVgroups</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>singleStable</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>schemaless</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walRetentionPeriod</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walRetentionSize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walRollPeriod</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>walSegmentSize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>sstTrigger</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>tablePrefix</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>tableSuffix</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>setDatabaseOption</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>, <parameter><decl><type><name>EDatabaseOptionType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pDbOptions</name> <init>= <expr><operator>(</operator><name>SDatabaseOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>DB_OPTION_BUFFER</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_CACHEMODEL</name></expr>:</case>
      <expr_stmt><expr><call><name>COPY_STRING_FORM_STR_TOKEN</name><argument_list>(<argument><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>cacheModelStr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_CACHESIZE</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>cacheLastSize</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_COMP</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>compressionLevel</name></name> <operator>=</operator> <call><name>taosStr2Int8</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_DAYS</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pToken</name> <init>= <expr><name>pVal</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TK_NK_INTEGER</name> <operator>==</operator> <name><name>pToken</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>daysPerFile</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1440</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>pDaysPerFile</name></name> <operator>=</operator> <operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>createDurationValueNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>DB_OPTION_FSYNC</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>fsyncPeriod</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_MAXROWS</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>maxRowsPerBlock</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_MINROWS</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>minRowsPerBlock</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_KEEP</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>pKeep</name></name> <operator>=</operator> <name>pVal</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_PAGES</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_PAGESIZE</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_TSDB_PAGESIZE</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>tsdbPageSize</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_PRECISION</name></expr>:</case>
      <expr_stmt><expr><call><name>COPY_STRING_FORM_STR_TOKEN</name><argument_list>(<argument><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>precisionStr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_REPLICA</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>replica</name></name> <operator>=</operator> <call><name>taosStr2Int8</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>updateWalOptionsDefault</name><argument_list>(<argument><expr><name>pDbOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_STRICT</name></expr>:</case>
      <expr_stmt><expr><call><name>COPY_STRING_FORM_STR_TOKEN</name><argument_list>(<argument><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>strictStr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_WAL</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>walLevel</name></name> <operator>=</operator> <call><name>taosStr2Int8</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_VGROUPS</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>numOfVgroups</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_SINGLE_STABLE</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>singleStable</name></name> <operator>=</operator> <call><name>taosStr2Int8</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_RETENTIONS</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>pRetentions</name></name> <operator>=</operator> <name>pVal</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_WAL_RETENTION_PERIOD</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>walRetentionPeriod</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>walRetentionPeriodIsSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_WAL_RETENTION_SIZE</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>walRetentionSize</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>walRetentionSizeIsSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_WAL_ROLL_PERIOD</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>walRollPeriod</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>walRollPeriodIsSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_WAL_SEGMENT_SIZE</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>walSegmentSize</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_STT_TRIGGER</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>sstTrigger</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_TABLE_PREFIX</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>tablePrefix</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_OPTION_TABLE_SUFFIX</name></expr>:</case>
      <expr_stmt><expr><name><name>pDbOptions</name><operator>-&gt;</operator><name>tableSuffix</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>setAlterDatabaseOption</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>, <parameter><decl><type><name>SAlterOption</name><modifier>*</modifier></type> <name>pAlterOption</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>pAlterOption</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>DB_OPTION_KEEP</name></expr>:</case>
    <case>case <expr><name>DB_OPTION_RETENTIONS</name></expr>:</case>
      <return>return <expr><call><name>setDatabaseOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pOptions</name></expr></argument>, <argument><expr><name><name>pAlterOption</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pAlterOption</name><operator>-&gt;</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><call><name>setDatabaseOption</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pOptions</name></expr></argument>, <argument><expr><name><name>pAlterOption</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pAlterOption</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateDatabaseStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreExists</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkDbName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SCreateDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateDatabaseStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_DATABASE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name> <operator>=</operator> <name>ignoreExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name> <operator>=</operator> <operator>(</operator><name>SDatabaseOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropDatabaseStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreNotExists</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkDbName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SDropDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropDatabaseStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_DATABASE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name> <operator>=</operator> <name>ignoreNotExists</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterDatabaseStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkDbName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SAlterDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SAlterDatabaseStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ALTER_DATABASE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name> <operator>=</operator> <operator>(</operator><name>SDatabaseOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createFlushDatabaseStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkDbName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SFlushDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SFlushDatabaseStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FLUSH_DATABASE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createTrimDatabaseStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxSpeed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkDbName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STrimDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STrimDatabaseStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_TRIM_DATABASE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>maxSpeed</name></name> <operator>=</operator> <name>maxSpeed</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDefaultTableOptions</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STableOptions</name><modifier>*</modifier></type> <name>pOptions</name> <init>= <expr><operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_TABLE_OPTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>maxDelay1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>maxDelay2</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>watermark1</name></name> <operator>=</operator> <name>TSDB_DEFAULT_ROLLUP_WATERMARK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>watermark2</name></name> <operator>=</operator> <name>TSDB_DEFAULT_ROLLUP_WATERMARK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name>TSDB_DEFAULT_TABLE_TTL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>commentNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>  <comment type="line">// mark null</comment>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterTableOptions</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STableOptions</name><modifier>*</modifier></type> <name>pOptions</name> <init>= <expr><operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_TABLE_OPTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>commentNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>  <comment type="line">// mark null</comment>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>setTableOption</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>, <parameter><decl><type><name>ETableOptionType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TABLE_OPTION_COMMENT</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>checkComment</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name><operator>)</operator><operator>-&gt;</operator><name>commentNull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>COPY_STRING_FORM_STR_TOKEN</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name><operator>)</operator><operator>-&gt;</operator><name>comment</name></expr></argument>, <argument><expr><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TABLE_OPTION_MAXDELAY</name></expr>:</case>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name><operator>)</operator><operator>-&gt;</operator><name>pMaxDelay</name> <operator>=</operator> <name>pVal</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TABLE_OPTION_WATERMARK</name></expr>:</case>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name><operator>)</operator><operator>-&gt;</operator><name>pWatermark</name> <operator>=</operator> <name>pVal</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TABLE_OPTION_ROLLUP</name></expr>:</case>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name><operator>)</operator><operator>-&gt;</operator><name>pRollupFuncs</name> <operator>=</operator> <name>pVal</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TABLE_OPTION_TTL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ttl</name> <init>= <expr><call><name>taosStr2Int64</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SToken</name><operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><operator>-&gt;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ttl</name> <operator>=</operator> <name>INT32_MAX</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// ttl can not be smaller than 0, because there is a limitation in sql.y (TTL NK_INTEGER)</comment>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name><operator>)</operator><operator>-&gt;</operator><name>ttl</name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TABLE_OPTION_SMA</name></expr>:</case>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name><operator>)</operator><operator>-&gt;</operator><name>pSma</name> <operator>=</operator> <name>pVal</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TABLE_OPTION_DELETE_MARK</name></expr>:</case>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name><operator>)</operator><operator>-&gt;</operator><name>pDeleteMark</name> <operator>=</operator> <name>pVal</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createColumnDefNode</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pColName</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pComment</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkColumnName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pColName</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>checkComment</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pComment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SColumnDefNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnDefNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN_DEF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>pColName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>dataType</name></name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pComment</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>trimString</name><argument_list>(<argument><expr><name><name>pComment</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pComment</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>comments</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>comments</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>sma</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDataType</name></type> <name>createDataType</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataType</name></type> <name>dt</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>, <expr><operator>.</operator><name>precision</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>scale</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>dt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDataType</name></type> <name>createVarLenDataType</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataType</name></type> <name>dt</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>, <expr><operator>.</operator><name>precision</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>scale</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>bytes</name> <operator>=</operator> <macro><name>taosStr2Int16</name><argument_list>(<argument>pLen-&gt;z</argument>, <argument>NULL</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>dt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateTableStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreExists</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCols</name></decl></parameter>,
                             <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pTags</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateTableStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_TABLE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name> <operator>=</operator> <name>ignoreExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name> <operator>=</operator> <name>pCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <name>pTags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name> <operator>=</operator> <operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateSubTableClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreExists</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pUseRealTable</name></decl></parameter>,
                                  <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pSpecificTags</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pValsOfTags</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCreateSubTableClause</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateSubTableClause</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_SUBTABLE_CLAUSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useDbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pUseRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useTableName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pUseRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name> <operator>=</operator> <name>ignoreExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSpecificTags</name></name> <operator>=</operator> <name>pSpecificTags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pValsOfTags</name></name> <operator>=</operator> <name>pValsOfTags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name> <operator>=</operator> <operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pUseRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateMultiTableStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pSubTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCreateMultiTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateMultiTableStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_MULTI_TABLE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSubTables</name></name> <operator>=</operator> <name>pSubTables</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropTableClause</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreNotExists</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDropTableClause</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropTableClause</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_TABLE_CLAUSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name> <operator>=</operator> <name>ignoreNotExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropTableStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDropTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropTableStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_TABLE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTables</name></name> <operator>=</operator> <name>pTables</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropSuperTableStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreNotExists</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDropSuperTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropSuperTableStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_SUPER_TABLE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name> <operator>=</operator> <name>ignoreNotExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createAlterTableStmtFinalize</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>, <parameter><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterTableModifyOptions</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SAlterTableStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>=</operator> <name>TSDB_ALTER_TABLE_UPDATE_OPTIONS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name> <operator>=</operator> <operator>(</operator><name>STableOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</expr_stmt>
  <return>return <expr><call><name>createAlterTableStmtFinalize</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterTableAddModifyCol</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>alterType</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pColName</name></decl></parameter>,
                                    <parameter><decl><type><name>SDataType</name></type> <name>dataType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkColumnName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pColName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SAlterTableStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>=</operator> <name>alterType</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>pColName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dataType</name></name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
  <return>return <expr><call><name>createAlterTableStmtFinalize</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterTableDropCol</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>alterType</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkColumnName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pColName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SAlterTableStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>=</operator> <name>alterType</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>pColName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>createAlterTableStmtFinalize</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterTableRenameCol</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>alterType</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pOldColName</name></decl></parameter>,
                                 <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pNewColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkColumnName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pOldColName</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>checkColumnName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNewColName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SAlterTableStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>=</operator> <name>alterType</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>pOldColName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>newColName</name></name></expr></argument>, <argument><expr><name>pNewColName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>createAlterTableStmtFinalize</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterTableSetTag</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pTagName</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkColumnName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pTagName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SAlterTableStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>=</operator> <name>TSDB_ALTER_TABLE_UPDATE_TAG_VAL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>pTagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pVal</name></name> <operator>=</operator> <operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pVal</name></expr>;</expr_stmt>
  <return>return <expr><call><name>createAlterTableStmtFinalize</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>setAlterSuperTableType</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setNodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>QUERY_NODE_ALTER_SUPER_TABLE_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createUseDatabaseStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkDbName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SUseDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SUseDatabaseStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_USE_DATABASE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>needDbShowStmt</name><parameter_list>(<parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>QUERY_NODE_SHOW_TABLES_STMT</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>QUERY_NODE_SHOW_STABLES_STMT</name> <operator>==</operator> <name>type</name> <operator>||</operator>
         <name>QUERY_NODE_SHOW_VGROUPS_STMT</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>QUERY_NODE_SHOW_INDEXES_STMT</name> <operator>==</operator> <name>type</name> <operator>||</operator>
         <name>QUERY_NODE_SHOW_TAGS_STMT</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>QUERY_NODE_SHOW_TABLE_TAGS_STMT</name> <operator>==</operator> <name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createShowStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SShowStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SShowStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createShowStmtWithCond</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTbName</name></decl></parameter>,
                              <parameter><decl><type><name>EOperatorType</name></type> <name>tableCondType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>needDbShowStmt</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name>pDbName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pQueryCxt</name><operator>-&gt;</operator><name>pMsg</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pQueryCxt</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>, <argument><expr><literal type="string">"database not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SShowStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SShowStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbName</name></name> <operator>=</operator> <name>pDbName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTbName</name></name> <operator>=</operator> <name>pTbName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableCondType</name></name> <operator>=</operator> <name>tableCondType</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createShowCreateDatabaseStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkDbName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SShowCreateDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SShowCreateDatabaseStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SHOW_CREATE_DATABASE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createShowCreateTableStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SShowCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SShowCreateTableStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createShowTableDistributedStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SShowTableDistributedStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SShowTableDistributedStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SHOW_TABLE_DISTRIBUTED_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createShowDnodeVariablesStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pDnodeId</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pLikePattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SShowDnodeVariablesStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SShowDnodeVariablesStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SHOW_DNODE_VARIABLES_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDnodeId</name></name> <operator>=</operator> <name>pDnodeId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pLikePattern</name></name> <operator>=</operator> <name>pLikePattern</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createShowVnodesStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pDnodeId</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pDnodeEndpoint</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SShowVnodesStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SShowVnodesStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SHOW_VNODES_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDnodeId</name></name> <operator>=</operator> <name>pDnodeId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDnodeEndpoint</name></name> <operator>=</operator> <name>pDnodeEndpoint</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createShowTableTagsStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTbName</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pTags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDbName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pQueryCxt</name><operator>-&gt;</operator><name>pMsg</name></name></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pQueryCxt</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>, <argument><expr><literal type="string">"database not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SShowTableTagsStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SShowTableTagsStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SHOW_TABLE_TAGS_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbName</name></name> <operator>=</operator> <name>pDbName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTbName</name></name> <operator>=</operator> <name>pTbName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <name>pTags</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateUserStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pUserName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pPassword</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>sysinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>password</name><index>[<expr><name>TSDB_USET_PASSWORD_LEN</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkUserName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pUserName</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>checkPassword</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pPassword</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SCreateUserStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateUserStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_USER_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useName</name></name></expr></argument>, <argument><expr><name>pUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>password</name></name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sysinfo</name></name> <operator>=</operator> <name>sysinfo</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterUserStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pUserName</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>alterType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkUserName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pUserName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SAlterUserStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SAlterUserStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ALTER_USER_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useName</name></name></expr></argument>, <argument><expr><name>pUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>alterType</name></name> <operator>=</operator> <name>alterType</name></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>alterType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_ALTER_USER_PASSWD</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>password</name><index>[<expr><name>TSDB_USET_PASSWORD_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkPassword</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>password</name></name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_ALTER_USER_ENABLE</name></expr>:</case>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>enable</name></name> <operator>=</operator> <call><name>taosStr2Int8</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_USER_SYSINFO</name></expr>:</case>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sysinfo</name></name> <operator>=</operator> <call><name>taosStr2Int8</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropUserStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pUserName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkUserName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pUserName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SDropUserStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropUserStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_USER_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useName</name></name></expr></argument>, <argument><expr><name>pUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateDnodeStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pFqdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pPort</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCreateDnodeStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateDnodeStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_DNODE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkAndSplitEndpoint</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pFqdn</name></expr></argument>, <argument><expr><name>pPort</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropDnodeStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pDnode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDropDnodeStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropDnodeStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_DNODE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TK_NK_INTEGER</name> <operator>==</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkAndSplitEndpoint</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>force</name></name> <operator>=</operator> <name>force</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterDnodeStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pDnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SAlterDnodeStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SAlterDnodeStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ALTER_DNODE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pDnode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>trimString</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pValue</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>trimString</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateIndexStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>EIndexType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreExists</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pIndexName</name></decl></parameter>,
                             <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCols</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCreateIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateIndexStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_INDEX_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name> <operator>=</operator> <name>ignoreExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexDbName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexDbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pIndexName</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pIndexName</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pIndexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name> <operator>=</operator> <name>pCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name> <operator>=</operator> <operator>(</operator><name>SIndexOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createIndexOption</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pFuncs</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOffset</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pSliding</name></decl></parameter>,
                         <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStreamOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SIndexOptions</name><modifier>*</modifier></type> <name>pOptions</name> <init>= <expr><operator>(</operator><name>SIndexOptions</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_INDEX_OPTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>=</operator> <name>pFuncs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pInterval</name></name> <operator>=</operator> <name>pInterval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pOffset</name></name> <operator>=</operator> <name>pOffset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pSliding</name></name> <operator>=</operator> <name>pSliding</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>pStreamOptions</name></name> <operator>=</operator> <name>pStreamOptions</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropIndexStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreNotExists</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pIndexName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDropIndexStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropIndexStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_INDEX_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name> <operator>=</operator> <name>ignoreNotExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexDbName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexDbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pIndexName</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>indexName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pIndexName</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pIndexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateComponentNodeStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pDnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCreateComponentNodeStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateComponentNodeStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>pDnodeId</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropComponentNodeStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pDnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDropComponentNodeStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropComponentNodeStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>pDnodeId</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateTopicStmtUseQuery</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreExists</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pTopicName</name></decl></parameter>,
                                     <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCreateTopicStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateTopicStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_TOPIC_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name>pTopicName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name> <operator>=</operator> <name>ignoreExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name> <operator>=</operator> <name>pQuery</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateTopicStmtUseDb</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreExists</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pTopicName</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pSubDbName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>withMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCreateTopicStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateTopicStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_TOPIC_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name>pTopicName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name> <operator>=</operator> <name>ignoreExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>subDbName</name></name></expr></argument>, <argument><expr><name>pSubDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>withMeta</name></name> <operator>=</operator> <name>withMeta</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateTopicStmtUseTable</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreExists</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pTopicName</name></decl></parameter>,
                                     <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>withMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCreateTopicStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateTopicStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_TOPIC_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name>pTopicName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name> <operator>=</operator> <name>ignoreExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>withMeta</name></name> <operator>=</operator> <name>withMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>subDbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>subSTbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropTopicStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreNotExists</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pTopicName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDropTopicStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropTopicStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_TOPIC_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name>pTopicName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name> <operator>=</operator> <name>ignoreNotExists</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropCGroupStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreNotExists</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pCGroupId</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pTopicName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDropCGroupStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropCGroupStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_CGROUP_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name> <operator>=</operator> <name>ignoreNotExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name>pTopicName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name>pCGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createAlterLocalStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pConfig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SAlterLocalStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SAlterLocalStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ALTER_LOCAL_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>trimString</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pValue</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>trimString</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDefaultExplainOptions</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SExplainOptions</name><modifier>*</modifier></type> <name>pOptions</name> <init>= <expr><operator>(</operator><name>SExplainOptions</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_EXPLAIN_OPTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>TSDB_DEFAULT_EXPLAIN_VERBOSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>ratio</name></name> <operator>=</operator> <name>TSDB_DEFAULT_EXPLAIN_RATIO</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>setExplainVerbose</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SExplainOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name><operator>)</operator><operator>-&gt;</operator><name>verbose</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>setExplainRatio</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SExplainOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name><operator>)</operator><operator>-&gt;</operator><name>ratio</name> <operator>=</operator> <call><name>taosStr2Double</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createExplainStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>analyze</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SExplainStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SExplainStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_EXPLAIN_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>analyze</name></name> <operator>=</operator> <name>analyze</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name> <operator>=</operator> <operator>(</operator><name>SExplainOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name> <operator>=</operator> <name>pQuery</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDescribeStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDescribeStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDescribeStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DESCRIBE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createResetQueryCacheStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_RESET_QUERY_CACHE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCompactStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pVgroups</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COMPACT_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateFunctionStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreExists</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>aggFunc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pFuncName</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pLibPath</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pLibPath</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_PAR_SYNTAX_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SCreateFunctionStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateFunctionStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_FUNCTION_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name> <operator>=</operator> <name>ignoreExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>funcName</name></name></expr></argument>, <argument><expr><name>pFuncName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>isAgg</name></name> <operator>=</operator> <name>aggFunc</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_STR_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>libraryPath</name></name></expr></argument>, <argument><expr><name>pLibPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>outputDt</name></name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bufSize</name></name> <operator>=</operator> <name>bufSize</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropFunctionStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreNotExists</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pFuncName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDropFunctionStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropFunctionStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_FUNCTION_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name> <operator>=</operator> <name>ignoreNotExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>funcName</name></name></expr></argument>, <argument><expr><name>pFuncName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createStreamOptions</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SStreamOptions</name><modifier>*</modifier></type> <name>pOptions</name> <init>= <expr><operator>(</operator><name>SStreamOptions</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_STREAM_OPTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>triggerType</name></name> <operator>=</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>fillHistory</name></name> <operator>=</operator> <name>STREAM_DEFAULT_FILL_HISTORY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOptions</name><operator>-&gt;</operator><name>ignoreExpired</name></name> <operator>=</operator> <name>STREAM_DEFAULT_IGNORE_EXPIRED</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createCreateStreamStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreExists</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pStreamName</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRealTable</name></decl></parameter>,
                              <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOptions</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pTags</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pSubtable</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCreateStreamStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SCreateStreamStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_STREAM_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>streamName</name></name></expr></argument>, <argument><expr><name>pStreamName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pRealTable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>targetDbName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>targetTabName</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pRealTable</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRealTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreExists</name></name> <operator>=</operator> <name>ignoreExists</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name></name> <operator>=</operator> <operator>(</operator><name>SStreamOptions</name><operator>*</operator><operator>)</operator><name>pOptions</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name> <operator>=</operator> <name>pQuery</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <name>pTags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pSubtable</name></name> <operator>=</operator> <name>pSubtable</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDropStreamStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreNotExists</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pStreamName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDropStreamStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDropStreamStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_STREAM_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>streamName</name></name></expr></argument>, <argument><expr><name>pStreamName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>ignoreNotExists</name></name> <operator>=</operator> <name>ignoreNotExists</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createKillStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SKillStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SKillStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>targetId</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>pId</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createKillQueryStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pQueryId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SKillQueryStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SKillQueryStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_KILL_QUERY_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>trimString</name><argument_list>(<argument><expr><name><name>pQueryId</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pQueryId</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createBalanceVgroupStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SBalanceVgroupStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SBalanceVgroupStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_BALANCE_VGROUP_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createMergeVgroupStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pVgId1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pVgId2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SMergeVgroupStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SMergeVgroupStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_MERGE_VGROUP_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>vgId1</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>pVgId1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>vgId2</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>pVgId2</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createRedistributeVgroupStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pVgId</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pDnodes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRedistributeVgroupStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SRedistributeVgroupStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_REDISTRIBUTE_VGROUP_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>pVgId</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDnodes</name></name> <operator>=</operator> <name>pDnodes</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createSplitVgroupStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pVgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSplitVgroupStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SSplitVgroupStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SPLIT_VGROUP_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name><name>pVgId</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createSyncdbStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SYNCDB_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createGrantStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>privileges</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pUserName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkDbName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>checkUserName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pUserName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SGrantStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SGrantStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_GRANT_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name> <operator>=</operator> <name>privileges</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>objName</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>userName</name></name></expr></argument>, <argument><expr><name>pUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createRevokeStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>privileges</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>SToken</name><modifier>*</modifier></type> <name>pUserName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkDbName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>checkUserName</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pUserName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SRevokeStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SRevokeStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_REVOKE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>privileges</name></name> <operator>=</operator> <name>privileges</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>objName</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_STRING_FORM_ID_TOKEN</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>userName</name></name></expr></argument>, <argument><expr><name>pUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createFuncForDelete</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFuncName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pFuncName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><call><name>createPrimaryKeyCol</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createDeleteStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pWhere</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDeleteStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SDeleteStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DELETE_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pFromTable</name></name> <operator>=</operator> <name>pTable</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pWhere</name></name> <operator>=</operator> <name>pWhere</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCountFunc</name></name> <operator>=</operator> <call><name>createFuncForDelete</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pFirstFunc</name></name> <operator>=</operator> <call><name>createFuncForDelete</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pLastFunc</name></name> <operator>=</operator> <call><name>createFuncForDelete</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><literal type="string">"last"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pCountFunc</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pFirstFunc</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pLastFunc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>createInsertStmt</name><parameter_list>(<parameter><decl><type><name>SAstCreateContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCols</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CHECK_PARSER_STATUS</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SInsertStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SInsertStmt</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_INSERT_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK_OUT_OF_MEM</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTable</name></name> <operator>=</operator> <name>pTable</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCols</name></name> <operator>=</operator> <name>pCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pQuery</name></name> <operator>=</operator> <name>pQuery</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>stmtName</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name>tableAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_SET_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>stmtName</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name>pTable</name><operator>)</operator><operator>-&gt;</operator><name>tableAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>
</unit>
