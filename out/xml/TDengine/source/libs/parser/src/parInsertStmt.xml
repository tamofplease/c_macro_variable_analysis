<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/parser/src/parInsertStmt.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parInsertUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parToken.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttypes.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SKvParam</name> <block>{
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>  <name>pTagVals</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>schema</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>buf</name><index>[<expr><name>TSDB_MAX_TAGS_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SKvParam</name>;</typedef>

<function><type><name>int32_t</name></type> <name>qBuildStmtOutput</name><parameter_list>(<parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgHash</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pBlockHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVgDataBlocks</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// merge according to vgId</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pBlockHash</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>insMergeTableDataBlocks</name><argument_list>(<argument><expr><name>pBlockHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgDataBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>insBuildOutput</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><name>pVgDataBlocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name><operator>)</operator><operator>-&gt;</operator><name>pDataBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>insDestroyBlockArrayList</name><argument_list>(<argument><expr><name>pVgDataBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qBindStmtTagsValue</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>boundTags</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sTableName</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>tName</name></decl></parameter>,
                           <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>bind</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msgBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgBufLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type>   <name>pDataBlock</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><name>pBlock</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgBuf</name></type>             <name>pBuf</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <name>msgBuf</name></expr>, <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>msgBufLen</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>tags</name> <init>= <expr><operator>(</operator><name>SParsedDataColInfo</name><operator>*</operator><operator>)</operator><name>boundTags</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tags</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>tags</name><operator>-&gt;</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTagArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tagName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>getTableTagSchema</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>  <name>isJson</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type> <name>pTag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>tags</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>&amp;&amp;</operator> <name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>is_null</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pSchema</name><index>[<expr><name><name>tags</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>colLen</name> <init>= <expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>colLen</name> <operator>=</operator> <name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>length</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>colLen</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>&gt;</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"tag length is too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>colLen</name> <operator>&gt;</operator> <operator>(</operator><name>TSDB_MAX_JSON_TAG_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"json string too long than 4095"</literal></expr></argument>, <argument><expr><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>isJson</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>colLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>, <argument><expr><name>colLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>parseJsontoTagData</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>STagVal</name></type> <name>val</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <comment type="line">//      strcpy(val.colName, pTagSchema-&gt;name);</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>val</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name>colLen</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>colLen</name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosMbsToUcs4</name><argument_list>(<argument><expr><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>, <argument><expr><name>colLen</name></expr></argument>, <argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator></expr></argument>, <argument><expr><name>colLen</name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>E2BIG</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_VALUE_TOO_LONG</name></expr></argument>, <argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>end</name>;</goto>
          </block_content>}</block></if></if_stmt>
          <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" taosMbsToUcs4 error:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>val</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>i64</name></name></expr></argument>, <argument><expr><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>, <argument><expr><name>colLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isJson</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>=</operator> <call><name>tTagNew</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVCreateTbReq</name></type> <name>tbReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>insBuildCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tbReq</name></expr></argument>, <argument><expr><name>tName</name></expr></argument>, <argument><expr><name>pTag</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>sTableName</name></expr></argument>, <argument><expr><name>tagName</name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_TABLE_TTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>insBuildCreateTbMsg</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STagVal</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>STagVal</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qBindStmtColsValue</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>bind</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msgBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgBufLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type>   <name>pDataBlock</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><name>pBlock</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type>            <name>pSchema</name> <init>= <expr><call><name>getTableColumnSchema</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>extendedRowSize</name> <init>= <expr><call><name>insGetExtendedRowSize</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>spd</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowBuilder</name><modifier>*</modifier></type>        <name>pBuilder</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemParam</name></type>           <name>param</name> <init>= <expr><block>{<expr><operator>.</operator><name>rb</name> <operator>=</operator> <name>pBuilder</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgBuf</name></type>             <name>pBuf</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <name>msgBuf</name></expr>, <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>msgBufLen</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>rowNum</name> <init>= <expr><name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(
      <argument><expr><call><name>insInitRowBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(<argument><expr><call><name>insAllocateMemForSize</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>extendedRowSize</name> <operator>*</operator> <name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><operator>(</operator><name>STSRow</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="line">// skip the SSubmitBlk header</comment>
    <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>spd</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pColSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pSchema</name><index>[<expr><name><name>spd</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>!=</operator> <name>rowNum</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"row number in each bind param should be the same"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>param</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <name>pColSchema</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>insGetSTSRowAppendInfo</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name></expr></argument>, <argument><expr><name>spd</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>toffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>colIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>&amp;&amp;</operator> <name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>is_null</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pColSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"primary timestamp should not be NULL"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(<argument><expr><call><name>insMemRowAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>!=</operator> <name><name>pColSchema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"column type mis-match with buffer type"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>colLen</name> <init>= <expr><name><name>pColSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>colLen</name> <operator>=</operator> <name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>length</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(<argument><expr><call><name>insMemRowAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>+</operator> <name><name>bind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>*</operator> <name>r</name></expr></argument>, <argument><expr><name>colLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <name><name>pColSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>TSKEY</name></type> <name>tsKey</name> <init>= <expr><call><name>TD_ROW_KEY</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>insCheckTimestamp</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tsKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// set the null value for the columns that do not assign values</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>spd</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>&lt;</operator> <name><name>spd</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>TD_IS_TP_ROW</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNone</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_DEBUG_PRINT_ROW</name></cpp:ifdef>
    <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSTSchema</name> <init>= <expr><call><name>tdGetSTSChemaFromSSChema</name><argument_list>(<argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name><name>spd</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdSRowPrint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>pSTSchema</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>extendedRowSize</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pBlocks</name> <init>= <expr><operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>insSetBlockInfo</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qBindStmtSingleColValue</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>bind</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msgBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgBufLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colIdx</name></decl></parameter>,
                                <parameter><decl><type><name>int32_t</name></type> <name>rowNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type>   <name>pDataBlock</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><name>pBlock</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type>            <name>pSchema</name> <init>= <expr><call><name>getTableColumnSchema</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>extendedRowSize</name> <init>= <expr><call><name>insGetExtendedRowSize</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>spd</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowBuilder</name><modifier>*</modifier></type>        <name>pBuilder</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemParam</name></type>           <name>param</name> <init>= <expr><block>{<expr><operator>.</operator><name>rb</name> <operator>=</operator> <name>pBuilder</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgBuf</name></type>             <name>pBuf</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <name>msgBuf</name></expr>, <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>msgBufLen</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                <name>rowStart</name> <init>= <expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name>colIdx</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                <name>rowEnd</name> <init>= <expr><operator>(</operator><operator>(</operator><name>colIdx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name><name>spd</name><operator>-&gt;</operator><name>numOfBound</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rowStart</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(
        <argument><expr><call><name>insInitRowBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(<argument><expr><call><name>insAllocateMemForSize</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>extendedRowSize</name> <operator>*</operator> <name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><operator>(</operator><name>STSRow</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>extendedRowSize</name> <operator>*</operator> <name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="line">// skip the SSubmitBlk header</comment>
    <if_stmt><if>if <condition>(<expr><name>rowStart</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tdSRowGetBuf</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pColSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pSchema</name><index>[<expr><name><name>spd</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>colIdx</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>bind</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>rowNum</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"row number in each bind param should be the same"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>param</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <name>pColSchema</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>insGetSTSRowAppendInfo</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name></expr></argument>, <argument><expr><name>spd</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>toffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>colIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>bind</name><operator>-&gt;</operator><name>is_null</name></name> <operator>&amp;&amp;</operator> <name><name>bind</name><operator>-&gt;</operator><name>is_null</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pColSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"primary timestamp should not be NULL"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(<argument><expr><call><name>insMemRowAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>bind</name><operator>-&gt;</operator><name>buffer_type</name></name> <operator>!=</operator> <name><name>pColSchema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"column type mis-match with buffer type"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>colLen</name> <init>= <expr><name><name>pColSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>colLen</name> <operator>=</operator> <name><name>bind</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(<argument><expr><call><name>insMemRowAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>bind</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>bind</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>*</operator> <name>r</name></expr></argument>, <argument><expr><name>colLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <name><name>pColSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSKEY</name></type> <name>tsKey</name> <init>= <expr><call><name>TD_ROW_KEY</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>insCheckTimestamp</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tsKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// set the null value for the columns that do not assign values</comment>
    <if_stmt><if>if <condition>(<expr><name>rowEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>spd</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>&lt;</operator> <name><name>spd</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>TD_IS_TP_ROW</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNone</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rowEnd</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_DEBUG_PRINT_ROW</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>rowEnd</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSTSchema</name> <init>= <expr><call><name>tdGetSTSChemaFromSSChema</name><argument_list>(<argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name><name>spd</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tdSRowPrint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>pSTSchema</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>rowEnd</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>extendedRowSize</name> <operator>*</operator> <name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pBlocks</name> <init>= <expr><operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(<argument><expr><call><name>insSetBlockInfo</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildBoundFields</name><parameter_list>(<parameter><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>boundInfo</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>fieldNum</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier><modifier>*</modifier></type> <name>fields</name></decl></parameter>,
                         <parameter><decl><type><name>uint8_t</name></type> <name>timePrec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>fields</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>fields</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>boundInfo</name><operator>-&gt;</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_FIELD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>fields</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>schema</name> <init>= <expr><operator>&amp;</operator><name><name>pSchema</name><index>[<expr><name><name>boundInfo</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>fields</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>precision</name> <operator>=</operator> <name>timePrec</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>boundInfo</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>schema</name> <operator>=</operator> <operator>&amp;</operator><name><name>pSchema</name><index>[<expr><name><name>boundInfo</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>fields</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>schema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>fields</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>type</name> <operator>=</operator> <name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>fields</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>schema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>fieldNum</name> <operator>=</operator> <name><name>boundInfo</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qBuildStmtTagFields</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>boundTags</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>fieldNum</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier><modifier>*</modifier></type> <name>fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type>   <name>pDataBlock</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><name>pBlock</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>tags</name> <init>= <expr><operator>(</operator><name>SParsedDataColInfo</name><operator>*</operator><operator>)</operator><name>boundTags</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tags</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>!=</operator> <name>TSDB_SUPER_TABLE</name> <operator>&amp;&amp;</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>getTableTagSchema</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tags</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>fieldNum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>fields</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(<argument><expr><call><name>buildBoundFields</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>fieldNum</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qBuildStmtColFields</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>fieldNum</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier><modifier>*</modifier></type> <name>fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><name>pBlock</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type>          <name>pSchema</name> <init>= <expr><call><name>getTableColumnSchema</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name><operator>.</operator><name>numOfBound</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>fieldNum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fields</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>fields</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CHECK_CODE</name><argument_list>(<argument><expr><call><name>buildBoundFields</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>fieldNum</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>,
                              <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qResetStmtDataBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keepBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><name>block</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>keepBuf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>TSDB_PAYLOAD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>pData</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>ordered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>prevTS</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tsSource</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name> <operator>=</operator> <name>TSDB_PAYLOAD_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>headerSize</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>createTbReqLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qCloneStmtDataBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDst</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pDst</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>cloned</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pDst</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pNewMeta</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><call><name>TABLE_META_SIZE</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNewMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pNewMeta</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><call><name>TABLE_META_SIZE</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name> <operator>=</operator> <name>pNewMeta</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>qResetStmtDataBlock</name><argument_list>(<argument><expr><operator>*</operator><name>pDst</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qRebuildStmtDataBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDst</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>qCloneStmtDataBlock</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pDst</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>nAllocSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>pData</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qFreeStmtDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STableMeta</name><modifier>*</modifier></type> <name>qGetTableMetaInDataBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><name>pDataBlock</name><operator>)</operator><operator>-&gt;</operator><name>pTableMeta</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>qFreeStmtDataBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pDataBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><name>pDataBlock</name><operator>)</operator><operator>-&gt;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><name>pDataBlock</name><operator>)</operator><operator>-&gt;</operator><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qDestroyStmtDataBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>)</operator><name>pBlock</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>cloned</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>insDestroyDataBlock</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
