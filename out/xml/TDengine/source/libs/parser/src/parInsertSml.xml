<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/parser/src/parInsertSml.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parInsertUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parToken.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>qCreateSName</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msgBuf</name></decl></parameter>,
                     <parameter><decl><type><name>int32_t</name></type> <name>msgBufLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMsgBuf</name></type> <name>msg</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <name>msgBuf</name></expr>, <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>msgBufLen</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SToken</name></type>  <name>sToken</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>tbName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>sToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sToken</name><operator>.</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"empty table name"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>insCreateSName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sToken</name></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>NEXT_TOKEN</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>sToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sToken</name><operator>.</operator><name>n</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"table name format is wrong"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SmlExecTableHandle</name> <block>{
  <decl_stmt><decl><type><name>SParsedDataColInfo</name></type> <name>tags</name></decl>;</decl_stmt>          <comment type="line">// each table</comment>
  <decl_stmt><decl><type><name>SVCreateTbReq</name></type>      <name>createTblReq</name></decl>;</decl_stmt>  <comment type="line">// each table</comment>
}</block></struct></type> <name>SmlExecTableHandle</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SmlExecHandle</name> <block>{
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>          <name>pBlockHash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SmlExecTableHandle</name></type> <name>tableExecHandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name><modifier>*</modifier></type>            <name>pQuery</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSmlExecHandle</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smlDestroyTableHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SmlExecTableHandle</name><modifier>*</modifier></type> <name>handle</name> <init>= <expr><operator>(</operator><name>SmlExecTableHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>destroyBoundColumnInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>createTblReq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlBoundColumnData</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>pColList</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>col_id_t</name></type> <name>nCols</name> <init>= <expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundNullLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>col_id_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>col_id_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valStat</name> <operator>=</operator> <name>VAL_STAT_NONE</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>bool</name></type>     <name>isOrdered</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>col_id_t</name></type> <name>lastColIdx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// last column found</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlKv</name><modifier>*</modifier></type>  <name>kv</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SToken</name></type>   <name>sToken</name> <init>= <expr><block>{<expr><operator>.</operator><name>n</name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name></expr>, <expr><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>col_id_t</name></type> <name>t</name> <init>= <expr><name>lastColIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>col_id_t</name></type> <name>index</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>t</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>isTag</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>insFindCol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sToken</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>nCols</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"SML, index:%d, t:%d, ncols:%d"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>nCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>index</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>t</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>insFindCol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sToken</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>isOrdered</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"smlBoundColumnData. index:%d"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColList</name><operator>-&gt;</operator><name>cols</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>valStat</name> <operator>==</operator> <name>VAL_STAT_HAS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"smlBoundColumnData. already set. index:%d"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastColIdx</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>cols</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>valStat</name> <operator>=</operator> <name>VAL_STAT_HAS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>pSchema</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
        <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundNullLen</name></name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>CHAR_BYTES</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
        <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundNullLen</name></name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>TSDB_NCHAR_SIZE</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>boundNullLen</name></name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pSchema</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>orderStatus</name></name> <operator>=</operator> <ternary><condition><expr><name>isOrdered</name></expr> ?</condition><then> <expr><name>ORDER_STATUS_ORDERED</name></expr> </then><else>: <expr><name>ORDER_STATUS_DISORDERED</name></expr></else></ternary></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isOrdered</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pColList</name><operator>-&gt;</operator><name>colIdxInfo</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBoundIdxInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pColList</name><operator>-&gt;</operator><name>colIdxInfo</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SBoundIdxInfo</name><modifier>*</modifier></type> <name>pColIdx</name> <init>= <expr><name><name>pColList</name><operator>-&gt;</operator><name>colIdxInfo</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>col_id_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pColIdx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>schemaColIdx</name> <operator>=</operator> <name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColIdx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>boundIdx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name>pColIdx</name></expr></argument>, <argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBoundIdxInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>insSchemaIdxCompar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>col_id_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pColIdx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>finalIdx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name>pColIdx</name></expr></argument>, <argument><expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBoundIdxInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>insBoundIdxCompar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>&gt;</operator> <name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColList</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
           <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>col_id_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pColList</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <name><name>pColList</name><operator>-&gt;</operator><name>numOfBound</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief No json tag for schemaless
 *
 * @param cols
 * @param tags
 * @param pSchema
 * @param ppTag
 * @param msg
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlBuildTagRow</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>STag</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppTag</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>tagName</name></decl></parameter>,
                              <parameter><decl><type><name>SMsgBuf</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>tags</name><operator>-&gt;</operator><name>numOfBound</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTagArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>tagName</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>tagName</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tags</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pSchema</name><index>[<expr><name><name>tags</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSmlKv</name><modifier>*</modifier></type>  <name>kv</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>tagName</name></expr></argument>, <argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>STagVal</name></type> <name>val</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <comment type="line">//    strcpy(val.colName, pTagSchema-&gt;name);</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosMbsToUcs4</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>E2BIG</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSyntaxErrMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>TSDB_CODE_PAR_VALUE_TOO_LONG</name></expr></argument>, <argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" taosMbsToUcs4 error:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSyntaxErrMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>i64</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>kv</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tTagNew</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ppTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STagVal</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>STagVal</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>smlBindData</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>colsSchema</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>,
                    <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sTableName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sTableNameLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msgBuf</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>msgBufLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMsgBuf</name></type> <name>pBuf</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <name>msgBuf</name></expr>, <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>msgBufLen</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSmlExecHandle</name><modifier>*</modifier></type> <name>smlHandle</name> <init>= <expr><operator>(</operator><name>SSmlExecHandle</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>smlDestroyTableHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smlHandle</name><operator>-&gt;</operator><name>tableExecHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// free for each table</comment>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pTagsSchema</name> <init>= <expr><call><name>getTableTagSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>insSetBoundColumnInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smlHandle</name><operator>-&gt;</operator><name>tableExecHandle</name><operator>.</operator><name>tags</name></name></expr></argument>, <argument><expr><name>pTagsSchema</name></expr></argument>, <argument><expr><call><name>getNumOfTags</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>smlBoundColumnData</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smlHandle</name><operator>-&gt;</operator><name>tableExecHandle</name><operator>.</operator><name>tags</name></name></expr></argument>, <argument><expr><name>pTagsSchema</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"bound tags error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type>   <name>pTag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlBuildTagRow</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smlHandle</name><operator>-&gt;</operator><name>tableExecHandle</name><operator>.</operator><name>tags</name></name></expr></argument>, <argument><expr><name>pTagsSchema</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>insBuildCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smlHandle</name><operator>-&gt;</operator><name>tableExecHandle</name><operator>.</operator><name>createTblReq</name></name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>pTag</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tagName</name></expr></argument>,
                      <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>smlHandle</name><operator>-&gt;</operator><name>tableExecHandle</name><operator>.</operator><name>createTblReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>stbName</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>sTableNameLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>smlHandle</name><operator>-&gt;</operator><name>tableExecHandle</name><operator>.</operator><name>createTblReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><name>sTableName</name></expr></argument>, <argument><expr><name>sTableNameLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smlHandle</name><operator>-&gt;</operator><name>tableExecHandle</name><operator>.</operator><name>createTblReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>stbName</name><index>[<expr><name>sTableNameLen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insGetDataBlockFromList</name><argument_list>(<argument><expr><name><name>smlHandle</name><operator>-&gt;</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                <argument><expr><name>TSDB_DEFAULT_PAYLOAD_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>getTableInfo</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call><operator>.</operator><name>rowSize</name></expr></argument>,
                                <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDataBlock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smlHandle</name><operator>-&gt;</operator><name>tableExecHandle</name><operator>.</operator><name>createTblReq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"create data block error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>getTableColumnSchema</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlBoundColumnData</name><argument_list>(<argument><expr><name>colsSchema</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"bound cols error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>extendedRowSize</name> <init>= <expr><call><name>insGetExtendedRowSize</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SParsedDataColInfo</name><modifier>*</modifier></type> <name>spd</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowBuilder</name><modifier>*</modifier></type>        <name>pBuilder</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemParam</name></type>           <name>param</name> <init>= <expr><block>{<expr><operator>.</operator><name>rb</name> <operator>=</operator> <name>pBuilder</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>insInitRowBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>rowBuilder</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>boundColumnInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rowNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"cols size &lt;= 0"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insAllocateMemForSize</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>extendedRowSize</name> <operator>*</operator> <name>rowNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildInvalidOperationMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"allocate memory error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>rowNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><operator>(</operator><name>STSRow</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="line">// skip the SSubmitBlk header</comment>
    <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>rowData</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>rowDataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rowDataSize</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// 1. set the parsed value from sql string</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>spd</name><operator>-&gt;</operator><name>numOfBound</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pColSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pSchema</name><index>[<expr><name><name>spd</name><operator>-&gt;</operator><name>boundColumns</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>param</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <name>pColSchema</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>insGetSTSRowAppendInfo</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name></expr></argument>, <argument><expr><name>spd</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>toffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>colIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SSmlKv</name><modifier>*</modifier></type> <name>kv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>rowDataSize</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>kv</name> <operator>=</operator> <call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>rowDataSize</name> <operator>!=</operator> <name><name>spd</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
              <operator>(</operator><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>kv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>, <argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>kv</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>colLen</name> <init>= <expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pColSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"SML:data before:%"</literal> <name>PRId64</name> <literal type="string">", precision:%d"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_NANO</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"SML:data after:%"</literal> <name>PRId64</name> <literal type="string">", precision:%d"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>insMemRowAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>colLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>insMemRowAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>kv</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>, <argument><expr><name>colLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNone</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <name><name>pColSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>TSKEY</name></type> <name>tsKey</name> <init>= <expr><call><name>TD_ROW_KEY</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>insCheckTimestamp</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tsKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// set the null value for the columns that do not assign values</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>spd</name><operator>-&gt;</operator><name>numOfBound</name></name> <operator>&lt;</operator> <name><name>spd</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>TD_IS_TP_ROW</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNone</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>extendedRowSize</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pBlocks</name> <init>= <expr><operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>insSetBlockInfo</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>smlInitHandle</name><parameter_list>(<parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmlExecHandle</name><modifier>*</modifier></type> <name>handle</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlExecHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>pBlockHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>pQuery</name></name> <operator>=</operator> <name>pQuery</name></expr>;</expr_stmt>

  <return>return <expr><name>handle</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>smlDestroyHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHandle</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SSmlExecHandle</name><modifier>*</modifier></type> <name>handle</name> <init>= <expr><operator>(</operator><name>SSmlExecHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>insDestroyBlockHashmap</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>pBlockHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smlDestroyTableHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>tableExecHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>smlBuildOutput</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmlExecHandle</name><modifier>*</modifier></type> <name>smlHandle</name> <init>= <expr><operator>(</operator><name>SSmlExecHandle</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>qBuildStmtOutput</name><argument_list>(<argument><expr><name><name>smlHandle</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><name><name>smlHandle</name><operator>-&gt;</operator><name>pBlockHash</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
