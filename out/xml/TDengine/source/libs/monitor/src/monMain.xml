<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/monitor/src/monMain.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"monInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thttp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SMonitor</name></type> <name>tsMonitor</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>monRecordLog</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>ELogLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tsMonitor</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name><name>tsMonitor</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxLogs</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMonLogItem</name></type>  <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMonLogItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>tsMonitor</name><operator>.</operator><name>logs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>MON_LOG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>monGetLogs</name><parameter_list>(<parameter><decl><type><name>SMonLogs</name> <modifier>*</modifier></type><name>logs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>logs</name><operator>-&gt;</operator><name>logs</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>tsMonitor</name><operator>.</operator><name>logs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>logs</name><operator>-&gt;</operator><name>numOfInfoLogs</name></name> <operator>=</operator> <name>tsNumOfInfoLogs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>logs</name><operator>-&gt;</operator><name>numOfErrorLogs</name></name> <operator>=</operator> <name>tsNumOfErrorLogs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>logs</name><operator>-&gt;</operator><name>numOfDebugLogs</name></name> <operator>=</operator> <name>tsNumOfDebugLogs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>logs</name><operator>-&gt;</operator><name>numOfTraceLogs</name></name> <operator>=</operator> <name>tsNumOfTraceLogs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfInfoLogs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfErrorLogs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfDebugLogs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfTraceLogs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>tsMonitor</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>logs</name><operator>-&gt;</operator><name>logs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>monSetDmInfo</name><parameter_list>(<parameter><decl><type><name>SMonDmInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>dmInfo</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonDmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonDmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>monSetMmInfo</name><parameter_list>(<parameter><decl><type><name>SMonMmInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>mmInfo</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonMmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonMmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>monSetVmInfo</name><parameter_list>(<parameter><decl><type><name>SMonVmInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>vmInfo</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonVmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonVmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>monSetQmInfo</name><parameter_list>(<parameter><decl><type><name>SMonQmInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>qmInfo</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonQmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonQmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>monSetSmInfo</name><parameter_list>(<parameter><decl><type><name>SMonSmInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>smInfo</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonSmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonSmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>monSetBmInfo</name><parameter_list>(<parameter><decl><type><name>SMonBmInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>bmInfo</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonBmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonBmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>monInit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMonCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>tsMonitor</name><operator>.</operator><name>logs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonLogItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tsMonitor</name><operator>.</operator><name>logs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>tsMonitor</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>*</operator><name>pCfg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsLogFp</name> <operator>=</operator> <name>monRecordLog</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsMonitor</name><operator>.</operator><name>lastTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>monCleanup</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>tsLogFp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>tsMonitor</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsMonitor</name><operator>.</operator><name>logs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMonMmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>mmInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMonVmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>vmInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMonSmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>smInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMonQmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>qmInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMonBmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>bmInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monCleanupMonitorInfo</name><parameter_list>(<parameter><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>tsMonitor</name><operator>.</operator><name>lastTime</name></name> <operator>=</operator> <name><name>pMonitor</name><operator>-&gt;</operator><name>curTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMonMmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMonVmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>vmInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMonSmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>smInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMonQmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>qmInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMonBmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>bmInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SMonInfo</name> <modifier>*</modifier></type><name>monCreateMonitorInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMonitor</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>monGetLogs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>dmInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>dmInfo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonDmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>mmInfo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonMmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>vmInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>vmInfo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonVmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>smInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>smInfo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonSmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>qmInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>qmInfo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonQmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>bmInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>bmInfo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonBmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>dmInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonDmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>mmInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonMmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>vmInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonVmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>smInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonSmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>qmInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonQmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>bmInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonBmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsMonitor</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name> <operator>=</operator> <call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pMonitor</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>logs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>monCleanupMonitorInfo</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>curTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>lastTime</name></name> <operator>=</operator> <name><name>tsMonitor</name><operator>.</operator><name>lastTime</name></name></expr>;</expr_stmt>
  <return>return <expr><name>pMonitor</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monGenBasicJson</name><parameter_list>(<parameter><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonBasicInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>dmInfo</name><operator>.</operator><name>basic</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>   <name><name>buf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosFormatUtcTime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>curTime</name></name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"dnode_id"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dnode_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"dnode_ep"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dnode_ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>cluster_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"cluster_id"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"protocol"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monGenClusterJson</name><parameter_list>(<parameter><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonClusterInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name><operator>.</operator><name>cluster</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name><operator>.</operator><name>cluster</name><operator>.</operator><name>first_ep_dnode_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToObject</name><argument_list>(<argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name></expr></argument>, <argument><expr><literal type="string">"cluster_info"</literal></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"first_ep"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>first_ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"first_ep_dnode_id"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>first_ep_dnode_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"master_uptime"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>master_uptime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"monitor_interval"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>monitor_interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"dbs_total"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dbs_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"tbs_total"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tbs_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"stbs_total"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stbs_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vgroups_total"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgroups_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vgroups_alive"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgroups_alive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vnodes_total"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vnodes_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vnodes_alive"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vnodes_alive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"connections_total"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>connections_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pDnodesJson</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"dnodes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnodesJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dnodes</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pDnodeJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDnodeJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SMonDnodeDesc</name> <modifier>*</modifier></type><name>pDnodeDesc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dnodes</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pDnodeJson</name></expr></argument>, <argument><expr><literal type="string">"dnode_id"</literal></expr></argument>, <argument><expr><name><name>pDnodeDesc</name><operator>-&gt;</operator><name>dnode_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pDnodeJson</name></expr></argument>, <argument><expr><literal type="string">"dnode_ep"</literal></expr></argument>, <argument><expr><name><name>pDnodeDesc</name><operator>-&gt;</operator><name>dnode_ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pDnodeJson</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><name><name>pDnodeDesc</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pDnodesJson</name></expr></argument>, <argument><expr><name>pDnodeJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pDnodeJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pMnodesJson</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"mnodes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMnodesJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>mnodes</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pMnodeJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pMnodeJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SMonMnodeDesc</name> <modifier>*</modifier></type><name>pMnodeDesc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>mnodes</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pMnodeJson</name></expr></argument>, <argument><expr><literal type="string">"mnode_id"</literal></expr></argument>, <argument><expr><name><name>pMnodeDesc</name><operator>-&gt;</operator><name>mnode_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pMnodeJson</name></expr></argument>, <argument><expr><literal type="string">"mnode_ep"</literal></expr></argument>, <argument><expr><name><name>pMnodeDesc</name><operator>-&gt;</operator><name>mnode_ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pMnodeJson</name></expr></argument>, <argument><expr><literal type="string">"role"</literal></expr></argument>, <argument><expr><name><name>pMnodeDesc</name><operator>-&gt;</operator><name>role</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pMnodesJson</name></expr></argument>, <argument><expr><name>pMnodeJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pMnodeJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monGenVgroupJson</name><parameter_list>(<parameter><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonVgroupInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name><operator>.</operator><name>vgroup</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name><operator>.</operator><name>cluster</name><operator>.</operator><name>first_ep_dnode_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name></expr></argument>, <argument><expr><literal type="string">"vgroup_infos"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pVgroupJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pVgroupJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pVgroupJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pVgroupJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SMonVgroupDesc</name> <modifier>*</modifier></type><name>pVgroupDesc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pVgroupJson</name></expr></argument>, <argument><expr><literal type="string">"vgroup_id"</literal></expr></argument>, <argument><expr><name><name>pVgroupDesc</name><operator>-&gt;</operator><name>vgroup_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pVgroupJson</name></expr></argument>, <argument><expr><literal type="string">"database_name"</literal></expr></argument>, <argument><expr><name><name>pVgroupDesc</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pVgroupJson</name></expr></argument>, <argument><expr><literal type="string">"tables_num"</literal></expr></argument>, <argument><expr><name><name>pVgroupDesc</name><operator>-&gt;</operator><name>tables_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pVgroupJson</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><name><name>pVgroupDesc</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pVnodesJson</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name>pVgroupJson</name></expr></argument>, <argument><expr><literal type="string">"vnodes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pVnodesJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SMonVnodeDesc</name> <modifier>*</modifier></type><name>pVnodeDesc</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroupDesc</name><operator>-&gt;</operator><name>vnodes</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pVnodeDesc</name><operator>-&gt;</operator><name>dnode_id</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pVnodeJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pVnodeJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pVnodeJson</name></expr></argument>, <argument><expr><literal type="string">"dnode_id"</literal></expr></argument>, <argument><expr><name><name>pVnodeDesc</name><operator>-&gt;</operator><name>dnode_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pVnodeJson</name></expr></argument>, <argument><expr><literal type="string">"vnode_role"</literal></expr></argument>, <argument><expr><name><name>pVnodeDesc</name><operator>-&gt;</operator><name>vnode_role</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pVnodesJson</name></expr></argument>, <argument><expr><name>pVnodeJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pVnodeJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monGenStbJson</name><parameter_list>(<parameter><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonStbInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name><operator>.</operator><name>stb</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name><operator>.</operator><name>cluster</name><operator>.</operator><name>first_ep_dnode_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name></expr></argument>, <argument><expr><literal type="string">"stb_infos"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stbs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pStbJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pStbJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pStbJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pStbJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SMonStbDesc</name> <modifier>*</modifier></type><name>pStbDesc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stbs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pStbJson</name></expr></argument>, <argument><expr><literal type="string">"stb_name"</literal></expr></argument>, <argument><expr><name><name>pStbDesc</name><operator>-&gt;</operator><name>stb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pStbJson</name></expr></argument>, <argument><expr><literal type="string">"database_name"</literal></expr></argument>, <argument><expr><name><name>pStbDesc</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monGenGrantJson</name><parameter_list>(<parameter><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonGrantInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name><operator>.</operator><name>grant</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name><operator>.</operator><name>cluster</name><operator>.</operator><name>first_ep_dnode_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToObject</name><argument_list>(<argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name></expr></argument>, <argument><expr><literal type="string">"grant_info"</literal></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"expire_time"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>expire_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"timeseries_used"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>timeseries_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"timeseries_total"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>timeseries_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monGenDnodeJson</name><parameter_list>(<parameter><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonDnodeInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>dmInfo</name><operator>.</operator><name>dnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMonSysInfo</name>   <modifier>*</modifier></type><name>pSys</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>dmInfo</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodesStat</name>   <modifier>*</modifier></type><name>pStat</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>vmInfo</name><operator>.</operator><name>vstat</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToObject</name><argument_list>(<argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name></expr></argument>, <argument><expr><literal type="string">"dnode_info"</literal></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>interval</name> <init>= <expr><operator>(</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>curTime</name></name> <operator>-</operator> <name><name>pMonitor</name><operator>-&gt;</operator><name>lastTime</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMonitor</name><operator>-&gt;</operator><name>curTime</name></name> <operator>-</operator> <name><name>pMonitor</name><operator>-&gt;</operator><name>lastTime</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>interval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>cpu_engine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>mem_engine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>net_in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>net_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>io_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>io_write</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>io_read_disk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>io_write_disk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMonSysInfo</name> <modifier>*</modifier></type><name><name>sysArrays</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>sysArrays</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>dmInfo</name><operator>.</operator><name>sys</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sysArrays</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name><operator>.</operator><name>sys</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sysArrays</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>vmInfo</name><operator>.</operator><name>sys</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sysArrays</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>qmInfo</name><operator>.</operator><name>sys</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sysArrays</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>smInfo</name><operator>.</operator><name>sys</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sysArrays</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>bmInfo</name><operator>.</operator><name>sys</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>cpu_engine</name> <operator>+=</operator> <name><name>sysArrays</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>cpu_engine</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mem_engine</name> <operator>+=</operator> <name><name>sysArrays</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>mem_engine</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>net_in</name> <operator>+=</operator> <name><name>sysArrays</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>net_in</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>net_out</name> <operator>+=</operator> <name><name>sysArrays</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>net_out</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>io_read</name> <operator>+=</operator> <name><name>sysArrays</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>io_read</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>io_write</name> <operator>+=</operator> <name><name>sysArrays</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>io_write</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>io_read_disk</name> <operator>+=</operator> <name><name>sysArrays</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>io_read_disk</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>io_write_disk</name> <operator>+=</operator> <name><name>sysArrays</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>io_write_disk</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>double</name></type> <name>req_select_rate</name> <init>= <expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfSelectReqs</name></name> <operator>/</operator> <name>interval</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>req_insert_rate</name> <init>= <expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfInsertReqs</name></name> <operator>/</operator> <name>interval</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>req_insert_batch_rate</name> <init>= <expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfBatchInsertReqs</name></name> <operator>/</operator> <name>interval</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>net_in_rate</name> <init>= <expr><name>net_in</name> <operator>/</operator> <name>interval</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>net_out_rate</name> <init>= <expr><name>net_out</name> <operator>/</operator> <name>interval</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>io_read_rate</name> <init>= <expr><name>io_read</name> <operator>/</operator> <name>interval</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>io_write_rate</name> <init>= <expr><name>io_write</name> <operator>/</operator> <name>interval</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>io_read_disk_rate</name> <init>= <expr><name>io_read_disk</name> <operator>/</operator> <name>interval</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>io_write_disk_rate</name> <init>= <expr><name>io_write_disk</name> <operator>/</operator> <name>interval</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"uptime"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uptime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"cpu_engine"</literal></expr></argument>, <argument><expr><name>cpu_engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"cpu_system"</literal></expr></argument>, <argument><expr><name><name>pSys</name><operator>-&gt;</operator><name>cpu_system</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"cpu_cores"</literal></expr></argument>, <argument><expr><name><name>pSys</name><operator>-&gt;</operator><name>cpu_cores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"mem_engine"</literal></expr></argument>, <argument><expr><name>mem_engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"mem_system"</literal></expr></argument>, <argument><expr><name><name>pSys</name><operator>-&gt;</operator><name>mem_system</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"mem_total"</literal></expr></argument>, <argument><expr><name><name>pSys</name><operator>-&gt;</operator><name>mem_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"disk_engine"</literal></expr></argument>, <argument><expr><name><name>pSys</name><operator>-&gt;</operator><name>disk_engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"disk_used"</literal></expr></argument>, <argument><expr><name><name>pSys</name><operator>-&gt;</operator><name>disk_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"disk_total"</literal></expr></argument>, <argument><expr><name><name>pSys</name><operator>-&gt;</operator><name>disk_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"net_in"</literal></expr></argument>, <argument><expr><name>net_in_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"net_out"</literal></expr></argument>, <argument><expr><name>net_out_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"io_read"</literal></expr></argument>, <argument><expr><name>io_read_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"io_write"</literal></expr></argument>, <argument><expr><name>io_write_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"io_read_disk"</literal></expr></argument>, <argument><expr><name>io_read_disk_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"io_write_disk"</literal></expr></argument>, <argument><expr><name>io_write_disk_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"req_select"</literal></expr></argument>, <argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfSelectReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"req_select_rate"</literal></expr></argument>, <argument><expr><name>req_select_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"req_insert"</literal></expr></argument>, <argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfInsertReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"req_insert_success"</literal></expr></argument>, <argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfInsertSuccessReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"req_insert_rate"</literal></expr></argument>, <argument><expr><name>req_insert_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"req_insert_batch"</literal></expr></argument>, <argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfBatchInsertReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"req_insert_batch_success"</literal></expr></argument>, <argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfBatchInsertSuccessReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"req_insert_batch_rate"</literal></expr></argument>, <argument><expr><name>req_insert_batch_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"errors"</literal></expr></argument>, <argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vnodes_num"</literal></expr></argument>, <argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>totalVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"masters"</literal></expr></argument>, <argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>masterNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"has_mnode"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>has_mnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"has_qnode"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>has_qnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"has_snode"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>has_snode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monGenDiskJson</name><parameter_list>(<parameter><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonDiskInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>vmInfo</name><operator>.</operator><name>tfs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMonDiskDesc</name> <modifier>*</modifier></type><name>pLogDesc</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>dmInfo</name><operator>.</operator><name>dnode</name><operator>.</operator><name>logdir</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMonDiskDesc</name> <modifier>*</modifier></type><name>pTempDesc</name> <init>= <expr><operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>dmInfo</name><operator>.</operator><name>dnode</name><operator>.</operator><name>tempdir</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToObject</name><argument_list>(<argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name></expr></argument>, <argument><expr><literal type="string">"disk_infos"</literal></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pDatadirsJson</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"datadir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDatadirsJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>datadirs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pDatadirJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDatadirJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SMonDiskDesc</name> <modifier>*</modifier></type><name>pDatadirDesc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>datadirs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>pDatadirDesc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><name><name>pDatadirDesc</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>, <argument><expr><literal type="string">"avail"</literal></expr></argument>, <argument><expr><name><name>pDatadirDesc</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>avail</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>, <argument><expr><literal type="string">"used"</literal></expr></argument>, <argument><expr><name><name>pDatadirDesc</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>used</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>, <argument><expr><literal type="string">"total"</literal></expr></argument>, <argument><expr><name><name>pDatadirDesc</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pDatadirsJson</name></expr></argument>, <argument><expr><name>pDatadirJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pDatadirJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pLogdirJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogdirJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"logdir"</literal></expr></argument>, <argument><expr><name>pLogdirJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pLogdirJson</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>pLogDesc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pLogdirJson</name></expr></argument>, <argument><expr><literal type="string">"avail"</literal></expr></argument>, <argument><expr><name><name>pLogDesc</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pLogdirJson</name></expr></argument>, <argument><expr><literal type="string">"used"</literal></expr></argument>, <argument><expr><name><name>pLogDesc</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pLogdirJson</name></expr></argument>, <argument><expr><literal type="string">"total"</literal></expr></argument>, <argument><expr><name><name>pLogDesc</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pTempdirJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTempdirJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"tempdir"</literal></expr></argument>, <argument><expr><name>pTempdirJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pTempdirJson</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>pTempDesc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pTempdirJson</name></expr></argument>, <argument><expr><literal type="string">"avail"</literal></expr></argument>, <argument><expr><name><name>pTempDesc</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pTempdirJson</name></expr></argument>, <argument><expr><literal type="string">"used"</literal></expr></argument>, <argument><expr><name><name>pTempDesc</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pTempdirJson</name></expr></argument>, <argument><expr><literal type="string">"total"</literal></expr></argument>, <argument><expr><name><name>pTempDesc</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>monLogLevelStr</name><parameter_list>(<parameter><decl><type><name>ELogLevel</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>DEBUG_ERROR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="string">"error"</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="string">"info"</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monGenLogJson</name><parameter_list>(<parameter><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToObject</name><argument_list>(<argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name></expr></argument>, <argument><expr><literal type="string">"log_infos"</literal></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pLogsJson</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"logs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogsJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SMonLogs</name> <modifier>*</modifier></type><name><name>logs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>logs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>log</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>logs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>mmInfo</name><operator>.</operator><name>log</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>logs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>vmInfo</name><operator>.</operator><name>log</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>logs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>smInfo</name><operator>.</operator><name>log</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>logs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>qmInfo</name><operator>.</operator><name>log</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>logs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pMonitor</name><operator>-&gt;</operator><name>bmInfo</name><operator>.</operator><name>log</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfErrorLogs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfInfoLogs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfDebugLogs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTraceLogs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMonLogs</name> <modifier>*</modifier></type><name>pLog</name> <init>= <expr><name><name>logs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>numOfErrorLogs</name> <operator>+=</operator> <name><name>pLog</name><operator>-&gt;</operator><name>numOfErrorLogs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfInfoLogs</name> <operator>+=</operator> <name><name>pLog</name><operator>-&gt;</operator><name>numOfInfoLogs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfDebugLogs</name> <operator>+=</operator> <name><name>pLog</name><operator>-&gt;</operator><name>numOfDebugLogs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfTraceLogs</name> <operator>+=</operator> <name><name>pLog</name><operator>-&gt;</operator><name>numOfTraceLogs</name></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pLogJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pLogJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><name>SMonLogItem</name> <modifier>*</modifier></type><name>pLogItem</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>logs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosFormatUtcTime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pLogItem</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pLogJson</name></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pLogJson</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><call><name>monLogLevelStr</name><argument_list>(<argument><expr><name><name>pLogItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pLogJson</name></expr></argument>, <argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><name><name>pLogItem</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pLogsJson</name></expr></argument>, <argument><expr><name>pLogJson</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pLogJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pSummaryJson</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"summary"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSummaryJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pLogError</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogError</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pLogError</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pLogError</name></expr></argument>, <argument><expr><literal type="string">"total"</literal></expr></argument>, <argument><expr><name>numOfErrorLogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pSummaryJson</name></expr></argument>, <argument><expr><name>pLogError</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pLogError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pLogInfo</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pLogInfo</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pLogInfo</name></expr></argument>, <argument><expr><literal type="string">"total"</literal></expr></argument>, <argument><expr><name>numOfInfoLogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pSummaryJson</name></expr></argument>, <argument><expr><name>pLogInfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pLogInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pLogDebug</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogDebug</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pLogDebug</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pLogDebug</name></expr></argument>, <argument><expr><literal type="string">"total"</literal></expr></argument>, <argument><expr><name>numOfDebugLogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pSummaryJson</name></expr></argument>, <argument><expr><name>pLogDebug</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pLogDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pLogTrace</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogTrace</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pLogTrace</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><literal type="string">"trace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pLogTrace</name></expr></argument>, <argument><expr><literal type="string">"total"</literal></expr></argument>, <argument><expr><name>numOfTraceLogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pSummaryJson</name></expr></argument>, <argument><expr><name>pLogTrace</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pLogTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>monSendReport</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonInfo</name> <modifier>*</modifier></type><name>pMonitor</name> <init>= <expr><call><name>monCreateMonitorInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMonitor</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>monGenBasicJson</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>monGenClusterJson</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>monGenVgroupJson</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>monGenStbJson</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>monGenGrantJson</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>monGenDnodeJson</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>monGenDiskJson</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>monGenLogJson</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pCont</name> <init>= <expr><call><name>tjsonToString</name><argument_list>(<argument><expr><name><name>pMonitor</name><operator>-&gt;</operator><name>pJson</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// uDebugL("report cont:%s\n", pCont);</comment>
  <if_stmt><if>if <condition>(<expr><name>pCont</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>EHttpCompFlag</name></type> <name>flag</name> <init>= <expr><ternary><condition><expr><name><name>tsMonitor</name><operator>.</operator><name>cfg</name><operator>.</operator><name>comp</name></name></expr> ?</condition><then> <expr><name>HTTP_GZIP</name></expr> </then><else>: <expr><name>HTTP_FLAT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosSendHttpReport</name><argument_list>(<argument><expr><name><name>tsMonitor</name><operator>.</operator><name>cfg</name><operator>.</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>tsMonitor</name><operator>.</operator><name>cfg</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name>pCont</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pCont</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to send monitor msg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>monCleanupMonitorInfo</name><argument_list>(<argument><expr><name>pMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
