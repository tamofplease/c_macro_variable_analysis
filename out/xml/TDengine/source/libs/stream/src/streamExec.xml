<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/stream/src/streamExec.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streamInc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>streamTaskExecImpl</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>exec</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// set input</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SStreamQueueItem</name><modifier>*</modifier></type> <name>pItem</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStreamQueueItem</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__GET_RES</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SStreamTrigger</name><modifier>*</modifier></type> <name>pTrigger</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStreamTrigger</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qSetMultiStreamInput</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>STREAM_INPUT__DATA_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__SOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>pSubmit</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStreamDataSubmit</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d %p set submit input %p %p %d 1"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pSubmit</name></expr></argument>, <argument><expr><name><name>pSubmit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>pSubmit</name><operator>-&gt;</operator><name>dataRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qSetMultiStreamInput</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><name><name>pSubmit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>STREAM_INPUT__DATA_SUBMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_BLOCK</name> <operator>||</operator> <name><name>pItem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_RETRIEVE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SStreamDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStreamDataBlock</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>                 <name>blocks</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>blocks</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d %p set ssdata input"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qSetMultiStreamInput</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><name><name>blocks</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>blocks</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>STREAM_INPUT__DATA_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__MERGED_SUBMIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SStreamMergedSubmit</name><modifier>*</modifier></type> <name>pMerged</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStreamMergedSubmit</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>                    <name>blocks</name> <init>= <expr><name><name>pMerged</name><operator>-&gt;</operator><name>reqs</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d %p set submit input (merged), batch num: %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>blocks</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qSetMultiStreamInput</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><name><name>blocks</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>blocks</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>STREAM_INPUT__MERGED_SUBMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__REF_DATA_BLOCK</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SStreamRefDataBlock</name><modifier>*</modifier></type> <name>pRefBlock</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStreamRefDataBlock</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qSetMultiStreamInput</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><name><name>pRefBlock</name><operator>-&gt;</operator><name>pBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>STREAM_INPUT__DATA_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// exec</comment>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>     <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>qExecTask</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/*ASSERT(false);*/</comment>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"unexpected stream execution, stream %"</literal> <name>PRId64</name> <literal type="string">" task: %d,  since %s"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>streamId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>,
             <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_RETRIEVE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name></type>             <name>block</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>SStreamDataBlock</name><modifier>*</modifier></type> <name>pRetrieveBlock</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStreamDataBlock</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRetrieveBlock</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assignOneDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRetrieveBlock</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>block</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STREAM_PULL_OVER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>block</name><operator>.</operator><name>info</name><operator>.</operator><name>childId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d(child %d) processed retrieve, reqId %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr></argument>,
               <argument><expr><name><name>pRetrieveBlock</name><operator>-&gt;</operator><name>reqId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_RETRIEVE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>streamBroadcastToChildren</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// TODO</comment>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d(child %d) executed and get block"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SSDataBlock</name></type> <name>block</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assignOneDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>info</name><operator>.</operator><name>childId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamScanExec</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>batchSz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__SOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>exec</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qSetStreamOpOpen</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>finished</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>batchCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint64_t</name></type>     <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>qExecTask</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>finished</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SSDataBlock</name></type> <name>block</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assignOneDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>block</name><operator>.</operator><name>info</name><operator>.</operator><name>childId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>batchCnt</name> <operator>&gt;=</operator> <name>batchSz</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SStreamDataBlock</name><modifier>*</modifier></type> <name>qRes</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>qRes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>blockDataFreeRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>qRes</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_BLOCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qRes</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>pRes</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamTaskOutput</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>qRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__FIXED_DISPATCH</name> <operator>||</operator> <name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__SHUFFLE_DISPATCH</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>streamDispatch</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>finished</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t streamBatchExec(SStreamTask* pTask, int32_t batchLimit) {
  <comment type="line">// fetch all queue item, merge according to batchLimit</comment>
  int32_t numOfItems = taosReadAllQitems(pTask-&gt;inputQueue1, pTask-&gt;inputQall);
  if (numOfItems == 0) {
    qDebug("task: %d, stream task exec over, queue empty", pTask-&gt;taskId);
    return 0;
  }
  SStreamQueueItem* pMerged = NULL;
  SStreamQueueItem* pItem = NULL;
  taosGetQitem(pTask-&gt;inputQall, (void**)&amp;pItem);
  if (pItem == NULL) {
    if (pMerged != NULL) {
      <comment type="line">// process merged item</comment>
    } else {
      return 0;
    }
  }

  <comment type="line">// if drop</comment>
  if (pItem-&gt;type == STREAM_INPUT__DESTROY) {
    <comment type="line">// set status drop</comment>
    return -1;
  }

  if (pTask-&gt;taskLevel == TASK_LEVEL__SINK) {
    ASSERT(((SStreamQueueItem*)pItem)-&gt;type == STREAM_INPUT__DATA_BLOCK);
    streamTaskOutput(pTask, (SStreamDataBlock*)pItem);
  }

  <comment type="line">// exec impl</comment>

  <comment type="line">// output</comment>
  <comment type="line">// try dispatch</comment>
  return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>streamExecForAll</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>batchCnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>input</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamQueueItem</name><modifier>*</modifier></type> <name>qItem</name> <init>= <expr><call><name>streamQueueNextItem</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>inputQueue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>qItem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"stream task exec over, queue empty, task: %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>input</name> <operator>=</operator> <name>qItem</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>streamQueueProcessSuccess</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>inputQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__SINK</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>newRet</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>newRet</name> <operator>=</operator> <call><name>streamMergeQueueItem</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>qItem</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>streamQueueProcessFail</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>inputQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>batchCnt</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>input</name> <operator>=</operator> <name>newRet</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>streamQueueProcessSuccess</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>inputQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name> <operator>==</operator> <name>TASK_STATUS__DROPPING</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>streamFreeQitem</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__SINK</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SStreamQueueItem</name><operator>*</operator><operator>)</operator><name>input</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>STREAM_INPUT__DATA_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamTaskOutput</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"stream task %d exec begin, msg batch: %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>batchCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamTaskExecImpl</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"stream task %d exec end"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamDataBlock</name><modifier>*</modifier></type> <name>qRes</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>qRes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>blockDataFreeRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>streamFreeQitem</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>qRes</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_BLOCK</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qRes</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>pRes</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SStreamQueueItem</name><operator>*</operator><operator>)</operator><name>input</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>pSubmit</name> <init>= <expr><operator>(</operator><name>SStreamDataSubmit</name><operator>*</operator><operator>)</operator><name>input</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>qRes</name><operator>-&gt;</operator><name>childId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>qRes</name><operator>-&gt;</operator><name>sourceVer</name></name> <operator>=</operator> <name><name>pSubmit</name><operator>-&gt;</operator><name>ver</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>SStreamQueueItem</name><operator>*</operator><operator>)</operator><name>input</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>STREAM_INPUT__MERGED_SUBMIT</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SStreamMergedSubmit</name><modifier>*</modifier></type> <name>pMerged</name> <init>= <expr><operator>(</operator><name>SStreamMergedSubmit</name><operator>*</operator><operator>)</operator><name>input</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>qRes</name><operator>-&gt;</operator><name>childId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>qRes</name><operator>-&gt;</operator><name>sourceVer</name></name> <operator>=</operator> <name><name>pMerged</name><operator>-&gt;</operator><name>ver</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>streamTaskOutput</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>qRes</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>blockDataFreeRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>streamFreeQitem</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>qRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>streamFreeQitem</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamTryExec</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>schedStatus</name> <init>=
      <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>schedStatus</name></name></expr></argument>, <argument><expr><name>TASK_SCHED_STATUS__WAITING</name></expr></argument>, <argument><expr><name>TASK_SCHED_STATUS__ACTIVE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>schedStatus</name> <operator>==</operator> <name>TASK_SCHED_STATUS__WAITING</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>streamExecForAll</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>schedStatus</name></name></expr></argument>, <argument><expr><name>TASK_SCHED_STATUS__FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>schedStatus</name></name></expr></argument>, <argument><expr><name>TASK_SCHED_STATUS__INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosQueueEmpty</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>inputQueue</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>streamSchedExec</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
