<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/stream/src/streamData.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streamInc.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>streamDispatchReqToData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStreamDispatchReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>SStreamDataBlock</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>blockNum</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>blockNum</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>blockNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>blockNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>==</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>==</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRetrieve</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>       <name>pDataBlock</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDecode</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO: refactor</comment>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <call><name>be64toh</name><argument_list>(<argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>be64toh</name><argument_list>(<argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>be64toh</name><argument_list>(<argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>watermark</name></name> <operator>=</operator> <call><name>be64toh</name><argument_list>(<argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>parTbName</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pRetrieve</name><operator>-&gt;</operator><name>streamBlockType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>childId</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>upstreamChildId</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>pArray</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamRetrieveReqToData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStreamRetrieveReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>SStreamDataBlock</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRetrieve</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>pRetrieve</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>       <name>pDataBlock</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDecode</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO: refactor</comment>
  <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <call><name>be64toh</name><argument_list>(<argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>be64toh</name><argument_list>(<argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>be64toh</name><argument_list>(<argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pRetrieve</name><operator>-&gt;</operator><name>streamBlockType</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>reqId</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>reqId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>pArray</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>streamDataSubmitNew</name><parameter_list>(<parameter><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>pDataSubmit</name> <init>= <expr><operator>(</operator><name>SStreamDataSubmit</name><operator>*</operator><operator>)</operator><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDataSubmit</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDataSubmit</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pDataSubmit</name><operator>-&gt;</operator><name>dataRef</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDataSubmit</name><operator>-&gt;</operator><name>dataRef</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pDataSubmit</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>pDataSubmit</name><operator>-&gt;</operator><name>dataRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDataSubmit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>;</expr_stmt>
  <return>return <expr><name>pDataSubmit</name></expr>;</return>
<label><name>FAIL</name>:</label>
  <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pDataSubmit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamMergedSubmit</name><modifier>*</modifier></type> <name>streamMergedSubmitNew</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamMergedSubmit</name><modifier>*</modifier></type> <name>pMerged</name> <init>= <expr><operator>(</operator><name>SStreamMergedSubmit</name><operator>*</operator><operator>)</operator><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamMergedSubmit</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMerged</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pMerged</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMerged</name><operator>-&gt;</operator><name>dataRefs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMerged</name><operator>-&gt;</operator><name>dataRefs</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pMerged</name><operator>-&gt;</operator><name>reqs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pMerged</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STREAM_INPUT__MERGED_SUBMIT</name></expr>;</expr_stmt>
  <return>return <expr><name>pMerged</name></expr>;</return>
<label><name>FAIL</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pMerged</name><operator>-&gt;</operator><name>reqs</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pMerged</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMerged</name><operator>-&gt;</operator><name>dataRefs</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pMerged</name><operator>-&gt;</operator><name>dataRefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMerged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamMergeSubmit</name><parameter_list>(<parameter><decl><type><name>SStreamMergedSubmit</name><modifier>*</modifier></type> <name>pMerged</name></decl></parameter>, <parameter><decl><type><name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>pSubmit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pMerged</name><operator>-&gt;</operator><name>dataRefs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubmit</name><operator>-&gt;</operator><name>dataRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pMerged</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubmit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMerged</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <name><name>pSubmit</name><operator>-&gt;</operator><name>ver</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>streamDataSubmitRefInc</name><parameter_list>(<parameter><decl><type><name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>pDataSubmit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><name><name>pDataSubmit</name><operator>-&gt;</operator><name>dataRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>streamSubmitRefClone</name><parameter_list>(<parameter><decl><type><name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>pSubmit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>pSubmitClone</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDataSubmit</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSubmitClone</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>streamDataSubmitRefInc</name><argument_list>(<argument><expr><name>pSubmit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pSubmitClone</name></expr></argument>, <argument><expr><name>pSubmit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDataSubmit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pSubmitClone</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamDataSubmitRefDec</name><parameter_list>(<parameter><decl><type><name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>pDataSubmit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><name><name>pDataSubmit</name><operator>-&gt;</operator><name>dataRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pDataSubmit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pDataSubmit</name><operator>-&gt;</operator><name>dataRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SStreamQueueItem</name><modifier>*</modifier></type> <name>streamMergeQueueItem</name><parameter_list>(<parameter><decl><type><name>SStreamQueueItem</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>SStreamQueueItem</name><modifier>*</modifier></type> <name>elem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_BLOCK</name> <operator>&amp;&amp;</operator> <name><name>elem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_BLOCK</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>(</operator><name>SStreamDataBlock</name><operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SStreamDataBlock</name><modifier>*</modifier></type> <name>pBlockSrc</name> <init>= <expr><operator>(</operator><name>SStreamDataBlock</name><operator>*</operator><operator>)</operator><name>elem</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayAddAll</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name><name>pBlockSrc</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pBlockSrc</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>dst</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__MERGED_SUBMIT</name> <operator>&amp;&amp;</operator> <name><name>elem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamMergedSubmit</name><modifier>*</modifier></type> <name>pMerged</name> <init>= <expr><operator>(</operator><name>SStreamMergedSubmit</name><operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SStreamDataSubmit</name><modifier>*</modifier></type>   <name>pBlockSrc</name> <init>= <expr><operator>(</operator><name>SStreamDataSubmit</name><operator>*</operator><operator>)</operator><name>elem</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamMergeSubmit</name><argument_list>(<argument><expr><name>pMerged</name></expr></argument>, <argument><expr><name>pBlockSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>dst</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name> <operator>&amp;&amp;</operator> <name><name>elem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamMergedSubmit</name><modifier>*</modifier></type> <name>pMerged</name> <init>= <expr><call><name>streamMergedSubmitNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pMerged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMergeSubmit</name><argument_list>(<argument><expr><name>pMerged</name></expr></argument>, <argument><expr><operator>(</operator><name>SStreamDataSubmit</name><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMergeSubmit</name><argument_list>(<argument><expr><name>pMerged</name></expr></argument>, <argument><expr><operator>(</operator><name>SStreamDataSubmit</name><operator>*</operator><operator>)</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>SStreamQueueItem</name><operator>*</operator><operator>)</operator><name>pMerged</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamFreeQitem</name><parameter_list>(<parameter><decl><type><name>SStreamQueueItem</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>type</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__GET_RES</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SStreamTrigger</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__DATA_BLOCK</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>STREAM_INPUT__DATA_RETRIEVE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SStreamDataBlock</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name>blocks</name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>blockDataFreeRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamDataSubmitRefDec</name><argument_list>(<argument><expr><operator>(</operator><name>SStreamDataSubmit</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__MERGED_SUBMIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamMergedSubmit</name><modifier>*</modifier></type> <name>pMerge</name> <init>= <expr><operator>(</operator><name>SStreamMergedSubmit</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>              <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pRef</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>dataRefs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>  <name>ref</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><name>pRef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>dataStr</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>dataStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>dataRefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMerge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__REF_DATA_BLOCK</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamRefDataBlock</name><modifier>*</modifier></type> <name>pRefBlock</name> <init>= <expr><operator>(</operator><name>SStreamRefDataBlock</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><name><name>pRefBlock</name><operator>-&gt;</operator><name>dataRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pRefBlock</name><operator>-&gt;</operator><name>pBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pRefBlock</name><operator>-&gt;</operator><name>dataRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pRefBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
