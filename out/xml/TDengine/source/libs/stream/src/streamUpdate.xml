<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/stream/src/streamUpdate.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tencode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tstreamUpdate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FALSE_POSITIVE</name></cpp:macro>   <cpp:value>0.01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BUCKET_SIZE</name></cpp:macro>      <cpp:value>1310720</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAP_CAPACITY</name></cpp:macro>     <cpp:value>1310720</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAP_SIZE</name></cpp:macro>         <cpp:value>(DEFAULT_MAP_CAPACITY * 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWS_PER_MILLISECOND</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NUM_SCALABLE_BF</name></cpp:macro>      <cpp:value>100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_NUM_SCALABLE_BF</name></cpp:macro>      <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PREADD_BUCKET</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INTERVAL</name></cpp:macro>             <cpp:value>MILLISECOND_PER_MINUTE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_INTERVAL</name></cpp:macro>             <cpp:value>(MILLISECOND_PER_SECOND * 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_EXPECTED_ENTRIES</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>adjustExpEntries</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>entries</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>TMIN</name><argument_list>(<argument><expr><name>DEFAULT_EXPECTED_ENTRIES</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>windowSBfAdd</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSBFs</name></name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numSBFs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type>      <name>rows</name> <init>= <expr><call><name>adjustExpEntries</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>*</operator> <name>ROWS_PER_MILLISECOND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SScalableBf</name> <modifier>*</modifier></type><name>tsSBF</name> <init>= <expr><call><name>tScalableBfInit</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>DEFAULT_FALSE_POSITIVE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsSBF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearItemHelper</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScalableBf</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBf</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tScalableBfDestroy</name><argument_list>(<argument><expr><operator>*</operator><name>pBf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>windowSBfDelete</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numSBFs</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SScalableBf</name> <modifier>*</modifier></type><name>pTsSBFs</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tScalableBfDestroy</name><argument_list>(<argument><expr><name>pTsSBFs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayClearEx</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>, <argument><expr><name>clearItemHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>minTS</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>*</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>adjustInterval</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>interval</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>val</name> <init>= <expr><name>interval</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>!=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>interval</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>val</name> <operator>&gt;</operator> <name>MAX_INTERVAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <name>MAX_INTERVAL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>MIN_INTERVAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <name>MIN_INTERVAL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>!=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>adjustWatermark</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>adjInterval</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>originInt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>watermark</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>watermark</name> <operator>&lt;=</operator> <name>adjInterval</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>watermark</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>originInt</name> <operator>/</operator> <name>adjInterval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>adjInterval</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>watermark</name> <operator>&gt;</operator> <name>MAX_NUM_SCALABLE_BF</name> <operator>*</operator> <name>adjInterval</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>watermark</name> <operator>=</operator> <name>MAX_NUM_SCALABLE_BF</name> <operator>*</operator> <name>adjInterval</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt><comment type="block">/* else if (watermark &lt; MIN_NUM_SCALABLE_BF * adjInterval) {
    watermark = MIN_NUM_SCALABLE_BF * adjInterval;
  }*/</comment> <comment type="line">// Todo(liuyao) save window info to tdb</comment>
  <return>return <expr><name>watermark</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>updateInfoInitP</name><parameter_list>(<parameter><decl><type><name>SInterval</name> <modifier>*</modifier></type><name>pInterval</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>watermark</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>updateInfoInit</name><argument_list>(<argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>watermark</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>updateInfoInit</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>interval</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>watermark</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUpdateInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>minTS</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <call><name>adjustInterval</name><argument_list>(<argument><expr><name>interval</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>watermark</name></name> <operator>=</operator> <call><name>adjustWatermark</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>interval</name></expr></argument>, <argument><expr><name>watermark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>bfSize</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>watermark</name></name> <operator>/</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>bfSize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>updateInfoDestroy</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSBFs</name></name> <operator>=</operator> <name>bfSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>windowSBfAdd</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>bfSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>DEFAULT_BUCKET_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>updateInfoDestroy</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>dumy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DEFAULT_BUCKET_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dumy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numBuckets</name></name> <operator>=</operator> <name>DEFAULT_BUCKET_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCloseWinSBF</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>DEFAULT_MAP_CAPACITY</name></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>maxVersion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanGroupId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanWindow</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindow</name><operator>)</operator><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>INT64_MIN</name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>pInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SScalableBf</name> <modifier>*</modifier></type><name>getSBf</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>minTS</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>minTS</name></name> <operator>=</operator> <operator>(</operator><name>TSKEY</name><operator>)</operator><operator>(</operator><name>ts</name> <operator>/</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>*</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ts</name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>minTS</name></name><operator>)</operator> <operator>/</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numSBFs</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><name>index</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numSBFs</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>windowSBfDelete</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>windowSBfAdd</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numSBFs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SScalableBf</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>rows</name> <init>= <expr><call><name>adjustExpEntries</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>*</operator> <name>ROWS_PER_MILLISECOND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>tScalableBfInit</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>DEFAULT_FALSE_POSITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>updateInfoIsTableInserted</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>tbUid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbUid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVal</name> <operator>||</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>DEFAULT_MAP_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSKEY</name></type> <name>updateInfoFillBlockData</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>primaryTsCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INT64_MIN</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>maxTs</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tbUid</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColDataInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>primaryTsCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>ts</name> <init>= <expr><operator>(</operator><operator>(</operator><name>TSKEY</name> <operator>*</operator><operator>)</operator><name><name>pColDataInfo</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>maxTs</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>maxTs</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SScalableBf</name> <modifier>*</modifier></type><name>pSBf</name> <init>= <expr><call><name>getSBf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pSBf</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SUpdateKey</name></type> <name>updateKey</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>tbUid</name> <operator>=</operator> <name>tbUid</name></expr>,
          <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>,
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tScalableBfPut</name><argument_list>(<argument><expr><name>pSBf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>updateKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUpdateKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>TSKEY</name> <modifier>*</modifier></type><name>pMaxTs</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbUid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMaxTs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pMaxTs</name> <operator>&gt;</operator> <name>maxTs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbUid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxTs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>maxTs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>updateInfoIsUpdated</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>tableId</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>res</name> <init>= <expr><name>TSDB_CODE_FAILED</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SUpdateKey</name></type> <name>updateKey</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>tbUid</name> <operator>=</operator> <name>tableId</name></expr>,
      <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name>   <modifier>*</modifier></type><name>pMapMaxTs</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>index</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>tableId</name><operator>)</operator> <operator>%</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numBuckets</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>    <name>maxTs</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <name>maxTs</name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>watermark</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// this window has been closed.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCloseWinSBF</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>tScalableBfPut</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCloseWinSBF</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>updateKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUpdateKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScalableBf</name> <modifier>*</modifier></type><name>pSBf</name> <init>= <expr><call><name>getSBf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// pSBf may be a null pointer</comment>
  <if_stmt><if>if <condition>(<expr><name>pSBf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>tScalableBfPut</name><argument_list>(<argument><expr><name>pSBf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>updateKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUpdateKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>pMapMaxTs</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;</operator> <name>DEFAULT_MAP_SIZE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pMapMaxTs</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pMapMaxTs</name> <operator>&lt;</operator> <name>ts</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pMapMaxTs</name> <operator>&amp;&amp;</operator> <name>maxTs</name> <operator>&lt;</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>minTS</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// check from tsdb api</comment>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>updateInfoSetScanRange</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name> <modifier>*</modifier></type><name>pWin</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===groupId:%"</literal> <name>PRIu64</name> <literal type="string">", startTs:%"</literal> <name>PRIu64</name> <literal type="string">", endTs:%"</literal> <name>PRIu64</name> <literal type="string">", version:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
         <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanWindow</name></name> <operator>=</operator> <operator>*</operator><name>pWin</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanGroupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>maxVersion</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>updateInfoIgnore</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name> <modifier>*</modifier></type><name>pWin</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pInfo</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===check groupId:%"</literal> <name>PRIu64</name> <literal type="string">", startTs:%"</literal> <name>PRIu64</name> <literal type="string">", endTs:%"</literal> <name>PRIu64</name> <literal type="string">", version:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
         <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanGroupId</name></name> <operator>==</operator> <name>groupId</name> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>scanWindow</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <name><name>pWin</name><operator>-&gt;</operator><name>skey</name></name> <operator>&amp;&amp;</operator> <name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name> <operator>&lt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>scanWindow</name><operator>.</operator><name>ekey</name></name> <operator>&amp;&amp;</operator>
      <name>version</name> <operator>&lt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>maxVersion</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===ignore groupId:%"</literal> <name>PRIu64</name> <literal type="string">", startTs:%"</literal> <name>PRIu64</name> <literal type="string">", endTs:%"</literal> <name>PRIu64</name> <literal type="string">", version:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
           <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>updateInfoDestroy</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SScalableBf</name> <modifier>*</modifier></type><name>pSBF</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tScalableBfDestroy</name><argument_list>(<argument><expr><name>pSBF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>updateInfoAddCloseWindowSBF</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCloseWinSBF</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>rows</name> <init>= <expr><call><name>adjustExpEntries</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>*</operator> <name>ROWS_PER_MILLISECOND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCloseWinSBF</name></name> <operator>=</operator> <call><name>tScalableBfInit</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>DEFAULT_FALSE_POSITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>updateInfoDestoryColseWinSBF</name><parameter_list>(<parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pInfo</name> <operator>||</operator> <operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCloseWinSBF</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tScalableBfDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCloseWinSBF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCloseWinSBF</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>updateInfoSerialize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tStartEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TSKEY</name> <modifier>*</modifier></type><name>pTs</name> <init>= <expr><operator>(</operator><name>TSKEY</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>*</operator><name>pTs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numBuckets</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sBfSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>sBfSize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sBfSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SScalableBf</name> <modifier>*</modifier></type><name>pSBf</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tScalableBfEncode</name><argument_list>(<argument><expr><name>pSBf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSBFs</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>minTS</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tScalableBfEncode</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCloseWinSBF</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>mapSize</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>mapSize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name>  <modifier>*</modifier></type><name>pIte</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pIte</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>TSKEY</name> <operator>*</operator><operator>)</operator><name>pIte</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanWindow</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanWindow</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanGroupId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>maxVersion</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tEndEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><name><name>encoder</name><operator>.</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>updateInfoDeserialize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufLen</name></decl></parameter>, <parameter><decl><type><name>SUpdateInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tStartDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>ts</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsBuckets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>numBuckets</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sBfSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sBfSize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sBfSize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sBfSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SScalableBf</name> <modifier>*</modifier></type><name>pSBf</name> <init>= <expr><call><name>tScalableBfDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pSBf</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTsSBFs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSBf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>numSBFs</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>minTS</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCloseWinSBF</name></name> <operator>=</operator> <call><name>tScalableBfDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>mapSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mapSize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>mapSize</name></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ts</name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mapSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mapSize</name> <operator>==</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scanWindow</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scanWindow</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scanGroupId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>maxVersion</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tEndDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
