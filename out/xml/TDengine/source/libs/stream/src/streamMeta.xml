<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/stream/src/streamMeta.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streamInc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttimer.h"</cpp:file></cpp:include>

<function><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>streamMetaOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ahandle</name></decl></parameter>, <parameter><decl><type><name>FTaskExpand</name></type> <name>expandFunc</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMeta</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>streamPath</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>streamPath</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>streamPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>streamPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>streamPath</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"checkpoints"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMulModeMkDir</name><argument_list>(<argument><expr><name>streamPath</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>streamPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"task.db"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pTaskDb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"checkpoint.db"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pCheckpointDb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>streamMetaBegin</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>=</operator> <name>ahandle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>expandFunc</name></name> <operator>=</operator> <name>expandFunc</name></expr>;</expr_stmt>

  <return>return <expr><name>pMeta</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTaskDb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTaskDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCheckpointDb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCheckpointDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamMetaClose</name><parameter_list>(<parameter><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbCommit</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbPostCommit</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTaskDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCheckpointDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SStreamTask</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>timer</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosTmrStop</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tFreeSStreamTask</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*streamMetaReleaseTask(pMeta, pTask);*/</comment>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t streamMetaAddSerializedTask(SStreamMeta* pMeta, int64_t ver, char* msg, int32_t msgLen) {
  SStreamTask* pTask = taosMemoryCalloc(1, sizeof(SStreamTask));
  if (pTask == NULL) {
    return -1;
  }
  SDecoder decoder;
  tDecoderInit(&amp;decoder, (uint8_t*)msg, msgLen);
  if (tDecodeSStreamTask(&amp;decoder, pTask) &lt; 0) {
    tDecoderClear(&amp;decoder);
    goto FAIL;
  }
  tDecoderClear(&amp;decoder);

  if (pMeta-&gt;expandFunc(pMeta-&gt;ahandle, pTask, ver) &lt; 0) {
    ASSERT(0);
    goto FAIL;
  }

  if (taosHashPut(pMeta-&gt;pTasks, &amp;pTask-&gt;taskId, sizeof(int32_t), &amp;pTask, sizeof(void*)) &lt; 0) {
    goto FAIL;
  }

  if (tdbTbUpsert(pMeta-&gt;pTaskDb, &amp;pTask-&gt;taskId, sizeof(int32_t), msg, msgLen, pMeta-&gt;txn) &lt; 0) {
    taosHashRemove(pMeta-&gt;pTasks, &amp;pTask-&gt;taskId, sizeof(int32_t));
    ASSERT(0);
    goto FAIL;
  }

  return 0;

FAIL:
  if (pTask) tFreeSStreamTask(pTask);
  return -1;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<function><type><name>int32_t</name></type> <name>streamMetaAddTask</name><parameter_list>(<parameter><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><name>pMeta</name><operator>-&gt;</operator><name>expandFunc</name></name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>ahandle</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSStreamTask</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSStreamTask</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbUpsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTaskDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SStreamTask</name><modifier>*</modifier></type> <name>streamMetaGetTask</name><parameter_list>(<parameter><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppTask</name> <init>= <expr><operator>(</operator><name>SStreamTask</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ppTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppTask</name><operator>)</operator><operator>-&gt;</operator><name>taskId</name></name> <operator>==</operator> <name>taskId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>ppTask</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SStreamTask</name><modifier>*</modifier></type> <name>streamMetaAcquireTask</name><parameter_list>(<parameter><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppTask</name> <init>= <expr><operator>(</operator><name>SStreamTask</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ppTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><operator>*</operator><name>ppTask</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TASK_STATUS__DROPPING</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>refCnt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>pTask</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamMetaReleaseTask</name><parameter_list>(<parameter><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>left</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>refCnt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TASK_STATUS__DROPPING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSStreamTask</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamMetaRemoveTask</name><parameter_list>(<parameter><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppTask</name> <init>= <expr><operator>(</operator><name>SStreamTask</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ppTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><operator>*</operator><name>ppTask</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*if (pTask-&gt;timer) {
     * taosTmrStop(pTask-&gt;timer);*/</comment>
    <comment type="block">/*pTask-&gt;timer = NULL;*/</comment>
    <comment type="block">/*}*/</comment>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name></expr></argument>, <argument><expr><name>TASK_STATUS__DROPPING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamMetaBegin</name><parameter_list>(<parameter><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tdbBegin</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><name>TDB_TXN_WRITE</name> <operator>|</operator> <name>TDB_TXN_READ_UNCOMMITTED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamMetaCommit</name><parameter_list>(<parameter><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tdbCommit</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbPostCommit</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbBegin</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><name>TDB_TXN_WRITE</name> <operator>|</operator> <name>TDB_TXN_READ_UNCOMMITTED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamMetaAbort</name><parameter_list>(<parameter><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tdbAbort</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbBegin</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><name>TDB_TXN_WRITE</name> <operator>|</operator> <name>TDB_TXN_READ_UNCOMMITTED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamLoadTasks</name><parameter_list>(<parameter><decl><type><name>SStreamMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TBC</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTaskDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTbcMoveToFirst</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><call><name>tdbTbcNext</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecodeSStreamTask</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pMeta</name><operator>-&gt;</operator><name>expandFunc</name></name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>ahandle</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
