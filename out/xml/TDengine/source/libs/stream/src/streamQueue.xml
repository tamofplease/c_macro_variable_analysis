<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/stream/src/streamQueue.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streamInc.h"</cpp:file></cpp:include>

<function><type><name>SStreamQueue</name><modifier>*</modifier></type> <name>streamQueueOpen</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamQueue</name><modifier>*</modifier></type> <name>pQueue</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamQueue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pQueue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pQueue</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <call><name>taosOpenQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQueue</name><operator>-&gt;</operator><name>qall</name></name> <operator>=</operator> <call><name>taosAllocateQall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pQueue</name><operator>-&gt;</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pQueue</name><operator>-&gt;</operator><name>qall</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pQueue</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>STREAM_QUEUE__SUCESS</name></expr>;</expr_stmt>
  <return>return <expr><name>pQueue</name></expr>;</return>
<label><name>FAIL</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pQueue</name><operator>-&gt;</operator><name>queue</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name><name>pQueue</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pQueue</name><operator>-&gt;</operator><name>qall</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name><name>pQueue</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamQueueClose</name><parameter_list>(<parameter><decl><type><name>SStreamQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>qItem</name> <init>= <expr><call><name>streamQueueNextItem</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>qItem</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>streamFreeQitem</name><argument_list>(<argument><expr><name>qItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>streamQueueResEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStreamQueueRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int64_t</name></type>           <name>streamQueueResSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStreamQueueRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pRes</name><operator>-&gt;</operator><name>size</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>streamQueueResFront</name><parameter_list>(<parameter><decl><type><name>SStreamQueueRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pRes</name><operator>-&gt;</operator><name>head</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>streamQueueResPop</name><parameter_list>(<parameter><decl><type><name>SStreamQueueRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>pRet</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamQueueResClear</name><parameter_list>(<parameter><decl><type><name>SStreamQueueRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamFreeQitem</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>SStreamQueueRes</name></type> <name>streamQueueBuildRes</name><parameter_list>(<parameter><decl><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>pTail</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type>           <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pTail</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>pTmp</name> <init>= <expr><name><name>pTail</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pTail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>head</name> <operator>=</operator> <name>pTail</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTail</name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><operator>(</operator><name>SStreamQueueRes</name><operator>)</operator><block>{<expr><operator>.</operator><name>head</name> <operator>=</operator> <name>head</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>    <name>streamQueueHasTask</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStreamQueue1</name><modifier>*</modifier></type> <name>pQueue</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><name><name>pQueue</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>streamQueuePush</name><parameter_list>(<parameter><decl><type><name>SStreamQueue1</name><modifier>*</modifier></type> <name>pQueue</name></decl></parameter>, <parameter><decl><type><name>SStreamQueueItem</name><modifier>*</modifier></type> <name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamQueueNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>item</name></name> <operator>=</operator> <name>pItem</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><name><name>pQueue</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pHead</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>pOld</name> <init>= <expr><call><name>atomic_val_compare_exchange_ptr</name><argument_list>(<argument><expr><name><name>pQueue</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><name>pHead</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pOld</name> <operator>==</operator> <name>pHead</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamQueueRes</name></type> <name>streamQueueGetRes</name><parameter_list>(<parameter><decl><type><name>SStreamQueue1</name><modifier>*</modifier></type> <name>pQueue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamQueueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><call><name>atomic_exchange_ptr</name><argument_list>(<argument><expr><name><name>pQueue</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>streamQueueBuildRes</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>SStreamQueueRes</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</return>
</block_content>}</block></function>
</unit>
