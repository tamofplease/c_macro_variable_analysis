<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/stream/src/stream.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streamInc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttimer.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>streamInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>streamEnv</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>streamEnv</name><operator>.</operator><name>timer</name></name> <operator>=</operator> <call><name>taosTmrInit</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="string">"STREAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>streamEnv</name><operator>.</operator><name>timer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>streamEnv</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>streamEnv</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamCleanUp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>streamEnv</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosTmrCleanUp</name><argument_list>(<argument><expr><name><name>streamEnv</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>streamEnv</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamSchedByTimer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TASK_STATUS__DROPPING</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>triggerStatus</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TASK_TRIGGER_STATUS__ACTIVE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamTrigger</name><modifier>*</modifier></type> <name>trigger</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamTrigger</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>trigger</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>trigger</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STREAM_INPUT__GET_RES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>trigger</name><operator>-&gt;</operator><name>pBlock</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>trigger</name><operator>-&gt;</operator><name>pBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>trigger</name><operator>-&gt;</operator><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STREAM_GET_ALL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>triggerStatus</name></name></expr></argument>, <argument><expr><name>TASK_TRIGGER_STATUS__INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>streamTaskInput</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>(</operator><name>SStreamQueueItem</name><operator>*</operator><operator>)</operator><name>trigger</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>streamSchedByTimer</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>triggerParam</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>streamEnv</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>streamSchedExec</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>streamSchedByTimer</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>triggerParam</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>streamEnv</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamSetupTrigger</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>triggerParam</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>refCnt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ref</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <call><name>taosTmrStart</name><argument_list>(<argument><expr><name>streamSchedByTimer</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>triggerParam</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>streamEnv</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>triggerStatus</name></name> <operator>=</operator> <name>TASK_TRIGGER_STATUS__INACTIVE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamSchedExec</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>schedStatus</name> <init>=
      <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>schedStatus</name></name></expr></argument>, <argument><expr><name>TASK_SCHED_STATUS__INACTIVE</name></expr></argument>, <argument><expr><name>TASK_SCHED_STATUS__WAITING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>schedStatus</name> <operator>==</operator> <name>TASK_SCHED_STATUS__INACTIVE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamTaskRunReq</name><modifier>*</modifier></type> <name>pRunReq</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamTaskRunReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRunReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>schedStatus</name></name></expr></argument>, <argument><expr><name>TASK_SCHED_STATUS__INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pRunReq</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRunReq</name><operator>-&gt;</operator><name>streamId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>streamId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRunReq</name><operator>-&gt;</operator><name>taskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>msg</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_STREAM_TASK_RUN</name></expr>,
        <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pRunReq</name></expr>,
        <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStreamTaskRunReq</name></expr></argument>)</argument_list></sizeof></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pMsgCb</name></name></expr></argument>, <argument><expr><name>STREAM_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamTaskEnqueue</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStreamDispatchReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamDataBlock</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>            <name>status</name></decl>;</decl_stmt>

  <comment type="line">// enqueue</comment>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_BLOCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>srcVgId</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>dataSrcVgId</name></name></expr>;</expr_stmt>
    <comment type="line">// decode</comment>
    <comment type="block">/*pData-&gt;blocks = pReq-&gt;data;*/</comment>
    <comment type="block">/*pBlock-&gt;sourceVer = pReq-&gt;sourceVer;*/</comment>
    <expr_stmt><expr><call><name>streamDispatchReqToData</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>streamTaskInput</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>(</operator><name>SStreamQueueItem</name><operator>*</operator><operator>)</operator><name>pData</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TASK_INPUT_STATUS__NORMAL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TASK_INPUT_STATUS__FAILED</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>streamTaskInputFail</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TASK_INPUT_STATUS__FAILED</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// rsp by input status</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDispatchRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>upstreamNodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SStreamDispatchRsp</name><modifier>*</modifier></type> <name>pCont</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCont</name><operator>-&gt;</operator><name>inputStatus</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCont</name><operator>-&gt;</operator><name>streamId</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>streamId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCont</name><operator>-&gt;</operator><name>upstreamNodeId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>upstreamNodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCont</name><operator>-&gt;</operator><name>upstreamTaskId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>upstreamTaskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCont</name><operator>-&gt;</operator><name>downstreamNodeId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCont</name><operator>-&gt;</operator><name>downstreamTaskId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDispatchRsp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>status</name> <operator>==</operator> <name>TASK_INPUT_STATUS__NORMAL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamTaskEnqueueRetrieve</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>SStreamRetrieveReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamDataBlock</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>            <name>status</name> <init>= <expr><name>TASK_INPUT_STATUS__NORMAL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// enqueue</comment>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d(child %d) recv retrieve req from task %d, reqId %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr></argument>,
           <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>srcTaskId</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>reqId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_RETRIEVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>srcVgId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">// decode</comment>
    <comment type="block">/*pData-&gt;blocks = pReq-&gt;data;*/</comment>
    <comment type="block">/*pBlock-&gt;sourceVer = pReq-&gt;sourceVer;*/</comment>
    <expr_stmt><expr><call><name>streamRetrieveReqToData</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>streamTaskInput</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>(</operator><name>SStreamQueueItem</name><operator>*</operator><operator>)</operator><name>pData</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TASK_INPUT_STATUS__NORMAL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TASK_INPUT_STATUS__FAILED</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/*streamTaskInputFail(pTask);*/</comment>
    <comment type="block">/*status = TASK_INPUT_STATUS__FAILED;*/</comment>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// rsp by input status</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStreamRetrieveRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>srcNodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SStreamRetrieveRsp</name><modifier>*</modifier></type> <name>pCont</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCont</name><operator>-&gt;</operator><name>streamId</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>streamId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCont</name><operator>-&gt;</operator><name>rspToTaskId</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>srcTaskId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCont</name><operator>-&gt;</operator><name>rspFromTaskId</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>dstTaskId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStreamRetrieveRsp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>status</name> <operator>==</operator> <name>TASK_INPUT_STATUS__NORMAL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamProcessDispatchReq</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>SStreamDispatchReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>exec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d receive dispatch req from node %d task %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>upstreamNodeId</name></name></expr></argument>,
         <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>upstreamTaskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>streamTaskEnqueue</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDeleteStreamDispatchReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>exec</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>streamTryExec</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__FIXED_DISPATCH</name> <operator>||</operator> <name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__SHUFFLE_DISPATCH</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>streamDispatch</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>streamSchedExec</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamProcessDispatchRsp</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>SStreamDispatchRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>inputStatus</name></name> <operator>==</operator> <name>TASK_OUTPUT_STATUS__NORMAL</name> <operator>||</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>inputStatus</name></name> <operator>==</operator> <name>TASK_OUTPUT_STATUS__BLOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d receive dispatch rsp, code: %x"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__SHUFFLE_DISPATCH</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>leftRsp</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>shuffleDispatcher</name><operator>.</operator><name>waitingRspCnt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d is shuffle, left waiting rsp %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>leftRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>leftRsp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name> <init>= <expr><call><name>atomic_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>outputStatus</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>inputStatus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>old</name> <operator>==</operator> <name>TASK_OUTPUT_STATUS__WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>inputStatus</name></name> <operator>==</operator> <name>TASK_INPUT_STATUS__BLOCKED</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO: init recover timer</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// continue dispatch</comment>
  <expr_stmt><expr><call><name>streamDispatch</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamProcessRunReq</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>streamTryExec</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__FIXED_DISPATCH</name> <operator>||</operator> <name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__SHUFFLE_DISPATCH</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamDispatch</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamProcessRetrieveReq</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>SStreamRetrieveReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d receive retrieve req from node %d task %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>srcNodeId</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>srcTaskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>streamTaskEnqueueRetrieve</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>!=</operator> <name>TASK_LEVEL__SINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamSchedExec</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*streamTryExec(pTask);*/</comment>

  <comment type="block">/*streamDispatch(pTask);*/</comment>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamProcessRetrieveRsp</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>SStreamRetrieveRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
