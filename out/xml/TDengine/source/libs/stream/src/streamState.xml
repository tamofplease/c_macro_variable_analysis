<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/stream/src/streamState.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streamInc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttimer.h"</cpp:file></cpp:include>

<comment type="line">// todo refactor</comment>
<typedef>typedef <type><struct>struct <name>SStateKey</name> <block>{
  <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>opNum</name></decl>;</decl_stmt>
}</block></struct></type> <name>SStateKey</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SStateSessionKey</name> <block>{
  <decl_stmt><decl><type><name>SSessionKey</name></type> <name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>opNum</name></decl>;</decl_stmt>
}</block></struct></type> <name>SStateSessionKey</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sessionRangeKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>pWin1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>pWin2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sessionWinKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>pWin1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>pWin2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>stateSessionKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateSessionKey</name><modifier>*</modifier></type> <name>pWin1</name> <init>= <expr><operator>(</operator><name>SStateSessionKey</name><operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStateSessionKey</name><modifier>*</modifier></type> <name>pWin2</name> <init>= <expr><operator>(</operator><name>SStateSessionKey</name><operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>opNum</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>opNum</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>opNum</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>opNum</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>sessionWinKeyCmpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWin1</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWin2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>stateKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateKey</name><modifier>*</modifier></type> <name>pWin1</name> <init>= <expr><operator>(</operator><name>SStateKey</name><operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStateKey</name><modifier>*</modifier></type> <name>pWin2</name> <init>= <expr><operator>(</operator><name>SStateKey</name><operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>opNum</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>opNum</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>opNum</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>opNum</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>groupId</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamState</name><modifier>*</modifier></type> <name>streamStateOpen</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>specPath</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>szPage</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pages</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>szPage</name> <operator>=</operator> <ternary><condition><expr><name>szPage</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">4096</literal></expr> </then><else>: <expr><name>szPage</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>pages</name> <operator>=</operator> <ternary><condition><expr><name>pages</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">256</literal></expr> </then><else>: <expr><name>pages</name></expr></else></ternary></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pState</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STdbState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamStateDestroy</name><argument_list>(<argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>statePath</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>specPath</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>statePath</name></expr></argument>, <argument><expr><literal type="string">"%s/%d"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>statePath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>statePath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbOpen</name><argument_list>(<argument><expr><name>statePath</name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open state storage backend</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"state.db"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stateKeyCmpr</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pStateDb</name></name></expr></argument>,
                <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// todo refactor</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"fill.state.db"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>winKeyCmpr</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFillStateDb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"session.state.db"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stateSessionKeyCmpr</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pSessionStateDb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"func.state.db"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STupleKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>STupleKeyCmpr</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFuncStateDb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"parname.state.db"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pParNameDb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>streamStateBegin</name><argument_list>(<argument><expr><name>pState</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pOwner</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>

  <return>return <expr><name>pState</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pStateDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFuncStateDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFillStateDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pSessionStateDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pParNameDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamStateDestroy</name><argument_list>(<argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamStateClose</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbCommit</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbPostCommit</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pStateDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFuncStateDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFillStateDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pSessionStateDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pParNameDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbClose</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>streamStateDestroy</name><argument_list>(<argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateBegin</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tdbBegin</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><name>TDB_TXN_WRITE</name> <operator>|</operator> <name>TDB_TXN_READ_UNCOMMITTED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbAbort</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateCommit</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tdbCommit</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbPostCommit</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbBegin</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><name>TDB_TXN_WRITE</name> <operator>|</operator> <name>TDB_TXN_READ_UNCOMMITTED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateAbort</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tdbAbort</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbBegin</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><name>TDB_TXN_WRITE</name> <operator>|</operator> <name>TDB_TXN_READ_UNCOMMITTED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateFuncPut</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STupleKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbTbUpsert</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFuncStateDb</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STupleKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>streamStateFuncGet</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STupleKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFuncStateDb</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STupleKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateFuncDel</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STupleKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFuncStateDb</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STupleKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo refactor</comment>
<function><type><name>int32_t</name></type> <name>streamStatePut</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tdbTbUpsert</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo refactor</comment>
<function><type><name>int32_t</name></type> <name>streamStateFillPut</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbTbUpsert</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFillStateDb</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo refactor</comment>
<function><type><name>int32_t</name></type> <name>streamStateGet</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo refactor</comment>
<function><type><name>int32_t</name></type> <name>streamStateFillGet</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFillStateDb</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo refactor</comment>
<function><type><name>int32_t</name></type> <name>streamStateDel</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateClear</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>streamStatePut</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateSeekKeyNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SWinKey</name></type>          <name>delKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>streamStateGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>streamStateDel</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamStateSetNumber</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pState</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt> </block_content>}</block></function>

<comment type="line">// todo refactor</comment>
<function><type><name>int32_t</name></type> <name>streamStateFillDel</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFillStateDb</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateAddIfNotExist</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo refactor</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><operator>*</operator><name>pVLen</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>streamStateGet</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>*</operator><name>pVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateReleaseBuf</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo refactor</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pVal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>streamFreeVal</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>streamStateGetCur</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamStateCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStateKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
  <return>return <expr><name>pCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>streamStateFillGetCur</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamStateCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFillStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>streamStateGetAndCheckCur</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateFillGetCur</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>streamStateGetGroupKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>pCur</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateGetKVByCur</name><parameter_list>(<parameter><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>, <parameter><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SStateKey</name><modifier>*</modifier></type> <name>pKTmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>kLen</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pKTmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pKTmp</name><operator>-&gt;</operator><name>opNum</name></name> <operator>!=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>number</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pKey</name> <operator>=</operator> <name><name>pKTmp</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateFillGetKVByCur</name><parameter_list>(<parameter><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>, <parameter><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>pKTmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>kLen</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pKTmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pKey</name> <operator>=</operator> <operator>*</operator><name>pKTmp</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateGetGroupKVByCur</name><parameter_list>(<parameter><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>, <parameter><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><name><name>pKey</name><operator>-&gt;</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><call><name>streamStateFillGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pKey</name><operator>-&gt;</operator><name>groupId</name></name> <operator>==</operator> <name>groupId</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateGetFirst</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo refactor</comment>
  <decl_stmt><decl><type><name>SWinKey</name></type> <name>tmp</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>streamStatePut</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateSeekKeyNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>streamStateGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamStateDel</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateSeekFirst</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><call><name>tdbTbcMoveToFirst</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateSeekLast</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><call><name>tdbTbcMoveToLast</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>streamStateSeekKeyNext</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamStateCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStateKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pCur</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>streamStateFillSeekKeyNext</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamStateCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFillStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pCur</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>streamStateFillSeekKeyPrev</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamStateCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pFillStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pCur</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateCurNext</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">//</comment>
  <return>return <expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateCurPrev</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>streamStateFreeCur</name><parameter_list>(<parameter><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamFreeVal</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateSessionPut</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateSessionKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tdbTbUpsert</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pSessionStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>,
                     <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateSessionGet</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateSessionSeekKeyCurrentNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSessionKey</name></type>      <name>resKey</name> <init>= <expr><operator>*</operator><name>key</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>            <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>!=</operator> <name><name>resKey</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>resKey</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>*</operator><name>pVLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>pVal</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>pVLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateSessionDel</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateSessionKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pSessionStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>streamStateSessionSeekKeyCurrentPrev</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamStateCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pSessionStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStateSessionKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pCur</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>streamStateSessionSeekKeyCurrentNext</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamStateCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pSessionStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStateSessionKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pCur</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>streamStateSessionSeekKeyNext</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamStateCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pSessionStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStateSessionKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pCur</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateSessionGetKVByCur</name><parameter_list>(<parameter><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>, <parameter><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SStateSessionKey</name><modifier>*</modifier></type> <name>pKTmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>kLen</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pKTmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pKTmp</name><operator>-&gt;</operator><name>opNum</name></name> <operator>!=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>number</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pKey</name><operator>-&gt;</operator><name>groupId</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pKey</name><operator>-&gt;</operator><name>groupId</name></name> <operator>!=</operator> <name><name>pKTmp</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pKey</name> <operator>=</operator> <name><name>pKTmp</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateSessionClear</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSessionKey</name></type>      <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateSessionSeekKeyCurrentNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSessionKey</name></type> <name>delKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamStateSessionPut</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delKey</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>streamStateCurNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateSessionGetKeyByRange</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>curKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamStateCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pSessionStateDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStateSessionKey</name></type> <name>sKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>, <expr><operator>.</operator><name>opNum</name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>number</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSessionKey</name></type> <name>resKey</name> <init>= <expr><operator>*</operator><name>key</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sessionRangeKeyCmpr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resKey</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>curKey</name> <operator>=</operator> <name>resKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateCurNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sessionRangeKeyCmpr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resKey</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>curKey</name> <operator>=</operator> <name>resKey</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateCurPrev</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sessionRangeKeyCmpr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resKey</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>curKey</name> <operator>=</operator> <name>resKey</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateSessionAddIfNotExist</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>gap</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>,
                                        <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo refactor</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSessionKey</name></type> <name>originKey</name> <init>= <expr><operator>*</operator><name>key</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSessionKey</name></type> <name>searchKey</name> <init>= <expr><operator>*</operator><name>key</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>searchKey</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>-</operator> <name>gap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>searchKey</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>+</operator> <name>gap</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>valSize</name> <init>= <expr><operator>*</operator><name>pVLen</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>tmp</name> <init>= <expr><call><name>tdbRealloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>valSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateSessionSeekKeyCurrentPrev</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sessionRangeKeyCmpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>searchKey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>pVal</name></expr></argument>, <argument><expr><name>valSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamStateSessionDel</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>streamStateCurNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>originKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pCur</name> <operator>=</operator> <call><name>streamStateSessionSeekKeyNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sessionRangeKeyCmpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>searchKey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>pVal</name></expr></argument>, <argument><expr><name>valSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamStateSessionDel</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>originKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>valSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_end</name>:</label>

  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateStateAddIfNotExist</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pKeyData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keyDataLen</name></decl></parameter>,
                                      <parameter><decl><type><name>state_key_cmpr_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo refactor</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSessionKey</name></type> <name>tmpKey</name> <init>= <expr><operator>*</operator><name>key</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>valSize</name> <init>= <expr><operator>*</operator><name>pVLen</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>tmp</name> <init>= <expr><call><name>tdbRealloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>valSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateSessionSeekKeyCurrentPrev</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <name><name>tmpKey</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&amp;&amp;</operator> <name><name>tmpKey</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&lt;=</operator> <name><name>key</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>pVal</name></expr></argument>, <argument><expr><name>valSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamStateSessionDel</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>stateKey</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pVal</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>valSize</name> <operator>-</operator> <name>keyDataLen</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fn</name><argument_list>(<argument><expr><name>pKeyData</name></expr></argument>, <argument><expr><name>stateKey</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>pVal</name></expr></argument>, <argument><expr><name>valSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamStateSessionDel</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>streamStateCurNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>tmpKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pCur</name> <operator>=</operator> <call><name>streamStateSessionSeekKeyNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pVLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>stateKey</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pVal</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>valSize</name> <operator>-</operator> <name>keyDataLen</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fn</name><argument_list>(<argument><expr><name>pKeyData</name></expr></argument>, <argument><expr><name>stateKey</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>pVal</name></expr></argument>, <argument><expr><name>valSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamStateSessionDel</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>tmpKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>valSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_end</name>:</label>

  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStatePutParName</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>tbname</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbTbUpsert</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pParNameDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>,
              <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamStateGetParName</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <return>return <expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name><operator>-&gt;</operator><name>pParNameDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>streamStateDestroy</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pState</name><operator>-&gt;</operator><name>pTdbState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
char* streamStateSessionDump(SStreamState* pState) {
  SStreamStateCur* pCur = taosMemoryCalloc(1, sizeof(SStreamStateCur));
  if (pCur == NULL) {
    return NULL;
  }
  pCur-&gt;number = pState-&gt;number;
  if (tdbTbcOpen(pState-&gt;pTdbState-&gt;pSessionStateDb, &amp;pCur-&gt;pCur, NULL) &lt; 0) {
    streamStateFreeCur(pCur);
    return NULL;
  }
  tdbTbcMoveToFirst(pCur-&gt;pCur);

  SSessionKey key = {0};
  void*       buf = NULL;
  int32_t     bufSize = 0;
  int32_t     code = streamStateSessionGetKVByCur(pCur, &amp;key, &amp;buf, &amp;bufSize);
  if (code != 0) {
    streamStateFreeCur(pCur);
    return NULL;
  }

  int32_t size = 2048;
  char*   dumpBuf = taosMemoryCalloc(size, 1);
  int64_t len = 0;
  len += snprintf(dumpBuf + len, size - len, "||s:%15" PRId64 ",", key.win.skey);
  len += snprintf(dumpBuf + len, size - len, "e:%15" PRId64 ",", key.win.ekey);
  len += snprintf(dumpBuf + len, size - len, "g:%15" PRId64 "||", key.groupId);
  while (1) {
    tdbTbcMoveToNext(pCur-&gt;pCur);
    key = (SSessionKey){0};
    code = streamStateSessionGetKVByCur(pCur, &amp;key, NULL, 0);
    if (code != 0) {
      streamStateFreeCur(pCur);
      return dumpBuf;
    }
    len += snprintf(dumpBuf + len, size - len, "||s:%15" PRId64 ",", key.win.skey);
    len += snprintf(dumpBuf + len, size - len, "e:%15" PRId64 ",", key.win.ekey);
    len += snprintf(dumpBuf + len, size - len, "g:%15" PRId64 "||", key.groupId);
  }
  streamStateFreeCur(pCur);
  return dumpBuf;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
