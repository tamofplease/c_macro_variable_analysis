<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/stream/src/streamRecover.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streamInc.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>streamTaskLaunchRecover</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d at node %d launch recover"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__SOURCE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name></expr></argument>, <argument><expr><name>TASK_STATUS__RECOVER_PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamSetParamForRecover</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamSourceRecoverPrepareStep1</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SStreamRecoverStep1Req</name></type> <name>req</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamBuildSourceRecover1Req</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamRecoverStep1Req</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>serializedReq</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>serializedReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>serializedReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>len</name></expr>,
        <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>serializedReq</name></expr>,
        <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_VND_STREAM_RECOVER_NONBLOCKING_STAGE</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pMsgCb</name></name></expr></argument>, <argument><expr><name>STREAM_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/*ASSERT(0);*/</comment>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__AGG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name></expr></argument>, <argument><expr><name>TASK_STATUS__NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamSetParamForRecover</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamAggRecoverPrepare</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__SINK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name></expr></argument>, <argument><expr><name>TASK_STATUS__NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// checkstatus</comment>
<function><type><name>int32_t</name></type> <name>streamTaskCheckDownstream</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamTaskCheckReq</name></type> <name>req</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>streamId</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>streamId</name></name></expr>,
      <expr><operator>.</operator><name>upstreamTaskId</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>,
      <expr><operator>.</operator><name>upstreamNodeId</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr>,
      <expr><operator>.</operator><name>childId</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <comment type="line">// serialize</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__FIXED_DISPATCH</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>reqId</name></name> <operator>=</operator> <call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>downstreamNodeId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>nodeId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>downstreamTaskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>taskId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>checkReqId</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>reqId</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d at node %d check downstream task %d at node %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>downstreamTaskId</name></name></expr></argument>,
           <argument><expr><name><name>req</name><operator>.</operator><name>downstreamNodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamDispatchOneCheckReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__SHUFFLE_DISPATCH</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>vgInfo</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>shuffleDispatcher</name><operator>.</operator><name>dbInfo</name><operator>.</operator><name>pVgroupInfos</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>vgSz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>recoverTryingDownstream</name></name> <operator>=</operator> <name>vgSz</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>checkReqIds</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>vgSz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vgSz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>reqId</name></name> <operator>=</operator> <call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>checkReqIds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>reqId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>downstreamNodeId</name></name> <operator>=</operator> <name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>downstreamTaskId</name></name> <operator>=</operator> <name><name>pVgInfo</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d at node %d check downstream task %d at node %d (shuffle)"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>,
             <argument><expr><name><name>req</name><operator>.</operator><name>downstreamTaskId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>downstreamNodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamDispatchOneCheckReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d at node %d direct launch recover since no downstream"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamTaskLaunchRecover</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamRecheckOneDownstream</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStreamTaskCheckRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamTaskCheckReq</name></type> <name>req</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>reqId</name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>reqId</name></name></expr>,
      <expr><operator>.</operator><name>streamId</name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>streamId</name></name></expr>,
      <expr><operator>.</operator><name>upstreamTaskId</name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>upstreamTaskId</name></name></expr>,
      <expr><operator>.</operator><name>upstreamNodeId</name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>upstreamNodeId</name></name></expr>,
      <expr><operator>.</operator><name>downstreamTaskId</name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>downstreamTaskId</name></name></expr>,
      <expr><operator>.</operator><name>downstreamNodeId</name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>downstreamNodeId</name></name></expr>,
      <expr><operator>.</operator><name>childId</name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>childId</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d at node %d check downstream task %d at node %d (recheck)"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>,
         <argument><expr><name><name>req</name><operator>.</operator><name>downstreamTaskId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>downstreamNodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__FIXED_DISPATCH</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamDispatchOneCheckReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>downstreamNodeId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__SHUFFLE_DISPATCH</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>vgInfo</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>shuffleDispatcher</name><operator>.</operator><name>dbInfo</name><operator>.</operator><name>pVgroupInfos</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>vgSz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vgSz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>taskId</name></name> <operator>==</operator> <name><name>req</name><operator>.</operator><name>downstreamTaskId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>streamDispatchOneCheckReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>downstreamNodeId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamProcessTaskCheckReq</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStreamTaskCheckReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TASK_STATUS__NORMAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamProcessTaskCheckRsp</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStreamTaskCheckRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task %d at node %d recv check rsp from task %d at node %d: status %d"</literal></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>upstreamTaskId</name></name></expr></argument>,
         <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>upstreamNodeId</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>downstreamTaskId</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>downstreamNodeId</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__SHUFFLE_DISPATCH</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>checkReqIds</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>reqId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>checkReqIds</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>reqId</name> <operator>==</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>reqId</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>left</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>recoverTryingDownstream</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>checkReqIds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>streamTaskLaunchRecover</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__FIXED_DISPATCH</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>reqId</name></name> <operator>!=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>checkReqId</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>streamTaskLaunchRecover</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>streamRecheckOneDownstream</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// common</comment>
<function><type><name>int32_t</name></type> <name>streamSetParamForRecover</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>exec</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>qStreamSetParamForRecover</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>streamRestoreParam</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>exec</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>qStreamRestoreParam</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>streamSetStatusNormal</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name> <operator>=</operator> <name>TASK_STATUS__NORMAL</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// source</comment>
<function><type><name>int32_t</name></type> <name>streamSourceRecoverPrepareStep1</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>exec</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>qStreamSourceRecoverStep1</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamBuildSourceRecover1Req</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>SStreamRecoverStep1Req</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>msgHead</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>streamId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>streamId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamSourceRecoverScanStep1</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><call><name>streamScanExec</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamBuildSourceRecover2Req</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>SStreamRecoverStep2Req</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>msgHead</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>streamId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>streamId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamSourceRecoverScanStep2</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>exec</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>qStreamSourceRecoverStep2</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>streamScanExec</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamDispatchRecoverFinishReq</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamRecoverFinishReq</name></type> <name>req</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>streamId</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>streamId</name></name></expr>,
      <expr><operator>.</operator><name>childId</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <comment type="line">// serialize</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__FIXED_DISPATCH</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>taskId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamDispatchOneRecoverFinishReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__SHUFFLE_DISPATCH</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>vgInfo</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>shuffleDispatcher</name><operator>.</operator><name>dbInfo</name><operator>.</operator><name>pVgroupInfos</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>vgSz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vgSz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name><name>pVgInfo</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamDispatchOneRecoverFinishReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// agg</comment>
<function><type><name>int32_t</name></type> <name>streamAggRecoverPrepare</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>exec</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>recoverWaitingUpstream</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>childEpInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamAggChildrenRecoverFinish</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>exec</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>qStreamRestoreParam</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>qStreamRecoverFinish</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>streamSetStatusNormal</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>streamProcessRecoverFinishReq</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>childId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__AGG</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>left</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>recoverWaitingUpstream</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>streamAggChildrenRecoverFinish</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeSStreamTaskCheckReq</name><parameter_list>(<parameter><decl><type><name>SEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStreamTaskCheckReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tStartEncode</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>reqId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>streamId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>upstreamNodeId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>upstreamTaskId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>downstreamNodeId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>downstreamTaskId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>childId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tEndEncode</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDecodeSStreamTaskCheckReq</name><parameter_list>(<parameter><decl><type><name>SDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>SStreamTaskCheckReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tStartDecode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>reqId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>streamId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>upstreamNodeId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>upstreamTaskId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>downstreamNodeId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>downstreamTaskId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>childId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tEndDecode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeSStreamTaskCheckRsp</name><parameter_list>(<parameter><decl><type><name>SEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStreamTaskCheckRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tStartEncode</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>reqId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>streamId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>upstreamNodeId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>upstreamTaskId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>downstreamNodeId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>downstreamTaskId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>childId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tEndEncode</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDecodeSStreamTaskCheckRsp</name><parameter_list>(<parameter><decl><type><name>SDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>SStreamTaskCheckRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tStartDecode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>reqId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>streamId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>upstreamNodeId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>upstreamTaskId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>downstreamNodeId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>downstreamTaskId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>childId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tEndDecode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeSStreamRecoverFinishReq</name><parameter_list>(<parameter><decl><type><name>SEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStreamRecoverFinishReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tStartEncode</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>streamId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>childId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tEndEncode</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>tDecodeSStreamRecoverFinishReq</name><parameter_list>(<parameter><decl><type><name>SDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>SStreamRecoverFinishReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tStartDecode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>streamId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>childId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tEndDecode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
