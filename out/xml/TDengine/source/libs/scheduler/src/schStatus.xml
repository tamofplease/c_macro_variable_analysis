<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/scheduler/src/schStatus.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"schInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>schSwitchJobStatus</name><parameter_list>(<parameter><decl><type><name>SSchJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schUpdateJobStatus</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JOB_TASK_STATUS_INIT</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>JOB_TASK_STATUS_EXEC</name></expr>:</case>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schExecJob</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><operator>(</operator><name>SSchedulerReq</name><operator>*</operator><operator>)</operator><name>param</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_TASK_STATUS_PART_SUCC</name></expr>:</case>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnJobPartialSuccess</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_TASK_STATUS_SUCC</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>JOB_TASK_STATUS_FAIL</name></expr>:</case>
      <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schProcessOnJobFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>param</name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>param</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_TASK_STATUS_DROP</name></expr>:</case>
      <expr_stmt><expr><call><name>schProcessOnJobDropped</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"remove job from job list failed, refId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job removed from jobRef list, refId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"unknown job status %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schProcessOnJobFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleOpBeginEvent</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>jobId</name></decl></parameter>, <parameter><decl><type><name>SSchJob</name><modifier>*</modifier><modifier>*</modifier></type> <name>job</name></decl></parameter>, <parameter><decl><type><name>SCH_OP_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SSchedulerReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><call><name>schAcquireJob</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qWarn</name><argument_list>(<argument><expr><literal type="string">"Acquire sch job failed, may be dropped, jobId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>job</name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schProcessOnOpBegin</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleOpEndEvent</name><parameter_list>(<parameter><decl><type><name>SSchJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>SCH_OP_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SSchedulerReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>errCode</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schDirectPostJobRes</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>schProcessOnOpEnd</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name> <operator>==</operator> <name>errCode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>schReleaseJob</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
