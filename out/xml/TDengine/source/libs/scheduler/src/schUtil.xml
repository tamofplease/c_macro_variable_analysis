<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/scheduler/src/schUtil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"schInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<function><type><name>FORCE_INLINE</name> <name>SSchJob</name> <modifier>*</modifier></type><name>schAcquireJob</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>refId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"sch acquire jobId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SSchJob</name> <operator>*</operator><operator>)</operator><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>int32_t</name></type> <name>schReleaseJob</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>refId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>refId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"sch release jobId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>schDumpEpSet</name><parameter_list>(<parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pEpSet</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxSize</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>maxSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>str</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>maxSize</name> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><literal type="string">"numOfEps:%d, inUse:%d eps:"</literal></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SEp</name> <modifier>*</modifier></type><name>pEp</name> <init>= <expr><operator>&amp;</operator><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>maxSize</name> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><literal type="string">"[%s:%d]"</literal></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>schGetOpStr</name><parameter_list>(<parameter><decl><type><name>SCH_OP_TYPE</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SCH_OP_NULL</name></expr>:</case>
      <return>return <expr><literal type="string">"NULL"</literal></expr>;</return>
    <case>case <expr><name>SCH_OP_EXEC</name></expr>:</case>
      <return>return <expr><literal type="string">"EXEC"</literal></expr>;</return>
    <case>case <expr><name>SCH_OP_FETCH</name></expr>:</case>
      <return>return <expr><literal type="string">"FETCH"</literal></expr>;</return>
    <case>case <expr><name>SCH_OP_GET_STATUS</name></expr>:</case>
      <return>return <expr><literal type="string">"GET STATUS"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schFreeHbTrans</name><parameter_list>(<parameter><decl><type><name>SSchHbTrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>rpcReleaseHandle</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>TAOS_CONN_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schFreeRpcCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTrans</name><operator>-&gt;</operator><name>rpcCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schCleanClusterHb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSchHbTrans</name> <modifier>*</modifier></type><name>hb</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>hb</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hb</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>pTrans</name></name> <operator>==</operator> <name>pTrans</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SQueryNodeEpId</name> <modifier>*</modifier></type><name>pEpId</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>hb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>schFreeHbTrans</name><argument_list>(<argument><expr><name>hb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>pEpId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeEpId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>hb</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>hb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schRemoveHbConnection</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SQueryNodeEpId</name> <modifier>*</modifier></type><name>epId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSchHbTrans</name> <modifier>*</modifier></type><name>hb</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>epId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeEpId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>hb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"nodeId %d fqdn %s port %d not in hb connections"</literal></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>taskNum</name> <init>= <expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>taskNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schFreeHbTrans</name><argument_list>(<argument><expr><name>hb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>epId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeEpId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schAddHbConnection</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SQueryNodeEpId</name> <modifier>*</modifier></type><name>epId</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>exist</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchHbTrans</name></type> <name>hb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>hb</name><operator>.</operator><name>trans</name><operator>.</operator><name>pTrans</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>pTrans</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hb</name><operator>.</operator><name>taskNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schMakeHbRpcCtx</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hb</name><operator>.</operator><name>rpcCtx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>epId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeEpId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>hb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchHbTrans</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>schFreeRpcCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hb</name><operator>.</operator><name>rpcCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>HASH_NODE_EXIST</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>exist</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut hb trans failed, nodeId:%d, fqdn:%s, port:%d"</literal></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schRegisterHbConnection</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SQueryNodeEpId</name> <modifier>*</modifier></type><name>pEpId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchHbTrans</name> <modifier>*</modifier></type><name>hb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hb</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>pEpId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeEpId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>hb</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>exist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schAddHbConnection</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pEpId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>exist</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schBuildAndSendHbMsg</name><argument_list>(<argument><expr><name>pEpId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <break>break;</break>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schDeregisterTaskHb</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pTask</name><operator>-&gt;</operator><name>registerdHb</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryNodeEpId</name></type>  <name>epId</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>epId</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SEp</name> <modifier>*</modifier></type><name>pEp</name> <init>= <expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>epId</name><operator>.</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>epId</name><operator>.</operator><name>ep</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>pEp</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSchHbTrans</name> <modifier>*</modifier></type><name>hb</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeEpId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>hb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_TASK_WLOG</name><argument_list>(<argument><expr><literal type="string">"nodeId %d fqdn %s port %d not in hb connections"</literal></expr></argument>, <argument><expr><name><name>epId</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>epId</name><operator>.</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>epId</name><operator>.</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>taskNum</name> <init>= <expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>taskNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>schRemoveHbConnection</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>registerdHb</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schEnsureHbConnection</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tsEnableQueryHb</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryNodeEpId</name></type>  <name>epId</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>epId</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SEp</name> <modifier>*</modifier></type><name>pEp</name> <init>= <expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>epId</name><operator>.</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>epId</name><operator>.</operator><name>ep</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>pEp</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schRegisterHbConnection</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>registerdHb</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schUpdateHbConnection</name><parameter_list>(<parameter><decl><type><name>SQueryNodeEpId</name> <modifier>*</modifier></type><name>epId</name></decl></parameter>, <parameter><decl><type><name>SSchTrans</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchHbTrans</name> <modifier>*</modifier></type><name>hb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>hb</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>epId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeEpId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>hb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashGet hb connection failed, nodeId:%d, fqdn:%s, port:%d"</literal></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>trans</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>trans</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"hb connection updated, sId:0x%"</literal> <name>PRIx64</name> <literal type="string">", nodeId:%d, fqdn:%s, port:%d, pTrans:%p, pHandle:%p"</literal></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr></argument>,
         <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>epId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schCloseJobRef</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>exit</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>schGenTaskId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>taskId</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>schGenUUID</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>hashId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>requestSerialId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>hashId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>uid</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosGetSystemUUID</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Failed to get the system uid, reason:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>hashId</name> <operator>=</operator> <call><name>MurmurHash3_32</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>ts</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>pid</name> <init>= <expr><call><name>taosGetPId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>val</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>requestSerialId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><operator>(</operator><operator>(</operator><name>hashId</name> <operator>&amp;</operator> <literal type="number">0x0FFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">52</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>pid</name> <operator>&amp;</operator> <literal type="number">0x0FFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ts</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schFreeRpcCtxVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>arg</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier></type><name>pMsgSendInfo</name> <init>= <expr><operator>(</operator><name>SMsgSendInfo</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>destroySendMsgInfo</name><argument_list>(<argument><expr><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schFreeRpcCtx</name><parameter_list>(<parameter><decl><type><name>SRpcCtx</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtx</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcCtxVal</name> <modifier>*</modifier></type><name>ctxVal</name> <init>= <expr><operator>(</operator><name>SRpcCtxVal</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pCtx</name><operator>-&gt;</operator><name>freeFunc</name></name>)<argument_list>(<argument><expr><name><name>ctxVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>freeFunc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pCtx</name><operator>-&gt;</operator><name>freeFunc</name></name>)<argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>brokenVal</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schGetTaskFromList</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pTaskList</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>taskId</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>s</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pTaskList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier><modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pTaskList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>taskId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>task</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>task</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pTask</name> <operator>=</operator> <operator>*</operator><name>task</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
