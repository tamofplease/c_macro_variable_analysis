<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/scheduler/src/scheduler.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"schInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>SSchedulerMgmt</name></type> <name>schMgmt</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>jobRef</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>schedulerInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"scheduler already initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxJobNum</name></name> <operator>=</operator> <name>SCHEDULE_DEFAULT_MAX_JOB_NUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxNodeTableNum</name></name> <operator>=</operator> <name>SCHEDULE_DEFAULT_MAX_NODE_TABLE_NUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>schPolicy</name></name> <operator>=</operator> <name>SCHEDULE_DEFAULT_POLICY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>enableReSchedule</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"schedule policy init to %d"</literal></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>schPolicy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxJobNum</name></name></expr></argument>, <argument><expr><name>schFreeJobImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"init schduler jobRef failed, num:%u"</literal></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxJobNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit hb connections failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>timer</name></name> <operator>=</operator> <call><name>taosTmrInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"scheduler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>schMgmt</name><operator>.</operator><name>timer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"init timer failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosGetSystemUUID</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"generate schdulerId failed, errno:%d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_SYS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"scheduler 0x%"</literal> <name>PRIx64</name> <literal type="string">" initizlized, maxJob:%u"</literal></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxJobNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schedulerExecJob</name><parameter_list>(<parameter><decl><type><name>SSchedulerReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pJobId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"scheduler %s exec job start"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pReq</name><operator>-&gt;</operator><name>syncReq</name></name></expr> ?</condition><then> <expr><literal type="string">"SYNC"</literal></expr> </then><else>: <expr><literal type="string">"ASYNC"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schInitJob</name><argument_list>(<argument><expr><name>pJobId</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schHandleOpBeginEvent</name><argument_list>(<argument><expr><operator>*</operator><name>pJobId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_EXEC</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schSwitchJobStatus</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_INIT</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schSwitchJobStatus</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_EXEC</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schHandleOpEndEvent</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_EXEC</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schedulerFetchRows</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>jobId</name></decl></parameter>, <parameter><decl><type><name>SSchedulerReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"scheduler %s fetch rows start"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pReq</name><operator>-&gt;</operator><name>syncReq</name></name></expr> ?</condition><then> <expr><literal type="string">"SYNC"</literal></expr> </then><else>: <expr><literal type="string">"ASYNC"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schHandleOpBeginEvent</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_FETCH</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schJobFetchRows</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schHandleOpEndEvent</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_FETCH</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schedulerGetTasksStatus</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>jobId</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pSub</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schHandleOpBeginEvent</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_GET_STATUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pJob</name><operator>-&gt;</operator><name>levelNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchLevel</name> <modifier>*</modifier></type><name>pLevel</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>pLevel</name><operator>-&gt;</operator><name>taskNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchTask</name>     <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>subTasks</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SQuerySubDesc</name></type> <name>subDesc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>subDesc</name><operator>.</operator><name>tid</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>subDesc</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pSub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schHandleOpEndEvent</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_GET_STATUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schedulerStopQueryHb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTrans</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>schCleanClusterHb</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schedulerUpdatePolicy</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>policy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>policy</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SCH_LOAD_SEQ</name></expr>:</case>
    <case>case <expr><name>SCH_RANDOM</name></expr>:</case>
    <case>case <expr><name>SCH_ALL</name></expr>:</case>
      <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>schPolicy</name></name> <operator>=</operator> <name>policy</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"schedule policy updated to %d"</literal></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>schPolicy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schedulerEnableReSchedule</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enableResche</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>enableReSchedule</name></name> <operator>=</operator> <name>enableResche</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schedulerFreeJob</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>jobId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>*</operator><name>jobId</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name> <init>= <expr><call><name>schAcquireJob</name><argument_list>(<argument><expr><operator>*</operator><name>jobId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qWarn</name><argument_list>(<argument><expr><literal type="string">"Acquire sch job failed, may be dropped, jobId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><operator>*</operator><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"start to free job 0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>jobId</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>schHandleJobDrop</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schReleaseJob</name><argument_list>(<argument><expr><operator>*</operator><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>jobId</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schedulerDestroy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>exit</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name> <init>= <expr><call><name>taosIterateRef</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>  <name>refId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pJob</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>refId</name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>refId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pJob</name> <operator>=</operator> <call><name>taosIterateRef</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pIter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchHbTrans</name> <modifier>*</modifier></type><name>hb</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>schFreeRpcCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>rpcCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qWorkerDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>queryMgmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>schMgmt</name><operator>.</operator><name>queryMgmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
