<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/scheduler/src/schRemote.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"schInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>
<comment type="line">// clang-format off</comment>
<function><type><name>int32_t</name></type> <name>schValidateRspMsgType</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lastMsgType</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>lastMsgType</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskStatus</name> <init>= <expr><call><name>SCH_GET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqMsgType</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>msgType</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator></expr> ?</condition><then> <expr><name>msgType</name></expr> </then><else>: <expr><operator>(</operator><name>msgType</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>msgType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_SCH_LINK_BROKEN</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_EXPLAIN_RSP</name></expr>:</case>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    <case>case <expr><name>TDMT_SCH_FETCH_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_FETCH_RSP</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>lastMsgType</name> <operator>!=</operator> <name>reqMsgType</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"rsp msg type mis-match, last sent msgType:%s, rspType:%s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>lastMsgType</name></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>taskStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_PART_SUCC</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"rsp msg conflicted with task status, status:%s, rspType:%s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>taskStatus</name></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    <case>case <expr><name>TDMT_SCH_MERGE_QUERY_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_QUERY_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_CREATE_TABLE_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_DROP_TABLE_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_ALTER_TABLE_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_SUBMIT_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_DELETE_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_COMMIT_RSP</name></expr>:</case>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"unknown rsp msg, type:%s, status:%s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>taskStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>lastMsgType</name> <operator>!=</operator> <name>reqMsgType</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"rsp msg type mis-match, last sent msgType:%s, rspType:%s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>lastMsgType</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>taskStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_EXEC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"rsp msg conflicted with task status, status:%s, rspType:%s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>taskStatus</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessFetchRsp</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><operator>(</operator><name>SRetrieveTableRsp</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_EXPLAIN_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>completed</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>qExecExplainEnd</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>explainCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pRsp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnExplainDone</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
  
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schLaunchFetchTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"got fetch rsp while res already exists, res:%p"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resNumOfRows</name></name></expr></argument>, <argument><expr><call><name>htobe64</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>completed</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_SET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_SUCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"got fetch rsp, rows:%"</literal> <name>PRId64</name> <literal type="string">", complete:%d"</literal></expr></argument>, <argument><expr><call><name>htobe64</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>schProcessOnDataFetched</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessExplainRsp</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SExplainRsp</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainUpdateExecInfo</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>explainCtx</name></name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>pRsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schProcessOnExplainDone</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Note: no more task error processing, handled in function internal</comment>
<function><type><name>int32_t</name></type> <name>schHandleResponseMsg</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>execId</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgType</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>dropExecNode</name> <init>= <expr><operator>(</operator><name>msgType</name> <operator>==</operator> <name>TDMT_SCH_LINK_BROKEN</name> <operator>||</operator> <call><name>SCH_NETWORK_ERR</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_QUERY_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schUpdateTaskHandle</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>dropExecNode</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>execId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schValidateRspMsgType</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><ternary><condition><expr><call><name>IsReq</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr> </then><else>: <expr><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>SCH_TASK_NEED_REDIRECT</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schHandleRedirect</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>(</operator><name>SDataBuf</name> <operator>*</operator><operator>)</operator><name>pMsg</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>redirectCtx</name><operator>.</operator><name>inRedirect</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>msgType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_VND_COMMIT_RSP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskSuccess</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_CREATE_TABLE_RSP</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SVCreateTbBatchRsp</name></type> <name>batchRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDecoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSVCreateTbBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>batchRsp</name><operator>.</operator><name>nRsps</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>nRsps</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_CREATE_TABLE</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>batchRsp</name><operator>.</operator><name>nRsps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>SVCreateTbRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>

          <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>        
            <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskSuccess</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_DROP_TABLE_RSP</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SVDropTbBatchRsp</name></type> <name>batchRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDecoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSVDropTbBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>batchRsp</name><operator>.</operator><name>nRsps</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>batchRsp</name><operator>.</operator><name>nRsps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>SVDropTbRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskSuccess</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_ALTER_TABLE_RSP</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SVAlterTbRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDecoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSVAlterTbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name><name>rsp</name><operator>.</operator><name>pMeta</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_ALTER_TABLE</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskSuccess</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_SUBMIT_RSP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDecoder</name></type>    <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSubmitRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSSubmitRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"decode submitRsp failed, code:%d"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tFreeSSubmitRsp</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>nBlocks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rsp</name><operator>-&gt;</operator><name>nBlocks</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>SSubmitBlkRsp</name> <modifier>*</modifier></type><name>blk</name> <init>= <expr><name><name>rsp</name><operator>-&gt;</operator><name>pBlocks</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>blk</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>tFreeSSubmitRsp</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resNumOfRows</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>affectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"submit succeed, affectedRows:%d, blocks:%d"</literal></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>affectedRows</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>nBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SSubmitRsp</name> <modifier>*</modifier></type><name>sum</name> <init>= <expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>affectedRows</name></name> <operator>+=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>affectedRows</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>nBlocks</name></name> <operator>+=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>nBlocks</name></name></expr>;</expr_stmt>          
          <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>nBlocks</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rsp</name><operator>-&gt;</operator><name>pBlocks</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>pBlocks</name></name> <operator>=</operator> <call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>sum</name><operator>-&gt;</operator><name>pBlocks</name></name></expr></argument>, <argument><expr><name><name>sum</name><operator>-&gt;</operator><name>nBlocks</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sum</name><operator>-&gt;</operator><name>pBlocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sum</name><operator>-&gt;</operator><name>pBlocks</name></name> <operator>+</operator> <name><name>sum</name><operator>-&gt;</operator><name>nBlocks</name></name> <operator>-</operator> <name><name>rsp</name><operator>-&gt;</operator><name>nBlocks</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>pBlocks</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>nBlocks</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sum</name><operator>-&gt;</operator><name>pBlocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>pBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name>rsp</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>numOfBytes</name></name> <operator>+=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskSuccess</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_DELETE_RSP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDecoder</name></type>    <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SVDeleteRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDecodeSVDeleteRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resNumOfRows</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>affectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"delete succeed, affectedRows:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>affectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskSuccess</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_QUERY_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_QUERY_RSP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SQueryTableRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSQueryTableRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSQueryTableRsp failed, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schSaveJobExecRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resNumOfRows</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>affectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskSuccess</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_EXPLAIN_RSP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCH_IS_EXPLAIN_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid msg received for none explain query, msg type:%s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"explain result is already generated, res:%p"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SExplainRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSExplainRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tFreeSExplainRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessExplainRsp</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_FETCH_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_FETCH_RSP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schProcessFetchRsp</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_DROP_TASK_RSP</name></expr>:</case> <block>{<block_content>
      <comment type="line">// NEVER REACH HERE</comment>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid status to handle drop task rsp, refId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_LINK_BROKEN</name></expr>:</case>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"link broken received, error:%x - %s"</literal></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"unknown rsp msg, type:%d, status:%s"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><call><name>SCH_GET_TASK_STATUS_STR</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function> 
<function><type><name>int32_t</name></type> <name>schHandleCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>                <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchTaskCallbackParam</name> <modifier>*</modifier></type><name>pParam</name> <init>= <expr><operator>(</operator><name>SSchTaskCallbackParam</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchTask</name>              <modifier>*</modifier></type><name>pTask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchJob</name>               <modifier>*</modifier></type><name>pJob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"begin to handle rsp msg, type:%s, handle:%p, code:%s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
         <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnCbBegin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pJob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>, <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>, <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schHandleResponseMsg</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schProcessOnCbEnd</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"end to handle rsp msg, type:%s, handle:%p, code:%s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
         <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleDropCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchTaskCallbackParam</name> <modifier>*</modifier></type><name>pParam</name> <init>= <expr><operator>(</operator><name>SSchTaskCallbackParam</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">",TID:0x%"</literal> <name>PRIx64</name> <literal type="string">" drop task rsp received, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>,
         <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleLinkBrokenCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchCallbackParamHeader</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>(</operator><name>SSchCallbackParamHeader</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcReleaseHandle</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>TAOS_CONN_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"handle %p is broken"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>isHbParam</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SSchHbCallbackParam</name> <modifier>*</modifier></type><name>hbParam</name> <init>= <expr><operator>(</operator><name>SSchHbCallbackParam</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchTrans</name></type>            <name>trans</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>hbParam</name><operator>-&gt;</operator><name>pTrans</name></name></expr>, <expr><operator>.</operator><name>pHandle</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schUpdateHbConnection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hbParam</name><operator>-&gt;</operator><name>nodeEpId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schBuildAndSendHbMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hbParam</name><operator>-&gt;</operator><name>nodeEpId</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schHandleCallback</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleCommitCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>schHandleCallback</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleHbCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchedulerHbRsp</name></type>        <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchTaskCallbackParam</name> <modifier>*</modifier></type><name>pParam</name> <init>= <expr><operator>(</operator><name>SSchTaskCallbackParam</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"hb rsp error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSSchedulerHbRsp</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid hb rsp msg, size:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchTrans</name></type> <name>trans</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>trans</name><operator>.</operator><name>pTrans</name></name> <operator>=</operator> <name><name>pParam</name><operator>-&gt;</operator><name>pTrans</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>trans</name><operator>.</operator><name>pHandle</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schUpdateHbConnection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>.</operator><name>epId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskStatusRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>.</operator><name>epId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>taskStatus</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>tFreeSSchedulerHbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schMakeCallbackParam</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isHb</name></decl></parameter>, <parameter><decl><type><name>SSchTrans</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>,
                             <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isHb</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchTaskCallbackParam</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchTaskCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SSchTaskCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>queryId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>taskId</name></name> <operator>=</operator> <call><name>SCH_TASK_ID</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pTrans</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>pTrans</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>execId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pParam</name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TDMT_SCH_LINK_BROKEN</name> <operator>==</operator> <name>msgType</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchHbCallbackParam</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchHbCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SSchHbCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>isHbParam</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>nodeEpId</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SEp</name> <modifier>*</modifier></type><name>pEp</name> <init>= <expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>nodeEpId</name><operator>.</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>nodeEpId</name><operator>.</operator><name>ep</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>pEp</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pTrans</name></name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>pTrans</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pParam</name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// hb msg</comment>
  <decl_stmt><decl><type><name>SSchTaskCallbackParam</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchTaskCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc SSchTaskCallbackParam failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pTrans</name></name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>pTrans</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pParam</name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schGenerateCallBackInfo</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>,
                                <parameter><decl><type><name>SSchTrans</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isHb</name></decl></parameter>, <parameter><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>pMsgSendInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier></type><name>msgSendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msgSendInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msgSendInfo</name><operator>-&gt;</operator><name>paramFreeFp</name></name> <operator>=</operator> <name>taosMemoryFree</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schMakeCallbackParam</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><name>isHb</name></expr></argument>, <argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msgSendInfo</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schGetCallbackFp</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msgSendInfo</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>msgSendInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>requestId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msgSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>requestObjRefId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TDMT_SCH_LINK_BROKEN</name> <operator>!=</operator> <name>msgType</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>msgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>msgSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>pHandle</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msgSendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pMsgSendInfo</name> <operator>=</operator> <name>msgSendInfo</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>msgSendInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroySendMsgInfo</name><argument_list>(<argument><expr><name>msgSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schGetCallbackFp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>__async_send_cb_fn_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>msgType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_VND_CREATE_TABLE</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_DROP_TABLE</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_ALTER_TABLE</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_SUBMIT</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_QUERY</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_QUERY</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_DELETE</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_EXPLAIN</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_FETCH</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_FETCH</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>schHandleCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_DROP_TASK</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>schHandleDropCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_QUERY_HEARTBEAT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>schHandleHbCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_COMMIT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>schHandleCommitCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_LINK_BROKEN</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>schHandleLinkBrokenCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"unknown msg type for callback, msgType:%d"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
int32_t schMakeHbCallbackParam(SSchJob *pJob, SSchTask *pTask, void **pParam) {
  SSchHbCallbackParam *param = taosMemoryCalloc(1, sizeof(SSchHbCallbackParam));
  if (NULL == param) {
    SCH_TASK_ELOG("calloc %d failed", (int32_t)sizeof(SSchHbCallbackParam));
    SCH_ERR_RET(TSDB_CODE_OUT_OF_MEMORY);
  }

  param-&gt;head.isHbParam = true;

  SQueryNodeAddr *addr = taosArrayGet(pTask-&gt;candidateAddrs, pTask-&gt;candidateIdx);

  param-&gt;nodeEpId.nodeId = addr-&gt;nodeId;
  SEp* pEp = SCH_GET_CUR_EP(addr);
  strcpy(param-&gt;nodeEpId.ep.fqdn, pEp-&gt;fqdn);
  param-&gt;nodeEpId.ep.port = pEp-&gt;port;
  param-&gt;pTrans = pJob-&gt;pTrans;

  *pParam = param;

  return TSDB_CODE_SUCCESS;
}
*/</comment>

<function><type><name>int32_t</name></type> <name>schCloneHbRpcCtx</name><parameter_list>(<parameter><decl><type><name>SRpcCtx</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SRpcCtx</name> <modifier>*</modifier></type><name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>brokenVal</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schCloneSMsgSendInfo</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>brokenVal</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDst</name><operator>-&gt;</operator><name>brokenVal</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pDst</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d RpcCtx failed"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcCtxVal</name></type> <name>dst</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>      <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcCtxVal</name> <modifier>*</modifier></type><name>pVal</name> <init>= <expr><operator>(</operator><name>SRpcCtxVal</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name>    <modifier>*</modifier></type><name>msgType</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>*</operator><name>pVal</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schCloneSMsgSendInfo</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>msgType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut msg %d to rpcCtx failed"</literal></expr></argument>, <argument><expr><operator>*</operator><name>msgType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pSrc</name><operator>-&gt;</operator><name>freeFunc</name></name>)<argument_list>(<argument><expr><name><name>dst</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>schFreeRpcCtx</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schMakeHbRpcCtx</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SRpcCtx</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchHbCallbackParam</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgSendInfo</name>        <modifier>*</modifier></type><name>pMsgSendInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryNodeAddr</name>      <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryNodeEpId</name></type>       <name>epId</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>epId</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>epId</name><operator>.</operator><name>ep</name></name></expr></argument>, <argument><expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d RpcCtx failed"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pMsgSendInfo</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMsgSendInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchHbCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SSchHbCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>              <name>msgType</name> <init>= <expr><name>TDMT_SCH_QUERY_HEARTBEAT_RSP</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__async_send_cb_fn_t</name></type> <name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schGetCallbackFp</name><argument_list>(<argument><expr><name>TDMT_SCH_QUERY_HEARTBEAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>nodeEpId</name></name> <operator>=</operator> <name>epId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pTrans</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>pTrans</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>paramFreeFp</name></name> <operator>=</operator> <name>taosMemoryFree</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcCtxVal</name></type> <name>ctxVal</name> <init>= <expr><block>{<expr><operator>.</operator><name>val</name> <operator>=</operator> <name>pMsgSendInfo</name></expr>, <expr><operator>.</operator><name>clone</name> <operator>=</operator> <name>schCloneSMsgSendInfo</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgType</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctxVal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctxVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashPut msg %d to rpcCtx failed"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schMakeBrokenLinkVal</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>brokenVal</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>freeFunc</name></name> <operator>=</operator> <name>schFreeRpcCtxVal</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schMakeBrokenLinkVal</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SRpcBrokenlinkVal</name> <modifier>*</modifier></type><name>brokenVal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isHb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>msgType</name> <init>= <expr><name>TDMT_SCH_LINK_BROKEN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchTrans</name></type>     <name>trans</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>pTrans</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier></type><name>pMsgSendInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schGenerateCallBackInfo</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>, <argument><expr><name>isHb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>brokenVal</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>brokenVal</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>pMsgSendInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>brokenVal</name><operator>-&gt;</operator><name>clone</name></name> <operator>=</operator> <name>schCloneSMsgSendInfo</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schMakeQueryRpcCtx</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SRpcCtx</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier></type><name>pExplainMsgSendInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d RpcCtx failed"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchTrans</name></type> <name>trans</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>pTrans</name></name></expr>, <expr><operator>.</operator><name>pHandle</name> <operator>=</operator> <macro><name>SCH_GET_TASK_HANDLE</name><argument_list>(<argument>pTask</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schGenerateCallBackInfo</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TDMT_SCH_EXPLAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pExplainMsgSendInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>msgType</name> <init>= <expr><name>TDMT_SCH_EXPLAIN_RSP</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcCtxVal</name></type> <name>ctxVal</name> <init>= <expr><block>{<expr><operator>.</operator><name>val</name> <operator>=</operator> <name>pExplainMsgSendInfo</name></expr>, <expr><operator>.</operator><name>clone</name> <operator>=</operator> <name>schCloneSMsgSendInfo</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgType</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctxVal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctxVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashPut msg %d to rpcCtx failed"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schMakeBrokenLinkVal</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>brokenVal</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>freeFunc</name></name> <operator>=</operator> <name>schFreeRpcCtxVal</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pExplainMsgSendInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pExplainMsgSendInfo</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pExplainMsgSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schCloneCallbackParam</name><parameter_list>(<parameter><decl><type><name>SSchCallbackParamHeader</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SSchCallbackParamHeader</name> <modifier>*</modifier><modifier>*</modifier></type><name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSrc</name><operator>-&gt;</operator><name>isHbParam</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchHbCallbackParam</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchHbCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"malloc SSchHbCallbackParam failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <operator>(</operator><name>SSchCallbackParamHeader</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchTaskCallbackParam</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchTaskCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"malloc SSchTaskCallbackParam failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <operator>(</operator><name>SSchCallbackParamHeader</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schCloneSMsgSendInfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier></type><name>pSrc</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier></type><name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pSrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"malloc SMsgSendInfo for rpcCtx failed, len:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pSrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pSrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schCloneCallbackParam</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SSchCallbackParamHeader</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pDst</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>paramFreeFp</name></name> <operator>=</operator> <name>taosMemoryFree</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>pDst</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schUpdateSendTargetInfo</name><parameter_list>(<parameter><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier></type><name>pMsgSendInfo</name></decl></parameter>, <parameter><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTask</name> <operator>||</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>&lt;</operator> <name>MNODE_HANDLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>==</operator> <name>MNODE_HANDLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TARGET_TYPE_MNODE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TARGET_TYPE_VNODE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>dbFName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schAsyncSendMsg</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SSchTrans</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>,
                        <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>persistHandle</name></decl></parameter>, <parameter><decl><type><name>SRpcCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>epSet</name> <init>= <expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>epSet</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier></type><name>pMsgSendInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>isHb</name> <init>= <expr><operator>(</operator><name>TDMT_SCH_QUERY_HEARTBEAT</name> <operator>==</operator> <name>msgType</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schGenerateCallBackInfo</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><name>trans</name></expr></argument>, <argument><expr><name>isHb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schUpdateSendTargetInfo</name><argument_list>(<argument><expr><name>pMsgSendInfo</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pJob</name> <operator>&amp;&amp;</operator> <name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"start to send %s msg to node[%d,%s,%d], pTrans:%p, pHandle:%p"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>,
           <argument><expr><name><name>epSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name><name>epSet</name><operator>-&gt;</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>epSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name><name>epSet</name><operator>-&gt;</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"start to send %s msg to node[%d,%s,%d], pTrans:%p, pHandle:%p"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>,
           <argument><expr><name><name>epSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name><name>epSet</name><operator>-&gt;</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>epSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name><name>epSet</name><operator>-&gt;</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>lastMsgType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>asyncSendMsgToServerExt</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><name>epSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>pMsgSendInfo</name></expr></argument>, <argument><expr><name>persistHandle</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pMsgSendInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"req msg sent, type:%d, %s"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"req msg sent, type:%d, %s"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"fail to send msg, type:%d, %s, error:%s"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"fail to send msg, type:%d, %s, error:%s"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMsgSendInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroySendMsgInfo</name><argument_list>(<argument><expr><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schBuildAndSendHbMsg</name><parameter_list>(<parameter><decl><type><name>SQueryNodeEpId</name> <modifier>*</modifier></type><name>nodeEpId</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>taskAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchedulerHbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcCtx</name></type>         <name>rpcCtx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchTrans</name></type>       <name>trans</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>msgType</name> <init>= <expr><name>TDMT_SCH_QUERY_HEARTBEAT</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>nodeEpId</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>sId</name></name> <operator>=</operator> <name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>epId</name></name></expr></argument>, <argument><expr><name>nodeEpId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeEpId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSchHbTrans</name> <modifier>*</modifier></type><name>hb</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>hbConnections</name></name></expr></argument>, <argument><expr><name>nodeEpId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeEpId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>hb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"hb connection no longer exist, nodeId:%d, fqdn:%s, port:%d"</literal></expr></argument>, <argument><expr><name><name>nodeEpId</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>nodeEpId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>,
           <argument><expr><name><name>nodeEpId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schCloneHbRpcCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>rpcCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>hbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><call><name>tSerializeSSchedulerHbReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSSchedulerHbReq hbReq failed, size:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc hb req %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tSerializeSSchedulerHbReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSSchedulerHbReq hbReq failed, size:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>        <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryNodeAddr</name></type> <name>addr</name> <init>= <expr><block>{<expr><operator>.</operator><name>nodeId</name> <operator>=</operator> <name><name>nodeEpId</name><operator>-&gt;</operator><name>nodeId</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>epSet</name><operator>.</operator><name>inUse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodeEpId</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>nodeEpId</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schAsyncSendMsg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>schFreeRpcCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schBuildAndSendMsg</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>isCandidateAddr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>persistHandle</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcCtx</name></type>  <name>rpcCtx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>isCandidateAddr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"target candidateIdx %d, epInUse %d/%d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>,
                  <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name>msgType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_VND_CREATE_TABLE</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_DROP_TABLE</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_ALTER_TABLE</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_SUBMIT</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_COMMIT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>msgSize</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TDMT_VND_DELETE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SVDeleteReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>sId</name></name> <operator>=</operator> <name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>queryId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>phyLen</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>sqlLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pJob</name><operator>-&gt;</operator><name>sql</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>msg</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>msgSize</name> <operator>=</operator> <call><name>tSerializeSVDeleteReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tSerializeSVDeleteReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_QUERY</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_QUERY</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schMakeQueryRpcCtx</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SSubQueryMsg</name></type> <name>qMsg</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>header</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>sId</name></name> <operator>=</operator> <name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>queryId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>msgMask</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>showRewrite</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>QUERY_MSG_MASK_SHOW_REWRITE</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>taskType</name></name> <operator>=</operator> <name>TASK_TYPE_TEMP</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>explain</name></name> <operator>=</operator> <call><name>SCH_IS_EXPLAIN_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>needFetch</name></name> <operator>=</operator> <call><name>SCH_TASK_NEED_FETCH</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>sqlLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>sql</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>msgLen</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>msg</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name>msgSize</name> <operator>=</operator> <call><name>tSerializeSSubQueryMsg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>qMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSSubQueryMsg get size, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tSerializeSSubQueryMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qMsg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSSubQueryMsg failed, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>persistHandle</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_SET_TASK_HANDLE</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><call><name>rpcAllocHandle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_FETCH</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_FETCH</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SResFetchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>sId</name></name> <operator>=</operator> <name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>queryId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name>msgSize</name> <operator>=</operator> <call><name>tSerializeSResFetchReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSResFetchReq get size, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tSerializeSResFetchReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSResFetchReq %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_DROP_TASK</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STaskDropReq</name></type> <name>qMsg</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>header</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>sId</name></name> <operator>=</operator> <name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>queryId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name>msgSize</name> <operator>=</operator> <call><name>tSerializeSTaskDropReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>qMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSTaskDropReq get size, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tSerializeSTaskDropReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qMsg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSTaskDropReq failed, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_QUERY_HEARTBEAT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schMakeHbRpcCtx</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SSchedulerHbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>sId</name></name> <operator>=</operator> <name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>epId</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>epId</name><operator>.</operator><name>ep</name></name></expr></argument>, <argument><expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>msgSize</name> <operator>=</operator> <call><name>tSerializeSSchedulerHbReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSSchedulerHbReq hbReq failed, size:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tSerializeSSchedulerHbReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSSchedulerHbReq hbReq failed, size:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>persistHandle</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"unknown msg type to send, msgType:%d"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <decl_stmt><decl><type><name>SSchTrans</name></type> <name>trans</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>pTrans</name></name></expr>, <expr><operator>.</operator><name>pHandle</name> <operator>=</operator> <macro><name>SCH_GET_TASK_HANDLE</name><argument_list>(<argument>pTask</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schAsyncSendMsg</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>msgSize</name></expr></argument>, <argument><expr><name>persistHandle</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>rpcCtx</name><operator>.</operator><name>args</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>rpcCtx</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_SCH_QUERY</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_MERGE_QUERY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schAppendTaskExecNode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>TDMT_VND_SUBMIT</name> <operator>!=</operator> <name>msgType</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchTrans</name></type> <name>trans</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>pTrans</name></name></expr>, <expr><operator>.</operator><name>pHandle</name> <operator>=</operator> <macro><name>SCH_GET_TASK_HANDLE</name><argument_list>(<argument>pTask</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schAsyncSendMsg</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><name>persistHandle</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>rpcCtx</name><operator>.</operator><name>args</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>rpcCtx</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_SCH_QUERY</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_MERGE_QUERY</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schAppendTaskExecNode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskSuccess</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>lastMsgType</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>schFreeRpcCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="line">// clang-format on</comment>
</unit>
