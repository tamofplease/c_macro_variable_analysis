<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/scheduler/src/schFlowCtrl.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"schInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>schFreeFlowCtrl</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchFlowControl</name> <modifier>*</modifier></type><name>ctrl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>            <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ctrl</name> <operator>=</operator> <operator>(</operator><name>SSchFlowControl</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schChkJobNeedFlowCtrl</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchLevel</name> <modifier>*</modifier></type><name>pLevel</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCH_IS_QUERY_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job no need flow ctrl, queryJob:%d"</literal></expr></argument>, <argument><expr><call><name>SCH_IS_QUERY_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>dataSrcTasks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>taskNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSchTask</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>dataSrcTasks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxNodeTableNum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>sum</name> <operator>&lt;</operator> <name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxNodeTableNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job no need flow ctrl, totalTableNum:%d"</literal></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d flowCtrl failed"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_SET_JOB_NEED_FLOW_CTRL</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job NEED flow ctrl, totalTableNum:%d"</literal></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schDecTaskFlowQuota</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchLevel</name>       <modifier>*</modifier></type><name>pLevel</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchFlowControl</name> <modifier>*</modifier></type><name>ctrl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEp</name>             <modifier>*</modifier></type><name>ep</name> <init>= <expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>ctrl</name> <operator>=</operator> <operator>(</operator><name>SSchFlowControl</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ctrl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashGet node from flowCtrl failed, fqdn:%s, port:%d"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctrl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashGet node from flowCtrl failed, fqdn:%s, port:%d"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>--</operator><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name> <operator>-=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task quota removed, fqdn:%s, port:%d, tableNum:%d, remainNum:%d, remainExecTaskNum:%d"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>,
                <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctrl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schCheckIncTaskFlowQuota</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>enough</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchLevel</name>       <modifier>*</modifier></type><name>pLevel</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchFlowControl</name> <modifier>*</modifier></type><name>ctrl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEp</name>             <modifier>*</modifier></type><name>ep</name> <init>= <expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>ctrl</name> <operator>=</operator> <operator>(</operator><name>SSchFlowControl</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ctrl</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchFlowControl</name></type> <name>nctrl</name> <init>= <expr><block>{<expr><operator>.</operator><name>tableNumSum</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr>, <expr><operator>.</operator><name>execTaskNum</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>nctrl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nctrl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>HASH_NODE_EXIST</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashPut flowCtrl failed, size:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>nctrl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task quota added, fqdn:%s, port:%d, tableNum:%d, remainNum:%d, remainExecTaskNum:%d"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>,
                    <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr></argument>, <argument><expr><name><name>nctrl</name><operator>.</operator><name>tableNumSum</name></name></expr></argument>, <argument><expr><name><name>nctrl</name><operator>.</operator><name>execTaskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>enough</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctrl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>enough</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>sum</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name> <operator>+</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&lt;=</operator> <name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxNodeTableNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>enough</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit taskList failed, size:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pLevel</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayPush to taskList failed, size:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>enough</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctrl</name><operator>-&gt;</operator><name>sorted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <break>break;</break>
  </block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task quota %s added, fqdn:%s, port:%d, tableNum:%d, remainNum:%d, remainExecTaskNum:%d"</literal></expr></argument>,
                <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>enough</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"NOT"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name></expr></argument>,
                <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctrl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schTaskTableNumCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSchTask</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>key1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSchTask</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>key2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask1</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name> <operator>&lt;</operator> <name><name>pTask2</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTask1</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name> <operator>&gt;</operator> <name><name>pTask2</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schLaunchTasksInFlowCtrlListImpl</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchFlowControl</name> <modifier>*</modifier></type><name>ctrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctrl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name> <operator>||</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctrl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>remainNum</name> <init>= <expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxNodeTableNum</name></name> <operator>-</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>taskNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>taskNum</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctrl</name><operator>-&gt;</operator><name>sorted</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>, <argument><expr><name>schTaskTableNumCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// desc order</comment>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>taskNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pTask</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SSchTask</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SEp</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name> <operator>&gt;</operator> <name>remainNum</name> <operator>&amp;&amp;</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task NOT to launch, fqdn:%s, port:%d, tableNum:%d, remainNum:%d, remainExecTaskNum:%d"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>,
                    <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name> <operator>+=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task to launch, fqdn:%s, port:%d, tableNum:%d, remainNum:%d, remainExecTaskNum:%d"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>,
                  <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schAsyncLaunchTaskImpl</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>remainNum</name> <operator>-=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>remainNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"no more task to launch, fqdn:%s, port:%d, remainNum:%d, remainExecTaskNum:%d"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
                    <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>taskNum</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pLastTask</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSchTask</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>remainNum</name> <operator>&lt;</operator> <name><name>pLastTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"no more task to launch, fqdn:%s, port:%d, remainNum:%d, remainExecTaskNum:%d, smallestInList:%d"</literal></expr></argument>,
                      <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>tableNumSum</name></name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>execTaskNum</name></name></expr></argument>, <argument><expr><name><name>pLastTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name>taskNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctrl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schProcessOnTaskFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schLaunchTasksInFlowCtrlList</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCH_TASK_NEED_FLOW_CTRL</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schDecTaskFlowQuota</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SEp</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSchFlowControl</name> <modifier>*</modifier></type><name>ctrl</name> <init>= <expr><operator>(</operator><name>SSchFlowControl</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>flowCtrl</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ctrl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashGet node from flowCtrl failed, fqdn:%s, port:%d"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>schLaunchTasksInFlowCtrlListImpl</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>  <comment type="line">// to avoid compiler error</comment>
</block_content>}</block></function>
</unit>
