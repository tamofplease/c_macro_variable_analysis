<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/scheduler/src/schTask.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"schInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>schFreeTask</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>schDeregisterTaskHb</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>profile</name><operator>.</operator><name>execTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schInitTaskRetryTimes</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SSchLevel</name> <modifier>*</modifier></type><name>pLevel</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_DATA_BIND_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>SCH_IS_QUERY_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SCH_ALL</name> <operator>!=</operator> <name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>schPolicy</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxRetryTimes</name></name> <operator>=</operator> <name>SCH_DEFAULT_MAX_RETRY_NUM</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>nodeList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxRetryTimes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>nodeNum</name></expr></argument>, <argument><expr><name>SCH_DEFAULT_MAX_RETRY_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxExecTimes</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>maxRetryTimes</name></name> <operator>*</operator> <operator>(</operator><name><name>pLevel</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schInitTask</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name> <modifier>*</modifier></type><name>pPlan</name></decl></parameter>, <parameter><decl><type><name>SSchLevel</name> <modifier>*</modifier></type><name>pLevel</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name></name> <operator>=</operator> <name>pPlan</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>pLevel</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>timeoutUsec</name></name> <operator>=</operator> <name>SCH_DEFAULT_TASK_TIMEOUT_USEC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name> <operator>=</operator> <call><name>schGenTaskId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schInitTaskRetryTimes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxExecTimes</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>profile</name><operator>.</operator><name>execTime</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxExecTimes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>profile</name><operator>.</operator><name>execTime</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_SET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task initialized, max times %d:%d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxRetryTimes</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxExecTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>profile</name><operator>.</operator><name>execTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schRecordTaskSucceedNode</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_LOCAL_EXEC_TASK</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayGet candidate addr failed, idx:%d, size:%d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>,
                  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>succeedAddr</name></name> <operator>=</operator> <operator>*</operator><name>addr</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schAppendTaskExecNode</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>execId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchNodeInfo</name></type> <name>nodeInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>addr</name> <operator>=</operator> <operator>*</operator><name>addr</name></expr>, <expr><operator>.</operator><name>handle</name> <operator>=</operator> <macro><name>SCH_GET_TASK_HANDLE</name><argument_list>(<argument>pTask</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>execId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>execId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodeInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashPut nodeInfo to execNodes failed, errno:%d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task execNode added, execId:%d, handle:%p"</literal></expr></argument>, <argument><expr><name>execId</name></expr></argument>, <argument><expr><name><name>nodeInfo</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schDropTaskExecNode</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>execId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>execId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>execId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"execId %d already not in execNodeList"</literal></expr></argument>, <argument><expr><name>execId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"execId %d removed from execNodeList"</literal></expr></argument>, <argument><expr><name>execId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>execId</name> <operator>!=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name><operator>)</operator> <operator>||</operator> <name><name>pTask</name><operator>-&gt;</operator><name>waitRetry</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// ignore it</comment>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"execId %d is already not current execId %d, waitRetry %d"</literal></expr></argument>, <argument><expr><name>execId</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>waitRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schUpdateTaskExecNode</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>execId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchNodeInfo</name> <modifier>*</modifier></type><name>nodeInfo</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>execId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>execId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>nodeInfo</name></expr>)</condition> <block>{<block_content>  <comment type="line">// ignore it</comment>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"handle not updated since execId %d already not exist, current execId %d, waitRetry %d"</literal></expr></argument>, <argument><expr><name>execId</name></expr></argument>,
                  <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>waitRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>nodeInfo</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"handle updated to %p for execId %d"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>execId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schUpdateTaskHandle</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dropExecNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>execId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>dropExecNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schDropTaskExecNode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>execId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>schUpdateTaskExecNode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>execId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>execId</name> <operator>!=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name><operator>)</operator> <operator>||</operator> <name><name>pTask</name><operator>-&gt;</operator><name>waitRetry</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// ignore it</comment>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"handle not updated since execId %d is already not current execId %d, waitRetry %d"</literal></expr></argument>, <argument><expr><name>execId</name></expr></argument>,
                  <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>waitRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_SET_TASK_HANDLE</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessOnTaskFailure</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name> <operator>==</operator> <name>errCode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>jobStatus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>schJobNeedToStop</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobStatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"no more task failure processing cause of job status %s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>jobStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>taskStatus</name> <init>= <expr><call><name>SCH_GET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>taskStatus</name> <operator>==</operator> <name>JOB_TASK_STATUS_FAIL</name> <operator>||</operator> <name>taskStatus</name> <operator>==</operator> <name>JOB_TASK_STATUS_SUCC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task already done, status:%s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>taskStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>errCode</name> <operator>==</operator> <name>TSDB_CODE_SCH_TIMEOUT_ERROR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_LOG_TASK_WAIT_TS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_LOG_TASK_END_TS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>needRetry</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>moved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskDone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"taskOnFailure, code:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schTaskCheckSetRetry</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>needRetry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>needRetry</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task failed and no more retry, code:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCH_SET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SCH_JOB_NEED_WAIT</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskFailed</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>taskDone</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskSucceed</name></name> <operator>+</operator> <name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskFailed</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>schUpdateJobErrCode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>taskDone</name> <operator>&lt;</operator> <name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"need to wait other tasks, doneNum:%d, allNum:%d"</literal></expr></argument>, <argument><expr><name>taskDone</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schHandleTaskRetry</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessOnTaskSuccess</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>moved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"taskOnSuccess, status:%s"</literal></expr></argument>, <argument><expr><call><name>SCH_GET_TASK_STATUS_STR</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_LOG_TASK_END_TS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_SET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_PART_SUCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schRecordTaskSucceedNode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchTasksInFlowCtrlList</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>parentNum</name> <init>= <expr><ternary><condition><expr><name><name>pTask</name><operator>-&gt;</operator><name>parents</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>parentNum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>taskDone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SCH_JOB_NEED_WAIT</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskSucceed</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>taskDone</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskSucceed</name></name> <operator>+</operator> <name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskFailed</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>taskDone</name> <operator>&lt;</operator> <name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"wait all tasks, done:%d, all:%d"</literal></expr></argument>, <argument><expr><name>taskDone</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>taskDone</name> <operator>&gt;</operator> <name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taskDone number invalid, done:%d, total:%d"</literal></expr></argument>, <argument><expr><name>taskDone</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskFailed</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schHandleJobFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schSwitchJobStatus</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_PART_SUCC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>resNode</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>succeedAddr</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schSwitchJobStatus</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_PART_SUCC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
    if (SCH_IS_DATA_SRC_TASK(task) &amp;&amp; job-&gt;dataSrcEps.numOfEps &lt; SCH_MAX_CANDIDATE_EP_NUM) {
      strncpy(job-&gt;dataSrcEps.fqdn[job-&gt;dataSrcEps.numOfEps], task-&gt;execAddr.fqdn, sizeof(task-&gt;execAddr.fqdn));
      job-&gt;dataSrcEps.port[job-&gt;dataSrcEps.numOfEps] = task-&gt;execAddr.port;

      ++job-&gt;dataSrcEps.numOfEps;
    }
  */</comment>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>parentNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSchTask</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>planLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SDownstreamSourceNode</name></type> <name>source</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>QUERY_NODE_DOWNSTREAM_SOURCE</name></expr>,
        <expr><operator>.</operator><name>taskId</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>,
        <expr><operator>.</operator><name>schedId</name> <operator>=</operator> <name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr>,
        <expr><operator>.</operator><name>execId</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr>,
        <expr><operator>.</operator><name>addr</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>succeedAddr</name></name></expr>,
        <expr><operator>.</operator><name>fetchMsgType</name> <operator>=</operator> <call><name>SCH_FETCH_TYPE</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>localExec</name> <operator>=</operator> <call><name>SCH_IS_LOCAL_EXEC_TASK</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qSetSubplanExecutionNode</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>planLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>readyNum</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>childReady</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SCH_TASK_READY_FOR_LAUNCH</name><argument_list>(<argument><expr><name>readyNum</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"all %d children task done, start to launch parent task 0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>readyNum</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchJobLowerLevel</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schRescheduleTask</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>enableReSchedule</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_DATA_BIND_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_TASK_TIMEOUT</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>JOB_TASK_STATUS_EXEC</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;&amp;</operator> <name><name>pJob</name><operator>-&gt;</operator><name>fetchTask</name></name> <operator>!=</operator> <name>pTask</name> <operator>&amp;&amp;</operator>
      <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task execId %d will be rescheduled now"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>schDropTaskOnExecNode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>TSDB_CODE_SCH_TIMEOUT_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schChkUpdateRedirectCtx</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchRedirectCtx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>redirectCtx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pCtx</name><operator>-&gt;</operator><name>inRedirect</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>inRedirect</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>periodMs</name></name> <operator>=</operator> <name>tsRedirectPeriod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>startTs</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_DATA_BIND_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pEpSet</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>roundTotal</name></name> <operator>=</operator> <name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>pAddr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>roundTotal</name></name> <operator>=</operator> <name><name>pAddr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>roundTotal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>totalTimes</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>roundTimes</name></name><operator>++</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_DATA_BIND_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pEpSet</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>roundTotal</name></name> <operator>=</operator> <name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>


  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>roundTimes</name></name> <operator>&gt;=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>roundTotal</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nowTs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>lastTime</name> <init>= <expr><name>nowTs</name> <operator>-</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>startTs</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastTime</name> <operator>&gt;</operator> <name>tsMaxRetryWaitTime</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task no more redirect retry since timeout, now:%"</literal> <name>PRId64</name> <literal type="string">", start:%"</literal> <name>PRId64</name> <literal type="string">", max:%d, total:%d"</literal></expr></argument>,
                    <argument><expr><name>nowTs</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>startTs</name></name></expr></argument>, <argument><expr><name>tsMaxRetryWaitTime</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>totalTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>SCH_GET_REDICT_CODE</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>periodMs</name></name> <operator>*=</operator> <name>tsRedirectFactor</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>periodMs</name></name> <operator>&gt;</operator> <name>tsRedirectMaxPeriod</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>periodMs</name></name> <operator>=</operator> <name>tsRedirectMaxPeriod</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>leftTime</name> <init>= <expr><name>tsMaxRetryWaitTime</name> <operator>-</operator> <name>lastTime</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>delayExecMs</name></name> <operator>=</operator> <ternary><condition><expr><name>leftTime</name> <operator>&lt;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>periodMs</name></name></expr> ?</condition><then> <expr><name>leftTime</name></expr> </then><else>: <expr><name><name>pCtx</name><operator>-&gt;</operator><name>periodMs</name></name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>roundTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>delayExecMs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task start %d/%d/%d redirect retry, delayExec:%d"</literal></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>roundTimes</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>roundTotal</name></name></expr></argument>,
                <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>totalTimes</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>delayExecMs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schDoTaskRedirect</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task will be redirected now, status:%s, code:%s"</literal></expr></argument>, <argument><expr><call><name>SCH_GET_TASK_STATUS_STR</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pData</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>retryTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NO_RET_REDIRECT_ERROR</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UPDATE_REDICT_CODE</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schChkUpdateRedirectCtx</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pData</name></expr> ?</condition><then> <expr><name><name>pData</name><operator>-&gt;</operator><name>pEpSet</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>waitRetry</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schDropTaskOnExecNode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>schRemoveTaskFromExecList</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>schDeregisterTaskHb</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskLaunchedNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>lastMsgType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>succeedAddr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>succeedAddr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_DATA_BIND_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>&amp;&amp;</operator> <name><name>pData</name><operator>-&gt;</operator><name>pEpSet</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schUpdateTaskCandidateAddr</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>SYNC_SELF_LEADER_REDIRECT_ERROR</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SEp</name>            <modifier>*</modifier></type><name>pEp</name> <init>= <expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>addr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task retry node %d current ep, idx:%d/%d,%s:%d, code:%s"</literal></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>,
                    <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SCH_SWITCH_EPSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"switch task target node %d epset to %d/%d"</literal></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SCH_TASK_NEED_FLOW_CTRL</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>JOB_TASK_STATUS_EXEC</name> <operator>==</operator> <call><name>SCH_GET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schLaunchTasksInFlowCtrlList</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SCH_SET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schDelayLaunchTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// merge plan</comment>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>childReady</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qClearSubplanExecutionNode</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Note: current error task and upper level merge task</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>pData</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pData</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schSwitchTaskCandidateAddr</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_SET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>childrenNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>childrenNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pChild</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SCH_LOCK_TASK</name><argument_list>(<argument><expr><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>schDoTaskRedirect</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pChild</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_UNLOCK_TASK</name><argument_list>(<argument><expr><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleRedirect</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>JOB_TASK_STATUS_PART_SUCC</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>fetched</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"already fetched while got error %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>schUpdateJobStatus</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SYNC_OTHER_LEADER_REDIRECT_ERROR</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pData</name><operator>-&gt;</operator><name>pEpSet</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"epset updating excepted, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schDoTaskRedirect</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schPushTaskToExecList</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>execTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>HASH_NODE_EXIST</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task already in execTask list, code:%x"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashPut task to execTask list failed, errno:%d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task added to execTask list, numOfTasks:%d"</literal></expr></argument>, <argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>execTasks</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
int32_t schMoveTaskToSuccList(SSchJob *pJob, SSchTask *pTask, bool *moved) {
  if (0 != taosHashRemove(pJob-&gt;execTasks, &amp;pTask-&gt;taskId, sizeof(pTask-&gt;taskId))) {
    SCH_TASK_WLOG("remove task from execTask list failed, may not exist, status:%s", SCH_GET_TASK_STATUS_STR(pTask));
  } else {
    SCH_TASK_DLOG("task removed from execTask list, numOfTasks:%d", taosHashGetSize(pJob-&gt;execTasks));
  }

  int32_t code = taosHashPut(pJob-&gt;succTasks, &amp;pTask-&gt;taskId, sizeof(pTask-&gt;taskId), &amp;pTask, POINTER_BYTES);
  if (0 != code) {
    if (HASH_NODE_EXIST(code)) {
      *moved = true;
      SCH_TASK_ELOG("task already in succTask list, status:%s", SCH_GET_TASK_STATUS_STR(pTask));
      SCH_ERR_RET(TSDB_CODE_SCH_STATUS_ERROR);
    }

    SCH_TASK_ELOG("taosHashPut task to succTask list failed, errno:%d", errno);
    SCH_ERR_RET(TSDB_CODE_OUT_OF_MEMORY);
  }

  *moved = true;

  SCH_TASK_DLOG("task moved to succTask list, numOfTasks:%d", taosHashGetSize(pJob-&gt;succTasks));

  return TSDB_CODE_SUCCESS;
}

int32_t schMoveTaskToFailList(SSchJob *pJob, SSchTask *pTask, bool *moved) {
  *moved = false;

  if (0 != taosHashRemove(pJob-&gt;execTasks, &amp;pTask-&gt;taskId, sizeof(pTask-&gt;taskId))) {
    SCH_TASK_WLOG("remove task from execTask list failed, may not exist, status:%s", SCH_GET_TASK_STATUS_STR(pTask));
  }

  int32_t code = taosHashPut(pJob-&gt;failTasks, &amp;pTask-&gt;taskId, sizeof(pTask-&gt;taskId), &amp;pTask, POINTER_BYTES);
  if (0 != code) {
    if (HASH_NODE_EXIST(code)) {
      *moved = true;

      SCH_TASK_WLOG("task already in failTask list, status:%s", SCH_GET_TASK_STATUS_STR(pTask));
      SCH_ERR_RET(TSDB_CODE_SCH_STATUS_ERROR);
    }

    SCH_TASK_ELOG("taosHashPut task to failTask list failed, errno:%d", errno);
    SCH_ERR_RET(TSDB_CODE_OUT_OF_MEMORY);
  }

  *moved = true;

  SCH_TASK_DLOG("task moved to failTask list, numOfTasks:%d", taosHashGetSize(pJob-&gt;failTasks));

  return TSDB_CODE_SUCCESS;
}

int32_t schMoveTaskToExecList(SSchJob *pJob, SSchTask *pTask, bool *moved) {
  if (0 != taosHashRemove(pJob-&gt;succTasks, &amp;pTask-&gt;taskId, sizeof(pTask-&gt;taskId))) {
    SCH_TASK_WLOG("remove task from succTask list failed, may not exist, status:%s", SCH_GET_TASK_STATUS_STR(pTask));
  }

  int32_t code = taosHashPut(pJob-&gt;execTasks, &amp;pTask-&gt;taskId, sizeof(pTask-&gt;taskId), &amp;pTask, POINTER_BYTES);
  if (0 != code) {
    if (HASH_NODE_EXIST(code)) {
      *moved = true;

      SCH_TASK_ELOG("task already in execTask list, status:%s", SCH_GET_TASK_STATUS_STR(pTask));
      SCH_ERR_RET(TSDB_CODE_SCH_STATUS_ERROR);
    }

    SCH_TASK_ELOG("taosHashPut task to execTask list failed, errno:%d", errno);
    SCH_ERR_RET(TSDB_CODE_OUT_OF_MEMORY);
  }

  *moved = true;

  SCH_TASK_DLOG("task moved to execTask list, numOfTasks:%d", taosHashGetSize(pJob-&gt;execTasks));

  return TSDB_CODE_SUCCESS;
}
*/</comment>

<function><type><name>int32_t</name></type> <name>schTaskCheckSetRetry</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>needRetry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SCH_TIMEOUT_ERROR</name> <operator>==</operator> <name>errCode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxExecTimes</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxRetryTimes</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>timeoutUsec</name></name> <operator>&lt;</operator> <name>SCH_MAX_TASK_TIMEOUT_USEC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>timeoutUsec</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>timeoutUsec</name></name> <operator>&gt;</operator> <name>SCH_MAX_TASK_TIMEOUT_USEC</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>timeoutUsec</name></name> <operator>=</operator> <name>SCH_MAX_TASK_TIMEOUT_USEC</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pTask</name><operator>-&gt;</operator><name>retryTimes</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name><name>pTask</name><operator>-&gt;</operator><name>maxRetryTimes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>needRetry</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task no more retry since reach max retry times, retryTimes:%d/%d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>retryTimes</name></name></expr></argument>,
                  <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxRetryTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>maxExecTimes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>needRetry</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task no more retry since reach max exec times, execId:%d/%d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>maxExecTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCH_NEED_RETRY</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>lastMsgType</name></name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>needRetry</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task no more retry cause of errCode, errCode:%x - %s"</literal></expr></argument>, <argument><expr><name>errCode</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
    if (SCH_IS_DATA_BIND_TASK(pTask)) {
      if ((pTask-&gt;execId + 1) &gt;= SCH_TASK_NUM_OF_EPS(&amp;pTask-&gt;plan-&gt;execNode)) {
        *needRetry = false;
        SCH_TASK_DLOG("task no more retry since all ep tried, execId:%d, epNum:%d", pTask-&gt;execId,
                      SCH_TASK_NUM_OF_EPS(&amp;pTask-&gt;plan-&gt;execNode));
        return TSDB_CODE_SUCCESS;
      }
    } else {
      int32_t candidateNum = taosArrayGetSize(pTask-&gt;candidateAddrs);

      if ((pTask-&gt;candidateIdx + 1) &gt;= candidateNum &amp;&amp; (TSDB_CODE_SCH_TIMEOUT_ERROR != errCode)) {
        *needRetry = false;
        SCH_TASK_DLOG("task no more retry since all candiates tried, candidateIdx:%d, candidateNum:%d",
                      pTask-&gt;candidateIdx, candidateNum);
        return TSDB_CODE_SUCCESS;
      }
    }
  */</comment>

  <expr_stmt><expr><operator>*</operator><name>needRetry</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task need the %dth retry, errCode:%x - %s"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>errCode</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleTaskRetry</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskLaunchedNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schRemoveTaskFromExecList</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_SET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_TASK_NEED_FLOW_CTRL</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchTasksInFlowCtrlList</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>schDeregisterTaskHb</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_DATA_BIND_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SCH_SWITCH_EPSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schSwitchTaskCandidateAddr</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schSetAddrsFromNodeList</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>addNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nodeNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>nodeList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nodeNum</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>nodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SQueryNodeLoad</name> <modifier>*</modifier></type><name>nload</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>nodeList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>naddr</name> <init>= <expr><operator>&amp;</operator><name><name>nload</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><name>naddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayPush execNode to candidate addrs failed, addNum:%d, errno:%d"</literal></expr></argument>, <argument><expr><name>addNum</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_TASK_TLOG</name><argument_list>(<argument><expr><literal type="string">"set %dth candidate addr, id %d, inUse:%d/%d, fqdn:%s, port:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>naddr</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>,
                    <argument><expr><name><name>naddr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>, <argument><expr><name><name>naddr</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><name>naddr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fqdn</name></expr></argument>,
                    <argument><expr><call><name>SCH_GET_CUR_EP</name><argument_list>(<argument><expr><name>naddr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>++</operator><name>addNum</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>addNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"no available execNode as candidates, nodeNum:%d"</literal></expr></argument>, <argument><expr><name>nodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_TSC_NO_EXEC_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schSetTaskCandidateAddrs</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>SCHEDULE_DEFAULT_MAX_NODE_NUM</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeAddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d condidate addrs failed"</literal></expr></argument>, <argument><expr><name>SCHEDULE_DEFAULT_MAX_NODE_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayPush execNode to candidate addrs failed, errno:%d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"use execNode in plan as candidate addr, numOfEps:%d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_DATA_BIND_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"no execNode specifed for data src task, numOfEps:%d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schSetAddrsFromNodeList</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
    for (int32_t i = 0; i &lt; job-&gt;dataSrcEps.numOfEps &amp;&amp; addNum &lt; SCH_MAX_CANDIDATE_EP_NUM; ++i) {
      strncpy(epSet-&gt;fqdn[epSet-&gt;numOfEps], job-&gt;dataSrcEps.fqdn[i], sizeof(job-&gt;dataSrcEps.fqdn[i]));
      epSet-&gt;port[epSet-&gt;numOfEps] = job-&gt;dataSrcEps.port[i];

      ++epSet-&gt;numOfEps;
    }
  */</comment>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schUpdateTaskCandidateAddr</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name> <operator>||</operator> <literal type="number">1</literal> <operator>!=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"not able to update cndidate addr, addr num %d"</literal></expr></argument>,
                  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr> ?</condition><then> <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>pAddr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>origEpset</name> <init>= <expr><call><name>schDumpEpSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAddr</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newEpset</name> <init>= <expr><call><name>schDumpEpSet</name><argument_list>(<argument><expr><name>pEpSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"update task target node %d epset from %s to %s"</literal></expr></argument>, <argument><expr><name><name>pAddr</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name>origEpset</name></expr></argument>, <argument><expr><name>newEpset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>origEpset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>newEpset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAddr</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pAddr</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schSwitchTaskCandidateAddr</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>candidateNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateAddrs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>candidateNum</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>schMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>schPolicy</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SCH_LOAD_SEQ</name></expr>:</case>
    <case>case <expr><name>SCH_ALL</name></expr>:</case>
    <default>default:</default>
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name> <operator>&gt;=</operator> <name>candidateNum</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SCH_RANDOM</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>lastIdx</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>lastIdx</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name> <operator>=</operator> <call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>candidateNum</name></expr>;</expr_stmt>
      </block_content>}</block></while>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"switch task candiateIdx to %d/%d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>candidateIdx</name></name></expr></argument>, <argument><expr><name>candidateNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schRemoveTaskFromExecList</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>execTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_WLOG</name><argument_list>(<argument><expr><literal type="string">"task already not in execTask list, code:%x"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schDropTaskOnExecNode</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"no exec address, status:%s"</literal></expr></argument>, <argument><expr><call><name>SCH_GET_TASK_STATUS_STR</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task has no execNodes, no need to drop it, status:%s"</literal></expr></argument>, <argument><expr><call><name>SCH_GET_TASK_STATUS_STR</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>       <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchNodeInfo</name> <modifier>*</modifier></type><name>nodeInfo</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>nodeInfo</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>nodeInfo</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_SET_TASK_HANDLE</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>nodeInfo</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>schBuildAndSendMsg</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodeInfo</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>TDMT_SCH_DROP_TASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"start to drop task's %dth execNode"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"no need to drop task %dth execNode"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nodeInfo</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>, <argument><expr><name>nodeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task has been dropped on %d exec nodes"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessOnTaskStatusRsp</name><parameter_list>(<parameter><decl><type><name>SQueryNodeEpId</name> <modifier>*</modifier></type><name>pEpId</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pStatusList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>taskNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pStatusList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchJob</name>  <modifier>*</modifier></type><name>pJob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%d task status in hb rsp from nodeId:%d, fqdn:%s, port:%d"</literal></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>, <argument><expr><name><name>pEpId</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>pEpId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>,
         <argument><expr><name><name>pEpId</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>taskNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STaskStatus</name> <modifier>*</modifier></type><name>pStatus</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pStatusList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">",TID:0x%"</literal> <name>PRIx64</name> <literal type="string">",EID:%d task status in server: %s"</literal></expr></argument>, <argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>,
           <argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>schProcessOnCbBegin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pJob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>, <argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>, <argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>execId</name></name> <operator>!=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO</comment>
      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"execId %d mis-match current execId %d"</literal></expr></argument>, <argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>schProcessOnCbEnd</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>JOB_TASK_STATUS_FAIL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// RECORD AND HANDLE ERROR!!!!</comment>
      <expr_stmt><expr><call><name>schProcessOnCbEnd</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>JOB_TASK_STATUS_INIT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schRescheduleTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>schProcessOnCbEnd</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleExplainRes</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pExplainRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>resNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pExplainRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>resNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchJob</name>  <modifier>*</modifier></type><name>pJob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>resNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExplainLocalRsp</name> <modifier>*</modifier></type><name>localRsp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pExplainRes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">",TID:0x%"</literal> <name>PRIx64</name> <literal type="string">", begin to handle LOCAL explain rsp msg"</literal></expr></argument>, <argument><expr><name><name>localRsp</name><operator>-&gt;</operator><name>qId</name></name></expr></argument>, <argument><expr><name><name>localRsp</name><operator>-&gt;</operator><name>tId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pJob</name> <operator>=</operator> <call><name>schAcquireJob</name><argument_list>(<argument><expr><name><name>localRsp</name><operator>-&gt;</operator><name>rId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJob</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qWarn</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">",TID:0x%"</literal> <name>PRIx64</name> <literal type="string">"job no exist, may be dropped, refId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>localRsp</name><operator>-&gt;</operator><name>qId</name></name></expr></argument>,
            <argument><expr><name><name>localRsp</name><operator>-&gt;</operator><name>tId</name></name></expr></argument>, <argument><expr><name><name>localRsp</name><operator>-&gt;</operator><name>rId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_JOB_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int8_t</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>schJobNeedToStop</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"will not do further processing cause of job status %s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>schReleaseJob</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schGetTaskInJob</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>localRsp</name><operator>-&gt;</operator><name>tId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schProcessExplainRsp</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>localRsp</name><operator>-&gt;</operator><name>rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>schReleaseJob</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">",TID:0x%"</literal> <name>PRIx64</name> <literal type="string">", end to handle LOCAL explain rsp msg, code:%x"</literal></expr></argument>, <argument><expr><name><name>localRsp</name><operator>-&gt;</operator><name>qId</name></name></expr></argument>,
           <argument><expr><name><name>localRsp</name><operator>-&gt;</operator><name>tId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>localRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>numOfPlans</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>localRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>subplanInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTask</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pJob</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>_return</name>:</label>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>resNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExplainLocalRsp</name> <modifier>*</modifier></type><name>localRsp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pExplainRes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tFreeSExplainRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>localRsp</name><operator>-&gt;</operator><name>rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pExplainRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schLaunchRemoteTask</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubplan</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>msg</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// TODO add more detailed reason for failure</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qSubPlanToMsg</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"failed to create physical plan, code:%s, msg:%p, len:%d"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>,
                    <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tsQueryPlannerTrace</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>qSubPlanToString</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_TASK_DLOGL</name><argument_list>(<argument><expr><literal type="string">"physical plan len:%d, %s"</literal></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schSetTaskCandidateAddrs</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_QUERY_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schEnsureHbConnection</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schBuildAndSendMsg</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schLaunchLocalTask</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// SCH_ERR_JRET(schSetTaskCandidateAddrs(pJob, pTask));</comment>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>schMgmt</name><operator>.</operator><name>queryMgmt</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>qWorkerInit</name><argument_list>(<argument><expr><name>NODE_TYPE_CLIENT</name></expr></argument>, <argument><expr><name>CLIENT_HANDLE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>queryMgmt</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>explainRes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWMsg</name></type>  <name>qwMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>qwMsg</name><operator>.</operator><name>msgInfo</name><operator>.</operator><name>taskType</name></name> <operator>=</operator> <name>TASK_TYPE_TEMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qwMsg</name><operator>.</operator><name>msgInfo</name><operator>.</operator><name>explain</name></name> <operator>=</operator> <call><name>SCH_IS_EXPLAIN_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qwMsg</name><operator>.</operator><name>msgInfo</name><operator>.</operator><name>needFetch</name></name> <operator>=</operator> <call><name>SCH_TASK_NEED_FETCH</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qwMsg</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>plan</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qwMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qwMsg</name><operator>.</operator><name>connInfo</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>pTrans</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_EXPLAIN_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>explainRes</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExplainLocalRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>qWorkerProcessLocalQuery</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>queryMgmt</name></name></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>,
                                        <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qwMsg</name></expr></argument>, <argument><expr><name>explainRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_EXPLAIN_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schHandleExplainRes</name><argument_list>(<argument><expr><name>explainRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>explainRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskSuccess</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>explainRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schLaunchTaskImpl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchTaskCtx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><operator>(</operator><name>SSchTaskCtx</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchJob</name>     <modifier>*</modifier></type><name>pJob</name> <init>= <expr><call><name>schAcquireJob</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>jobRid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"job refId 0x%"</literal> <name>PRIx64</name> <literal type="string">" already not exist"</literal></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>jobRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_JOB_IS_DROPPING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>asyncLaunch</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_LOCK_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type>  <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>level</name><operator>-&gt;</operator><name>taskLaunchedNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>retryTimes</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>waitRetry</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"start to launch %s task, execId %d, retry %d"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><call><name>SCH_IS_LOCAL_EXEC_TASK</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"LOCAL"</literal></expr> </then><else>: <expr><literal type="string">"REMOTE"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>retryTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_LOG_TASK_START_TS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>schJobNeedToStop</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"no need to launch task cause of job status %s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// NOTE: race condition: the task should be put into the hash table before send msg to server</comment>
  <if_stmt><if>if <condition>(<expr><call><name>SCH_GET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JOB_TASK_STATUS_EXEC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schPushTaskToExecList</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_SET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_LOCAL_EXEC_TASK</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schLaunchLocalTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schLaunchRemoteTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (SCH_IS_QUERY_JOB(pJob)) {
    SCH_ERR_JRET(schEnsureHbConnection(pJob, pTask));
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>taskNum</name></name> <operator>&gt;=</operator> <name>SCH_MIN_AYSNC_EXEC_NUM</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schProcessOnTaskFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schHandleJobFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>asyncLaunch</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>schReleaseJob</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schAsyncLaunchTaskImpl</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchTaskCtx</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchTaskCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>jobRid</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>taskNum</name></name> <operator>&gt;=</operator> <name>SCH_MIN_AYSNC_EXEC_NUM</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>asyncLaunch</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosAsyncExec</name><argument_list>(<argument><expr><name>schLaunchTaskImpl</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchTaskImpl</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Note: no more error processing, handled in function internal</comment>
<function><type><name>int32_t</name></type> <name>schLaunchTask</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>enough</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_SET_TASK_HANDLE</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_TASK_NEED_FLOW_CTRL</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schCheckIncTaskFlowQuota</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enough</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enough</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schAsyncLaunchTaskImpl</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schAsyncLaunchTaskImpl</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schHandleTimerEvent</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchTimerParam</name> <modifier>*</modifier></type><name>pTimerParam</name> <init>= <expr><operator>(</operator><name>SSchTimerParam</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchTask</name>       <modifier>*</modifier></type><name>pTask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchJob</name>        <modifier>*</modifier></type><name>pJob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>rId</name> <init>= <expr><name><name>pTimerParam</name><operator>-&gt;</operator><name>rId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>queryId</name> <init>= <expr><name><name>pTimerParam</name><operator>-&gt;</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>taskId</name> <init>= <expr><name><name>pTimerParam</name><operator>-&gt;</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTimerParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>schProcessOnCbBegin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pJob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>, <argument><expr><name>queryId</name></expr></argument>, <argument><expr><name>rId</name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schLaunchTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schProcessOnCbEnd</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schDelayLaunchTask</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>delayExecMs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchTimerParam</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchTimerParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosMemoryMalloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SSchTimerParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>rId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>queryId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>taskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>delayTimer</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>delayTimer</name></name> <operator>=</operator> <call><name>taosTmrStart</name><argument_list>(<argument><expr><name>schHandleTimerEvent</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>delayExecMs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>param</name></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>delayTimer</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"start delay timer failed, handle:%p"</literal></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>schHandleTimerEvent</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>delayExecMs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>param</name></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>delayTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schLaunchTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schLaunchLevelTasks</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchLevel</name> <modifier>*</modifier></type><name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schChkJobNeedFlowCtrl</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>level</name><operator>-&gt;</operator><name>taskNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>level</name><operator>-&gt;</operator><name>subTasks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schDropTaskInHashList</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCH_JOB_NEED_DROP</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSchTask</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SCH_LOCK_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>delayTimer</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosTmrStopA</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>delayTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>schDropTaskOnExecNode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_UNLOCK_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schExecRemoteFetch</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schBuildAndSendMsg</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchTask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resNode</name></name></expr></argument>, <argument><expr><call><name>SCH_FETCH_TYPE</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchTask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schExecLocalFetch</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>explainRes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_EXPLAIN_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>explainRes</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExplainLocalRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>qWorkerProcessLocalFetch</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>queryMgmt</name></name></expr></argument>, <argument><expr><name><name>schMgmt</name><operator>.</operator><name>sId</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>,
                                        <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRsp</name></expr></argument>, <argument><expr><name>explainRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_EXPLAIN_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schHandleExplainRes</name><argument_list>(<argument><expr><name>explainRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>explainRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schProcessFetchRsp</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>explainRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Note: no more error processing, handled in function internal</comment>
<function><type><name>int32_t</name></type> <name>schLaunchFetchTask</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>fetchRes</name> <init>= <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fetchRes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"res already fetched, res:%p"</literal></expr></argument>, <argument><expr><name>fetchRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_LOCAL_EXEC_TASK</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchTask</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schExecLocalFetch</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchTask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schExecRemoteFetch</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchTask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schProcessOnTaskFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchTask</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
