<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/scheduler/src/schJob.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"schInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>schUpdateJobErrCode</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>errCode</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>origCode</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>origCode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>origCode</name> <operator>==</operator> <call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>, <argument><expr><name>origCode</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>origCode</name> <operator>=</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>NEED_CLIENT_HANDLE_ERROR</name><argument_list>(<argument><expr><name>origCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>NEED_CLIENT_HANDLE_ERROR</name><argument_list>(<argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return;</return>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job errCode updated to %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>schJobDone</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>status</name> <init>= <expr><call><name>SCH_GET_JOB_STATUS</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><operator>(</operator><name>status</name> <operator>==</operator> <name>JOB_TASK_STATUS_FAIL</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>JOB_TASK_STATUS_DROP</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>JOB_TASK_STATUS_SUCC</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>bool</name></type> <name>schJobNeedToStop</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>status</name> <init>= <expr><call><name>SCH_GET_JOB_STATUS</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStatus</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>schJobDone</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>pJob</name><operator>-&gt;</operator><name>chkKillFp</name></name>)<argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>chkKillParam</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schUpdateJobErrCode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>TSDB_CODE_TSC_QUERY_KILLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schUpdateJobStatus</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>newStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>oriStatus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>oriStatus</name> <operator>=</operator> <call><name>SCH_GET_JOB_STATUS</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>oriStatus</name> <operator>==</operator> <name>newStatus</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>oriStatus</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>JOB_TASK_STATUS_NULL</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_INIT</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
      <case>case <expr><name>JOB_TASK_STATUS_INIT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_EXEC</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_DROP</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
      <case>case <expr><name>JOB_TASK_STATUS_EXEC</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_PART_SUCC</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_FAIL</name> <operator>&amp;&amp;</operator>
            <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_DROP</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
      <case>case <expr><name>JOB_TASK_STATUS_PART_SUCC</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_FAIL</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_SUCC</name> <operator>&amp;&amp;</operator>
            <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_DROP</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_EXEC</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
      <case>case <expr><name>JOB_TASK_STATUS_SUCC</name></expr>:</case>
      <case>case <expr><name>JOB_TASK_STATUS_FAIL</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_DROP</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
      <case>case <expr><name>JOB_TASK_STATUS_DROP</name></expr>:</case>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_JOB_FREED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <default>default:</default>
        <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid job status:%s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>oriStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>oriStatus</name> <operator>!=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>oriStatus</name></expr></argument>, <argument><expr><name>newStatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job status updated from %s to %s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>oriStatus</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>newStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break>break;</break>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"ignore job status update, from %s to %s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>oriStatus</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>newStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid job status update, from %s to %s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>oriStatus</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>newStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schBuildTaskRalation</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>planToTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pJob</name><operator>-&gt;</operator><name>levelNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchLevel</name> <modifier>*</modifier></type><name>pLevel</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>pLevel</name><operator>-&gt;</operator><name>taskNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>subTasks</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSubplan</name> <modifier>*</modifier></type><name>pPlan</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>   <name>childNum</name> <init>= <expr><ternary><condition><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pChildren</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>   <name>parentNum</name> <init>= <expr><ternary><condition><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pParents</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pParents</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>childNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>levelIdx</name></name> <operator>==</operator> <name><name>pLevel</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid query plan, lowest level, childNum:%d"</literal></expr></argument>, <argument><expr><name>childNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>childNum</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d children failed"</literal></expr></argument>, <argument><expr><name>childNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>childNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSubplan</name>  <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>(</operator><name>SSubplan</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier><modifier>*</modifier></type><name>childTask</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>planToTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>childTask</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>*</operator><name>childTask</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"subplan children relationship error, level:%d, taskIdx:%d, childIdx:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>childTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayPush childTask failed, level:%d, taskIdx:%d, childIdx:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"children info, the %d child TID 0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>childTask</name><operator>)</operator><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name>parentNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pLevel</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid task info, level:0, parentNum:%d"</literal></expr></argument>, <argument><expr><name>parentNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>parents</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>parentNum</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d parents failed"</literal></expr></argument>, <argument><expr><name>parentNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>pLevel</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid task info, level:%d, parentNum:%d"</literal></expr></argument>, <argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>parentNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>parentNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSubplan</name>  <modifier>*</modifier></type><name>parent</name> <init>= <expr><operator>(</operator><name>SSubplan</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pParents</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier><modifier>*</modifier></type><name>parentTask</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>planToTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>parentTask</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>*</operator><name>parentTask</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"subplan parent relationship error, level:%d, taskIdx:%d, childIdx:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>, <argument><expr><name>parentTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayPush parentTask failed, level:%d, taskIdx:%d, childIdx:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"parents info, the %d parent TID 0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>parentTask</name><operator>)</operator><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"level:%d, parentNum:%d, childNum:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>parentNum</name></expr></argument>, <argument><expr><name>childNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SSchLevel</name> <modifier>*</modifier></type><name>pLevel</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_QUERY_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pLevel</name><operator>-&gt;</operator><name>taskNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid query plan, level:0, taskNum:%d"</literal></expr></argument>, <argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>subTasks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>SUBPLAN_TYPE_MODIFY</name> <operator>!=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>subplanType</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>needFetch</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schAppendJobDataSrc</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCH_IS_DATA_BIND_QRY_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>dataSrcTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schValidateAndBuildJob</name><parameter_list>(<parameter><decl><type><name>SQueryPlan</name> <modifier>*</modifier></type><name>pDag</name></decl></parameter>, <parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name> <operator>=</operator> <name><name>pDag</name><operator>-&gt;</operator><name>queryId</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid subplan num:%d"</literal></expr></argument>, <argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>dataSrcTasks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>dataSrcTasks</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>levelNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>levelNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid level num:%d"</literal></expr></argument>, <argument><expr><name>levelNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>planToTask</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(
      <argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>,
      <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><ternary><condition><expr><name>POINTER_BYTES</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr> </then><else>: <expr><name>TSDB_DATA_TYPE_INT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>,
      <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>planToTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d failed"</literal></expr></argument>, <argument><expr><name>SCHEDULE_DEFAULT_MAX_TASK_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>levelNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d failed"</literal></expr></argument>, <argument><expr><name>levelNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>levelNum</name></name> <operator>=</operator> <name>levelNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>levelIdx</name></name> <operator>=</operator> <name>levelNum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSchLevel</name></type>      <name>level</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>plans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>taskNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchLevel</name>     <modifier>*</modifier></type><name>pLevel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>level</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>JOB_TASK_STATUS_INIT</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>levelNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayPush level failed, level:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pLevel</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLevel</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>plans</name> <operator>=</operator> <operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>plans</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"empty level plan, level:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>taskNum</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>plans</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>taskNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid level plan number:%d, level:%d"</literal></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pLevel</name><operator>-&gt;</operator><name>taskNum</name></name> <operator>=</operator> <name>taskNum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pLevel</name><operator>-&gt;</operator><name>subTasks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>taskNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pLevel</name><operator>-&gt;</operator><name>subTasks</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d failed"</literal></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>taskNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSubplan</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><operator>(</operator><name>SSubplan</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>plans</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SCH_SET_JOB_TYPE</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>subplanType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SSchTask</name></type>  <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>subTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTask</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayPush task to level failed, level:%d, taskIdx:%d"</literal></expr></argument>, <argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>pLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schAppendJobDataSrc</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name>planToTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plan</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashPut to planToTaks failed, taskIdx:%d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashPut to taskList failed, taskIdx:%d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>++</operator><name><name>pJob</name><operator>-&gt;</operator><name>taskNum</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"level %d initialized, taskNum:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schBuildTaskRalation</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>planToTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>planToTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>planToTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schDumpJobExecRes</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SExecResult</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>resNumOfRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>numOfBytes</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>numOfBytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"execRes dumped, code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schDumpJobFetchRes</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>SRetrieveTableRsp</name> <operator>*</operator><operator>)</operator><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name><operator>)</operator><operator>-&gt;</operator><name>completed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schSwitchJobStatus</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_SUCC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pData</name> <operator>=</operator> <call><name>atomic_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pData</name> <operator>!=</operator> <call><name>atomic_val_compare_exchange_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pData</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <break>break;</break>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pData</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><operator>(</operator><name>SRetrieveTableRsp</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rsp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>completed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>pData</name> <operator>=</operator> <name>rsp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"empty res and set query complete, code:%x"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"fetch done, totalRows:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>resNumOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schNotifyUserExecRes</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecResult</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExecResult</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schDumpJobExecRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"sch start to invoke exec cb, code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>execFp</name></name>)<argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>cbParam</name></name></expr></argument>, <argument><expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"sch end from exec cb, code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schNotifyUserFetchRes</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>schDumpJobFetchRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"sch start to invoke fetch cb, code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>fetchFp</name></name>)<argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>cbParam</name></name></expr></argument>, <argument><expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"sch end from fetch cb, code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schPostJobRes</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SCH_OP_TYPE</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>SCH_OP_NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job not in any operation, no need to post job res, status:%s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name> <operator>!=</operator> <name>op</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"job in operation %s mis-match with expected %s"</literal></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_JOB_IN_SYNC_OP</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>SCH_JOB_IN_ASYNC_EXEC_OP</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>schNotifyUserExecRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>SCH_JOB_IN_ASYNC_FETCH_OP</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>schNotifyUserFetchRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"job not in any operation, status:%s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessOnJobFailure</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name> <operator>==</operator> <name>errCode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>schUpdateJobErrCode</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job failed with error %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>schPostJobRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleJobFailure</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name> <operator>==</operator> <name>errCode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>schSwitchJobStatus</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_FAIL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessOnJobDropped</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schProcessOnJobFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schHandleJobDrop</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name> <operator>==</operator> <name>errCode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>schSwitchJobStatus</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_DROP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessOnJobPartialSuccess</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>schChkCurrentOp</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_FETCH</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchFetchTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>schPostJobRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schProcessOnDataFetched</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>schPostJobRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_FETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessOnExplainDone</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"got explain rsp, rows:%"</literal> <name>PRId64</name> <literal type="string">", complete:%d"</literal></expr></argument>, <argument><expr><call><name>htobe64</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resNumOfRows</name></name></expr></argument>, <argument><expr><call><name>htobe64</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_SET_TASK_STATUS</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_SUCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schProcessOnDataFetched</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schLaunchJobLowerLevel</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCH_IS_QUERY_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchLevel</name> <modifier>*</modifier></type><name>pLevel</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>doneNum</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLevel</name><operator>-&gt;</operator><name>taskDoneNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>doneNum</name> <operator>==</operator> <name><name>pLevel</name><operator>-&gt;</operator><name>taskNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>levelIdx</name></name><operator>--</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>pLevel</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levelIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pLevel</name><operator>-&gt;</operator><name>taskNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>subTasks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>children</name></name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schSaveJobExecRes</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SQueryTableRsp</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>tbFName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>taskNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STbVerInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STbVerInfo</name></type> <name>tbInfo</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>tbInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tbInfo</name><operator>.</operator><name>sversion</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>sversion</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tbInfo</name><operator>.</operator><name>tversion</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>tversion</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SCH_QUERY</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>resLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schGetTaskInJob</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>taskId</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>schGetTaskFromList</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"task not found in job task list, taskId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schLaunchJob</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>EXPLAIN_MODE_STATIC</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>explainMode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>qExecStaticExplain</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pDag</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRetrieveTableRsp</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schSwitchJobStatus</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_PART_SUCC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SSchLevel</name> <modifier>*</modifier></type><name>level</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levelIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchLevelTasks</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schDropJobAllTasks</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>schDropTaskInHashList</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>execTasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  schDropTaskInHashList(pJob, pJob-&gt;succTasks);</comment>
  <comment type="line">//  schDropTaskInHashList(pJob, pJob-&gt;failTasks);</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schFreeJobImpl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>job</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name> <init>= <expr><name>job</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>queryId</name> <init>= <expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>refId</name> <init>= <expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" begin to free sch job, refId:0x%"</literal> <name>PRIx64</name> <literal type="string">", pointer:%p"</literal></expr></argument>, <argument><expr><name>queryId</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schDropJobAllTasks</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfLevels</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfLevels</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchLevel</name> <modifier>*</modifier></type><name>pLevel</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTasks</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>subTasks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfTasks</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>subTasks</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>schFreeTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pLevel</name><operator>-&gt;</operator><name>subTasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>schFreeFlowCtrl</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>execTasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  taosHashCleanup(pJob-&gt;failTasks);</comment>
  <comment type="line">//  taosHashCleanup(pJob-&gt;succTasks);</comment>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>nodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>dataSrcTasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qExplainFreeCtx</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>explainCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyQueryExecRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>execRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pDag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesReleaseAllocatorWeakRef</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>allocatorRefId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>execRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>fetchRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>jobNum</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>jobNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>jobNum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schCloseJobRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" sch job freed, refId:0x%"</literal> <name>PRIx64</name> <literal type="string">", pointer:%p"</literal></expr></argument>, <argument><expr><name>queryId</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schJobFetchRows</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pJob</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>explainMode</name></name> <operator>==</operator> <name>EXPLAIN_MODE_STATIC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchFetchTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>schChkCurrentOp</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_FETCH</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"sync wait for rsp now, job status:%s"</literal></expr></argument>, <argument><expr><call><name>SCH_GET_JOB_STATUS_STR</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schDumpJobFetchRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>fetchRes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>schChkCurrentOp</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_FETCH</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><call><name>schDumpJobFetchRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>fetchRes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>schPostJobRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>SCH_OP_FETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schInitJob</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pJobId</name></decl></parameter>, <parameter><decl><type><name>SSchedulerReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>refId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchJob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" calloc %d failed"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDag</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SSchJob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>explainMode</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>pDag</name><operator>-&gt;</operator><name>explainInfo</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>localExec</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>localReq</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <operator>*</operator><name><name>pReq</name><operator>-&gt;</operator><name>pConn</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>sql</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>pDag</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>pDag</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>allocatorRefId</name></name> <operator>=</operator> <call><name>nodesMakeAllocatorWeakRef</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>allocatorRefId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>chkKillFp</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>chkKillFp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>chkKillParam</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>chkKillParam</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>execFp</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>execFp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>cbParam</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>cbParam</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>pNodeList</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" input exec nodeList is empty"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDag</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>nodeList</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>taskList</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                                <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>taskList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d taskList failed"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schValidateAndBuildJob</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDag</name></name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SCH_IS_EXPLAIN_JOB</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>qExecExplainBegin</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDag</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>explainCtx</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>startTs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>execTasks</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                                 <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>execTasks</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d execTasks failed"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosAddRef job failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>schMgmt</name><operator>.</operator><name>jobNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pJobId</name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job refId:0x%"</literal> <name>PRIx64</name> <literal type="string">" created"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schFreeJobImpl</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name><name>schMgmt</name><operator>.</operator><name>jobRef</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schExecJob</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchedulerReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" sch job refId 0x%"</literal> <name>PRIx64</name> <literal type="string">" started"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDag</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><call><name>schLaunchJob</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>syncReq</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"sync wait for rsp now, job status:%s"</literal></expr></argument>, <argument><expr><call><name>SCH_GET_JOB_STATUS_STR</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job exec done, job status:%s, jobId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><call><name>SCH_GET_JOB_STATUS_STR</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schDirectPostJobRes</name><parameter_list>(<parameter><decl><type><name>SSchedulerReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pReq</name> <operator>||</operator> <name><name>pReq</name><operator>-&gt;</operator><name>syncReq</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>execFp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pReq</name><operator>-&gt;</operator><name>execFp</name></name>)<argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>cbParam</name></name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>fetchFp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pReq</name><operator>-&gt;</operator><name>fetchFp</name></name>)<argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>cbParam</name></name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>schChkCurrentOp</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>r</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sync</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>op</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>syncReq</name></name> <operator>==</operator> <name>sync</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>op</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schProcessOnOpEnd</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SCH_OP_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SSchedulerReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>op</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SCH_OP_EXEC</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>&amp;&amp;</operator> <name><name>pReq</name><operator>-&gt;</operator><name>syncReq</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>SCH_OP_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>SCH_OP_NULL</name> <operator>==</operator> <name>op</name> <operator>||</operator> <name>op</name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"job not in %s operation, op:%s, status:%s"</literal></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>schDumpJobExecRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pExecRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SCH_OP_FETCH</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>&amp;&amp;</operator> <name><name>pReq</name><operator>-&gt;</operator><name>syncReq</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>SCH_OP_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>SCH_OP_NULL</name> <operator>==</operator> <name>op</name> <operator>||</operator> <name>op</name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"job not in %s operation, op:%s, status:%s"</literal></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SCH_OP_GET_STATUS</name></expr>:</case>
      <expr_stmt><expr><name>errCode</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>errCode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schHandleJobFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job end %s operation with code %s"</literal></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessOnOpBegin</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SCH_OP_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SSchedulerReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>status</name> <init>= <expr><call><name>SCH_GET_JOB_STATUS</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SCH_OP_EXEC</name></expr>:</case>
      <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>SCH_OP_NULL</name> <operator>!=</operator> <call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name></expr></argument>, <argument><expr><name>SCH_OP_NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"job already in %s operation"</literal></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>schDirectPostJobRes</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job start %s operation"</literal></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>syncReq</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>syncReq</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SCH_OP_FETCH</name></expr>:</case>
      <expr_stmt><expr><call><name>SCH_LOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>SCH_OP_NULL</name> <operator>!=</operator> <call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name></expr></argument>, <argument><expr><name>SCH_OP_NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"job already in %s operation"</literal></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>schDirectPostJobRes</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCH_JOB_DLOG</name><argument_list>(<argument><expr><literal type="string">"job start %s operation"</literal></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>fetchRes</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>pFetchRes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>fetchFp</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>fetchFp</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>userRes</name><operator>.</operator><name>cbParam</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>cbParam</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>syncReq</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>syncReq</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_UNLOCK</name><argument_list>(<argument><expr><name>SCH_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>opStatus</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCH_JOB_NEED_FETCH</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"no need to fetch data, status:%s"</literal></expr></argument>, <argument><expr><call><name>SCH_GET_JOB_STATUS_STR</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>JOB_TASK_STATUS_PART_SUCC</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"job status error for fetch, status:%s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    <case>case <expr><name>SCH_OP_GET_STATUS</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>status</name></name> <operator>&lt;</operator> <name>JOB_TASK_STATUS_INIT</name> <operator>||</operator> <name><name>pJob</name><operator>-&gt;</operator><name>levelNum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>levels</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"job not initialized or not executable job, refId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"unknown operation type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><call><name>schJobNeedToStop</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_JOB_ELOG</name><argument_list>(<argument><expr><literal type="string">"abort op %s cause of job need to stop, status:%s"</literal></expr></argument>, <argument><expr><call><name>schGetOpStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schProcessOnCbEnd</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier></type><name>pJob</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>errCode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schHandleJobFailure</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>errCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schReleaseJob</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>schProcessOnCbBegin</name><parameter_list>(<parameter><decl><type><name>SSchJob</name> <modifier>*</modifier><modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>SSchTask</name> <modifier>*</modifier><modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>qId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>rId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>tId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSchTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchJob</name>  <modifier>*</modifier></type><name>pJob</name> <init>= <expr><call><name>schAcquireJob</name><argument_list>(<argument><expr><name>rId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qWarn</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">",TID:0x%"</literal> <name>PRIx64</name> <literal type="string">"job no exist, may be dropped, refId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>rId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_JOB_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>schJobNeedToStop</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"will not do further processing cause of job status %s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_SCH_IGNORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_ERR_JRET</name><argument_list>(<argument><expr><call><name>schGetTaskInJob</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCH_LOCK_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>job</name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>task</name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCH_UNLOCK_TASK</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schReleaseJob</name><argument_list>(<argument><expr><name>rId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCH_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
