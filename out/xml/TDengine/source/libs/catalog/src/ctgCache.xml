<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/catalog/src/ctgCache.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalogInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>SCtgOperation</name></type> <name><name>gCtgCacheOperation</name><index>[<expr><name>CTG_OP_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><name>CTG_OP_UPDATE_VGROUP</name></expr>, <expr><literal type="string">"update vgInfo"</literal></expr>, <expr><name>ctgOpUpdateVgroup</name></expr>}</block></expr>,
                                                <expr><block>{<expr><name>CTG_OP_UPDATE_TB_META</name></expr>, <expr><literal type="string">"update tbMeta"</literal></expr>, <expr><name>ctgOpUpdateTbMeta</name></expr>}</block></expr>,
                                                <expr><block>{<expr><name>CTG_OP_DROP_DB_CACHE</name></expr>, <expr><literal type="string">"drop DB"</literal></expr>, <expr><name>ctgOpDropDbCache</name></expr>}</block></expr>,
                                                <expr><block>{<expr><name>CTG_OP_DROP_DB_VGROUP</name></expr>, <expr><literal type="string">"drop DBVgroup"</literal></expr>, <expr><name>ctgOpDropDbVgroup</name></expr>}</block></expr>,
                                                <expr><block>{<expr><name>CTG_OP_DROP_STB_META</name></expr>, <expr><literal type="string">"drop stbMeta"</literal></expr>, <expr><name>ctgOpDropStbMeta</name></expr>}</block></expr>,
                                                <expr><block>{<expr><name>CTG_OP_DROP_TB_META</name></expr>, <expr><literal type="string">"drop tbMeta"</literal></expr>, <expr><name>ctgOpDropTbMeta</name></expr>}</block></expr>,
                                                <expr><block>{<expr><name>CTG_OP_UPDATE_USER</name></expr>, <expr><literal type="string">"update user"</literal></expr>, <expr><name>ctgOpUpdateUser</name></expr>}</block></expr>,
                                                <expr><block>{<expr><name>CTG_OP_UPDATE_VG_EPSET</name></expr>, <expr><literal type="string">"update epset"</literal></expr>, <expr><name>ctgOpUpdateEpset</name></expr>}</block></expr>,
                                                <expr><block>{<expr><name>CTG_OP_UPDATE_TB_INDEX</name></expr>, <expr><literal type="string">"update tbIndex"</literal></expr>, <expr><name>ctgOpUpdateTbIndex</name></expr>}</block></expr>,
                                                <expr><block>{<expr><name>CTG_OP_DROP_TB_INDEX</name></expr>, <expr><literal type="string">"drop tbIndex"</literal></expr>, <expr><name>ctgOpDropTbIndex</name></expr>}</block></expr>,
                                                <expr><block>{<expr><name>CTG_OP_CLEAR_CACHE</name></expr>, <expr><literal type="string">"clear cache"</literal></expr>, <expr><name>ctgOpClearCache</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>ctgRLockVgInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>inCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dbCache</name><operator>-&gt;</operator><name>deleted</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db is dropping, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>inCache</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>inCache</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db vgInfo is empty, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>inCache</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgWLockVgInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dbCache</name><operator>-&gt;</operator><name>deleted</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db is dropping, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_DB_DROPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgRUnlockVgInfo</name><parameter_list>(<parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgWUnlockVgInfo</name><parameter_list>(<parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgReleaseDBCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>dbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAcquireDBCacheImpl</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>acquire</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dbFName</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>acquire</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dbCache</name> <operator>=</operator> <operator>(</operator><name>SCtgDBCache</name> <operator>*</operator><operator>)</operator><call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>dbCache</name> <operator>=</operator> <operator>(</operator><name>SCtgDBCache</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pCache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>acquire</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>dbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dbCache</name><operator>-&gt;</operator><name>deleted</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>acquire</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>pCache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db is removing from cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pCache</name> <operator>=</operator> <name>dbCache</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAcquireDBCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireDBCacheImpl</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetDBCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireDBCacheImpl</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgReleaseVgInfoToCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ctgRUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgReleaseTbMetaToCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>, <parameter><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>&amp;&amp;</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgReleaseTbIndexToCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>, <parameter><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>indexLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgReleaseVgMetaToCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>, <parameter><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>&amp;&amp;</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgRUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAcquireVgInfoFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgAcquireDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db %s not in cache"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>inCache</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgRLockVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"vgInfo of db %s not in cache"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pCache</name> <operator>=</operator> <name>dbCache</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfVgHit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got db vgInfo from cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pCache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfVgMiss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAcquireTbMetaFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SCtgTbCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgAcquireDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db %s not in cache"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pCache</name> <operator>=</operator> <call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s meta not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pDb</name> <operator>=</operator> <name>dbCache</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pTb</name> <operator>=</operator> <name>pCache</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s meta got in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfMetaHit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfMetaMiss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAcquireVgMetaFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SCtgTbCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>tbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>vgInCache</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ctgAcquireDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db %s not in cache"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfVgMiss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ctgRLockVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vgInCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"vgInfo of db %s not in cache"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfVgMiss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pDb</name> <operator>=</operator> <name>dbCache</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfVgHit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got db vgInfo from cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tbCache</name> <operator>=</operator> <call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfMetaMiss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tbCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>tbCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s meta not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfMetaMiss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pTb</name> <operator>=</operator> <name>tbCache</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s meta got in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfMetaHit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tbCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>vgInCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgRUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pDb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pTb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
int32_t ctgAcquireStbMetaFromCache(SCatalog *pCtg, char *dbFName, uint64_t suid, SCtgDBCache **pDb, SCtgTbCache **pTb) {
  SCtgDBCache *dbCache = NULL;
  SCtgTbCache *pCache = NULL;
  ctgAcquireDBCache(pCtg, dbFName, &amp;dbCache);
  if (NULL == dbCache) {
    ctgDebug("db %s not in cache", dbFName);
    goto _return;
  }

  char *stName = taosHashAcquire(dbCache-&gt;stbCache, &amp;suid, sizeof(suid));
  if (NULL == stName) {
    ctgDebug("stb 0x%" PRIx64 " not in cache, dbFName:%s", suid, dbFName);
    goto _return;
  }

  pCache = taosHashAcquire(dbCache-&gt;tbCache, stName, strlen(stName));
  if (NULL == pCache) {
    ctgDebug("stb 0x%" PRIx64 " name %s not in cache, dbFName:%s", suid, stName, dbFName);
    taosHashRelease(dbCache-&gt;stbCache, stName);
    goto _return;
  }

  taosHashRelease(dbCache-&gt;stbCache, stName);

  CTG_LOCK(CTG_READ, &amp;pCache-&gt;metaLock);
  if (NULL == pCache-&gt;pMeta) {
    ctgDebug("stb 0x%" PRIx64 " meta not in cache, dbFName:%s", suid, dbFName);
    goto _return;
  }

  *pDb = dbCache;
  *pTb = pCache;

  ctgDebug("stb 0x%" PRIx64 " meta got in cache, dbFName:%s", suid, dbFName);

  CTG_CACHE_STAT_INC(numOfMetaHit, 1);

  return TSDB_CODE_SUCCESS;

_return:

  ctgReleaseTbMetaToCache(pCtg, dbCache, pCache);

  CTG_CACHE_STAT_INC(numOfMetaMiss, 1);

  *pDb = NULL;
  *pTb = NULL;

  return TSDB_CODE_SUCCESS;
}
*/</comment>

<function><type><name>int32_t</name></type> <name>ctgAcquireStbMetaFromCache</name><parameter_list>(<parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>, <parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SCtgTbCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stName</name> <init>= <expr><call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>stName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb 0x%"</literal> <name>PRIx64</name> <literal type="string">" not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pCache</name> <operator>=</operator> <call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>stName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>stName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb 0x%"</literal> <name>PRIx64</name> <literal type="string">" name %s not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>stName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><name>stName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><name>stName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb 0x%"</literal> <name>PRIx64</name> <literal type="string">" meta not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pTb</name> <operator>=</operator> <name>pCache</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb 0x%"</literal> <name>PRIx64</name> <literal type="string">" meta got in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfMetaHit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfMetaMiss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pTb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAcquireTbIndexFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SCtgTbCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgAcquireDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db %s not in cache"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pCache</name> <operator>=</operator> <call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>indexLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s index not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pDb</name> <operator>=</operator> <name>dbCache</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pTb</name> <operator>=</operator> <name>pCache</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s index got in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfIndexHit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgReleaseTbIndexToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfIndexMiss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgTbMetaExistInCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>exist</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>tbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgAcquireTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>exist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>exist</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgCopyTbMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgTbMetaCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SCtgTbCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTb</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTableMeta</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><operator>*</operator><name>pDb</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>tbCache</name> <init>= <expr><operator>*</operator><name>pTb</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>tbMeta</name> <init>= <expr><name><name>tbCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>inCache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>dbId</name></name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>tbMeta</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>tbType</name></name> <operator>=</operator> <name><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>metaSize</name> <init>= <expr><call><name>CTG_META_SIZE</name><argument_list>(<argument><expr><name>tbMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pTableMeta</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pTableMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>pTableMeta</name></expr></argument>, <argument><expr><name>tbMeta</name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got tb %s meta from cache, type:%d, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// PROCESS FOR CHILD TABLE</comment>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>metaSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCTableMeta</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pTableMeta</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pTableMeta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>pTableMeta</name></expr></argument>, <argument><expr><name>tbMeta</name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//ctgReleaseTbMetaToCache(pCtg, dbCache, tbCache);</comment>

  <if_stmt><if>if <condition>(<expr><name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tbCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pTb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got ctb %s meta from cache, will continue to get its stb meta, type:%d, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>,
           <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>tbType</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgAcquireStbMetaFromCache</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pDb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb 0x%"</literal> <name>PRIx64</name> <literal type="string">" meta not in cache"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pTb</name> <operator>=</operator> <name>tbCache</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>stbMeta</name> <init>= <expr><name><name>tbCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stbMeta</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"stb suid 0x%"</literal> <name>PRIx64</name> <literal type="string">" in stbCache mis-match, expected suid 0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>stbMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>metaSize</name> <operator>=</operator> <call><name>CTG_META_SIZE</name><argument_list>(<argument><expr><name>stbMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pTableMeta</name> <operator>=</operator> <call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><operator>*</operator><name>pTableMeta</name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pTableMeta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pTableMeta</name><operator>)</operator><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stbMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><name>metaSize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCTableMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>ctgReadTbMetaFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgTbMetaCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>tbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pTableMeta</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_IS_SYS_DB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>ctgAcquireTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgCopyTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCache</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got tb %s meta from cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pTableMeta</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgReadTbVerFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SName</name> <modifier>*</modifier></type><name>pTableName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>sver</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tver</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tbType</name></decl></parameter>,
                              <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>suid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>sver</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>tver</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>tbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgAcquireTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>tbMeta</name> <init>= <expr><name><name>tbCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>tbType</name> <operator>=</operator> <name><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>suid</name> <operator>=</operator> <name><name>tbMeta</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>tbType</name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>sver</name> <operator>=</operator> <name><name>tbMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>tver</name> <operator>=</operator> <name><name>tbMeta</name><operator>-&gt;</operator><name>tversion</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got tb %s ver from cache, dbFName:%s, tbType:%d, sver:%d, tver:%d, suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>,
             <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>*</operator><name>tbType</name></expr></argument>, <argument><expr><operator>*</operator><name>sver</name></expr></argument>, <argument><expr><operator>*</operator><name>tver</name></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// PROCESS FOR CHILD TABLE</comment>

  <comment type="line">//ctgReleaseTbMetaToCache(pCtg, dbCache, tbCache);</comment>
  <if_stmt><if>if <condition>(<expr><name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tbCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got ctb %s ver from cache, will continue to get its stb ver, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgAcquireStbMetaFromCache</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tbCache</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//ctgReleaseTbMetaToCache(pCtg, dbCache, tbCache);</comment>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb 0x%"</literal> <name>PRIx64</name> <literal type="string">" meta not in cache"</literal></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>stbMeta</name> <init>= <expr><name><name>tbCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stbMeta</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <operator>*</operator><name>suid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"stb suid 0x%"</literal> <name>PRIx64</name> <literal type="string">" in stbCache mis-match, expected suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>stbMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>nameLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>tbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nameLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>stbName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nameLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbName</name><index>[<expr><name>nameLen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>sver</name> <operator>=</operator> <name><name>stbMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>tver</name> <operator>=</operator> <name><name>stbMeta</name><operator>-&gt;</operator><name>tversion</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got tb %s sver %d tver %d from cache, type:%d, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><operator>*</operator><name>sver</name></expr></argument>, <argument><expr><operator>*</operator><name>tver</name></expr></argument>, <argument><expr><operator>*</operator><name>tbType</name></expr></argument>,
           <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgReadTbTypeFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tbType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>tbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>tbType</name> <operator>=</operator> <name><name>tbCache</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got tb %s tbType %d from cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><operator>*</operator><name>tbType</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgReadTbIndexFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SName</name> <modifier>*</modifier></type><name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>tbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgAcquireTbIndexFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseTbIndexToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgCloneTableIndex</name><argument_list>(<argument><expr><name><name>tbCache</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgReleaseTbIndexToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgChkAuthFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>AUTH_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>inCache</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>dbFName</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>inCache</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"sysdb %s, pass"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgUserAuth</name> <modifier>*</modifier></type><name>pUser</name> <init>= <expr><operator>(</operator><name>SCtgUserAuth</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pUser</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"user not in cache, user:%s"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>inCache</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got user from cache, user:%s"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfUserHit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pUser</name><operator>-&gt;</operator><name>superUser</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pUser</name><operator>-&gt;</operator><name>createdDbs</name></name> <operator>&amp;&amp;</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>createdDbs</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name> <operator>&amp;&amp;</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>AUTH_TYPE_READ</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name> <operator>&amp;&amp;</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>AUTH_TYPE_WRITE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><operator>*</operator><name>inCache</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfUserMiss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgDequeue</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier><modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgQNode</name> <modifier>*</modifier></type><name>orig</name> <init>= <expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCtgQNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_QUEUE_DEC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgQNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgQNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>node</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgQNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>  <name>syncOp</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>syncOp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opName</name> <init>= <expr><name><name>gCtgCacheOperation</name><index>[<expr><name><name>operation</name><operator>-&gt;</operator><name>opId</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>operation</name><operator>-&gt;</operator><name>syncOp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>operation</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>operation</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>qlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>stopQueue</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgFreeQNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>qlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>stopQueue</name></name> <operator>=</operator> <name><name>operation</name><operator>-&gt;</operator><name>stopQueue</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>qlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"action [%s] added into queue"</literal></expr></argument>, <argument><expr><name>opName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_QUEUE_INC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_RT_STAT_INC</name><argument_list>(<argument><expr><name>numOfOpEnqueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>reqSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>syncOp</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>operation</name><operator>-&gt;</operator><name>unLocked</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>operation</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>operation</name><operator>-&gt;</operator><name>unLocked</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDropDbCacheEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dbId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_DROP_DB_CACHE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgDropDBMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDropDBMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDropDBMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dbFName</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name>dbId</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDropDbVgroupEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_DROP_DB_VGROUP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name> <operator>=</operator> <name>syncOp</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgDropDbVgroupMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDropDbVgroupMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDropDbVgroupMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dbFName</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDropStbMetaEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dbId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>,
                              <parameter><decl><type><name>bool</name></type> <name>syncOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_DROP_STB_META</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name> <operator>=</operator> <name>syncOp</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgDropStbMetaMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDropStbMetaMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDropStbMetaMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name>dbId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDropTbMetaEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dbId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_DROP_TB_META</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name> <operator>=</operator> <name>syncOp</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgDropTblMetaMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDropTblMetaMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDropTblMetaMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name>dbId</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgUpdateVgroupEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dbId</name></decl></parameter>, <parameter><decl><type><name>SDBVgInfo</name> <modifier>*</modifier></type><name>dbInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_UPDATE_VGROUP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name> <operator>=</operator> <name>syncOp</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgUpdateVgMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUpdateVgMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUpdateVgMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name>dbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dbFName</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgMakeVgArray</name><argument_list>(<argument><expr><name>dbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name>dbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name>dbId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>dbInfo</name></name> <operator>=</operator> <name>dbInfo</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name>dbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgUpdateTbMetaEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>STableMetaOutput</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_UPDATE_TB_META</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name> <operator>=</operator> <name>syncOp</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgUpdateTbMetaMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUpdateTbMetaMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUpdateTbMetaMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>len</name> <operator>&gt;=</operator> <name>TSDB_DB_FNAME_LEN</name></expr> ?</condition><then> <expr><name>TSDB_DB_FNAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgUpdateVgEpsetEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_UPDATE_VG_EPSET</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgUpdateEpsetMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUpdateEpsetMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUpdateEpsetMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <operator>*</operator><name>pEpSet</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgUpdateUserEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SGetUserAuthRsp</name> <modifier>*</modifier></type><name>pAuth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_UPDATE_USER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name> <operator>=</operator> <name>syncOp</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgUpdateUserMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUpdateUserMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUpdateUserMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name></name> <operator>=</operator> <operator>*</operator><name>pAuth</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>tFreeSGetUserAuthRsp</name><argument_list>(<argument><expr><name>pAuth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgUpdateTbIndexEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>STableIndex</name> <modifier>*</modifier><modifier>*</modifier></type><name>pIndex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_UPDATE_TB_INDEX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name> <operator>=</operator> <name>syncOp</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgUpdateTbIndexMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUpdateTbIndexMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUpdateTbIndexMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pIndex</name></name> <operator>=</operator> <operator>*</operator><name>pIndex</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pIndex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pIndex</name><operator>)</operator><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDropTbIndexEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SName</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_DROP_TB_INDEX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name> <operator>=</operator> <name>syncOp</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgDropTbIndexMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDropTbIndexMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDropTbIndexMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgClearCacheEnqueue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>freeCtg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>stopQueue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgCacheOperation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name> <operator>=</operator> <name>CTG_OP_CLEAR_CACHE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name> <operator>=</operator> <name>syncOp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stopQueue</name></name> <operator>=</operator> <name>stopQueue</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>unLocked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgClearCacheMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgClearCacheMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgClearCacheMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>freeCtg</name></name> <operator>=</operator> <name>freeCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgMetaRentInit</name><parameter_list>(<parameter><decl><type><name>SCtgRentMgmt</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rentSec</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>slotRIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>slotNum</name></name> <operator>=</operator> <name>rentSec</name> <operator>/</operator> <name>CTG_RENT_SLOT_SECOND</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>msgSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgRentSlot</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>slotNum</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>slots</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>slots</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"meta rent initialized, type:%d, slotNum:%d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>slotNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgMetaRentAdd</name><parameter_list>(<parameter><decl><type><name>SCtgRentMgmt</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>widx</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>id</name> <operator>%</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>slotNum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCtgRentSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>widx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>CTG_DEFAULT_RENT_SLOT_SIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d failed, id:0x%"</literal> <name>PRIx64</name> <literal type="string">", slot idx:%d, type:%d"</literal></expr></argument>, <argument><expr><name>CTG_DEFAULT_RENT_SLOT_SIZE</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>widx</name></expr></argument>,
             <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosArrayPush meta to rent failed, id:0x%"</literal> <name>PRIx64</name> <literal type="string">", slot idx:%d, type:%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>needSort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"add meta to rent, id:0x%"</literal> <name>PRIx64</name> <literal type="string">", slot idx:%d, type:%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgMetaRentUpdate</name><parameter_list>(<parameter><decl><type><name>SCtgRentMgmt</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>sortCompare</name></decl></parameter>,
                          <parameter><decl><type><name>__compar_fn_t</name></type> <name>searchCompare</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>widx</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>id</name> <operator>%</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>slotNum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCtgRentSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>widx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty meta slot, id:0x%"</literal> <name>PRIx64</name> <literal type="string">", slot idx:%d, type:%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>needSort</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"meta slot before sorte, slot idx:%d, type:%d, size:%d"</literal></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
           <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><name>sortCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>needSort</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"meta slot sorted, slot idx:%d, type:%d, size:%d"</literal></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>orig</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>searchCompare</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>orig</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"meta not found in slot, id:0x%"</literal> <name>PRIx64</name> <literal type="string">", slot idx:%d, type:%d, size:%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
           <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"meta in rent updated, id:0x%"</literal> <name>PRIx64</name> <literal type="string">", slot idx:%d, type:%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"meta in rent update failed, will try to add it, code:%x, id:0x%"</literal> <name>PRIx64</name> <literal type="string">", slot idx:%d, type:%d"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
           <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgMetaRentAdd</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgMetaRentRemove</name><parameter_list>(<parameter><decl><type><name>SCtgRentMgmt</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>sortCompare</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>searchCompare</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>widx</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>id</name> <operator>%</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>slotNum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCtgRentSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>widx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"empty meta slot, id:0x%"</literal> <name>PRIx64</name> <literal type="string">", slot idx:%d, type:%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>needSort</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><name>sortCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>needSort</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"meta slot sorted, slot idx:%d, type:%d"</literal></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><call><name>taosArraySearchIdx</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>searchCompare</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"meta not found in slot, id:0x%"</literal> <name>PRIx64</name> <literal type="string">", slot idx:%d, type:%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"meta in rent removed, id:0x%"</literal> <name>PRIx64</name> <literal type="string">", slot idx:%d, type:%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>widx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgMetaRentGetImpl</name><parameter_list>(<parameter><decl><type><name>SCtgRentMgmt</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>ridx</name> <init>= <expr><call><name>atomic_add_fetch_16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>slotRIdx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ridx</name> <operator>&gt;=</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>slotNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ridx</name> <operator>%=</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>slotNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>slotRIdx</name></name></expr></argument>, <argument><expr><name>ridx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgRentSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>ridx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty meta in slot:%d, type:%d"</literal></expr></argument>, <argument><expr><name>ridx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>metaNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>metaNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"no meta in slot:%d, type:%d"</literal></expr></argument>, <argument><expr><name>ridx</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>msize</name> <init>= <expr><name>metaNum</name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>res</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>msize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>metaNum</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got %d meta from rent, type:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>metaNum</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgMetaRentGet</name><parameter_list>(<parameter><decl><type><name>SCtgRentMgmt</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>msec</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>lsec</name> <init>= <expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>lastReadMsec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>msec</name> <operator>-</operator> <name>lsec</name><operator>)</operator> <operator>&lt;</operator> <name>CTG_RENT_SLOT_SECOND</name> <operator>*</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"too short time period to get expired meta, type:%d"</literal></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>lsec</name> <operator>!=</operator> <call><name>atomic_val_compare_exchange_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>lastReadMsec</name></name></expr></argument>, <argument><expr><name>lsec</name></expr></argument>, <argument><expr><name>msec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <break>break;</break>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgMetaRentGetImpl</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAddNewDBCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>dbId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name></type> <name>newDBCache</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>newDBCache</name><operator>.</operator><name>dbId</name></name> <operator>=</operator> <name>dbId</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>newDBCache</name><operator>.</operator><name>tbCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxTblCacheNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>newDBCache</name><operator>.</operator><name>tbCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d metaCache failed"</literal></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxTblCacheNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>newDBCache</name><operator>.</operator><name>stbCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxTblCacheNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>newDBCache</name><operator>.</operator><name>stbCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d stbCache failed"</literal></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxTblCacheNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>newDBCache</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDBCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>HASH_NODE_EXIST</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db already in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut db to cache failed, dbFName:%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDbVgVersion</name></type> <name>vgVersion</name> <init>= <expr><block>{<expr><operator>.</operator><name>dbId</name> <operator>=</operator> <name><name>newDBCache</name><operator>.</operator><name>dbId</name></name></expr>, <expr><operator>.</operator><name>vgVersion</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>stateTs</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>vgVersion</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vgVersion</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db added to cache, dbFName:%s, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgMetaRentAdd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>dbRent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgVersion</name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbVgVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db added to rent, dbFName:%s, vgVersion:%d, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>vgVersion</name><operator>.</operator><name>vgVersion</name></name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgFreeDbCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newDBCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgRemoveStbRent</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>suid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>suid</name> <operator>=</operator> <call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator>
        <call><name>ctgMetaRentRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>stbRent</name></name></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>, <argument><expr><name>ctgStbVersionSortCompare</name></expr></argument>, <argument><expr><name>ctgStbVersionSearchCompare</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb removed from rent, suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgRemoveDBFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>dbId</name> <init>= <expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ctgInfo</name><argument_list>(<argument><expr><literal type="string">"start to remove db from cache, dbFName:%s, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>dbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>deleted</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgRemoveStbRent</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeDbCache</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>dbLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgMetaRentRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>dbRent</name></name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>, <argument><expr><name>ctgDbVgVersionSortCompare</name></expr></argument>, <argument><expr><name>ctgDbVgVersionSearchCompare</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db removed from rent, dbFName:%s, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgInfo</name><argument_list>(<argument><expr><literal type="string">"taosHashRemove from dbCache failed, may be removed, dbFName:%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_DB_DROPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_DEC</name><argument_list>(<argument><expr><name>numOfDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgInfo</name><argument_list>(<argument><expr><literal type="string">"db removed from cache, dbFName:%s, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetAddDBCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>dbId</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgGetDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO OPEN IT</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>    
    if (dbCache-&gt;dbId == dbId) {
      *pCache = dbCache;
      return TSDB_CODE_SUCCESS;
    }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>dbId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pCache</name> <operator>=</operator> <name>dbCache</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dbId</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name>dbId</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pCache</name> <operator>=</operator> <name>dbCache</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name> <operator>==</operator> <name>dbId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pCache</name> <operator>=</operator> <name>dbCache</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgRemoveDBFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAddNewDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgGetDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pCache</name> <operator>=</operator> <name>dbCache</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgUpdateRentStbVersion</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>dbId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>,
                                <parameter><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSTableVersion</name></type> <name>metaRent</name> <init>= <expr><block>{<expr><operator>.</operator><name>dbId</name> <operator>=</operator> <name>dbId</name></expr>, <expr><operator>.</operator><name>suid</name> <operator>=</operator> <name>suid</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>metaRent</name><operator>.</operator><name>sversion</name></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>metaRent</name><operator>.</operator><name>tversion</name></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tversion</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>metaRent</name><operator>.</operator><name>smaVer</name></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>metaRent</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>metaRent</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>metaRent</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>metaRent</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgMetaRentUpdate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>stbRent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRent</name></expr></argument>, <argument><expr><name><name>metaRent</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSTableVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                <argument><expr><name>ctgStbVersionSortCompare</name></expr></argument>, <argument><expr><name>ctgStbVersionSearchCompare</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db %s,0x%"</literal> <name>PRIx64</name> <literal type="string">" stb %s,0x%"</literal> <name>PRIx64</name> <literal type="string">" sver %d tver %d smaVer %d updated to stbRent"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>,
           <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name><name>metaRent</name><operator>.</operator><name>sversion</name></name></expr></argument>, <argument><expr><name><name>metaRent</name><operator>.</operator><name>tversion</name></name></expr></argument>, <argument><expr><name><name>metaRent</name><operator>.</operator><name>smaVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgWriteTbMetaToCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>dbId</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>,
                              <parameter><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>metaSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"db is dropping, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_DB_DROPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>         <name>isStb</name> <init>= <expr><name><name>meta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pCache</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name>  <modifier>*</modifier></type><name>orig</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>pCache</name></expr> ?</condition><then> <expr><name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>       <name>origType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>orig</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>origType</name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>origType</name> <operator>==</operator> <name><name>meta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>&amp;&amp;</operator> <name><name>orig</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>meta</name><operator>-&gt;</operator><name>uid</name></name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>origType</name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name> <operator>||</operator> <operator>(</operator><name><name>orig</name><operator>-&gt;</operator><name>sversion</name></name> <operator>&gt;=</operator> <name><name>meta</name><operator>-&gt;</operator><name>sversion</name></name> <operator>&amp;&amp;</operator> <name><name>orig</name><operator>-&gt;</operator><name>tversion</name></name> <operator>&gt;=</operator> <name><name>meta</name><operator>-&gt;</operator><name>tversion</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"ignore table %s meta update"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>origType</name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>orig</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>orig</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"stb not exist in stbCache, dbFName:%s, stb:%s, suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>orig</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>CTG_CACHE_STAT_DEC</name><argument_list>(<argument><expr><name>numOfStb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb removed from stbCache, dbFName:%s, stb:%s, suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>orig</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCache</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgTbCache</name></type> <name>cache</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cache</name><operator>.</operator><name>pMeta</name></name> <operator>=</operator> <name>meta</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgTbCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut new tbCache failed, dbFName:%s, tbName:%s, tbType:%d"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pCache</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>meta</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>orig</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfTbl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tbmeta updated to cache, dbFName:%s, tbName:%s, tbType:%d"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgdShowTableMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isStb</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut to stable cache failed, suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfStb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb 0x%"</literal> <name>PRIx64</name> <literal type="string">" updated to cache, dbFName:%s, tbName:%s, tbType:%d"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>,
           <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateRentStbVersion</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgWriteTbIndexToCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>STableIndex</name> <modifier>*</modifier><modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgFreeSTableIndex</name><argument_list>(<argument><expr><operator>*</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"db is dropping, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_DB_DROPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableIndex</name> <modifier>*</modifier></type><name>pIndex</name> <init>= <expr><operator>*</operator><name>index</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>     <name>suid</name> <init>= <expr><name><name>pIndex</name><operator>-&gt;</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pCache</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCache</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgTbCache</name></type> <name>cache</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cache</name><operator>.</operator><name>pIndex</name></name> <operator>=</operator> <name>pIndex</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgFreeSTableIndex</name><argument_list>(<argument><expr><operator>*</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut new tbCache failed, tbName:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"table %s index updated to cache, ver:%d, num:%d"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
             <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>suid</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateRentStbVersion</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>indexLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>suid</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name></name> <operator>=</operator> <name>pIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>indexLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"table %s index updated to cache, ver:%d, num:%d"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
           <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>suid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateRentStbVersion</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgUpdateTbMetaToCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>STableMetaOutput</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMetaOutput</name> <modifier>*</modifier></type><name>pOutput</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgCloneMetaOutput</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgUpdateTbMetaEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>syncReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pOutput</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgFreeSTableMetaOutput</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgClearAllInstance</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pCtg</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SCatalog</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pCtg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgClearHandle</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeAllInstance</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pCtg</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SCatalog</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pCtg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgFreeHandle</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgVgInfoIdComp</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier><modifier>*</modifier></type> <name>lp</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier><modifier>*</modifier></type> <name>rp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>    <name>key</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>lp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><operator>(</operator><name>SVgroupInfo</name><operator>*</operator><operator>)</operator><name>rp</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>&lt;</operator> <name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>key</name> <operator>&gt;</operator> <name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>ctgOpUpdateVgroup</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgUpdateVgMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDBVgInfo</name>       <modifier>*</modifier></type><name>dbInfo</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>dbInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>dbFName</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>        <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgVersion</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid db vgInfo, dbFName:%s, vgHash:%p, vgVersion:%d, vgHashSize:%d"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>,
             <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgVersion</name></name></expr></argument>, <argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>         <name>newAdded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbVgVersion</name></type> <name>vgVersion</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>dbId</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name></expr>, <expr><operator>.</operator><name>vgVersion</name> <operator>=</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>, <expr><operator>.</operator><name>numOfTable</name> <operator>=</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>numOfTable</name></name></expr>, <expr><operator>.</operator><name>stateTs</name> <operator>=</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>stateTs</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetAddDBCache</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgInfo</name><argument_list>(<argument><expr><literal type="string">"conflict db update, ignore this update, dbFName:%s, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgVgCache</name> <modifier>*</modifier></type><name>vgCache</name> <init>= <expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgWLockVgInfo</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>vgCache</name><operator>-&gt;</operator><name>vgInfo</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDBVgInfo</name> <modifier>*</modifier></type><name>vgInfo</name> <init>= <expr><name><name>vgCache</name><operator>-&gt;</operator><name>vgInfo</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgVersion</name></name> <operator>&lt;</operator> <name><name>vgInfo</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db updateVgroup is ignored, dbFName:%s, vgVer:%d, curVer:%d"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgVersion</name></name></expr></argument>,
               <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctgWUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgVersion</name></name> <operator>==</operator> <name><name>vgInfo</name><operator>-&gt;</operator><name>vgVersion</name></name> <operator>&amp;&amp;</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>numOfTable</name></name> <operator>==</operator> <name><name>vgInfo</name><operator>-&gt;</operator><name>numOfTable</name></name> <operator>&amp;&amp;</operator>
        <name><name>dbInfo</name><operator>-&gt;</operator><name>stateTs</name></name> <operator>==</operator> <name><name>vgInfo</name><operator>-&gt;</operator><name>stateTs</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"no new db vgroup update info, dbFName:%s, vgVer:%d, numOfTable:%d, stateTs:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>,
               <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgVersion</name></name></expr></argument>, <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>numOfTable</name></name></expr></argument>, <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>stateTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctgWUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>vgCache</name><operator>-&gt;</operator><name>vgInfo</name></name> <operator>=</operator> <name>dbInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>dbInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db vgInfo updated, dbFName:%s, vgVer:%d, stateTs:%"</literal> <name>PRId64</name> <literal type="string">", dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>,
           <argument><expr><name><name>vgVersion</name><operator>.</operator><name>vgVersion</name></name></expr></argument>, <argument><expr><name><name>vgVersion</name><operator>.</operator><name>stateTs</name></name></expr></argument>, <argument><expr><name><name>vgVersion</name><operator>.</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgWUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>dbCache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">//if (!IS_SYS_DBNAME(dbFName)) {</comment>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>vgVersion</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vgVersion</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgMetaRentUpdate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name><operator>-&gt;</operator><name>dbRent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgVersion</name></expr></argument>, <argument><expr><name><name>vgVersion</name><operator>.</operator><name>dbId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbVgVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                   <argument><expr><name>ctgDbVgVersionSortCompare</name></expr></argument>, <argument><expr><name>ctgDbVgVersionSearchCompare</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//}</comment>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgOpDropDbCache</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDropDBMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>      <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgGetDBCache</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name> <operator>&amp;&amp;</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name> <operator>!=</operator> <name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgInfo</name><argument_list>(<argument><expr><literal type="string">"dbId already updated, dbFName:%s, dbId:0x%"</literal> <name>PRIx64</name> <literal type="string">", targetId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>,
            <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgRemoveDBFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgOpDropDbVgroup</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDropDbVgroupMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>            <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgGetDBCache</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgWLockVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db vgInfo removed, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgWUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgOpUpdateTbMeta</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgUpdateTbMetaMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>            <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMetaOutput</name>    <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name>         <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>CTG_IS_META_CTABLE</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tbMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"no valid tbmeta got from meta rsp, dbFName:%s, tbName:%s"</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_BOTH</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>TSDB_SUPER_TABLE</name> <operator>!=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"table type error, expected:%d, actual:%d"</literal></expr></argument>, <argument><expr><name>TSDB_SUPER_TABLE</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetAddDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgInfo</name><argument_list>(<argument><expr><literal type="string">"conflict db update, ignore this update, dbFName:%s, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_TABLE</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CTG_IS_META_BOTH</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>metaSize</name> <init>= <expr><call><name>CTG_META_SIZE</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgWriteTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tbMeta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_CTABLE</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CTG_IS_META_BOTH</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCTableMeta</name> <modifier>*</modifier></type><name>ctbMeta</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCTableMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ctbMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ctbMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>ctbMeta</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCTableMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgWriteTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>ctbName</name></name></expr></argument>,
                                       <argument><expr><operator>(</operator><name>STableMeta</name> <operator>*</operator><operator>)</operator><name>ctbMeta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCTableMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgOpDropStbMeta</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDropStbMetaMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>           <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgGetDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name> <operator>!=</operator> <name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"dbId already modified, dbFName:%s, current:0x%"</literal> <name>PRIx64</name> <literal type="string">", dbId:0x%"</literal> <name>PRIx64</name> <literal type="string">", stb:%s, suid:0x%"</literal> <name>PRIx64</name></expr></argument>,
             <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb not exist in stbCache, may be removed, dbFName:%s, stb:%s, suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>,
             <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_CACHE_STAT_DEC</name><argument_list>(<argument><expr><name>numOfStb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pTbCache</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb %s already not in cache"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeTbCacheImpl</name><argument_list>(<argument><expr><name>pTbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"stb not exist in cache, dbFName:%s, stb:%s, suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_CACHE_STAT_DEC</name><argument_list>(<argument><expr><name>numOfTbl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>ctgInfo</name><argument_list>(<argument><expr><literal type="string">"stb removed from cache, dbFName:%s, stbName:%s, suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgMetaRentRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name><operator>-&gt;</operator><name>stbRent</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>ctgStbVersionSortCompare</name></expr></argument>, <argument><expr><name>ctgStbVersionSearchCompare</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb removed from rent, dbFName:%s, stbName:%s, suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgOpDropTbMeta</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDropTblMetaMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>           <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgGetDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name> <operator>!=</operator> <name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"dbId 0x%"</literal> <name>PRIx64</name> <literal type="string">" not match with curId 0x%"</literal> <name>PRIx64</name> <literal type="string">", dbFName:%s, tbName:%s"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>,
             <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pTbCache</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s already not in cache"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeTbCacheImpl</name><argument_list>(<argument><expr><name>pTbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"tb %s not exist in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_CACHE_STAT_DEC</name><argument_list>(<argument><expr><name>numOfTbl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"table %s removed from cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgOpUpdateUser</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgUpdateUserMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>          <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgUserAuth</name> <modifier>*</modifier></type><name>pUser</name> <init>= <expr><operator>(</operator><name>SCtgUserAuth</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pUser</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgUserAuth</name></type> <name>userAuth</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>userAuth</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>userAuth</name><operator>.</operator><name>superUser</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>superAuth</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>userAuth</name><operator>.</operator><name>createdDbs</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>createdDbs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>userAuth</name><operator>.</operator><name>readDbs</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>readDbs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>userAuth</name><operator>.</operator><name>writeDbs</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>writeDbs</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>userAuth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>userAuth</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut user %s to cache failed"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>createdDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>createdDbs</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>createdDbs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>createdDbs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>readDbs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>readDbs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>writeDbs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>writeDbs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>createdDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgOpUpdateEpset</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgUpdateEpsetMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>           <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name>        <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db %s not exist, ignore epset update"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgWLockVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDBVgInfo</name> <modifier>*</modifier></type><name>vgInfo</name> <init>= <expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>vgInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"vgroup in db %s not cached, ignore epset update"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"no vgroup %d in db %s vgHash, ignore epset update"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name> <modifier>*</modifier></type><name>pInfo2</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ctgVgInfoIdComp</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pInfo2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"no vgroup %d in db %s vgArray, ignore epset update"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SEp</name> <modifier>*</modifier></type><name>pOrigEp</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEp</name> <modifier>*</modifier></type><name>pNewEp</name> <init>= <expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"vgroup %d epset updated from %d/%d=&gt;%s:%d to %d/%d=&gt;%s:%d, dbFName:%s in ctg"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pOrigEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pOrigEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>,
           <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pNewEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pNewEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo2</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgWUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgOpUpdateTbIndex</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgUpdateTbIndexMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>             <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableIndex</name>          <modifier>*</modifier></type><name>pIndex</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name>          <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetAddDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgWriteTbIndexToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>pIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgOpDropTbIndex</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDropTbIndexMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>           <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name>        <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableIndex</name> <modifier>*</modifier></type><name>pIndex</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIndex</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgWriteTbIndexToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>pIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgOpClearCache</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgClearCacheMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>operation</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>          <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCtg</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>freeCtg</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgFreeHandle</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ctgClearHandle</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>freeCtg</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgFreeAllInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ctgClearAllInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeCacheOperationData</name><parameter_list>(<parameter><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>op</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CTG_OP_UPDATE_VGROUP</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgUpdateVgMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_OP_UPDATE_TB_META</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgUpdateTbMetaMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_OP_DROP_DB_CACHE</name></expr>:</case>
    <case>case <expr><name>CTG_OP_DROP_DB_VGROUP</name></expr>:</case>
    <case>case <expr><name>CTG_OP_DROP_STB_META</name></expr>:</case>
    <case>case <expr><name>CTG_OP_DROP_TB_META</name></expr>:</case>
    <case>case <expr><name>CTG_OP_UPDATE_VG_EPSET</name></expr>:</case>
    <case>case <expr><name>CTG_OP_DROP_TB_INDEX</name></expr>:</case>
    <case>case <expr><name>CTG_OP_CLEAR_CACHE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_OP_UPDATE_USER</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgUpdateUserMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>createdDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>userAuth</name><operator>.</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_OP_UPDATE_TB_INDEX</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgUpdateTbIndexMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>pIndex</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid cache op id:%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgCleanupCacheQueue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgQNode</name>          <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgQNode</name>          <modifier>*</modifier></type><name>nodeNext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                <name>stopQueue</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>stopQueue</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SCtgUpdateMsgHeader</name> <operator>*</operator><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>pCtg</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"process [%s] operation"</literal></expr></argument>, <argument><expr><name><name>gCtgCacheOperation</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>gCtgCacheOperation</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>opId</name></name></expr>]</index></name><operator>.</operator><name>func</name><operator>)</operator><operator>(</operator><name>op</name><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>stopQueue</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CTG_RT_STAT_INC</name><argument_list>(<argument><expr><name>numOfOpDequeue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>ctgFreeCacheOperationData</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CTG_RT_STAT_INC</name><argument_list>(<argument><expr><name>numOfOpAbort</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>syncOp</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>nodeNext</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>node</name> <operator>=</operator> <name>nodeNext</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>stopQueue</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosUsleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>ctgUpdateThreadFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"catalog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"catalog update thread started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>reqSem</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"ctg tsem_wait failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>stopQueue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgCleanupCacheQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SCtgCacheOperation</name> <modifier>*</modifier></type><name>operation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ctgDequeue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SCtgUpdateMsgHeader</name> <operator>*</operator><operator>)</operator><name><name>operation</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>pCtg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"process [%s] operation"</literal></expr></argument>, <argument><expr><name><name>gCtgCacheOperation</name><index>[<expr><name><name>operation</name><operator>-&gt;</operator><name>opId</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>gCtgCacheOperation</name><index>[<expr><name><name>operation</name><operator>-&gt;</operator><name>opId</name></name></expr>]</index></name><operator>.</operator><name>func</name><operator>)</operator><operator>(</operator><name>operation</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>operation</name><operator>-&gt;</operator><name>syncOp</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>operation</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>CTG_RT_STAT_INC</name><argument_list>(<argument><expr><name>numOfOpDequeue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgdShowCacheInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"catalog update thread stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgStartUpdateThread</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thAttr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>updateThread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>ctgUpdateThreadFunc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbMetaFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgTbMetaCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_FLAG_SET_SYS_DB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgReadTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pTableMeta</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_MATCH_STB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pTableMeta</name><operator>)</operator><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><operator>!</operator><call><name>CTG_FLAG_IS_FORCE_UPDATE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>CTG_FLAG_IS_SYS_DB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pTableMeta</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_IS_UNKNOWN_STB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_FLAG_SET_STB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>tbType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t ctgGetTbMetaBFromCache(SCatalog* pCtg, SRequestConnInfo *pConn, SCtgTbMetasCtx* ctx, SArray** pResList) {
  int32_t tbNum = taosArrayGetSize(ctx-&gt;pNames);
  SName* fName = taosArrayGet(ctx-&gt;pNames, 0);
  int32_t fIdx = 0;
  
  for (int32_t i = 0; i &lt; tbNum; ++i) {
    SName* pName = taosArrayGet(ctx-&gt;pNames, i);
    SCtgTbMetaCtx nctx = {0};
    nctx.flag = CTG_FLAG_UNKNOWN_STB;
    nctx.pName = pName;
    
    if (IS_SYS_DBNAME(pName-&gt;dbname)) {
      CTG_FLAG_SET_SYS_DB(nctx.flag);
    }

    STableMeta *pTableMeta = NULL;
    CTG_ERR_RET(ctgReadTbMetaFromCache(pCtg, &amp;nctx, &amp;pTableMeta));
    SMetaRes res = {0};
    
    if (pTableMeta) {
      if (CTG_FLAG_MATCH_STB(nctx.flag, pTableMeta-&gt;tableType) &amp;&amp;
          ((!CTG_FLAG_IS_FORCE_UPDATE(nctx.flag)) || (CTG_FLAG_IS_SYS_DB(nctx.flag)))) {
        res.pRes = pTableMeta;
      } else {
        taosMemoryFreeClear(pTableMeta);
      }
    }

    if (NULL == res.pRes) {
      if (NULL == ctx-&gt;pFetchs) {
        ctx-&gt;pFetchs = taosArrayInit(tbNum, sizeof(SCtgFetch));
      }
      
      if (CTG_FLAG_IS_UNKNOWN_STB(nctx.flag)) {
        CTG_FLAG_SET_STB(nctx.flag, nctx.tbInfo.tbType);
      }

      SCtgFetch fetch = {0};
      fetch.tbIdx = i;
      fetch.fetchIdx = fIdx++;
      fetch.flag = nctx.flag;

      taosArrayPush(ctx-&gt;pFetchs, &amp;fetch);
    }
    
    taosArrayPush(ctx-&gt;pResList, &amp;res);
  }

  if (NULL == ctx-&gt;pFetchs) {
    TSWAP(*pResList, ctx-&gt;pResList);
  }

  return TSDB_CODE_SUCCESS;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>ctgGetTbMetasFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>, <parameter><decl><type><name>SCtgTbMetasCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dbIdx</name></decl></parameter>,
                               <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>fetchIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>baseResIdx</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>tbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name>      <modifier>*</modifier></type><name>pName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>flag</name> <init>= <expr><name>CTG_FLAG_UNKNOWN_STB</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>    <name>lastSuid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>lastTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_FLAG_SET_SYS_DB</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>pCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgAcquireDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db %s not in cache"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgAddFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name>dbIdx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fetchIdx</name></expr></argument>, <argument><expr><name>baseResIdx</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name> <modifier>*</modifier></type><name>pName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>pCache</name> <operator>=</operator> <call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCache</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctgAddFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name>dbIdx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fetchIdx</name></expr></argument>, <argument><expr><name>baseResIdx</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s meta not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctgAddFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name>dbIdx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fetchIdx</name></expr></argument>, <argument><expr><name>baseResIdx</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>tbMeta</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>nctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>nctx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nctx</name><operator>.</operator><name>tbInfo</name><operator>.</operator><name>inCache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nctx</name><operator>.</operator><name>tbInfo</name><operator>.</operator><name>dbId</name></name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nctx</name><operator>.</operator><name>tbInfo</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>tbMeta</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nctx</name><operator>.</operator><name>tbInfo</name><operator>.</operator><name>tbType</name></name> <operator>=</operator> <name><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SMetaRes</name></type>    <name>res</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>metaSize</name> <init>= <expr><call><name>CTG_META_SIZE</name><argument_list>(<argument><expr><name>tbMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pTableMeta</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTableMeta</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>tbMeta</name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got tb %s meta from cache, type:%d, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>res</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <name>pTableMeta</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// PROCESS FOR CHILD TABLE</comment>

    <if_stmt><if>if <condition>(<expr><name>lastSuid</name> <operator>&amp;&amp;</operator> <name><name>tbMeta</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name>lastSuid</name> <operator>&amp;&amp;</operator> <name>lastTableMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cloneTableMeta</name><argument_list>(<argument><expr><name>lastTableMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>tbMeta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCTableMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got tb %s meta from cache, type:%d, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>res</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <name>pTableMeta</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>metaSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCTableMeta</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pTableMeta</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTableMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>tbMeta</name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got ctb %s meta from cache, will continue to get its stb meta, type:%d, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>,
             <argument><expr><name><name>nctx</name><operator>.</operator><name>tbInfo</name><operator>.</operator><name>tbType</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stName</name> <init>= <expr><call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>stName</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb 0x%"</literal> <name>PRIx64</name> <literal type="string">" not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctgAddFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name>dbIdx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fetchIdx</name></expr></argument>, <argument><expr><name>baseResIdx</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pCache</name> <operator>=</operator> <call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>stName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>stName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCache</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb 0x%"</literal> <name>PRIx64</name> <literal type="string">" name %s not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>stName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><name>stName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ctgAddFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name>dbIdx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fetchIdx</name></expr></argument>, <argument><expr><name>baseResIdx</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>, <argument><expr><name>stName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb 0x%"</literal> <name>PRIx64</name> <literal type="string">" meta not in cache, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ctgAddFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name>dbIdx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fetchIdx</name></expr></argument>, <argument><expr><name>baseResIdx</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>stbMeta</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>stbMeta</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>nctx</name><operator>.</operator><name>tbInfo</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"stb suid 0x%"</literal> <name>PRIx64</name> <literal type="string">" in stbCache mis-match, expected suid 0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>stbMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>,
               <argument><expr><name><name>nctx</name><operator>.</operator><name>tbInfo</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ctgAddFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name>dbIdx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fetchIdx</name></expr></argument>, <argument><expr><name>baseResIdx</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>metaSize</name> <operator>=</operator> <call><name>CTG_META_SIZE</name><argument_list>(<argument><expr><name>stbMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTableMeta</name> <operator>=</operator> <call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTableMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgReleaseTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stbMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><name>metaSize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCTableMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>res</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <name>pTableMeta</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>lastSuid</name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastTableMeta</name> <operator>=</operator> <name>pTableMeta</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgRemoveTbMetaFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SName</name> <modifier>*</modifier></type><name>pTableName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name>   <modifier>*</modifier></type><name>tblMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>tbCtx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tbCtx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_UNKNOWN_STB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tbCtx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <name>pTableName</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgReadTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCtx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tblMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tblMeta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"table already not in cache, db:%s, tblName:%s"</literal></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>tblMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgDropStbMetaEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>tbCtx</name><operator>.</operator><name>tbInfo</name><operator>.</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>tblMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>syncReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgDropTbMetaEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>tbCtx</name><operator>.</operator><name>tbInfo</name><operator>.</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>syncReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>tblMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbHashVgroupFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name> <modifier>*</modifier></type><name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SVgroupInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"no valid vgInfo for db, dbname:%s"</literal></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pVgroup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pVgroup</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><operator>*</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
