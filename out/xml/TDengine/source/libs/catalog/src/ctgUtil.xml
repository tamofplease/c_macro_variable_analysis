<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/catalog/src/ctgUtil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalogInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ctgFreeMsgSendParam</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTaskCallbackParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><operator>(</operator><name>SCtgTaskCallbackParam</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeBatchMsg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SBatchMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><operator>(</operator><name>SBatchMsg</name><operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeBatch</name><parameter_list>(<parameter><decl><type><name>SCtgBatch</name><modifier>*</modifier></type> <name>pBatch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBatch</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>pMsgs</name></name></expr></argument>, <argument><expr><name>ctgFreeBatchMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>pTaskIds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeBatchs</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pBatchs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pBatchs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgBatch</name><modifier>*</modifier></type> <name>pBatch</name> <init>= <expr><operator>(</operator><name>SCtgBatch</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ctgFreeBatch</name><argument_list>(<argument><expr><name>pBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pBatchs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pBatchs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>ctgTaskTypeStr</name><parameter_list>(<parameter><decl><type><name>CTG_TASK_TYPE</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CTG_TASK_GET_QNODE</name></expr>:</case>
      <return>return <expr><literal type="string">"[get qnode list]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_DNODE</name></expr>:</case>
      <return>return <expr><literal type="string">"[get dnode list]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_DB_VGROUP</name></expr>:</case>
      <return>return <expr><literal type="string">"[get db vgroup]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_DB_CFG</name></expr>:</case>
      <return>return <expr><literal type="string">"[get db cfg]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_DB_INFO</name></expr>:</case>
      <return>return <expr><literal type="string">"[get db info]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_TB_META</name></expr>:</case>
      <return>return <expr><literal type="string">"[get table meta]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_TB_HASH</name></expr>:</case>
      <return>return <expr><literal type="string">"[get table hash]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_TB_INDEX</name></expr>:</case>
      <return>return <expr><literal type="string">"[get table index]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_TB_CFG</name></expr>:</case>
      <return>return <expr><literal type="string">"[get table cfg]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_INDEX</name></expr>:</case>
      <return>return <expr><literal type="string">"[get index]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_UDF</name></expr>:</case>
      <return>return <expr><literal type="string">"[get udf]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_USER</name></expr>:</case>
      <return>return <expr><literal type="string">"[get user]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_SVR_VER</name></expr>:</case>
      <return>return <expr><literal type="string">"[get svr ver]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_TB_META_BATCH</name></expr>:</case>
      <return>return <expr><literal type="string">"[bget table meta]"</literal></expr>;</return>
    <case>case <expr><name>CTG_TASK_GET_TB_HASH_BATCH</name></expr>:</case>
      <return>return <expr><literal type="string">"[bget table hash]"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeQNode</name><parameter_list>(<parameter><decl><type><name>SCtgQNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>node</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeSTableIndex</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>info</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableIndex</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>STableIndex</name><operator>*</operator><operator>)</operator><name>info</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeSMetaData</name><parameter_list>(<parameter><decl><type><name>SMetaData</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableMeta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/*
    for (int32_t i = 0; i &lt; taosArrayGetSize(pData-&gt;pDbVgroup); ++i) {
      SArray** pArray = taosArrayGet(pData-&gt;pDbVgroup, i);
      taosArrayDestroy(*pArray);
    }
  */</comment>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbVgroup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableHash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableIndex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pUdfList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pUdfList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/*
    for (int32_t i = 0; i &lt; taosArrayGetSize(pData-&gt;pDbCfg); ++i) {
      SDbCfgInfo* pInfo = taosArrayGet(pData-&gt;pDbCfg, i);
      taosArrayDestroy(pInfo-&gt;pRetensions);
    }
  */</comment>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbCfg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pIndex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pUser</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pQnodeList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDnodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pDnodeList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableCfg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSvrVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeSCtgUserAuth</name><parameter_list>(<parameter><decl><type><name>SCtgUserAuth</name><modifier>*</modifier></type> <name>userCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>userCache</name><operator>-&gt;</operator><name>createdDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>userCache</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>userCache</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeMetaRent</name><parameter_list>(<parameter><decl><type><name>SCtgRentMgmt</name><modifier>*</modifier></type> <name>mgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>slots</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>slotNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgRentSlot</name><modifier>*</modifier></type> <name>slot</name> <init>= <expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeStbMetaCache</name><parameter_list>(<parameter><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>stbNum</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_CACHE_STAT_DEC</name><argument_list>(<argument><expr><name>numOfStb</name></expr></argument>, <argument><expr><name>stbNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeTbCacheImpl</name><parameter_list>(<parameter><decl><type><name>SCtgTbCache</name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tbMeta freed, p:%p"</literal></expr></argument>, <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeTbCache</name><parameter_list>(<parameter><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>tblNum</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgFreeTbCacheImpl</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pCache</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_CACHE_STAT_DEC</name><argument_list>(<argument><expr><name>numOfTbl</name></expr></argument>, <argument><expr><name>tblNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeVgInfoCache</name><parameter_list>(<parameter><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeDbCache</name><parameter_list>(<parameter><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ctgFreeVgInfoCache</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeStbMetaCache</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeTbCache</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeInstDbCache</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pDbCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDbCache</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dbNum</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pDbCache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pDbCache</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbCache</name><operator>-&gt;</operator><name>deleted</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgFreeDbCache</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pDbCache</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pDbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_DEC</name><argument_list>(<argument><expr><name>numOfDb</name></expr></argument>, <argument><expr><name>dbNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeInstUserCache</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUserCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pUserCache</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>userNum</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pUserCache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pUserCache</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgUserAuth</name><modifier>*</modifier></type> <name>userCache</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ctgFreeSCtgUserAuth</name><argument_list>(<argument><expr><name>userCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pUserCache</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pUserCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_DEC</name><argument_list>(<argument><expr><name>numOfUser</name></expr></argument>, <argument><expr><name>userNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeHandleImpl</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ctgFreeMetaRent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>dbRent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeMetaRent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>stbRent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgFreeInstDbCache</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeInstUserCache</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeHandle</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>clusterId</name> <init>= <expr><name><name>pCtg</name><operator>-&gt;</operator><name>clusterId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ctgFreeMetaRent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>dbRent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeMetaRent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>stbRent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgFreeInstDbCache</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeInstUserCache</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_DEC</name><argument_list>(<argument><expr><name>numOfCluster</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgInfo</name><argument_list>(<argument><expr><literal type="string">"handle freed, clusterId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>clusterId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgClearHandle</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>clusterId</name> <init>= <expr><name><name>pCtg</name><operator>-&gt;</operator><name>clusterId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ctgFreeMetaRent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>dbRent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeMetaRent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>stbRent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgFreeInstDbCache</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeInstUserCache</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgMetaRentInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>dbRent</name></name></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>dbRentSec</name></name></expr></argument>, <argument><expr><name>CTG_RENT_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgMetaRentInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>stbRent</name></name></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>stbRentSec</name></name></expr></argument>, <argument><expr><name>CTG_RENT_STABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxDBCacheNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                               <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d dbCache failed"</literal></expr></argument>, <argument><expr><name>CTG_DEFAULT_CACHE_DB_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxUserCacheNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                                 <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d user cache failed"</literal></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxUserCacheNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfClear</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgInfo</name><argument_list>(<argument><expr><literal type="string">"handle cleared, clusterId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>clusterId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeSUseDbOutput</name><parameter_list>(<parameter><decl><type><name>SUseDbOutput</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOutput</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOutput</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeMsgCtx</name><parameter_list>(<parameter><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>reqType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_MND_GET_DB_CFG</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SDbCfgInfo</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>pRetensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_USE_DB</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUseDbOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SUseDbOutput</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ctgFreeSUseDbOutput</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_GET_INDEX</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SIndexInfo</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SIndexInfo</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_QNODE_LIST</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_TABLE_META</name></expr>:</case>
    <case>case <expr><name>TDMT_MND_TABLE_META</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_GET_TABLE_INDEX</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableIndex</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>STableIndex</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pOut</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_TABLE_CFG</name></expr>:</case>
    <case>case <expr><name>TDMT_MND_TABLE_CFG</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableCfgRsp</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>STableCfgRsp</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tFreeSTableCfgRsp</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_RETRIEVE_FUNC</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SFuncInfo</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SFuncInfo</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>pCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>pComment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_GET_USER_AUTH</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SGetUserAuthRsp</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SGetUserAuthRsp</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>createdDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid reqType %d"</literal></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>reqType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeTbMetasMsgCtx</name><parameter_list>(<parameter><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ctgFreeMsgCtx</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>lastOut</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgFreeSTableMetaOutput</name><argument_list>(<argument><expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>lastOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>lastOut</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeSTableMetaOutput</name><parameter_list>(<parameter><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOutput</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgResetTbMetaTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type> <name>taskCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetaCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskCtx</name><operator>-&gt;</operator><name>tbInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>tbInfo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_UNKNOWN_STB</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>lastOut</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgFreeSTableMetaOutput</name><argument_list>(<argument><expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>lastOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>lastOut</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgFreeSTableMetaOutput</name><argument_list>(<argument><expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeBatchMeta</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>meta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>meta</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>meta</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeBatchHash</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>hash</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>hash</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeTaskRes</name><parameter_list>(<parameter><decl><type><name>CTG_TASK_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CTG_TASK_GET_QNODE</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_DNODE</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_DB_VGROUP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_DB_CFG</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pRes</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SDbCfgInfo</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pRes</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRetensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_INDEX</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_CFG</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pRes</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>STableCfg</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pRes</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tFreeSTableCfgRsp</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_HASH</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_DB_INFO</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_INDEX</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_UDF</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_USER</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_SVR_VER</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_TB_META</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_META_BATCH</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pRes</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgFreeBatchMeta</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// no need to free it</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_HASH_BATCH</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pRes</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgFreeBatchHash</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// no need to free it</comment>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid task type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeSubTaskRes</name><parameter_list>(<parameter><decl><type><name>CTG_TASK_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CTG_TASK_GET_QNODE</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_DNODE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_DB_VGROUP</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pRes</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SDBVgInfo</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pRes</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_DB_CFG</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pRes</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SDbCfgInfo</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pRes</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRetensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_INDEX</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_CFG</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pRes</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>STableCfg</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pRes</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tFreeSTableCfgRsp</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_META</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_DB_INFO</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_TB_HASH</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_INDEX</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_UDF</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_SVR_VER</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_USER</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_META_BATCH</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>, <argument><expr><name>ctgFreeBatchMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_HASH_BATCH</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>, <argument><expr><name>ctgFreeBatchHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid task type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgClearSubTaskRes</name><parameter_list>(<parameter><decl><type><name>SCtgSubRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ctgFreeSubTaskRes</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeTaskCtx</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CTG_TASK_GET_TB_META</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type> <name>taskCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetaCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>lastOut</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgFreeSTableMetaOutput</name><argument_list>(<argument><expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>lastOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>lastOut</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_META_BATCH</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgTbMetasCtx</name><modifier>*</modifier></type> <name>taskCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetasCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><name>ctgFreeBatchMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// NO NEED TO FREE pNames</comment>

      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtxs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>ctgFreeTbMetasMsgCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>lastOut</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgFreeSTableMetaOutput</name><argument_list>(<argument><expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>lastOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>lastOut</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_HASH</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgTbHashCtx</name><modifier>*</modifier></type> <name>taskCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbHashCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_HASH_BATCH</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgTbHashsCtx</name><modifier>*</modifier></type> <name>taskCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbHashsCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><name>ctgFreeBatchHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// NO NEED TO FREE pNames</comment>

      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtxs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>ctgFreeMsgCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_INDEX</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgTbIndexCtx</name><modifier>*</modifier></type> <name>taskCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbIndexCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_TB_CFG</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgTbCfgCtx</name><modifier>*</modifier></type> <name>taskCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbCfgCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>taskCtx</name><operator>-&gt;</operator><name>pVgInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CTG_TASK_GET_DB_VGROUP</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_DB_CFG</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_DB_INFO</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_INDEX</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_UDF</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_QNODE</name></expr>:</case>
    <case>case <expr><name>CTG_TASK_GET_USER</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid task type %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ctgFreeMsgCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeTaskRes</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeTaskCtx</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pParents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgClearSubTaskRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeTasks</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pArray</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ctgFreeTask</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgFreeJob</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>job</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>job</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><operator>(</operator><name>SCtgJob</name><operator>*</operator><operator>)</operator><name>job</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>rid</name> <init>= <expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qid</name> <init>= <expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ctgFreeTasks</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgFreeBatchs</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgFreeSMetaData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">", ctg job 0x%"</literal> <name>PRIx64</name> <literal type="string">" freed"</literal></expr></argument>, <argument><expr><name>qid</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgUpdateMsgCtx</name><parameter_list>(<parameter><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ctgFreeMsgCtx</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>reqType</name></name> <operator>=</operator> <name>reqType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>target</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAddMsgCtx</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pCtxs</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>reqType</name></name> <operator>=</operator> <name>reqType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>target</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>target</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>.</operator><name>target</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pCtxs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetHashFunction</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>hashMethod</name></decl></parameter>, <parameter><decl><type><name>tableNameHashFp</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>hashMethod</name></expr>)</condition> <block>{<block_content>
    <default>default:</default>
      <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>MurmurHash3_32</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGenerateVgList</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>vgHash</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>    <name>vgroupHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>vgInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>vgList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>vgNum</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>vgHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>vgList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>vgNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>vgList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit failed, num:%d"</literal></expr></argument>, <argument><expr><name>vgNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>vgHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>vgInfo</name> <operator>=</operator> <name>pIter</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name>vgList</name></expr></argument>, <argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosArrayPush failed, vgId:%d"</literal></expr></argument>, <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name>vgHash</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>vgHash</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vgInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>pList</name> <operator>=</operator> <name>vgList</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got vgList from cache, vgNum:%d"</literal></expr></argument>, <argument><expr><name>vgNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>vgList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>vgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ctgVgInfoComp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>lp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>rp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pLeft</name> <init>= <expr><operator>(</operator><name>SVgroupInfo</name><operator>*</operator><operator>)</operator><name>lp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pRight</name> <init>= <expr><operator>(</operator><name>SVgroupInfo</name><operator>*</operator><operator>)</operator><name>rp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pLeft</name><operator>-&gt;</operator><name>hashBegin</name></name> <operator>&lt;</operator> <name><name>pRight</name><operator>-&gt;</operator><name>hashBegin</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pLeft</name><operator>-&gt;</operator><name>hashBegin</name></name> <operator>&gt;</operator> <name><name>pRight</name><operator>-&gt;</operator><name>hashBegin</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHashValueComp</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier><modifier>*</modifier></type> <name>lp</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier><modifier>*</modifier></type> <name>rp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type>    <name>key</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>lp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><operator>(</operator><name>SVgroupInfo</name><operator>*</operator><operator>)</operator><name>rp</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>&lt;</operator> <name><name>pVg</name><operator>-&gt;</operator><name>hashBegin</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>key</name> <operator>&gt;</operator> <name><name>pVg</name><operator>-&gt;</operator><name>hashEnd</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetVgInfoFromHashValue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type> <name>dbInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgMakeVgArray</name><argument_list>(<argument><expr><name>dbInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>vgNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>db</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>vgNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"db vgroup cache invalid, db:%s, vgroup number:%d"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>vgNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_TSC_DB_NOT_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>vgInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>tbFullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>tbFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashValue</name> <init>= <expr><call><name>taosGetTbHashVal</name><argument_list>(<argument><expr><name>tbFullName</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>tbFullName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>hashMethod</name></name></expr></argument>,
                                        <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>hashPrefix</name></name></expr></argument>, <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>hashSuffix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>vgInfo</name> <operator>=</operator> <call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hashValue</name></expr></argument>, <argument><expr><name>ctgHashValueComp</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
  void* pIter = taosHashIterate(dbInfo-&gt;vgHash, NULL);
  while (pIter) {
    vgInfo = pIter;
    if (hashValue &gt;= vgInfo-&gt;hashBegin &amp;&amp; hashValue &lt;= vgInfo-&gt;hashEnd) {
      taosHashCancelIterate(dbInfo-&gt;vgHash, pIter);
      break;
    }

    pIter = taosHashIterate(dbInfo-&gt;vgHash, pIter);
    vgInfo = NULL;
  }
*/</comment>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>vgInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"no hash range found for hash value [%u], db:%s, numOfVgId:%d"</literal></expr></argument>, <argument><expr><name>hashValue</name></expr></argument>, <argument><expr><name>db</name></expr></argument>,
             <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pVgroup</name> <operator>=</operator> <operator>*</operator><name>vgInfo</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got tb %s hash vgroup, vgId:%d, epNum %d, current %s port %d"</literal></expr></argument>, <argument><expr><name>tbFullName</name></expr></argument>, <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>,
           <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetVgInfosFromHashValue</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type> <name>dbInfo</name></decl></parameter>, <parameter><decl><type><name>SCtgTbHashsCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>,
                                   <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pNames</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaRes</name></type>  <name>res</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgMakeVgArray</name><argument_list>(<argument><expr><name>dbInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>vgNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>vgNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"db vgroup cache invalid, db:%s, vgroup number:%d"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>vgNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>vgInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>tbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>vgNum</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>vgInfo</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>vgInfo</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>vgInfo</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SVgroupInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got tb hash vgroup, vgId:%d, epNum %d, current %s port %d"</literal></expr></argument>, <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>,
               <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SCtgFetch</name><modifier>*</modifier></type> <name>pFetch</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type>  <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>resIdx</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <name>vgInfo</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>res</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <name>vgInfo</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tbFullName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbFullName</name></expr></argument>, <argument><expr><literal type="string">"%s."</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbFullName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type>  <name>pName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tbNameLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pName</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pNames</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tbNameLen</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tbFullName</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashValue</name> <init>= <expr><call><name>taosGetTbHashVal</name><argument_list>(<argument><expr><name>tbFullName</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>tbFullName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>hashMethod</name></name></expr></argument>,
                                          <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>hashPrefix</name></name></expr></argument>, <argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>hashSuffix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>vgInfo</name> <operator>=</operator> <call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hashValue</name></expr></argument>, <argument><expr><name>ctgHashValueComp</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>vgInfo</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"no hash range found for hash value [%u], db:%s, numOfVgId:%d"</literal></expr></argument>, <argument><expr><name>hashValue</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>,
               <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pNewVg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNewVg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>pNewVg</name> <operator>=</operator> <operator>*</operator><name>vgInfo</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got tb %s hash vgroup, vgId:%d, epNum %d, current %s port %d"</literal></expr></argument>, <argument><expr><name>tbFullName</name></expr></argument>, <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
             <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>,
             <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>vgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgFetch</name><modifier>*</modifier></type> <name>pFetch</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type>  <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>resIdx</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <name>pNewVg</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>res</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <name>pNewVg</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgStbVersionSearchCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>key1</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>SSTableVersion</name><operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator><operator>-&gt;</operator><name>suid</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>key1</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>SSTableVersion</name><operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator><operator>-&gt;</operator><name>suid</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDbVgVersionSearchCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>key1</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>SDbVgVersion</name><operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator><operator>-&gt;</operator><name>dbId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>key1</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>SDbVgVersion</name><operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator><operator>-&gt;</operator><name>dbId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgStbVersionSortCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SSTableVersion</name><operator>*</operator><operator>)</operator><name>key1</name><operator>)</operator><operator>-&gt;</operator><name>suid</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>SSTableVersion</name><operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator><operator>-&gt;</operator><name>suid</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>SSTableVersion</name><operator>*</operator><operator>)</operator><name>key1</name><operator>)</operator><operator>-&gt;</operator><name>suid</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>SSTableVersion</name><operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator><operator>-&gt;</operator><name>suid</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDbVgVersionSortCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SDbVgVersion</name><operator>*</operator><operator>)</operator><name>key1</name><operator>)</operator><operator>-&gt;</operator><name>dbId</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>SDbVgVersion</name><operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator><operator>-&gt;</operator><name>dbId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>SDbVgVersion</name><operator>*</operator><operator>)</operator><name>key1</name><operator>)</operator><operator>-&gt;</operator><name>dbId</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>SDbVgVersion</name><operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator><operator>-&gt;</operator><name>dbId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgMakeVgArray</name><parameter_list>(<parameter><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type> <name>dbInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbInfo</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgHash</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>, <argument><expr><name>ctgVgInfoComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>ctgCloneVgInfo</name><parameter_list>(<parameter><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>SDBVgInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgMakeVgArray</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDBVgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>dst</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SDBVgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDBVgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>hashSize</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>vgHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>hashSize</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><operator>(</operator><operator>*</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>vgHash</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>hashSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>vgId</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>vgId</name> <operator>=</operator> <call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vgId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut failed, hashSize:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>hashSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>vgArray</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>vgArray</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgCloneMetaOutput</name><parameter_list>(<parameter><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>STableMetaOutput</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pOutput</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>pOutput</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>metaSize</name> <init>= <expr><call><name>CTG_META_SIZE</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pOutput</name><operator>)</operator><operator>-&gt;</operator><name>tbMeta</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tbMeta cloned, size:%d, p:%p"</literal></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pOutput</name><operator>)</operator><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><operator>(</operator><operator>*</operator><name>pOutput</name><operator>)</operator><operator>-&gt;</operator><name>tbMeta</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pOutput</name><operator>)</operator><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgCloneTableIndex</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pIndex</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableIndexInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pRes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableIndexInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pInfo</name> <operator>=</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgUpdateSendTargetInfo</name><parameter_list>(<parameter><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pMsgSendInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_TABLE_META</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_VND_TABLE_CFG</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_VND_BATCH_META</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TARGET_TYPE_VNODE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>dbFName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TARGET_TYPE_MNODE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTablesReqNum</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAddFetch</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pFetchs</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dbIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tbIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>fetchIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>resIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pFetchs</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pFetchs</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>CTG_DEFAULT_FETCH_NUM</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgFetch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgFetch</name></type> <name>fetch</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>fetch</name><operator>.</operator><name>dbIdx</name></name> <operator>=</operator> <name>dbIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fetch</name><operator>.</operator><name>tbIdx</name></name> <operator>=</operator> <name>tbIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fetch</name><operator>.</operator><name>fetchIdx</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>fetchIdx</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fetch</name><operator>.</operator><name>resIdx</name></name> <operator>=</operator> <name>resIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fetch</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pFetchs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SName</name><modifier>*</modifier></type> <name>ctgGetFetchName</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pNames</name></decl></parameter>, <parameter><decl><type><name>SCtgFetch</name><modifier>*</modifier></type> <name>pFetch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><operator>(</operator><name>STablesReq</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pNames</name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>dbIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>tbIdx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneDbVgroup</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosArrayDup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SArray</name><operator>*</operator><operator>)</operator><name>pSrc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeDbVgroup</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneDbCfgInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbCfgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbCfgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeDbCfgInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneDbInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDbInfo</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeDbInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneTableMeta</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><name>pSrc</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMeta</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeTableMeta</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneVgroupInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeVgroupInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneTableIndices</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosArrayDup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SArray</name><operator>*</operator><operator>)</operator><name>pSrc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeTableIndices</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneFuncInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFuncInfo</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFuncInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFuncInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeFuncInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneIndexInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndexInfo</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIndexInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIndexInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeIndexInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneUserAuth</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name>pSrc</name></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeUserAuth</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneQnodeList</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosArrayDup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SArray</name><operator>*</operator><operator>)</operator><name>pSrc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeQnodeList</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneTableCfg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeTableCfg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ctgCloneDnodeList</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosArrayDup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SArray</name><operator>*</operator><operator>)</operator><name>pSrc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctgFreeDnodeList</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>SMetaRes</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>ctgCloneMetaDataArray</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>__array_item_dup_fn_t</name></type> <name>copyFunc</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSrc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMetaRes</name></type>  <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <macro><name>copyFunc</name><argument_list>(<argument>pRes-&gt;pRes</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>res</name><operator>.</operator><name>pRes</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pDst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMetaData</name><modifier>*</modifier></type> <name>catalogCloneMetaData</name><parameter_list>(<parameter><decl><type><name>SMetaData</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaData</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRes</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><name>ctgCloneDbVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><name>ctgCloneDbCfgInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><name>ctgCloneDbInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name>ctgCloneTableMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><name>ctgCloneVgroupInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>, <argument><expr><name>ctgCloneTableIndices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pUdfList</name></name></expr></argument>, <argument><expr><name>ctgCloneFuncInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pUdfList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>ctgCloneIndexInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><name>ctgCloneUserAuth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>, <argument><expr><name>ctgCloneQnodeList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>, <argument><expr><name>ctgCloneTableCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgCloneMetaDataArray</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDnodeList</name></name></expr></argument>, <argument><expr><name>ctgCloneDnodeList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pDnodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>catalogFreeMetaData</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pRes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>catalogFreeMetaData</name><parameter_list>(<parameter><decl><type><name>SMetaData</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pData</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><name>ctgFreeDbVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><name>ctgFreeDbCfgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><name>ctgFreeDbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name>ctgFreeTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><name>ctgFreeVgroupInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>, <argument><expr><name>ctgFreeTableIndices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pUdfList</name></name></expr></argument>, <argument><expr><name>ctgFreeFuncInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>ctgFreeIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><name>ctgFreeUserAuth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>, <argument><expr><name>ctgFreeQnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>, <argument><expr><name>ctgFreeTableCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDnodeList</name></name></expr></argument>, <argument><expr><name>ctgFreeDnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSvrVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
