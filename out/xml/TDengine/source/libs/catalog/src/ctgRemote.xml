<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/catalog/src/ctgRemote.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalogInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctgRemote.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>ctgHandleBatchRsp</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>SCtgTaskCallbackParam</name><modifier>*</modifier></type> <name>cbParam</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name> <init>= <expr><name><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>taskNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>cbParam</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBuf</name></type>  <name>taskMsg</name> <init>= <expr><operator>*</operator><name>pMsg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchRsp</name></type> <name>batchRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchRspMsg</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchRspMsg</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>rspCode</name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSBatchRsp</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSBatchRsp failed, msgLen:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>msgNum</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>taskNum</name> <operator>==</operator> <name>msgNum</name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name>msgNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" ctg got batch %d rsp %s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>cbParam</name><operator>-&gt;</operator><name>batchId</name></name></expr></argument>,
           <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>cbParam</name><operator>-&gt;</operator><name>reqType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pBatchs</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><name>taskNum</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBatchs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d batch failed"</literal></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>taskNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>  <name>taskId</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>cbParam</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>  <name>msgIdx</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>cbParam</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>*</operator><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>msgNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>taskMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>reqType</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>taskMsg</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>msg</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>taskMsg</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgIdx</name></name> <operator>==</operator> <operator>*</operator><name>msgIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <operator>&amp;</operator><name>rsp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgIdx</name></name> <operator>=</operator> <operator>*</operator><name>msgIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>reqType</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>taskMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>taskMsg</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>taskMsg</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>msgIdx</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name>pBatchs</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" ctg task %d idx %d start to handle rsp %s, pBatchs: %p"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>,
             <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>taskMsg</name><operator>.</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pBatchs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>gCtgAsyncFps</name><index>[<expr><name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>handleRspFp</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>tReq</name><operator>,</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>reqType</name></name><operator>,</operator> <operator>&amp;</operator><name>taskMsg</name><operator>,</operator> <operator>(</operator><ternary><condition><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspCode</name></name></expr> ?</condition><then> <expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspCode</name></name></expr> </then><else>: <expr><name>rspCode</name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgLaunchBatchs</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pBatchs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name></expr></argument>, <argument><expr><name>tFreeSBatchRspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgFreeBatchs</name><argument_list>(<argument><expr><name>pBatchs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgProcessRspMsg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>reqType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_MND_QNODE_LIST</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for qnode list, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process qnode list rsp failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got qnode list from mnode, listNum:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_DNODE_LIST</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for dnode list, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process dnode list rsp failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got dnode list from mnode, listNum:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>SArray</name><operator>*</operator><operator>*</operator><operator>)</operator><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_USE_DB</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for use db, error:%s, dbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process use db rsp failed, error:%s, dbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got db vgInfo from mnode, dbFName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_GET_DB_CFG</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for get db cfg, error:%s, db:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process get db cfg rsp failed, error:%s, db:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got db cfg from mnode, dbFName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_GET_INDEX</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for get index, error:%s, indexName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process get index rsp failed, error:%s, indexName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got index from mnode, indexName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_GET_TABLE_INDEX</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for get table index, error:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process get table index rsp failed, error:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got table index from mnode, tbFName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_RETRIEVE_FUNC</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for get udf, error:%s, funcName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process get udf rsp failed, error:%s, funcName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got udf from mnode, funcName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_GET_USER_AUTH</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for get user auth, error:%s, user:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process get user auth rsp failed, error:%s, user:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got user auth from mnode, user:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_TABLE_META</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>CTG_TABLE_NOT_EXIST</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SET_META_TYPE_NULL</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name>out</name><operator>)</operator><operator>-&gt;</operator><name>metaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"stablemeta not exist in mnode, tbFName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for stablemeta from mnode, error:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process mnode stablemeta rsp failed, error:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got table meta from mnode, tbFName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_TABLE_META</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>CTG_TABLE_NOT_EXIST</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SET_META_TYPE_NULL</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name>out</name><operator>)</operator><operator>-&gt;</operator><name>metaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tablemeta not exist in vnode, tbFName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for table meta from vnode, code:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process vnode tablemeta rsp failed, code:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got table meta from vnode, tbFName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_TABLE_CFG</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for table cfg from vnode, code:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process vnode tb cfg rsp failed, code:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got table cfg from vnode, tbFName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_TABLE_CFG</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for stb cfg from mnode, error:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process mnode stb cfg rsp failed, error:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got stb cfg from mnode, tbFName:%s"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_SERVER_VERSION</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"error rsp for svr ver from mnode, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>out</name><operator>,</operator> <name>msg</name><operator>,</operator> <name>msgSize</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Process svr ver rsp failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got svr ver from mnode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>rspCode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Got error rsp, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid req type %s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleMsgCallback</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgTaskCallbackParam</name><modifier>*</modifier></type> <name>cbParam</name> <init>= <expr><operator>(</operator><name>SCtgTaskCallbackParam</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>               <name>pJob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_API_JENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pJob</name> <operator>=</operator> <call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>jobPool</name></name></expr></argument>, <argument><expr><name><name>cbParam</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"ctg job refId 0x%"</literal> <name>PRIx64</name> <literal type="string">" already dropped"</literal></expr></argument>, <argument><expr><name><name>cbParam</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name> <init>= <expr><name><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TDMT_VND_BATCH_META</name> <operator>==</operator> <name><name>cbParam</name><operator>-&gt;</operator><name>reqType</name></name> <operator>||</operator> <name>TDMT_MND_BATCH_META</name> <operator>==</operator> <name><name>cbParam</name><operator>-&gt;</operator><name>reqType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgHandleBatchRsp</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>cbParam</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>  <name>taskId</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>cbParam</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>*</operator><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" ctg task %d start to handle rsp %s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>,
           <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>cbParam</name><operator>-&gt;</operator><name>reqType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pBatchs</name> <init>=
        <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><name>CTG_DEFAULT_BATCH_NUM</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBatchs</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d batch failed"</literal></expr></argument>, <argument><expr><name>CTG_DEFAULT_BATCH_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name>pBatchs</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name><name>gCtgAsyncFps</name><index>[<expr><name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>handleRspFp</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>tReq</name><operator>,</operator> <name><name>cbParam</name><operator>-&gt;</operator><name>reqType</name></name><operator>,</operator> <name>pMsg</name><operator>,</operator> <name>rspCode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgLaunchBatchs</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pBatchs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>jobPool</name></name></expr></argument>, <argument><expr><name><name>cbParam</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgMakeMsgSendInfo</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>batchId</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pMsgIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>,
                           <parameter><decl><type><name>SMsgSendInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMsgSendInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>msgSendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msgSendInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTaskCallbackParam</name><modifier>*</modifier></type> <name>param</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgTaskCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgTaskCallbackParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>reqType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>queryId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>taskId</name></name> <operator>=</operator> <name>pTaskId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>batchId</name></name> <operator>=</operator> <name>batchId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>msgIdx</name></name> <operator>=</operator> <name>pMsgIdx</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>msgSendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msgSendInfo</name><operator>-&gt;</operator><name>paramFreeFp</name></name> <operator>=</operator> <name>ctgFreeMsgSendParam</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msgSendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>ctgHandleMsgCallback</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pMsgSendInfo</name> <operator>=</operator> <name>msgSendInfo</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroySendMsgInfo</name><argument_list>(<argument><expr><name>msgSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAsyncSendMsg</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>batchId</name></decl></parameter>,
                        <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pMsgIdx</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pMsgSendInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgMakeMsgSendInfo</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><name>batchId</name></expr></argument>, <argument><expr><name>pMsgIdx</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgUpdateSendTargetInfo</name><argument_list>(<argument><expr><name>pMsgSendInfo</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>requestObjRefId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>msgSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pMsgSendInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"asyncSendMsgToSever failed, error: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"ctg req msg sent, reqId:0x%"</literal> <name>PRIx64</name> <literal type="string">", msg type:%d, %s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>pMsgSendInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroySendMsgInfo</name><argument_list>(<argument><expr><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAddBatch</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>,
                    <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type>   <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>   <name>pBatchs</name> <init>= <expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>    <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgBatch</name><modifier>*</modifier></type>  <name>pBatch</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pBatchs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vgId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgBatch</name></type>   <name>newBatch</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchMsg</name></type>   <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBatch</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>newBatch</name><operator>.</operator><name>pMsgs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>subTaskNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBatchMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newBatch</name><operator>.</operator><name>pTaskIds</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>subTaskNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newBatch</name><operator>.</operator><name>pMsgIdxs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>subTaskNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>newBatch</name><operator>.</operator><name>pMsgs</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>newBatch</name><operator>.</operator><name>pTaskIds</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>newBatch</name><operator>.</operator><name>pMsgIdxs</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>newBatch</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>msgLen</name></name> <operator>=</operator> <name>msgSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>newBatch</name><operator>.</operator><name>pMsgs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>newBatch</name><operator>.</operator><name>pTaskIds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>newBatch</name><operator>.</operator><name>pMsgIdxs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>vgId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TDMT_VND_TABLE_CFG</name> <operator>==</operator> <name>msgType</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SCtgTbCfgCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbCfgCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pName</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TDMT_VND_TABLE_META</name> <operator>==</operator> <name>msgType</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>CTG_TASK_GET_TB_META_BATCH</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SCtgTbMetasCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetasCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SCtgFetch</name><modifier>*</modifier></type>      <name>fetch</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>pName</name> <operator>=</operator> <call><name>ctgGetFetchName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>, <argument><expr><name>fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetaCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>pName</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid vnode msgType %d"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>newBatch</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>newBatch</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>vgId</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TDMT_VND_BATCH_META</name></expr> </then><else>: <expr><name>TDMT_MND_BATCH_META</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newBatch</name><operator>.</operator><name>batchId</name></name> <operator>=</operator> <call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>batchId</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name>pBatchs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vgId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>newBatch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"task %d %s req added to batch %d, target vgId %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>newBatch</name><operator>.</operator><name>batchId</name></name></expr></argument>,
             <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>msgLen</name></name> <operator>=</operator> <name>msgSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>pMsgs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>pTaskIds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>pMsgIdxs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>vgId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TDMT_VND_TABLE_CFG</name> <operator>==</operator> <name>msgType</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgTbCfgCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbCfgCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pName</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TDMT_VND_TABLE_META</name> <operator>==</operator> <name>msgType</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>CTG_TASK_GET_TB_META_BATCH</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SCtgTbMetasCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetasCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SCtgFetch</name><modifier>*</modifier></type>      <name>fetch</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pName</name> <operator>=</operator> <call><name>ctgGetFetchName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>, <argument><expr><name>fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetaCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pName</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid vnode msgType %d"</literal></expr></argument>, <argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"task %d %s req added to batch %d, target vgId %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>batchId</name></name></expr></argument>,
           <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgFreeBatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgBuildBatchReqMsg</name><parameter_list>(<parameter><decl><type><name>SCtgBatch</name><modifier>*</modifier></type> <name>pBatch</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>pMsgs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <name>CTG_MAX_REQ_IN_BATCH</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"too many msgs %d in one batch request"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SBatchReq</name></type> <name>batchReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>batchReq</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>batchReq</name><operator>.</operator><name>pMsgs</name></name> <operator>=</operator> <name><name>pBatch</name><operator>-&gt;</operator><name>pMsgs</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><call><name>tSerializeSBatchReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSBatchReq failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>msg</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc batchReq msg failed, size:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSerializeSBatchReq</name><argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchReq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSBatchReq failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <name>msgSize</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"batch req %d to vg %d msg built with %d meta reqs"</literal></expr></argument>, <argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>batchId</name></name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchBatchs</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pBatchs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pBatchs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>     <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>   <name>vgId</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCtgBatch</name><modifier>*</modifier></type> <name>pBatch</name> <init>= <expr><operator>(</operator><name>SCtgBatch</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" ctg start to launch batch %d"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>batchId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgBuildBatchReqMsg</name><argument_list>(<argument><expr><name>pBatch</name></expr></argument>, <argument><expr><operator>*</operator><name>vgId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBatch</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>pTaskIds</name></name></expr></argument>, <argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>batchId</name></name></expr></argument>, <argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>pMsgIdxs</name></name></expr></argument>,
                           <argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>*</operator><name>vgId</name></expr></argument>, <argument><expr><name><name>pBatch</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBatch</name><operator>-&gt;</operator><name>pTaskIds</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pBatchs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name>pBatchs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetQnodeListFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_MND_QNODE_LIST</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get qnode list from mnode, mgmtEpInUse:%d"</literal></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>NULL</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build qnode list msg failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeLoad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOut</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetDnodeListFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_MND_DNODE_LIST</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get dnode list from mnode, mgmtEpInUse:%d"</literal></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>NULL</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build dnode list msg failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetDBVgInfoFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SBuildUseDBInput</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>SUseDbOutput</name><modifier>*</modifier></type> <name>out</name></decl></parameter>,
                                <parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>     <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>reqType</name> <init>= <expr><name>TDMT_MND_USE_DB</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><ternary><condition><expr><name>tReq</name></expr> ?</condition><then> <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get db vgInfo from mnode, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>input</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build use db msg failed, code:%x, db:%s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUseDbOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOut</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetDBCfgFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>out</name></decl></parameter>,
                             <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_MND_GET_DB_CFG</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get db cfg from mnode, dbFName:%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>dbFName</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build get db cfg msg failed, code:%x, db:%s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbCfgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOut</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_MND_GET_DB_CFG</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetIndexInfoFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>indexName</name></decl></parameter>, <parameter><decl><type><name>SIndexInfo</name><modifier>*</modifier></type> <name>out</name></decl></parameter>,
                                 <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_MND_GET_INDEX</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get index from mnode, indexName:%s"</literal></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>indexName</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build get index msg failed, code:%x, db:%s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIndexInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOut</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>indexName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>indexName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbIndexFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>STableIndex</name><modifier>*</modifier></type> <name>out</name></decl></parameter>,
                               <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_MND_GET_TABLE_INDEX</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get tb index from mnode, tbFName:%s"</literal></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>tbFName</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build get index msg failed, code:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOut</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetUdfInfoFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>funcName</name></decl></parameter>, <parameter><decl><type><name>SFuncInfo</name><modifier>*</modifier></type> <name>out</name></decl></parameter>,
                               <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_MND_RETRIEVE_FUNC</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get udf info from mnode, funcName:%s"</literal></expr></argument>, <argument><expr><name>funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>funcName</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build get udf msg failed, code:%x, db:%s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFuncInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOut</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>funcName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>funcName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetUserDbAuthFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>SGetUserAuthRsp</name><modifier>*</modifier></type> <name>out</name></decl></parameter>,
                                  <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_MND_GET_USER_AUTH</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get user auth from mnode, user:%s"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>user</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build get user auth msg failed, code:%x, db:%s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGetUserAuthRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOut</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>user</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>user</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbMetaFromMnodeImpl</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>tbName</name></decl></parameter>,
                                  <parameter><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type>        <name>pTask</name> <init>= <expr><ternary><condition><expr><name>tReq</name></expr> ?</condition><then> <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBuildTableInput</name></type> <name>bInput</name> <init>= <expr><block>{<expr><operator>.</operator><name>vgId</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>dbFName</name> <operator>=</operator> <name>dbFName</name></expr>, <expr><operator>.</operator><name>tbName</name> <operator>=</operator> <name>tbName</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEpSet</name><modifier>*</modifier></type>          <name>pVnodeEpSet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>reqType</name> <init>= <expr><name>TDMT_MND_TABLE_META</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>             <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbFName</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get table meta from mnode, tbFName:%s"</literal></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name>bInput</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build mnode stablemeta msg failed, code:%x"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOut</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbMetaFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>out</name></decl></parameter>,
                              <parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>ctgGetTbMetaFromMnodeImpl</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbMetaFromVnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>vgroupInfo</name></decl></parameter>,
                              <parameter><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><ternary><condition><expr><name>tReq</name></expr> ?</condition><then> <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_VND_TABLE_META</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbFName</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>

  <decl_stmt><decl><type><name>SEp</name><modifier>*</modifier></type> <name>pEp</name> <init>= <expr><operator>&amp;</operator><name><name>vgroupInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>vgroupInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get table meta from vnode, vgId:%d, ep num:%d, ep %s:%d, tbFName:%s"</literal></expr></argument>, <argument><expr><name><name>vgroupInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name><name>vgroupInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SBuildTableInput</name></type> <name>bInput</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>vgId</name> <operator>=</operator> <name><name>vgroupInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr>, <expr><operator>.</operator><name>dbFName</name> <operator>=</operator> <name>dbFName</name></expr>, <expr><operator>.</operator><name>tbName</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><macro><name>tNameGetTableName</name><argument_list>(<argument>pTableName</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name>bInput</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build vnode tablemeta msg failed, code:%x, tbFName:%s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOut</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>vConn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr>,
                              <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                              <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>requestObjRefId</name></name></expr>,
                              <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>vgroupInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>vgroupInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vConn</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetaCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>           <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vgroupInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTableCfgFromVnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>,
                                <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>vgroupInfo</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_VND_TABLE_CFG</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SBuildTableInput</name></type> <name>bInput</name> <init>= <expr><block>{<expr><operator>.</operator><name>vgId</name> <operator>=</operator> <name><name>vgroupInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr>, <expr><operator>.</operator><name>dbFName</name> <operator>=</operator> <name>dbFName</name></expr>, <expr><operator>.</operator><name>tbName</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SEp</name><modifier>*</modifier></type> <name>pEp</name> <init>= <expr><operator>&amp;</operator><name><name>vgroupInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>vgroupInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get table cfg from vnode, vgId:%d, ep num:%d, ep %s:%d, tbFName:%s"</literal></expr></argument>, <argument><expr><name><name>vgroupInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name><name>vgroupInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name>bInput</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build get tb cfg msg failed, code:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>vConn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr>,
                              <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                              <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>requestObjRefId</name></name></expr>,
                              <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>vgroupInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>vgroupInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SCtgTbCfgCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbCfgCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>          <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>,
                            <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vgroupInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTableCfgFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier><modifier>*</modifier></type> <name>out</name></decl></parameter>,
                                <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_MND_TABLE_CFG</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SBuildTableInput</name></type> <name>bInput</name> <init>= <expr><block>{<expr><operator>.</operator><name>vgId</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>dbFName</name> <operator>=</operator> <name>dbFName</name></expr>, <expr><operator>.</operator><name>tbName</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"try to get table cfg from mnode, tbFName:%s"</literal></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name>bInput</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build get tb cfg msg failed, code:%s, tbFName:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>tbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetSvrVerFromMnode</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reqType</name> <init>= <expr><name>TDMT_MND_SERVER_VERSION</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>pTask</name></expr> ?</condition><then> <expr><name>taosMemoryMalloc</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>rpcMallocCont</name></expr></init>;</function_decl>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"try to get svr ver from mnode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>(</operator><name>NULL</name>, <operator>&amp;</operator><name>msg</name>, <literal type="number">0</literal>, <operator>&amp;</operator><name>msgLen</name>, <name>mallocFp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"Build get svr ver msg failed, code:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateMsgCtx</name><argument_list>(<argument><expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAddBatch</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTaskId</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncSendMsg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></argument>, <argument><expr><name>pTaskId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>reqType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgLen</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTrans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>mgmtEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
