<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/catalog/src/ctgAsync.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalogInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>ctgInitGetTbMetaTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type>   <name>name</name> <init>= <expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_TB_META</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgTbMetaCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_UNKNOWN_STB</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, tbName:%s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetTbMetasTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type>   <name>name</name> <init>= <expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_TB_META_BATCH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgTbMetasCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTbMetasCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pNames</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbMetaNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, dbNum:%lu, tbNum:%d"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbMetaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetDbVgTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>dbFName</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_DB_VGROUP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDbVgCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDbVgCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetDbCfgTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>dbFName</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_DB_CFG</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDbCfgCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDbCfgCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetDbInfoTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>dbFName</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_DB_INFO</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgDbInfoCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDbInfoCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, dbFName:%s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetTbHashTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type>   <name>name</name> <init>= <expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_TB_HASH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgTbHashCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTbHashCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, tableName:%s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetTbHashsTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type>   <name>name</name> <init>= <expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_TB_HASH_BATCH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgTbHashsCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTbHashsCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pNames</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbHashNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, dbNum:%lu, tbNum:%d"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbHashNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetQnodeTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_QNODE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>, <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetDnodeTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_DNODE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>, <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetIndexTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>name</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_INDEX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgIndexCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgIndexCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>indexFName</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>indexFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, indexFName:%s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetUdfTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>name</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_UDF</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUdfCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgUdfCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, udfName:%s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetUserTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUserAuthInfo</name><modifier>*</modifier></type> <name>user</name> <init>= <expr><operator>(</operator><name>SUserAuthInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type>       <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_USER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgUserCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgUserCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>user</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, user:%s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetSvrVerTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_SVR_VER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>, <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetTbIndexTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type>   <name>name</name> <init>= <expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_TB_INDEX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgTbIndexCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTbIndexCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, tbName:%s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitGetTbCfgTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type>   <name>name</name> <init>= <expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name></type> <name>task</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CTG_TASK_GET_TB_CFG</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>pJob</name></name> <operator>=</operator> <name>pJob</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgTbCfgCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTbCfgCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>taskCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" the %dth task type %s initialized, tbName:%s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskIdx</name></expr></argument>,
         <argument><expr><call><name>ctgTaskTypeStr</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleForceUpdate</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>taskNum</name></decl></parameter>, <parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SCatalogReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pDb</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><name>taskNum</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pTb</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><name>taskNum</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDb</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pJob</name><operator>-&gt;</operator><name>dbVgNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pJob</name><operator>-&gt;</operator><name>dbCfgNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pJob</name><operator>-&gt;</operator><name>dbInfoNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>tbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>tbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><name>dbNum</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>tbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>tbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pJob</name><operator>-&gt;</operator><name>tbCfgNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>   <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>dbFName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDropDbVgroupEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dbFName</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// REFRESH TABLE META</comment>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pJob</name><operator>-&gt;</operator><name>tbCfgNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgRemoveTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pJob</name><operator>-&gt;</operator><name>tbIndexNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ctgDropTbIndexEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>CTG_TASK_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>taskId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tid</name> <init>= <expr><call><name>atomic_fetch_add_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>taskIdx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>taskLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name><name>gCtgAsyncFps</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>initFp</name><operator>)</operator><operator>(</operator><name>pJob</name><operator>,</operator> <name>tid</name><operator>,</operator> <name>param</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>taskLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>taskId</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>taskId</name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgInitJob</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SCtgJob</name><modifier>*</modifier><modifier>*</modifier></type> <name>job</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SCatalogReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>catalogCallback</name></type> <name>fp</name></decl></parameter>,
                   <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tbMetaNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>ctgGetTablesReqNum</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dbVgNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tbHashNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>ctgGetTablesReqNum</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>udfNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pUdf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>qnodeNum</name> <init>= <expr><ternary><condition><expr><name><name>pReq</name><operator>-&gt;</operator><name>qNodeRequired</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dnodeNum</name> <init>= <expr><ternary><condition><expr><name><name>pReq</name><operator>-&gt;</operator><name>dNodeRequired</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>svrVerNum</name> <init>= <expr><ternary><condition><expr><name><name>pReq</name><operator>-&gt;</operator><name>svrVerRequired</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dbCfgNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>indexNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>userNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dbInfoNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tbIndexNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tbCfgNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskNum</name> <init>= <expr><name>tbMetaNum</name> <operator>+</operator> <name>dbVgNum</name> <operator>+</operator> <name>udfNum</name> <operator>+</operator> <name>tbHashNum</name> <operator>+</operator> <name>qnodeNum</name> <operator>+</operator> <name>dnodeNum</name> <operator>+</operator> <name>svrVerNum</name> <operator>+</operator> <name>dbCfgNum</name> <operator>+</operator> <name>indexNum</name> <operator>+</operator>
                    <name>userNum</name> <operator>+</operator> <name>dbInfoNum</name> <operator>+</operator> <name>tbIndexNum</name> <operator>+</operator> <name>tbCfgNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>job</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgJob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>job</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"failed to calloc, size:%d, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgJob</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><operator>*</operator><name>job</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>subTaskNum</name></name> <operator>=</operator> <name>taskNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>userFp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>userParam</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbMetaNum</name></name> <operator>=</operator> <name>tbMetaNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbHashNum</name></name> <operator>=</operator> <name>tbHashNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>qnodeNum</name></name> <operator>=</operator> <name>qnodeNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>dnodeNum</name></name> <operator>=</operator> <name>dnodeNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>dbVgNum</name></name> <operator>=</operator> <name>dbVgNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>udfNum</name></name> <operator>=</operator> <name>udfNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>dbCfgNum</name></name> <operator>=</operator> <name>dbCfgNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>indexNum</name></name> <operator>=</operator> <name>indexNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>userNum</name></name> <operator>=</operator> <name>userNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>dbInfoNum</name></name> <operator>=</operator> <name>dbInfoNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbIndexNum</name></name> <operator>=</operator> <name>tbIndexNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbCfgNum</name></name> <operator>=</operator> <name>tbCfgNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>svrVerNum</name></name> <operator>=</operator> <name>svrVerNum</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><name>CTG_DEFAULT_BATCH_NUM</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d batch failed"</literal></expr></argument>, <argument><expr><name>CTG_DEFAULT_BATCH_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>taskNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d tasks failed"</literal></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>forceUpdate</name></name> <operator>&amp;&amp;</operator> <name>taskNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgHandleForceUpdate</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbVgNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_DB_VGROUP</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbCfgNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_DB_CFG</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbInfoNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_DB_INFO</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  for (int32_t i = 0; i &lt; tbMetaNum; ++i) {
    SName* name = taosArrayGet(pReq-&gt;pTableMeta, i);
    CTG_ERR_JRET(ctgInitTask(pJob, CTG_TASK_GET_TB_META, name, NULL));
  }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>tbMetaNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_TB_META_BATCH</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  for (int32_t i = 0; i &lt; tbHashNum; ++i) {
    SName* name = taosArrayGet(pReq-&gt;pTableHash, i);
    CTG_ERR_JRET(ctgInitTask(pJob, CTG_TASK_GET_TB_HASH, name, NULL));
  }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>tbHashNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_TB_HASH_BATCH</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tbIndexNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_TB_INDEX</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tbCfgNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_TB_CFG</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indexNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>indexName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_INDEX</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>udfNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>udfName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pUdf</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_UDF</name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>userNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SUserAuthInfo</name><modifier>*</modifier></type> <name>user</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_USER</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>qnodeNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_QNODE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dnodeNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_DNODE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>svrVerNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_SVR_VER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>jobPool</name></name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"add job to ref failed, error: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>jobPool</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>el</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">", jobId: 0x%"</literal> <name>PRIx64</name> <literal type="string">" initialized, task num %d, forceUpdate %d, elapsed time:%.2f ms"</literal></expr></argument>,
         <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>forceUpdate</name></name></expr></argument>, <argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>ctgFreeJob</name><argument_list>(<argument><expr><operator>*</operator><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpTbMetaRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableMeta</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbMetaNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableMeta</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpTbMetasRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableMeta</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpDbVgRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbVgroup</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbVgroup</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>dbVgNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbVgroup</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpTbHashRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableHash</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableHash</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbHashNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableHash</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpTbHashsRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableHash</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpTbIndexRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableIndex</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbIndexNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpTbCfgRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableCfg</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableCfg</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>tbCfgNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableCfg</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pTableCfg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpIndexRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pIndex</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>indexNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpQnodeRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pQnodeList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pQnodeList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pQnodeList</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pQnodeList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpDnodeRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDnodeList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDnodeList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDnodeList</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDnodeList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpDbCfgRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbCfg</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbCfg</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>dbCfgNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbCfg</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpDbInfoRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbInfo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbInfo</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>dbInfoNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbInfo</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpUdfRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pUdfList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pUdfList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>udfNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pUdfList</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pUdfList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpUserRes</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pUser</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pUser</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>userNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pUser</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaRes</name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>pRes</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pUser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgDumpSvrVer</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pSvrVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pSvrVer</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pSvrVer</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pSvrVer</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name><operator>.</operator><name>pSvrVer</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgCallSubCb</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>parentNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pParents</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>parentNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type>   <name>pParent</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pParents</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pParent</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>gCtgAsyncFps</name><index>[<expr><name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>cloneFp</name><operator>)</operator><operator>(</operator><name>pTask</name><operator>,</operator> <operator>&amp;</operator><name><name>pParent</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>res</name></name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pParent</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pParMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pParMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name><name>pParent</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>fp</name></name><argument_list>(<argument><expr><name>pParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgCallUserCb</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><operator>(</operator><name>SCtgJob</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" ctg start to call user cb with rsp %s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobResCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pJob</name><operator>-&gt;</operator><name>userFp</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>jobRes</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>userParam</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobResCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" ctg end to call user cb"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>jobPool</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleTaskEnd</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>CTG_TASK_DONE</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" task %d end with res %s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>rspCode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CTG_TASK_DONE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgCallSubCb</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskDone</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>taskDone</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>taskDone</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" task done: %d, total: %d"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>taskDone</name></expr></argument>,
           <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgMakeAsyncRes</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobResCode</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

  <comment type="line">// taosSsleep(2);</comment>
  <comment type="line">// qDebug("QID:0x%" PRIx64 " ctg after sleep", pJob-&gt;queryId);</comment>

  <expr_stmt><expr><call><name>taosAsyncExec</name><argument_list>(<argument><expr><name>ctgCallUserCb</name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetTbMetaRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type>      <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type>         <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type>    <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetaCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type>            <name>pName</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>flag</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>          <name>vgId</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vgId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>reqType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_MND_USE_DB</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUseDbOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SUseDbOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"will refresh tbmeta, not supposed to be stb, tbName:%s, flag:%d"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>vgId</name> <operator>=</operator> <name><name>vgInfo</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromVnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_TABLE_META</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_NULL</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_IS_STB</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"will refresh tbmeta, supposed to be stb, tbName:%s, flag:%d"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><operator>*</operator><name>vgId</name> <operator>=</operator> <name><name>vgInfo</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromVnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>SBuildUseDBInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>input</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name>CTG_DEFAULT_INVALID_VERSION</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"no tbmeta got, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ctgRemoveTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>CTG_ERR_CODE_TABLE_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>lastOut</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>lastOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>pLastOut</name> <init>= <expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pLastOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_TABLE_META</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_NULL</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"no tbmeta got, tbNmae:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ctgRemoveTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>CTG_ERR_CODE_TABLE_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_IS_STB</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_TABLE</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"will continue to refresh tbmeta since got stb, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CTG_IS_META_BOTH</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>exist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CTG_FLAG_IS_FORCE_UPDATE</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SName</name></type> <name>stbName</name> <init>= <expr><operator>*</operator><name>pName</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>stbName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>stbCtx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>stbCtx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>stbCtx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>&amp;</operator><name>stbName</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgReadTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbCtx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>exist</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>exist</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>lastOut</name></name></expr></argument>, <argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromMnodeImpl</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid reqType %d"</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ctgUpdateTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_BOTH</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>ctbMeta</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>ctbMeta</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
    else if (CTG_IS_META_CTABLE(pOut-&gt;metaType)) {
      SName stbName = *pName;
      strcpy(stbName.tname, pOut-&gt;tbName);
      SCtgTbMetaCtx stbCtx = {0};
      stbCtx.flag = flag;
      stbCtx.pName = &amp;stbName;

      CTG_ERR_JRET(ctgReadTbMetaFromCache(pCtg, &amp;stbCtx, &amp;pOut-&gt;tbMeta));
      if (NULL == pOut-&gt;tbMeta) {
        ctgDebug("stb no longer exist, stbName:%s", stbName.tname);
        CTG_ERR_JRET(ctgRelaunchGetTbMetaTask(pTask));

        return TSDB_CODE_SUCCESS;
      }

      memcpy(pOut-&gt;tbMeta, &amp;pOut-&gt;ctbMeta, sizeof(pOut-&gt;ctbMeta));
    }
  */</comment>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgTaskError</name><argument_list>(<argument><expr><literal type="string">"Get table %d.%s.%s meta failed with error %s"</literal></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>||</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetTbMetasRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type>      <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type>         <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbMetasCtx</name><modifier>*</modifier></type>   <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetasCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgFetch</name><modifier>*</modifier></type>        <name>pFetch</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type>            <name>pName</name> <init>= <expr><call><name>ctgGetFetchName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>, <argument><expr><name>pFetch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>flag</name> <init>= <expr><name><name>pFetch</name><operator>-&gt;</operator><name>flag</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>          <name>vgId</name> <init>= <expr><operator>&amp;</operator><name><name>pFetch</name><operator>-&gt;</operator><name>vgId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>              <name>taskDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>reqType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_MND_USE_DB</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUseDbOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SUseDbOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ctgTaskDebug</name><argument_list>(<argument><expr><literal type="string">"will refresh tbmeta, not supposed to be stb, tbName:%s, flag:%d"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>vgId</name> <operator>=</operator> <name><name>vgInfo</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromVnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_TABLE_META</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_NULL</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_IS_STB</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>ctgTaskDebug</name><argument_list>(<argument><expr><literal type="string">"will refresh tbmeta, supposed to be stb, tbName:%s, flag:%d"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><operator>*</operator><name>vgId</name> <operator>=</operator> <name><name>vgInfo</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromVnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>SBuildUseDBInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>input</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name>CTG_DEFAULT_INVALID_VERSION</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ctgTaskError</name><argument_list>(<argument><expr><literal type="string">"no tbmeta got, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ctgRemoveTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>CTG_ERR_CODE_TABLE_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>lastOut</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>lastOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>pLastOut</name> <init>= <expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pLastOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_TABLE_META</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_NULL</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgTaskError</name><argument_list>(<argument><expr><literal type="string">"no tbmeta got, tbNmae:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ctgRemoveTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>CTG_ERR_CODE_TABLE_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_IS_STB</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_TABLE</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgTaskDebug</name><argument_list>(<argument><expr><literal type="string">"will continue to refresh tbmeta since got stb, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CTG_IS_META_BOTH</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>exist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CTG_FLAG_IS_FORCE_UPDATE</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SName</name></type> <name>stbName</name> <init>= <expr><operator>*</operator><name>pName</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>stbName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>stbCtx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>stbCtx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>stbCtx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>&amp;</operator><name>stbName</name></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>stbMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ctgReadTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbCtx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>stbMeta</name> <operator>&amp;&amp;</operator> <name><name>stbMeta</name><operator>-&gt;</operator><name>sversion</name></name> <operator>&gt;=</operator> <name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ctgTaskDebug</name><argument_list>(<argument><expr><literal type="string">"use cached stb meta, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>exist</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>stbMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>ctgTaskDebug</name><argument_list>(<argument><expr><literal type="string">"need to get/update stb meta, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>stbMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>exist</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>lastOut</name></name></expr></argument>, <argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromMnodeImpl</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>ctgTaskError</name><argument_list>(<argument><expr><literal type="string">"invalid reqType %d"</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>STableMetaOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ctgUpdateTbMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_BOTH</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>ctbMeta</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>ctbMeta</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
    else if (CTG_IS_META_CTABLE(pOut-&gt;metaType)) {
      SName stbName = *pName;
      strcpy(stbName.tname, pOut-&gt;tbName);
      SCtgTbMetaCtx stbCtx = {0};
      stbCtx.flag = flag;
      stbCtx.pName = &amp;stbName;

      CTG_ERR_JRET(ctgReadTbMetaFromCache(pCtg, &amp;stbCtx, &amp;pOut-&gt;tbMeta));
      if (NULL == pOut-&gt;tbMeta) {
        ctgDebug("stb no longer exist, stbName:%s", stbName.tname);
        CTG_ERR_JRET(ctgRelaunchGetTbMetaTask(pTask));

        return TSDB_CODE_SUCCESS;
      }

      memcpy(pOut-&gt;tbMeta, &amp;pOut-&gt;ctbMeta, sizeof(pOut-&gt;ctbMeta));
    }
  */</comment>

  <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>resIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fetchNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>taskDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>resIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fetchNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>taskDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ctgTaskError</name><argument_list>(<argument><expr><literal type="string">"Get table %d.%s.%s meta failed with error %s"</literal></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>&amp;&amp;</operator> <name>taskDone</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetDbVgRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type>    <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDbVgCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgDbVgCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>    <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>reqType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_MND_USE_DB</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUseDbOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SUseDbOutput</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type>    <name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGenerateVgList</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>cloneDbVgInfo</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgUpdateVgroupEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid reqType %d"</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetTbHashRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type>      <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbHashCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbHashCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>      <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>reqType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_MND_USE_DB</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUseDbOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SUseDbOutput</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SVgroupInfo</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgUpdateVgroupEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid reqType %d"</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetTbHashsRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type>       <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbHashsCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgTbHashsCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>       <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>     <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgFetch</name><modifier>*</modifier></type>      <name>pFetch</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name><name>tReq</name><operator>-&gt;</operator><name>msgIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>            <name>taskDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>reqType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_MND_USE_DB</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUseDbOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SUseDbOutput</name><operator>*</operator><operator>)</operator><name><name>pMsgCtx</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>dbIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfosFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgUpdateVgroupEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid reqType %d"</literal></expr></argument>, <argument><expr><name>reqType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fetchNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>taskDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>dbIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>resIdx</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fetchNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>taskDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>&amp;&amp;</operator> <name>taskDone</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetTbIndexRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STableIndex</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>STableIndex</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>pInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgCloneTableIndex</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgTbIndexCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgUpdateTbIndexEnqueue</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>STableIndex</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_MND_DB_INDEX_NOT_EXIST</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetTbCfgRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetDbCfgRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetDbInfoRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetQnodeRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetDnodeRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetIndexRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetUdfRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetUserRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type>        <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgUserCtx</name><modifier>*</modifier></type>     <name>ctx</name> <init>= <expr><operator>(</operator><name>SCtgUserCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>        <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>             <name>pass</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGetUserAuthRsp</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SGetUserAuthRsp</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOut</name><operator>-&gt;</operator><name>superAuth</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOut</name><operator>-&gt;</operator><name>createdDbs</name></name> <operator>&amp;&amp;</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>createdDbs</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>AUTH_TYPE_READ</name> <operator>&amp;&amp;</operator> <name><name>pOut</name><operator>-&gt;</operator><name>readDbs</name></name> <operator>&amp;&amp;</operator>
      <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>AUTH_TYPE_WRITE</name> <operator>&amp;&amp;</operator> <name><name>pOut</name><operator>-&gt;</operator><name>writeDbs</name></name> <operator>&amp;&amp;</operator>
             <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>pass</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ctgUpdateUserEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgHandleGetSvrVerRsp</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>reqType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgProcessRspMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>reqType</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgAsyncRefreshTbMeta</name><parameter_list>(<parameter><decl><type><name>SCtgTaskReq</name><modifier>*</modifier></type> <name>tReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type>         <name>pTask</name> <init>= <expr><name><name>tReq</name><operator>-&gt;</operator><name>pTask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_IS_SYS_DB</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"will refresh sys db tbmeta, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromMnodeImpl</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_IS_STB</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"will refresh tbmeta, supposed to be stb, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if get from mnode failed, will not try vnode</comment>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"will refresh tbmeta, not supposed to be stb, tbName:%s, flag:%d"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>vgId</name> <operator>=</operator> <name><name>vgInfo</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromVnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SBuildUseDBInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>input</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name>CTG_DEFAULT_INVALID_VERSION</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetTbMetaTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>(</operator><name>SCtgTbMetaCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>STableMeta</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetaCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTaskReq</name></type>    <name>tReq</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncRefreshTbMeta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetTbMetasTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbMetasCtx</name><modifier>*</modifier></type>   <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbMetasCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>fetchIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>baseResIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"start to check tb metas in db %s, tbNum %ld"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetasFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fetchIdx</name></expr></argument>, <argument><expr><name>baseResIdx</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>baseResIdx</name> <operator>+=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>fetchNum</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>fetchNum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtxs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>fetchNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgMsgCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtxs</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>fetchNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>fetchNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgFetch</name><modifier>*</modifier></type>  <name>pFetch</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type>      <name>pName</name> <init>= <expr><call><name>ctgGetFetchName</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>, <argument><expr><name>pFetch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <name><name>pFetch</name><operator>-&gt;</operator><name>fetchIdx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAsyncRefreshTbMeta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFetch</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetDbVgTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type>      <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDbVgCtx</name><modifier>*</modifier></type>      <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgDbVgCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGenerateVgList</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dbCache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SBuildUseDBInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>input</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name>CTG_DEFAULT_INVALID_VERSION</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetTbHashTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type>      <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbHashCtx</name><modifier>*</modifier></type>    <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbHashCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SVgroupInfo</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dbCache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SBuildUseDBInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>input</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name>CTG_DEFAULT_INVALID_VERSION</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetTbHashsTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbHashsCtx</name><modifier>*</modifier></type>   <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbHashsCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type>      <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>dbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>fetchIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>baseResIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(
          <argument><expr><call><name>ctgGetVgInfosFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dbCache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>baseResIdx</name> <operator>+=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ctgAddFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fetchIdx</name></expr></argument>, <argument><expr><name>baseResIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>baseResIdx</name> <operator>+=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>, <argument><expr><name>baseResIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>fetchNum</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>fetchNum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pResList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtxs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>fetchNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgMsgCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>msgCtxs</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>fetchNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>fetchNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgFetch</name><modifier>*</modifier></type>  <name>pFetch</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pFetchs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pNames</name></name></expr></argument>, <argument><expr><name><name>pFetch</name><operator>-&gt;</operator><name>dbIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SBuildUseDBInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>input</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name>CTG_DEFAULT_INVALID_VERSION</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SCtgTaskReq</name></type> <name>tReq</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>pTask</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tReq</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <name><name>pFetch</name><operator>-&gt;</operator><name>fetchIdx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tReq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetTbIndexTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbIndexCtx</name><modifier>*</modifier></type>   <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbIndexCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>           <name>pRes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgReadTbIndexFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>pRes</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbIndexFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetTbCfgTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCfgCtx</name><modifier>*</modifier></type>     <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbCfgCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>           <name>pRes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>              <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>    <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>tbType</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgReadTbTypeFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>tbType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>tbType</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgLaunchSubTask</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_TB_META</name></expr></argument>, <argument><expr><name>ctgGetTbCfgCb</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>tbType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTableCfgFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVgInfo</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbHashVgroupFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVgInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVgInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgLaunchSubTask</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>CTG_TASK_GET_DB_VGROUP</name></expr></argument>, <argument><expr><name>ctgGetTbCfgCb</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTableCfgFromVnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVgInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>CTG_TASK_LAUNCHED</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetQnodeTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetQnodeListFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetDnodeTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetDnodeListFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetDbCfgTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDbCfgCtx</name><modifier>*</modifier></type>     <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgDbCfgCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetDBCfgFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetDbInfoTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>      <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type>   <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDbInfoCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgDbInfoCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>       <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>    <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDbInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SDbInfo</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgVer</name></name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tbNum</name></name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>numOfTable</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateTs</name></name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>stateTs</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dbCache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgVer</name></name> <operator>=</operator> <name>CTG_DEFAULT_INVALID_VERSION</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetIndexTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgIndexCtx</name><modifier>*</modifier></type>     <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgIndexCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetIndexInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>indexFName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetUdfTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgUdfCtx</name><modifier>*</modifier></type>       <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgUdfCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetUdfInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetUserTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgUserCtx</name><modifier>*</modifier></type>      <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgUserCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>              <name>inCache</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>              <name>pass</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgChkAuthFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>inCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>pass</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetUserDbAuthFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchGetSvrVerTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>         <name>pCtg</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type>          <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type>       <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetSvrVerFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgRelaunchGetTbMetaTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ctgResetTbMetaTask</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgLaunchGetTbMetaTask</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbCfgCb</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgTbCfgCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><operator>(</operator><name>SCtgTbCfgCtx</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>CTG_TASK_GET_TB_META</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>tbType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>STableMeta</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>res</name></name><operator>)</operator><operator>-&gt;</operator><name>tableType</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CTG_TASK_GET_DB_VGROUP</name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type> <name>pDb</name> <init>= <expr><operator>(</operator><name>SDBVgInfo</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>res</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVgInfo</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVgInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgLaunchGetTbCfgTask</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>ctgHandleTaskEnd</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgCompDbVgTasks</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>equal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgDbVgCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>equal</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgCompTbMetaTasks</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>equal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>taskCtx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>equal</name> <operator>=</operator> <call><name>tNameTbNameEqual</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgCloneTbMeta</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><operator>(</operator><name>STableMeta</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>res</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>cloneTableMeta</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>(</operator><name>STableMeta</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgCloneDbVg</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUseDbOutput</name><modifier>*</modifier></type> <name>pOut</name> <init>= <expr><operator>(</operator><name>SUseDbOutput</name><operator>*</operator><operator>)</operator><name><name>pTask</name><operator>-&gt;</operator><name>msgCtx</name><operator>.</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><call><name>cloneDbVgInfo</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SDBVgInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>SCtgAsyncFps</name></type> <name><name>gCtgAsyncFps</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>ctgInitGetQnodeTask</name></expr>, <expr><name>ctgLaunchGetQnodeTask</name></expr>, <expr><name>ctgHandleGetQnodeRsp</name></expr>, <expr><name>ctgDumpQnodeRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetDnodeTask</name></expr>, <expr><name>ctgLaunchGetDnodeTask</name></expr>, <expr><name>ctgHandleGetDnodeRsp</name></expr>, <expr><name>ctgDumpDnodeRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetDbVgTask</name></expr>, <expr><name>ctgLaunchGetDbVgTask</name></expr>, <expr><name>ctgHandleGetDbVgRsp</name></expr>, <expr><name>ctgDumpDbVgRes</name></expr>, <expr><name>ctgCompDbVgTasks</name></expr>, <expr><name>ctgCloneDbVg</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetDbCfgTask</name></expr>, <expr><name>ctgLaunchGetDbCfgTask</name></expr>, <expr><name>ctgHandleGetDbCfgRsp</name></expr>, <expr><name>ctgDumpDbCfgRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetDbInfoTask</name></expr>, <expr><name>ctgLaunchGetDbInfoTask</name></expr>, <expr><name>ctgHandleGetDbInfoRsp</name></expr>, <expr><name>ctgDumpDbInfoRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetTbMetaTask</name></expr>, <expr><name>ctgLaunchGetTbMetaTask</name></expr>, <expr><name>ctgHandleGetTbMetaRsp</name></expr>, <expr><name>ctgDumpTbMetaRes</name></expr>, <expr><name>ctgCompTbMetaTasks</name></expr>,
     <expr><name>ctgCloneTbMeta</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetTbHashTask</name></expr>, <expr><name>ctgLaunchGetTbHashTask</name></expr>, <expr><name>ctgHandleGetTbHashRsp</name></expr>, <expr><name>ctgDumpTbHashRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetTbIndexTask</name></expr>, <expr><name>ctgLaunchGetTbIndexTask</name></expr>, <expr><name>ctgHandleGetTbIndexRsp</name></expr>, <expr><name>ctgDumpTbIndexRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetTbCfgTask</name></expr>, <expr><name>ctgLaunchGetTbCfgTask</name></expr>, <expr><name>ctgHandleGetTbCfgRsp</name></expr>, <expr><name>ctgDumpTbCfgRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetIndexTask</name></expr>, <expr><name>ctgLaunchGetIndexTask</name></expr>, <expr><name>ctgHandleGetIndexRsp</name></expr>, <expr><name>ctgDumpIndexRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetUdfTask</name></expr>, <expr><name>ctgLaunchGetUdfTask</name></expr>, <expr><name>ctgHandleGetUdfRsp</name></expr>, <expr><name>ctgDumpUdfRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetUserTask</name></expr>, <expr><name>ctgLaunchGetUserTask</name></expr>, <expr><name>ctgHandleGetUserRsp</name></expr>, <expr><name>ctgDumpUserRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetSvrVerTask</name></expr>, <expr><name>ctgLaunchGetSvrVerTask</name></expr>, <expr><name>ctgHandleGetSvrVerRsp</name></expr>, <expr><name>ctgDumpSvrVer</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetTbMetasTask</name></expr>, <expr><name>ctgLaunchGetTbMetasTask</name></expr>, <expr><name>ctgHandleGetTbMetasRsp</name></expr>, <expr><name>ctgDumpTbMetasRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>ctgInitGetTbHashsTask</name></expr>, <expr><name>ctgLaunchGetTbHashsTask</name></expr>, <expr><name>ctgHandleGetTbHashsRsp</name></expr>, <expr><name>ctgDumpTbHashsRes</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>ctgMakeAsyncRes</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>taskNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name><name>gCtgAsyncFps</name><index>[<expr><name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>dumpResFp</name><operator>)</operator><operator>(</operator><name>pTask</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgSearchExistingTask</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>, <parameter><decl><type><name>CTG_TASK_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>taskId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>      <name>equal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>taskLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>taskNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pTask</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name><name>gCtgAsyncFps</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>compFp</name><operator>)</operator><operator>(</operator><name>pTask</name><operator>,</operator> <name>param</name><operator>,</operator> <operator>&amp;</operator><name>equal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>equal</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJob</name><operator>-&gt;</operator><name>taskLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>equal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>taskId</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgSetSubTaskCb</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pSub</name></decl></parameter>, <parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_LOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>CTG_TASK_DONE</name> <operator>==</operator> <name><name>pSub</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>pSub</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name><name>gCtgAsyncFps</name><index>[<expr><name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>cloneFp</name><operator>)</operator><operator>(</operator><name>pSub</name><operator>,</operator> <operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>res</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pSubMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pSub</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pSubMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>fp</name></name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSub</name><operator>-&gt;</operator><name>pParents</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSub</name><operator>-&gt;</operator><name>pParents</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>pParents</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_UNLOCK</name><argument_list>(<argument><expr><name>CTG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchSubTask</name><parameter_list>(<parameter><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>CTG_TASK_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ctgSubTaskCbFp</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>pJob</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>subTaskId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>newTask</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ctgClearSubTaskRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>subRes</name><operator>.</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgSearchExistingTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subTaskId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>subTaskId</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgInitTask</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subTaskId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>newTask</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pSub</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><name>subTaskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgSetSubTaskCb</name><argument_list>(<argument><expr><name>pSub</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>newTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCtgMsgCtx</name><modifier>*</modifier></type> <name>pSubMsgCtx</name> <init>= <expr><call><name>CTG_GET_TASK_MSGCTX</name><argument_list>(<argument><expr><name>pSub</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSubMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name> <operator>=</operator> <name><name>pMsgCtx</name><operator>-&gt;</operator><name>pBatchs</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name><name>gCtgAsyncFps</name><index>[<expr><name><name>pSub</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>launchFp</name><operator>)</operator><operator>(</operator><name>pSub</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSub</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CTG_TASK_LAUNCHED</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgLaunchJob</name><parameter_list>(<parameter><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>taskNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" ctg launch [%dth] task"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name><name>gCtgAsyncFps</name><index>[<expr><name><name>pTask</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>launchFp</name><operator>)</operator><operator>(</operator><name>pTask</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CTG_TASK_LAUNCHED</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>taskNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" ctg call user callback with rsp %s"</literal></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>jobResCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosAsyncExec</name><argument_list>(<argument><expr><name>ctgCallUserCb</name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CTG_BATCH_FETCH</name></expr></cpp:if>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ctgLaunchBatchs</name><argument_list>(<argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pCtg</name></name></expr></argument>, <argument><expr><name>pJob</name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>pBatchs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
