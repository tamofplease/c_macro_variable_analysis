<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/catalog/src/catalog.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalogInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>SCatalogMgmt</name></type> <name>gCtgMgmt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>ctgGetDBVgInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>SCtgDBCache</name><modifier>*</modifier><modifier>*</modifier></type> <name>dbCache</name></decl></parameter>,
                       <parameter><decl><type><name>SDBVgInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>exists</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>exists</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>exists</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>exists</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>exists</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SUseDbOutput</name></type>     <name>DbOut</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBuildUseDBInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>input</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name>CTG_DEFAULT_INVALID_VERSION</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DbOut</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgCloneVgInfo</name><argument_list>(<argument><expr><name><name>DbOut</name><operator>.</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateVgroupEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>DbOut</name><operator>.</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>DbOut</name><operator>.</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pInfo</name> <operator>=</operator> <name><name>DbOut</name><operator>.</operator><name>dbVgroup</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgRefreshDBVgInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUseDbOutput</name></type>     <name>DbOut</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBuildUseDBInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>input</name><operator>.</operator><name>dbId</name></name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>input</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name>CTG_DEFAULT_INVALID_VERSION</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>input</name><operator>.</operator><name>numOfTable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgGetDBVgInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DbOut</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>CTG_DB_NOT_EXIST</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>NULL</name> <operator>!=</operator> <name>dbCache</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db no longer exist, dbFName:%s, dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctgDropDbCacheEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgUpdateVgroupEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>DbOut</name><operator>.</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>DbOut</name><operator>.</operator><name>dbVgroup</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgRefreshTbMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>STableMetaOutput</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>,
                         <parameter><decl><type><name>bool</name></type> <name>syncReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgroupInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CTG_FLAG_IS_SYS_DB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbHashVgroup</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgroupInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableMetaOutput</name></type>  <name>moutput</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>output</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_IS_SYS_DB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"will refresh tbmeta, supposed in information_schema, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(
        <argument><expr><call><name>ctgGetTbMetaFromMnodeImpl</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CTG_FLAG_IS_STB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"will refresh tbmeta, supposed to be stb, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if get from mnode failed, will not try vnode</comment>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_NULL</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromVnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgroupInfo</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"will refresh tbmeta, not supposed to be stb, tbName:%s, flag:%d"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if get from vnode failed or no table meta, will not try mnode</comment>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromVnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgroupInfo</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_TABLE</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>output</name><operator>-&gt;</operator><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"will continue to refresh tbmeta since got stb, tbName:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromMnodeImpl</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CTG_IS_META_BOTH</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>exist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CTG_FLAG_IS_FORCE_UPDATE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgTbMetaExistInCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>exist</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromMnodeImpl</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>moutput</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_NULL</name><argument_list>(<argument><expr><name><name>moutput</name><operator>.</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SET_META_TYPE_NULL</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name> <operator>=</operator> <name><name>moutput</name><operator>.</operator><name>tbMeta</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>moutput</name><operator>.</operator><name>tbMeta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>SET_META_TYPE_CTABLE</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_NULL</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"no tbmeta got, tbNmae:%s"</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgRemoveTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>CTG_ERR_CODE_TABLE_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_TABLE</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tbmeta got, dbFName:%s, tbName:%s, tbType:%d"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>,
             <argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tbmeta got, dbFName:%s, tbName:%s, tbType:%d, stbMetaGot:%d"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>ctbName</name></name></expr></argument>,
             <argument><expr><name><name>output</name><operator>-&gt;</operator><name>ctbMeta</name><operator>.</operator><name>tableType</name></name></expr></argument>, <argument><expr><call><name>CTG_IS_META_BOTH</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pOutput</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgCloneMetaOutput</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgUpdateTbMetaEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>syncReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>output</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SCtgTbMetaCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pTableMeta</name> <operator>||</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>CTG_FLAG_ONLY_CACHE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgRefreshTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_TABLE</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pTableMeta</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>CTG_IS_META_BOTH</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>ctbMeta</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>ctbMeta</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>pTableMeta</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>CTG_IS_META_CTABLE</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid metaType:%d"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// HANDLE ONLY CHILD TABLE META</comment>

    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SName</name></type> <name>stbName</name> <init>= <expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>stbName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>stbCtx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>stbCtx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stbCtx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>&amp;</operator><name>stbName</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgReadTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbCtx</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pTableMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"stb no longer exist, dbFName:%s, tbName:%s"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>pTableMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>ctbMeta</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>ctbMeta</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break>break;</break>
  </block_content>}</block></while>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><call><name>CTG_TABLE_NOT_EXIST</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>inCache</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CTG_FLAG_IS_SYS_DB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>tbType</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDropStbMetaEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ctgDropTbMetaEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pTableMeta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"tbmeta returned, tbName:%s, tbType:%d"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pTableMeta</name><operator>)</operator><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgdShowTableMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgUpdateTbMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>STableMetaRsp</name><modifier>*</modifier></type> <name>rspMsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syncOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMetaOutput</name><modifier>*</modifier></type> <name>output</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaOutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>rspMsg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name><name>rspMsg</name><operator>-&gt;</operator><name>dbId</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CHILD_TABLE</name> <operator>==</operator> <name><name>rspMsg</name><operator>-&gt;</operator><name>tableType</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>rspMsg</name><operator>-&gt;</operator><name>pSchemas</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>ctbName</name></name></expr></argument>, <argument><expr><name><name>rspMsg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SET_META_TYPE_CTABLE</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>queryCreateCTableMetaFromMsg</name><argument_list>(<argument><expr><name>rspMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>ctbMeta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>rspMsg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SET_META_TYPE_TABLE</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>queryCreateTableMetaFromMsg</name><argument_list>(<argument><expr><name>rspMsg</name></expr></argument>, <argument><expr><name><name>rspMsg</name><operator>-&gt;</operator><name>tableType</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgUpdateTbMetaEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>syncOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>output</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgChkAuth</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>AUTH_TYPE</name></type> <name>type</name></decl></parameter>,
                   <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>exists</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>inCache</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pass</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgChkAuthFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dbFName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inCache</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>inCache</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>exists</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>exists</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exists</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>exists</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SGetUserAuthRsp</name></type> <name>authRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetUserDbAuthFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>authRsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>authRsp</name><operator>.</operator><name>superAuth</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>authRsp</name><operator>.</operator><name>createdDbs</name></name> <operator>&amp;&amp;</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>authRsp</name><operator>.</operator><name>createdDbs</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AUTH_TYPE_READ</name> <operator>&amp;&amp;</operator> <name><name>authRsp</name><operator>.</operator><name>readDbs</name></name> <operator>&amp;&amp;</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>authRsp</name><operator>.</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>AUTH_TYPE_WRITE</name> <operator>&amp;&amp;</operator> <name><name>authRsp</name><operator>.</operator><name>writeDbs</name></name> <operator>&amp;&amp;</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>authRsp</name><operator>.</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgUpdateUserEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>authRsp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbType</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>tbType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgReadTbTypeFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>tbType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>tbType</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type>   <name>pMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_UNKNOWN_STB</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>tbType</name> <operator>=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbIndex</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgReadTbIndexFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pRes</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableIndex</name><modifier>*</modifier></type> <name>pIndex</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>ctgGetTbIndexFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr></argument>, <argument><expr><name>pIndex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_MND_DB_INDEX_NOT_EXIST</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgCloneTableIndex</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgUpdateTbIndexEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIndex</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>tFreeSTableIndexRsp</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><operator>*</operator><name>pRes</name></expr></argument>, <argument><expr><name>tFreeSTableIndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbCfg</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tbType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbType</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name>tbType</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetTableCfgFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgroupInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetTbHashVgroup</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgroupInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgGetTableCfgFromVnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgroupInfo</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbDistVgInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type>   <name>tbMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type>   <name>vgroupInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type>  <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>       <name>vgList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type>    <name>vgInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <name>pTableName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_UNKNOWN_STB</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pVgList</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>db</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>vgHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>vgHash</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>vgHash</name> <operator>=</operator> <name><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGenerateVgList</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>vgHash</name></expr></argument>, <argument><expr><name>pVgList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// USE HASH METHOD INSTEAD OF VGID IN TBMETA</comment>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid method to get none stb vgInfo, tbType:%d"</literal></expr></argument>, <argument><expr><name><name>tbMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>  
    int32_t vgId = tbMeta-&gt;vgId;
    if (taosHashGetDup(vgHash, &amp;vgId, sizeof(vgId), &amp;vgroupInfo) != 0) {
      ctgWarn("table's vgId not found in vgroup list, vgId:%d, tbName:%s", vgId, tNameGetTableName(pTableName));
      CTG_ERR_JRET(TSDB_CODE_CTG_VG_META_MISMATCH);
    }

    vgList = taosArrayInit(1, sizeof(SVgroupInfo));
    if (NULL == vgList) {
      ctgError("taosArrayInit %d failed", (int32_t)sizeof(SVgroupInfo));
      CTG_ERR_JRET(TSDB_CODE_OUT_OF_MEMORY);    
    }

    if (NULL == taosArrayPush(vgList, &amp;vgroupInfo)) {
      ctgError("taosArrayPush vgroupInfo to array failed, vgId:%d, tbName:%s", vgId, tNameGetTableName(pTableName));
      CTG_ERR_JRET(TSDB_CODE_CTG_INTERNAL_ERROR);
    }

    *pVgList = vgList;
    vgList = NULL;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgRUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>tbMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>vgInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>vgList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>vgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vgList</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetTbHashVgroup</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>exists</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"no valid vgInfo for db, dbname:%s"</literal></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>db</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type> <name>vgInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>, <argument><expr><name>exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>exists</name> <operator>&amp;&amp;</operator> <name>false</name> <operator>==</operator> <operator>*</operator><name>exists</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db %s vgInfo not in cache"</literal></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><ternary><condition><expr><name>vgInfo</name></expr> ?</condition><then> <expr><name>vgInfo</name></expr> </then><else>: <expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgRUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>vgInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgGetCachedTbVgMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>db</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgTbCache</name> <modifier>*</modifier></type><name>tbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>tbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pTableMeta</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetVgInfoFromHashValue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_UNKNOWN_STB</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgCopyTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbCache</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>
  
  <expr_stmt><expr><call><name>ctgReleaseVgMetaToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>, <argument><expr><name>tbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>ctgRemoveTbMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTableName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgRemoveTbMetaFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogInit</name><parameter_list>(<parameter><decl><type><name>SCatalogCfg</name><modifier>*</modifier></type> <name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"catalog already initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gCtgMgmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gCtgMgmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxDBCacheNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxDBCacheNum</name></name> <operator>=</operator> <name>CTG_DEFAULT_CACHE_DB_NUMBER</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxTblCacheNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxTblCacheNum</name></name> <operator>=</operator> <name>CTG_DEFAULT_CACHE_TBLMETA_NUMBER</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>dbRentSec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>dbRentSec</name></name> <operator>=</operator> <name>CTG_DEFAULT_RENT_SECOND</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>stbRentSec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>stbRentSec</name></name> <operator>=</operator> <name>CTG_DEFAULT_RENT_SECOND</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxDBCacheNum</name></name> <operator>=</operator> <name>CTG_DEFAULT_CACHE_DB_NUMBER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxTblCacheNum</name></name> <operator>=</operator> <name>CTG_DEFAULT_CACHE_TBLMETA_NUMBER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>dbRentSec</name></name> <operator>=</operator> <name>CTG_DEFAULT_RENT_SECOND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>stbRentSec</name></name> <operator>=</operator> <name>CTG_DEFAULT_RENT_SECOND</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>CTG_DEFAULT_CACHE_CLUSTER_NUMBER</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d cluster cache failed"</literal></expr></argument>, <argument><expr><name>CTG_DEFAULT_CACHE_CLUSTER_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>reqSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tsem_init failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_SYS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>head</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgQNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCtgQNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name><name>gCtgMgmt</name><operator>.</operator><name>queue</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>jobPool</name></name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>ctgFreeJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCtgMgmt</name><operator>.</operator><name>jobPool</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosOpenRef failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><call><name>ctgStartUpdateThread</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"catalog initialized, maxDb:%u, maxTbl:%u, dbRentSec:%u, stbRentSec:%u"</literal></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxDBCacheNum</name></name></expr></argument>,
         <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxTblCacheNum</name></name></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>dbRentSec</name></name></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>stbRentSec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetHandle</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>clusterId</name></decl></parameter>, <parameter><decl><type><name>SCatalog</name><modifier>*</modifier><modifier>*</modifier></type> <name>catalogHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>catalogHandle</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"catalog cluster cache are not ready, clusterId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>clusterId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_NOT_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>clusterCtg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier><modifier>*</modifier></type> <name>ctg</name> <init>= <expr><operator>(</operator><name>SCatalog</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>clusterId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>ctg</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ctg</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>catalogHandle</name> <operator>=</operator> <operator>*</operator><name>ctg</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"got catalog handle from cache, clusterId:0x%"</literal> <name>PRIx64</name> <literal type="string">", CTG:%p"</literal></expr></argument>, <argument><expr><name>clusterId</name></expr></argument>, <argument><expr><operator>*</operator><name>ctg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>clusterCtg</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCatalog</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>clusterCtg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCatalog</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>clusterCtg</name><operator>-&gt;</operator><name>clusterId</name></name> <operator>=</operator> <name>clusterId</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgMetaRentInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clusterCtg</name><operator>-&gt;</operator><name>dbRent</name></name></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>dbRentSec</name></name></expr></argument>, <argument><expr><name>CTG_RENT_DB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgMetaRentInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clusterCtg</name><operator>-&gt;</operator><name>stbRent</name></name></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>stbRentSec</name></name></expr></argument>, <argument><expr><name>CTG_RENT_STABLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>clusterCtg</name><operator>-&gt;</operator><name>dbCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxDBCacheNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>clusterCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d dbCache failed"</literal></expr></argument>, <argument><expr><name>CTG_DEFAULT_CACHE_DB_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>clusterCtg</name><operator>-&gt;</operator><name>userCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxUserCacheNum</name></name></expr></argument>,
                                         <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>clusterCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d user cache failed"</literal></expr></argument>, <argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>cfg</name><operator>.</operator><name>maxUserCacheNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clusterId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>clusterCtg</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>HASH_NODE_EXIST</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ctgFreeHandleImpl</name><argument_list>(<argument><expr><name>clusterCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut CTG to cache failed, clusterId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>clusterId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"add CTG to cache, clusterId:0x%"</literal> <name>PRIx64</name> <literal type="string">", CTG:%p"</literal></expr></argument>, <argument><expr><name>clusterId</name></expr></argument>, <argument><expr><name>clusterCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break>break;</break>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>catalogHandle</name> <operator>=</operator> <name>clusterCtg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_CACHE_STAT_INC</name><argument_list>(<argument><expr><name>numOfCluster</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>ctgFreeHandleImpl</name><argument_list>(<argument><expr><name>clusterCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetDBVgVersion</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>dbId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pStateTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>version</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbId</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>tableNum</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pStateTs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgAcquireVgInfoFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>version</name> <operator>=</operator> <name>CTG_DEFAULT_INVALID_VERSION</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>version</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>dbId</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>tableNum</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>numOfTable</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgReleaseVgInfoToCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"Got db vgVersion from cache, dbFName:%s, vgVersion:%d"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>*</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetDBVgList</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>vgroupList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>vgroupList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>vgList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>    <name>vgHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type>   <name>vgInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>vgHash</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>vgHash</name> <operator>=</operator> <name><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGenerateVgList</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>vgHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>vgroupList</name> <operator>=</operator> <name>vgList</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>vgList</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgRUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>vgInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetDBVgInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>TAOS_DB_ROUTE_INFO</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgDBCache</name><modifier>*</modifier></type> <name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type>   <name>dbInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetDBVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dbInfo</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>routeVersion</name></name> <operator>=</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hashPrefix</name></name> <operator>=</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>hashPrefix</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hashSuffix</name></name> <operator>=</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>hashSuffix</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hashMethod</name></name> <operator>=</operator> <name><name>dbInfo</name><operator>-&gt;</operator><name>hashMethod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgNum</name></name> <operator>=</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgNum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid vgNum %d in db %s's vgHash"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgNum</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgHash</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_VGROUP_HASH_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>vgInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>vgInfo</name> <operator>=</operator> <name>pIter</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgHash</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vgId</name> <operator>=</operator> <name><name>vgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgHash</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hashBegin</name> <operator>=</operator> <name><name>vgInfo</name><operator>-&gt;</operator><name>hashBegin</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgHash</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hashEnd</name> <operator>=</operator> <name><name>vgInfo</name><operator>-&gt;</operator><name>hashEnd</name></name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>dbInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vgInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>dbCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgRUnlockVgInfo</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ctgReleaseDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dbInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name>dbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogUpdateDBVgInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>dbId</name></decl></parameter>, <parameter><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type> <name>dbInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><name>dbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgUpdateVgroupEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>, <argument><expr><name>dbInfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogRemoveDB</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>dbId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgDropDbCacheEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogUpdateVgEpSet</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>epSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>epSet</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgUpdateVgEpsetEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dbFName</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>epSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogUpdateTableIndex</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>STableIndexRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pRsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableIndex</name><modifier>*</modifier></type> <name>pIndex</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgUpdateTbIndexEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIndex</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogRemoveTableMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgRemoveTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogRemoveStbMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>dbId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>stbName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>stbName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgDropStbMetaEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>dbId</name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetTableMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_UNKNOWN_STB</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetCachedTableMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_UNKNOWN_STB</name> <operator>|</operator> <name>CTG_FLAG_ONLY_CACHE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>catalogGetSTableMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>,
                             <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_STB</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetCachedSTableMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>,          <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_STB</name> <operator>|</operator> <name>CTG_FLAG_ONLY_CACHE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>catalogUpdateTableMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>STableMetaRsp</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pMsg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgUpdateTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogChkTbMetaVersion</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTables</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SName</name></type>   <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STbSVersion</name><modifier>*</modifier></type> <name>pTb</name> <init>= <expr><operator>(</operator><name>STbSVersion</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTables</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTb</name><operator>-&gt;</operator><name>tbFName</name></name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>pTb</name><operator>-&gt;</operator><name>tbFName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pTb</name><operator>-&gt;</operator><name>tbFName</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>  <name>tbType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>     <name><name>stbName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ctgReadTbVerFromCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sver</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sver</name> <operator>&lt;</operator> <name><name>pTb</name><operator>-&gt;</operator><name>sver</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tver</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tver</name> <operator>&lt;</operator> <name><name>pTb</name><operator>-&gt;</operator><name>tver</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <switch>switch <condition>(<expr><name>tbType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>TSDB_CHILD_TABLE</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>SName</name></type> <name>stb</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>stb</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stb</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>ctgRemoveTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TSDB_SUPER_TABLE</name></expr>:</case>
        <case>case <expr><name>TSDB_NORMAL_TABLE</name></expr>:</case>
          <expr_stmt><expr><call><name>ctgRemoveTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"ignore table type %d"</literal></expr></argument>, <argument><expr><name>tbType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogRefreshDBVgInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgRefreshDBVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogRefreshTableMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>isSTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTableName</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_FORCE_UPDATE</name> <operator>|</operator> <call><name>CTG_FLAG_MAKE_STB</name><argument_list>(<argument><expr><name>isSTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_FLAG_SET_SYS_DB</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgRefreshTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogRefreshGetTableMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>,
                                   <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>isSTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCtgTbMetaCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CTG_FLAG_FORCE_UPDATE</name> <operator>|</operator> <call><name>CTG_FLAG_MAKE_STB</name><argument_list>(<argument><expr><name>isSTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetTableDistVgInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTableName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pVgList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"no valid vgInfo for db, dbname:%s"</literal></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetTbDistVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr></argument>, <argument><expr><name>pVgList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetTableHashVgroup</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>,
                                  <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetTbHashVgroup</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetCachedTableHashVgroup</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>,           <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>exists</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetTbHashVgroup</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetCachedTableVgMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>,          <parameter><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetCachedTbVgMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t catalogGetAllMeta(SCatalog* pCtg, SRequestConnInfo* pConn, const SCatalogReq* pReq, SMetaData* pRsp) {
  CTG_API_ENTER();

  if (NULL == pCtg || NULL == pConn || NULL == pReq || NULL == pRsp) {
    CTG_API_LEAVE(TSDB_CODE_CTG_INVALID_INPUT);
  }

  int32_t code = 0;
  pRsp-&gt;pTableMeta = NULL;

  if (pReq-&gt;pTableMeta) {
    int32_t tbNum = (int32_t)taosArrayGetSize(pReq-&gt;pTableMeta);
    if (tbNum &lt;= 0) {
      ctgError("empty table name list, tbNum:%d", tbNum);
      CTG_ERR_JRET(TSDB_CODE_CTG_INVALID_INPUT);
    }

    pRsp-&gt;pTableMeta = taosArrayInit(tbNum, POINTER_BYTES);
    if (NULL == pRsp-&gt;pTableMeta) {
      ctgError("taosArrayInit %d failed", tbNum);
      CTG_ERR_JRET(TSDB_CODE_OUT_OF_MEMORY);
    }

    for (int32_t i = 0; i &lt; tbNum; ++i) {
      SName*        name = taosArrayGet(pReq-&gt;pTableMeta, i);
      STableMeta*   pTableMeta = NULL;
      SCtgTbMetaCtx ctx = {0};
      ctx.pName = name;
      ctx.flag = CTG_FLAG_UNKNOWN_STB;

      CTG_ERR_JRET(ctgGetTbMeta(pCtg, pConn, &amp;ctx, &amp;pTableMeta));

      if (NULL == taosArrayPush(pRsp-&gt;pTableMeta, &amp;pTableMeta)) {
        ctgError("taosArrayPush failed, idx:%d", i);
        taosMemoryFreeClear(pTableMeta);
        CTG_ERR_JRET(TSDB_CODE_OUT_OF_MEMORY);
      }
    }
  }

  if (pReq-&gt;qNodeRequired) {
    pRsp-&gt;pQnodeList = taosArrayInit(10, sizeof(SQueryNodeLoad));
    CTG_ERR_JRET(ctgGetQnodeListFromMnode(pCtg, pConn, pRsp-&gt;pQnodeList, NULL));
  }

  CTG_API_LEAVE(TSDB_CODE_SUCCESS);

_return:

  if (pRsp-&gt;pTableMeta) {
    int32_t aSize = taosArrayGetSize(pRsp-&gt;pTableMeta);
    for (int32_t i = 0; i &lt; aSize; ++i) {
      STableMeta* pMeta = taosArrayGetP(pRsp-&gt;pTableMeta, i);
      taosMemoryFreeClear(pMeta);
    }

    taosArrayDestroy(pRsp-&gt;pTableMeta);
    pRsp-&gt;pTableMeta = NULL;
  }

  CTG_API_LEAVE(code);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>catalogAsyncGetAllMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SCatalogReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>catalogCallback</name></type> <name>fp</name></decl></parameter>,
                               <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>jobId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pReq</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>fp</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgJob</name><modifier>*</modifier></type> <name>pJob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgInitJob</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pJob</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgLaunchJob</name><argument_list>(<argument><expr><name>pJob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// NOTE: here the assignment of jobId is invalid, may over-write the true scheduler created query job.</comment>
  <comment type="line">//  *jobId = pJob-&gt;refId;</comment>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>pJob</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>jobPool</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>jobPool</name></name></expr></argument>, <argument><expr><name><name>pJob</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetQnodeList</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pQnodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pQnodeList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetQnodeListFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pQnodeList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetDnodeList</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDnodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pDnodeList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetDnodeListFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pDnodeList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetExpiredSTables</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SSTableVersion</name><modifier>*</modifier><modifier>*</modifier></type> <name>stables</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>stables</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>num</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgMetaRentGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>stbRent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>stables</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSTableVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetExpiredDBs</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SDbVgVersion</name><modifier>*</modifier><modifier>*</modifier></type> <name>dbs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbs</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>num</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgMetaRentGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>dbRent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>dbs</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDbVgVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetExpiredUsers</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SUserAuthVersion</name><modifier>*</modifier><modifier>*</modifier></type> <name>users</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>users</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>num</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>users</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>*</operator><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUserAuthVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>users</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"calloc %d userAuthVersion failed"</literal></expr></argument>, <argument><expr><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgUserAuth</name><modifier>*</modifier></type> <name>pAuth</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pAuth</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>key</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pAuth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>users</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>user</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>users</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name><name>user</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>users</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>version</name> <operator>=</operator> <name><name>pAuth</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <operator>*</operator><name>num</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr></argument>, <argument><expr><name>pAuth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pAuth</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>userCache</name></name></expr></argument>, <argument><expr><name>pAuth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetDBCfg</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pDbCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pDbCfg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetDBCfgFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>pDbCfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetIndexMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>indexName</name></decl></parameter>, <parameter><decl><type><name>SIndexInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>indexName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgGetIndexInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetTableIndex</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTableName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pRes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbIndex</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogRefreshGetTableCfg</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTableName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pCfg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgRemoveTbMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetTbCfg</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pTableName</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogGetUdfInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>funcName</name></decl></parameter>, <parameter><decl><type><name>SFuncInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>funcName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetUdfInfoFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>funcName</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogChkAuth</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>AUTH_TYPE</name></type> <name>type</name></decl></parameter>,
                       <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pass</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>user</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pass</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgChkAuth</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogChkAuthFromCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>AUTH_TYPE</name></type> <name>type</name></decl></parameter>,
                                        <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>exists</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>user</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbFName</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pass</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>exists</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgChkAuth</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>catalogGetServerVersion</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pConn</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pVersion</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>ctgGetSvrVerFromMnode</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pVersion</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogUpdateUserAuthInfo</name><parameter_list>(<parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SGetUserAuthRsp</name><modifier>*</modifier></type> <name>pAuth</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pAuth</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_CTG_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><call><name>ctgUpdateUserEnqueue</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pAuth</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>catalogClearCache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CTG_API_ENTER_NOLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"start to clear catalog cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name> <operator>||</operator> <call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>exit</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_API_LEAVE_NOLOCK</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>ctgClearCacheEnqueue</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"clear catalog cache end, code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_API_LEAVE_NOLOCK</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>catalogDestroy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"start to destroy catalog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name> <operator>||</operator> <call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>exit</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>exit</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckCurrentInDll</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgClearCacheEnqueue</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>updateThread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"catalog destroyed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
