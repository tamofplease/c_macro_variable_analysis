<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/catalog/src/ctgDbg.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalogInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SCatalogMgmt</name></type> <name>gCtgMgmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SCtgDebug</name></type>           <name>gCTGDebug</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ctgdUserCallback</name><parameter_list>(<parameter><decl><type><name>SMetaData</name> <modifier>*</modifier></type><name>pResult</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>param</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"async call result: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pResult</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty meta result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>pTableMeta</name></name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STableMeta</name>    <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STableMeta</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STableComInfo</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tableInfo</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>TSDB_CHILD_TABLE</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"table meta: type:%d, vgId:%d, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">",suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
               <argument><expr><name><name>p</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"table meta: type:%d, vgId:%d, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">",suid:0x%"</literal> <name>PRIx64</name>
               <literal type="string">",sv:%d, tv:%d, tagNum:%d, precision:%d, colNum:%d, rowSize:%d"</literal></expr></argument>,
               <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tversion</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>,
               <argument><expr><name><name>c</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>rowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>colNum</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>colNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"[%d] name:%s, type:%d, colId:%d, bytes:%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty table meta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbVgroup</name></name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>vgNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"db %d vgInfo:"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vgNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SVgroupInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"vg :%d info: vgId:%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty db vgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbInfo</name></name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDbInfo</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"db %d dbInfo: vgVer:%d, tbNum:%d, stateTs:%"</literal> <name>PRId64</name> <literal type="string">" dbId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>vgVer</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>tbNum</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>stateTs</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty db info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>pTableHash</name></name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVgroupInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"table %d vg info: vgId:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty table hash vgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>pUdfList</name></name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pUdfList</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pUdfList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFuncInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pUdfList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"udf %d info: name:%s, funcType:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>funcType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty udf info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbCfg</name></name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDbCfgInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"db %d info: numOFVgroups:%d, numOfStables:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfStables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty db cfg info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>pUser</name></name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>auth</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"user auth %d info: %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>*</operator><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty user auth info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>pQnodeList</name></name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SQueryNodeAddr</name> <modifier>*</modifier></type><name>qaddr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"qnode %d info: id:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>qaddr</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"empty qnode info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
prepare SQL:
create database db1;
use db1;
create stable st1 (ts timestamp, f1 int) tags(t1 int);
create table tb1 using st1 tags(1);
insert into tb1 values (now, 1);
create qnode on dnode 1;
create user user1 pass "abc";
create database db2;
grant write on db2.* to user1;
create function udf1 as '/tmp/libudf1.so' outputtype int;
create aggregate function udf2 as '/tmp/libudf2.so' outputtype int;
*/</comment>
<function><type><name>int32_t</name></type> <name>ctgdLaunchAsyncCall</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SRequestConnInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>reqId</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forceUpdate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalogReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pTableMeta</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pDbVgroup</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pDbInfo</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pTableHash</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pUdf</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pDbCfg</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pIndex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// taosArrayInit(2, TSDB_INDEX_FNAME_LEN);</comment>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pUser</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUserAuthInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>qNodeRequired</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>forceUpdate</name></name> <operator>=</operator> <name>forceUpdate</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SName</name></type>         <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>funcName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserAuthInfo</name></type> <name>user</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"1.db1.tb1"</literal></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"1.db1.st1"</literal></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><literal type="string">"1.db1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><literal type="string">"1.db2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pDbInfo</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>funcName</name></expr></argument>, <argument><expr><literal type="string">"udf1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pUdf</name></name></expr></argument>, <argument><expr><name>funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>funcName</name></expr></argument>, <argument><expr><literal type="string">"udf2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pUdf</name></name></expr></argument>, <argument><expr><name>funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>user</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>user</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><literal type="string">"1.db1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AUTH_TYPE_READ</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pUser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AUTH_TYPE_WRITE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pUser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AUTH_TYPE_OTHER</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pUser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>user</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><literal type="string">"user1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>user</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><literal type="string">"1.db2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AUTH_TYPE_READ</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pUser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AUTH_TYPE_WRITE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pUser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AUTH_TYPE_OTHER</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pUser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>param</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>jobId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>CTG_ERR_JRET</name><argument_list>(<argument><expr><call><name>catalogAsyncGetAllMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>ctgdUserCallback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pTableHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pUdf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgdEnableDebug</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"lock"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCTGDebug</name><operator>.</operator><name>lockEnable</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"catalog lock debug set to %d"</literal></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"cache"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCTGDebug</name><operator>.</operator><name>cacheEnable</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"catalog cache debug set to %d"</literal></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"api"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCTGDebug</name><operator>.</operator><name>apiEnable</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"catalog api debug set to %d"</literal></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCTGDebug</name><operator>.</operator><name>metaEnable</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"catalog meta debug set to %d"</literal></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"stopUpdate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pCtg</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SCatalog</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pCtg</name><operator>-&gt;</operator><name>stopUpdate</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"catalog stopUpdate set to %d"</literal></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid debug option:%s"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgdHandleDbgCommand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>command</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_PARA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>CTG_MAX_COMMAND_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_PARA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>newItem</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><operator>(</operator><name>dup</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>dup</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>dup</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>newItem</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>newItem</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>newItem</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>option</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>option</name> <operator>=</operator> <name>dup</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>param</name> <operator>=</operator> <name>dup</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_PARA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>bool</name></type> <name>enable</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>ctgdEnableDebug</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CTG_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgdGetOneHandle</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier><modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pCtg</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SCatalog</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>pHandle</name> <operator>=</operator> <name>pCtg</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>ctgdGetStatNum</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"runtime.numOfOpDequeue"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>res</name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gCtgMgmt</name><operator>.</operator><name>stat</name><operator>.</operator><name>runtime</name><operator>.</operator><name>numOfOpDequeue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid stat option:%s"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_CTG_INTERNAL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgdGetTbMetaNum</name><parameter_list>(<parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgdGetStbNum</name><parameter_list>(<parameter><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgdGetRentNum</name><parameter_list>(<parameter><decl><type><name>SCtgRentMgmt</name> <modifier>*</modifier></type><name>rent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rent</name><operator>-&gt;</operator><name>slotNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCtgRentSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><operator>&amp;</operator><name><name>rent</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>num</name> <operator>+=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgdGetClusterCacheNum</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CTG_DBG_DB_NUM</name></expr>:</case>
      <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CTG_DBG_DB_RENT_NUM</name></expr>:</case>
      <return>return <expr><call><name>ctgdGetRentNum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>dbRent</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CTG_DBG_STB_RENT_NUM</name></expr>:</case>
      <return>return <expr><call><name>ctgdGetRentNum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtg</name><operator>-&gt;</operator><name>stbRent</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dbCache</name> <operator>=</operator> <operator>(</operator><name>SCtgDBCache</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>CTG_DBG_META_NUM</name></expr>:</case>
        <expr_stmt><expr><name>num</name> <operator>+=</operator> <call><name>ctgdGetTbMetaNum</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>CTG_DBG_STB_NUM</name></expr>:</case>
        <expr_stmt><expr><name>num</name> <operator>+=</operator> <call><name>ctgdGetStbNum</name><argument_list>(<argument><expr><name>dbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>ctgError</name><argument_list>(<argument><expr><literal type="string">"invalid type:%d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgdShowTableMeta</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gCTGDebug</name><operator>.</operator><name>metaEnable</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableComInfo</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tableInfo</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CHILD_TABLE</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"table [%s] meta: type:%d, vgId:%d, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">",suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
             <argument><expr><name><name>p</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"table [%s] meta: type:%d, vgId:%d, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">",suid:0x%"</literal> <name>PRIx64</name>
             <literal type="string">",sv:%d, tv:%d, tagNum:%d, precision:%d, colNum:%d, rowSize:%d"</literal></expr></argument>,
             <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tversion</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>,
             <argument><expr><name><name>c</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>rowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>colNum</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>colNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"[%d] name:%s, type:%d, colId:%d, bytes:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgdShowDBCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>dbHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbHash</name> <operator>||</operator> <operator>!</operator><name><name>gCTGDebug</name><operator>.</operator><name>cacheEnable</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtgDBCache</name> <modifier>*</modifier></type><name>dbCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>dbHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>dbFName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>dbCache</name> <operator>=</operator> <operator>(</operator><name>SCtgDBCache</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>dbFName</name> <operator>=</operator> <call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>metaNum</name> <init>= <expr><ternary><condition><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr> ?</condition><then> <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>tbCache</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>stbNum</name> <init>= <expr><ternary><condition><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr> ?</condition><then> <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>stbCache</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>vgVersion</name> <init>= <expr><name>CTG_DEFAULT_INVALID_VERSION</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>hashMethod</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>hashPrefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>hashSuffix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>stateTs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>vgNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>vgVersion</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hashMethod</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>hashMethod</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hashPrefix</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>hashPrefix</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hashSuffix</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>hashSuffix</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>stateTs</name> <operator>=</operator> <name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>stateTs</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>vgNum</name> <operator>=</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"[%d] db [%.*s][0x%"</literal> <name>PRIx64</name>
             <literal type="string">"] %s: metaNum:%d, stbNum:%d, vgVersion:%d, stateTs:%"</literal> <name>PRId64</name> <literal type="string">", hashMethod:%d, prefix:%d, suffix:%d, vgNum:%d"</literal></expr></argument>,
             <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>dbCache</name><operator>-&gt;</operator><name>deleted</name></name></expr> ?</condition><then> <expr><literal type="string">"deleted"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>metaNum</name></expr></argument>, <argument><expr><name>stbNum</name></expr></argument>, <argument><expr><name>vgVersion</name></expr></argument>, <argument><expr><name>stateTs</name></expr></argument>, 
             <argument><expr><name>hashMethod</name></expr></argument>, <argument><expr><name>hashPrefix</name></expr></argument>, <argument><expr><name>hashSuffix</name></expr></argument>, <argument><expr><name>vgNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVgIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>pVgIter</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SVgroupInfo</name> <modifier>*</modifier></type> <name>pVg</name> <init>= <expr><operator>(</operator><name>SVgroupInfo</name> <operator>*</operator><operator>)</operator><name>pVgIter</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"The %04dth VG [id:%d, hashBegin:%u, hashEnd:%u, numOfTable:%d, epNum:%d, inUse:%d]"</literal></expr></argument>,
                 <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>hashBegin</name></name></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>hashEnd</name></name></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>numOfTable</name></name></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>pVg</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SEp</name> <modifier>*</modifier></type><name>pEp</name> <init>= <expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"\tEp %d [fqdn:%s, port:%d]"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        
        <expr_stmt><expr><name>pVgIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>dbCache</name><operator>-&gt;</operator><name>vgCache</name><operator>.</operator><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>pVgIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>dbHash</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ctgdShowClusterCache</name><parameter_list>(<parameter><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gCTGDebug</name><operator>.</operator><name>cacheEnable</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pCtg</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"## cluster 0x%"</literal> <name>PRIx64</name> <literal type="string">" %p cache Info BEGIN ##"</literal></expr></argument>, <argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"db:%d meta:%d stb:%d dbRent:%d stbRent:%d"</literal></expr></argument>, <argument><expr><call><name>ctgdGetClusterCacheNum</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>CTG_DBG_DB_NUM</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>ctgdGetClusterCacheNum</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>CTG_DBG_META_NUM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ctgdGetClusterCacheNum</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>CTG_DBG_STB_NUM</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>ctgdGetClusterCacheNum</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>CTG_DBG_DB_RENT_NUM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ctgdGetClusterCacheNum</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name>CTG_DBG_STB_RENT_NUM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgdShowDBCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>dbCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ctgDebug</name><argument_list>(<argument><expr><literal type="string">"## cluster 0x%"</literal> <name>PRIx64</name> <literal type="string">" %p cache Info END ##"</literal></expr></argument>, <argument><expr><name><name>pCtg</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>ctgdShowCacheInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gCTGDebug</name><operator>.</operator><name>cacheEnable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_CTG_OUT_OF_SERVICE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CTG_API_ENTER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"# total catalog cluster number %d #"</literal></expr></argument>, <argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pCtg</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SCatalog</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pCtg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ctgdShowClusterCache</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>gCtgMgmt</name><operator>.</operator><name>pCluster</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>CTG_API_LEAVE</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
