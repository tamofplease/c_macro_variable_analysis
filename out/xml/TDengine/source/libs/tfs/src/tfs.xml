<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/tfs/src/tfs.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tfsInt.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>tfsMount</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>SDiskCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>tfsCheck</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>tfsCheckAndFormatCfg</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>SDiskCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>tfsFormatDir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>idir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>odir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>STfsDisk</name> <modifier>*</modifier></type><name>tfsGetDiskByName</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>tfsOpendirImpl</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>STfsDir</name> <modifier>*</modifier></type><name>pDir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>STfsDisk</name> <modifier>*</modifier></type><name>tfsNextDisk</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>SDiskIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>STfs</name> <modifier>*</modifier></type><name>tfsOpen</name><parameter_list>(<parameter><decl><type><name>SDiskCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ndisk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ndisk</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ndisk</name> <operator>&gt;</operator> <name>TFS_MAX_DISKS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STfs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTfs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadSpinInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTfs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tfsClose</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name>TFS_MAX_TIERS</name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STfsTier</name> <modifier>*</modifier></type><name>pTier</name> <init>= <expr><operator>&amp;</operator><name><name>pTfs</name><operator>-&gt;</operator><name>tiers</name><index>[<expr><name>level</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tfsInitTier</name><argument_list>(<argument><expr><name>pTier</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tfsClose</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pTfs</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>TFS_MAX_DISKS</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTfs</name><operator>-&gt;</operator><name>hash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tfsClose</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>idisk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idisk</name> <operator>&lt;</operator> <name>ndisk</name></expr>;</condition> <incr><expr><name>idisk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tfsMount</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCfg</name><index>[<expr><name>idisk</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tfsClose</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>tfsCheck</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tfsClose</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tfsUpdateSize</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tfsPosNextId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTfs</name><operator>-&gt;</operator><name>tiers</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pTfs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tfsClose</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTfs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name>TFS_MAX_LEVEL</name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tfsDestroyTier</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTfs</name><operator>-&gt;</operator><name>tiers</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pTfs</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadSpinDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTfs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tfsUpdateSize</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDiskSize</name></type> <name>size</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STfsTier</name> <modifier>*</modifier></type><name>pTier</name> <init>= <expr><operator>&amp;</operator><name><name>pTfs</name><operator>-&gt;</operator><name>tiers</name><index>[<expr><name>level</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tfsUpdateTierSize</name><argument_list>(<argument><expr><name>pTier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>size</name><operator>.</operator><name>total</name></name> <operator>+=</operator> <name><name>pTier</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>total</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>size</name><operator>.</operator><name>avail</name></name> <operator>+=</operator> <name><name>pTier</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>avail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>size</name><operator>.</operator><name>used</name></name> <operator>+=</operator> <name><name>pTier</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>used</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tfsLock</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTfs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tfsUnLock</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SDiskSize</name></type> <name>tfsGetSize</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tfsLock</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDiskSize</name></type> <name>size</name> <init>= <expr><name><name>pTfs</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tfsUnLock</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsGetLevel</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsAllocDisk</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>expLevel</name></decl></parameter>, <parameter><decl><type><name>SDiskID</name> <modifier>*</modifier></type><name>pDiskId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pDiskId</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>expLevel</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDiskId</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDiskId</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;=</operator> <name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDiskId</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDiskId</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDiskId</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name><name>pDiskId</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDiskId</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>tfsAllocDiskOnTier</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTfs</name><operator>-&gt;</operator><name>tiers</name><index>[<expr><name><name>pDiskId</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDiskId</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDiskId</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></while>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FS_NO_VALID_DISK</name></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tfsGetPrimaryPath</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>TFS_PRIMARY_DISK</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tfsGetDiskPath</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>SDiskID</name></type> <name>diskId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>TFS_DISK_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>diskId</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tfsInitFile</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>STfsFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>SDiskID</name></type> <name>diskId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STfsDisk</name> <modifier>*</modifier></type><name>pDisk</name> <init>= <expr><call><name>TFS_DISK_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>diskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDisk</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>did</name></name> <operator>=</operator> <name>diskId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>rname</name></name></expr></argument>, <argument><expr><name>rname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tmpName</name><index>[<expr><name>TMPNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpName</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>pDisk</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aname</name></name></expr></argument>, <argument><expr><name>tmpName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pTfs</name></name> <operator>=</operator> <name>pTfs</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tfsIsSameFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STfsFile</name> <modifier>*</modifier></type><name>pFile1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STfsFile</name> <modifier>*</modifier></type><name>pFile2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pFile2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pFile1</name><operator>-&gt;</operator><name>pTfs</name></name> <operator>!=</operator> <name><name>pFile2</name><operator>-&gt;</operator><name>pTfs</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFile1</name><operator>-&gt;</operator><name>did</name><operator>.</operator><name>level</name></name> <operator>!=</operator> <name><name>pFile2</name><operator>-&gt;</operator><name>did</name><operator>.</operator><name>level</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFile1</name><operator>-&gt;</operator><name>did</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name><name>pFile2</name><operator>-&gt;</operator><name>did</name><operator>.</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>nameBuf1</name><index>[<expr><name>TMPNAME_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nameBuf2</name><index>[<expr><name>TMPNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>nameBuf1</name></expr></argument>, <argument><expr><name><name>pFile1</name><operator>-&gt;</operator><name>rname</name></name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>nameBuf2</name></expr></argument>, <argument><expr><name><name>pFile2</name><operator>-&gt;</operator><name>rname</name></name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nameBuf1</name><index>[<expr><name>TMPNAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nameBuf2</name><index>[<expr><name>TMPNAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosRealPath</name><argument_list>(<argument><expr><name>nameBuf1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosRealPath</name><argument_list>(<argument><expr><name>nameBuf2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>nameBuf1</name></expr></argument>, <argument><expr><name>nameBuf2</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsEncodeFile</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>STfsFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeVariantI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>did</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeVariantI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>did</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>rname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tfsDecodeFile</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>STfsFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDiskID</name></type> <name>diskId</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>rname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeVariantI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>diskId</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeVariantI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>diskId</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tfsInitFile</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>diskId</name></expr></argument>, <argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tfsBasename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STfsFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tname</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aname</name></name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><call><name>taosDirEntryBaseName</name><argument_list>(<argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tfsDirname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STfsFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tname</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aname</name></name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><call><name>taosDirName</name><argument_list>(<argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tfsAbsoluteName</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>SDiskID</name></type> <name>diskId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STfsDisk</name> <modifier>*</modifier></type><name>pDisk</name> <init>= <expr><call><name>TFS_DISK_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>diskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>aname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>pDisk</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsRemoveFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STfsFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aname</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsCopyFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STfsFile</name> <modifier>*</modifier></type><name>pFile1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STfsFile</name> <modifier>*</modifier></type><name>pFile2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>taosCopyFile</name><argument_list>(<argument><expr><name><name>pFile1</name><operator>-&gt;</operator><name>aname</name></name></expr></argument>, <argument><expr><name><name>pFile2</name><operator>-&gt;</operator><name>aname</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsMkdirAt</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rname</name></decl></parameter>, <parameter><decl><type><name>SDiskID</name></type> <name>diskId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STfsDisk</name> <modifier>*</modifier></type><name>pDisk</name> <init>= <expr><call><name>TFS_DISK_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>diskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>aname</name><index>[<expr><name>TMPNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>aname</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>pDisk</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name>aname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsMkdirRecurAt</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rname</name></decl></parameter>, <parameter><decl><type><name>SDiskID</name></type> <name>diskId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tfsMkdirAt</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>rname</name></expr></argument>, <argument><expr><name>diskId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// Try to create upper</comment>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Make a copy of dirname(s) because the implementation of 'dirname' differs on different platforms.</comment>
      <comment type="line">// Some platform may modify the contents of the string passed into dirname(). Others may return a pointer to</comment>
      <comment type="line">// internal static storage space that will be overwritten by next call. For case like that, we should not use</comment>
      <comment type="line">// the pointer directly in this recursion.</comment>
      <comment type="line">// See</comment>
      <comment type="line">// https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/dirname.3.html</comment>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>taosDirName</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tfsMkdirRecurAt</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>diskId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tfsMkdirAt</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>rname</name></expr></argument>, <argument><expr><name>diskId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsMkdir</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STfsTier</name> <modifier>*</modifier></type><name>pTier</name> <init>= <expr><call><name>TFS_TIER_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>pTier</name><operator>-&gt;</operator><name>ndisk</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDiskID</name></type> <name>did</name> <init>= <expr><block>{<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr>, <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tfsMkdirAt</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>rname</name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsRmdir</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>rname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>aname</name><index>[<expr><name>TMPNAME_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STfsTier</name> <modifier>*</modifier></type><name>pTier</name> <init>= <expr><call><name>TFS_TIER_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>pTier</name><operator>-&gt;</operator><name>ndisk</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STfsDisk</name> <modifier>*</modifier></type><name>pDisk</name> <init>= <expr><name><name>pTier</name><operator>-&gt;</operator><name>disks</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>aname</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>pDisk</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"tfs remove dir : path:%s aname:%s rname:[%s]"</literal></expr></argument>, <argument><expr><name><name>pDisk</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>aname</name></expr></argument>, <argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosRemoveDir</name><argument_list>(<argument><expr><name>aname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsRename</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>orname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nrname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>oaname</name><index>[<expr><name>TMPNAME_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>naname</name><index>[<expr><name>TMPNAME_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STfsTier</name> <modifier>*</modifier></type><name>pTier</name> <init>= <expr><call><name>TFS_TIER_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>pTier</name><operator>-&gt;</operator><name>ndisk</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STfsDisk</name> <modifier>*</modifier></type><name>pDisk</name> <init>= <expr><name><name>pTier</name><operator>-&gt;</operator><name>disks</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>oaname</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>pDisk</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>orname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>naname</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>pDisk</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>nrname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosRenameFile</name><argument_list>(<argument><expr><name>oaname</name></expr></argument>, <argument><expr><name>naname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"failed to rename %s to %s since %s"</literal></expr></argument>, <argument><expr><name>oaname</name></expr></argument>, <argument><expr><name>naname</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STfsDir</name> <modifier>*</modifier></type><name>tfsOpendir</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STfsDir</name> <modifier>*</modifier></type><name>pDir</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STfsDir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDir</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDiskID</name></type> <name>diskId</name> <init>= <expr><block>{<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDir</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>pDisk</name></name> <operator>=</operator> <call><name>TFS_DISK_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>diskId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDir</name><operator>-&gt;</operator><name>pTfs</name></name> <operator>=</operator> <name>pTfs</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pDir</name><operator>-&gt;</operator><name>dirName</name></name></expr></argument>, <argument><expr><name>rname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tfsOpendirImpl</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>pDir</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pDir</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>STfsFile</name> <modifier>*</modifier></type><name>tfsReaddir</name><parameter_list>(<parameter><decl><type><name>STfsDir</name> <modifier>*</modifier></type><name>pTfsDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTfsDir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>bname</name><index>[<expr><name>TMPNAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TdDirEntryPtr</name></type> <name>pDirEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pDirEntry</name> <operator>=</operator> <call><name>taosReadDir</name><argument_list>(<argument><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDirEntry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// Skip . and ..</comment>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>taosGetDirEntryName</name><argument_list>(<argument><expr><name>pDirEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>dirName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>bname</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>bname</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>dirName</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>tfsInitFile</name><argument_list>(<argument><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTfsDir</name><operator>-&gt;</operator><name>tfile</name></name></expr></argument>, <argument><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>did</name></name></expr></argument>, <argument><expr><name>bname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>&amp;</operator><name><name>pTfsDir</name><operator>-&gt;</operator><name>tfile</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tfsOpendirImpl</name><argument_list>(<argument><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name>pTfsDir</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tfsClosedir</name><parameter_list>(<parameter><decl><type><name>STfsDir</name> <modifier>*</modifier></type><name>pTfsDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTfsDir</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTfsDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfsMount</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>SDiskCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tfsCheckAndFormatCfg</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDiskID</name></type>   <name>did</name> <init>= <expr><block>{<expr><operator>.</operator><name>level</name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STfsDisk</name> <modifier>*</modifier></type><name>pDisk</name> <init>= <expr><call><name>tfsMountDiskToTier</name><argument_list>(<argument><expr><call><name>TFS_TIER_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name><name>did</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDisk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"failed to mount disk %s to level %d since %s"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>did</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>pDisk</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pTfs</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name><operator>)</operator></expr></argument>, <argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>did</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>did</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name> <operator>&lt;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfsCheckAndFormatCfg</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>SDiskCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dirName</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;=</operator> <name>TFS_MAX_TIERS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"failed to mount %s to FS since invalid level %d"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FS_INVLD_CFG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>primary</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"failed to mount %s to FS since disk is primary but level %d not 0"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FS_INVLD_CFG</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TFS_PRIMARY_DISK</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"failed to mount %s to FS since duplicate primary mount"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FS_DUP_PRIMARY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tfsFormatDir</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>dirName</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"failed to mount %s to FS since %s"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tfsGetDiskByName</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>dirName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"failed to mount %s to FS since duplicate mount"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FS_INVLD_CFG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckAccessFile</name><argument_list>(<argument><expr><name>dirName</name></expr></argument>, <argument><expr><name>TD_FILE_ACCESS_EXIST_OK</name> <operator>|</operator> <name>TD_FILE_ACCESS_READ_OK</name> <operator>|</operator> <name>TD_FILE_ACCESS_WRITE_OK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"failed to mount %s to FS since no R/W access rights"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FS_INVLD_CFG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosIsDir</name><argument_list>(<argument><expr><name>dirName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"failed to mount %s to FS since not a directory"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FS_INVLD_CFG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>dirName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfsFormatDir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>idir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>odir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>wordexp_t</name></type> <name>wep</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>wordexp</name><argument_list>(<argument><expr><name>idir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosRealPath</name><argument_list>(<argument><expr><name><name>wep</name><operator>.</operator><name>we_wordv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wordfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>odir</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>wordfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfsCheck</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>TFS_PRIMARY_DISK</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"no primary disk is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FS_NO_PRIMARY_DISK</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>TFS_TIER_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ndisk</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fError</name><argument_list>(<argument><expr><literal type="string">"no disk at level %d"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FS_NO_MOUNT_AT_TIER</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STfsDisk</name> <modifier>*</modifier></type><name>tfsGetDiskByName</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pTfs</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>dir</name></expr></argument>, <argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SDiskID</name></type>   <name>did</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SDiskID</name> <operator>*</operator><operator>)</operator><name>pr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STfsDisk</name> <modifier>*</modifier></type><name>pDisk</name> <init>= <expr><call><name>TFS_DISK_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>pDisk</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfsOpendirImpl</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>STfsDir</name> <modifier>*</modifier></type><name>pTfsDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STfsDisk</name> <modifier>*</modifier></type><name>pDisk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>adir</name><index>[<expr><name>TMPNAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pDisk</name> <operator>=</operator> <call><name>tfsNextDisk</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTfsDir</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDisk</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>did</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name><name>pDisk</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>did</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>pDisk</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDisk</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pDisk</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>adir</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>dirName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>adir</name></expr></argument>, <argument><expr><name>TMPNAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>pDisk</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>dirName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name> <operator>=</operator> <call><name>taosOpenDir</name><argument_list>(<argument><expr><name>adir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTfsDir</name><operator>-&gt;</operator><name>pDir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STfsDisk</name> <modifier>*</modifier></type><name>tfsNextDisk</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>SDiskIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>STfsDisk</name> <modifier>*</modifier></type><name>pDisk</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pDisk</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDisk</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SDiskID</name></type> <name>did</name> <init>= <expr><block>{<expr><operator>.</operator><name>level</name> <operator>=</operator> <name><name>pDisk</name><operator>-&gt;</operator><name>level</name></name></expr>, <expr><operator>.</operator><name>id</name> <operator>=</operator> <name><name>pDisk</name><operator>-&gt;</operator><name>id</name></name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>did</name><operator>.</operator><name>id</name></name> <operator>&lt;</operator> <call><name>TFS_TIER_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name><name>did</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ndisk</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pDisk</name></name> <operator>=</operator> <call><name>TFS_DISK_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>did</name><operator>.</operator><name>level</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>did</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>did</name><operator>.</operator><name>level</name></name> <operator>&lt;</operator> <name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pDisk</name></name> <operator>=</operator> <call><name>TFS_DISK_AT</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pDisk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pDisk</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tfsGetMonitorInfo</name><parameter_list>(<parameter><decl><type><name>STfs</name> <modifier>*</modifier></type><name>pTfs</name></decl></parameter>, <parameter><decl><type><name>SMonDiskInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>datadirs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMonDiskDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>datadirs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tfsUpdateSize</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tfsLock</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name><name>pTfs</name><operator>-&gt;</operator><name>nlevel</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STfsTier</name> <modifier>*</modifier></type><name>pTier</name> <init>= <expr><operator>&amp;</operator><name><name>pTfs</name><operator>-&gt;</operator><name>tiers</name><index>[<expr><name>level</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>disk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>disk</name> <operator>&lt;</operator> <name><name>pTier</name><operator>-&gt;</operator><name>ndisk</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>disk</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STfsDisk</name>    <modifier>*</modifier></type><name>pDisk</name> <init>= <expr><name><name>pTier</name><operator>-&gt;</operator><name>disks</name><index>[<expr><name>disk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SMonDiskDesc</name></type> <name>dinfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>dinfo</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>pDisk</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dinfo</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name><name>pDisk</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>dinfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pDisk</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dinfo</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>datadirs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>tfsUnLock</name><argument_list>(<argument><expr><name>pTfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
