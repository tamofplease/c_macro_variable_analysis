<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncEnv.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncEnv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SSyncEnv</name></type> <name>gSyncEnv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>gNodeRefId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>gHbDataRefId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>syncEnvTick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>SSyncEnv</name> <modifier>*</modifier></type><name>syncEnv</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>gSyncEnv</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncIsInit</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gSyncEnv</name><operator>.</operator><name>isStart</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>syncIsInit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00000000FFFFFFFF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosSeedRand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gSyncEnv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncEnv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gSyncEnv</name><operator>.</operator><name>envTickTimerCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gSyncEnv</name><operator>.</operator><name>envTickTimerMS</name></name> <operator>=</operator> <name>ENV_TICK_TIMER_MS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gSyncEnv</name><operator>.</operator><name>FpEnvTickTimer</name></name> <operator>=</operator> <name>syncEnvTick</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gSyncEnv</name><operator>.</operator><name>envTickTimerLogicClock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gSyncEnv</name><operator>.</operator><name>envTickTimerLogicClockUser</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// start tmr thread</comment>
  <expr_stmt><expr><name><name>gSyncEnv</name><operator>.</operator><name>pTimerManager</name></name> <operator>=</operator> <call><name>taosTmrInit</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="string">"SYNC-ENV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gSyncEnv</name><operator>.</operator><name>isStart</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>gNodeRefId</name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><operator>(</operator><name>RefFp</name><operator>)</operator><name>syncNodeClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>gNodeRefId</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to init node ref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncCleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>gHbDataRefId</name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><operator>(</operator><name>RefFp</name><operator>)</operator><name>syncHbTimerDataFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>gHbDataRefId</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to init hb-data ref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncCleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"sync rsetId:%d is open"</literal></expr></argument>, <argument><expr><name>gNodeRefId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncCleanUp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gSyncEnv</name><operator>.</operator><name>isStart</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosTmrCleanUp</name><argument_list>(<argument><expr><name><name>gSyncEnv</name><operator>.</operator><name>pTimerManager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gSyncEnv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncEnv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>gNodeRefId</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"sync rsetId:%d is closed"</literal></expr></argument>, <argument><expr><name>gNodeRefId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name>gNodeRefId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gNodeRefId</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>gHbDataRefId</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"sync rsetId:%d is closed"</literal></expr></argument>, <argument><expr><name>gHbDataRefId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name>gHbDataRefId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gHbDataRefId</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>syncNodeAdd</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name>gNodeRefId</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync rid:%"</literal> <name>PRId64</name> <literal type="string">" is added to rsetId:%d"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name></expr></argument>, <argument><expr><name>gNodeRefId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeRemove</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name>gNodeRefId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>SSyncNode</name> <modifier>*</modifier></type><name>syncNodeAcquire</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name>gNodeRefId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to acquire node from refId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_INTERNAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeRelease</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>gNodeRefId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>syncHbTimerDataAdd</name><parameter_list>(<parameter><decl><type><name>SSyncHbTimerData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>rid</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name>gHbDataRefId</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>rid</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name><name>pData</name><operator>-&gt;</operator><name>rid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncHbTimerDataRemove</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name>gHbDataRefId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>SSyncHbTimerData</name> <modifier>*</modifier></type><name>syncHbTimerDataAcquire</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncHbTimerData</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name>gHbDataRefId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to acquire hb-timer-data from refId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_INTERNAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pData</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncHbTimerDataRelease</name><parameter_list>(<parameter><decl><type><name>SSyncHbTimerData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>gHbDataRefId</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>rid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
void syncEnvStartTimer() {
  taosTmrReset(gSyncEnv.FpEnvTickTimer, gSyncEnv.envTickTimerMS, &amp;gSyncEnv, gSyncEnv.pTimerManager,
               &amp;gSyncEnv.pEnvTickTimer);
  atomic_store_64(&amp;gSyncEnv.envTickTimerLogicClock, gSyncEnv.envTickTimerLogicClockUser);
}

void syncEnvStopTimer() {
  int32_t ret = 0;
  atomic_add_fetch_64(&amp;gSyncEnv.envTickTimerLogicClockUser, 1);
  taosTmrStop(gSyncEnv.pEnvTickTimer);
  gSyncEnv.pEnvTickTimer = NULL;
  return ret;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncEnvTick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  SSyncEnv *pSyncEnv = param;
  if (atomic_load_64(&amp;gSyncEnv.envTickTimerLogicClockUser) &lt;= atomic_load_64(&amp;gSyncEnv.envTickTimerLogicClock)) {
    gSyncEnv.envTickTimerCounter++;
    sTrace("syncEnvTick do ... envTickTimerLogicClockUser:%" PRIu64 ", envTickTimerLogicClock:%" PRIu64
           ", envTickTimerCounter:%" PRIu64 ", envTickTimerMS:%d, tmrId:%p",
           gSyncEnv.envTickTimerLogicClockUser, gSyncEnv.envTickTimerLogicClock, gSyncEnv.envTickTimerCounter,
           gSyncEnv.envTickTimerMS, tmrId);

    <comment type="line">// do something, tick ...</comment>
    taosTmrReset(syncEnvTick, gSyncEnv.envTickTimerMS, pSyncEnv, gSyncEnv.pTimerManager, &amp;gSyncEnv.pEnvTickTimer);
  } else {
    sTrace("syncEnvTick pass ... envTickTimerLogicClockUser:%" PRIu64 ", envTickTimerLogicClock:%" PRIu64
           ", envTickTimerCounter:%" PRIu64 ", envTickTimerMS:%d, tmrId:%p",
           gSyncEnv.envTickTimerLogicClockUser, gSyncEnv.envTickTimerLogicClock, gSyncEnv.envTickTimerCounter,
           gSyncEnv.envTickTimerMS, tmrId);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
