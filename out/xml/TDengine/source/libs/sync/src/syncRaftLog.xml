<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncRaftLog.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftCfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<comment type="line">// log[m .. n]</comment>

<comment type="line">// public function</comment>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>raftLogRestoreFromSnapshot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>snapshotIndex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>raftLogAppendEntry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>raftLogTruncate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>fromIndex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>      <name>raftLogExist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>raftLogUpdateCommitIndex</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SyncIndex</name></type> <name>raftlogCommitIndex</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>raftLogGetLastEntry</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppLastEntry</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>logStoreCreate</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncLogStore</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogStore</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pLogStore-&gt;pCache = taosLRUCacheInit(10 * 1024 * 1024, 1, .5);</comment>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name> <operator>=</operator> <call><name>taosLRUCacheInit</name><argument_list>(<argument><expr><literal type="number">30</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>cacheHit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>cacheMiss</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosLRUCacheSetStrictCapacity</name><argument_list>(<argument><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncLogStoreData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name> <operator>=</operator> <name>pSyncNode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pWal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pWalHandle</name></name> <operator>=</operator> <call><name>walOpenReader</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWalHandle</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogUpdateCommitIndex</name></name> <operator>=</operator> <name>raftLogUpdateCommitIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogCommitIndex</name></name> <operator>=</operator> <name>raftlogCommitIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogRestoreFromSnapshot</name></name> <operator>=</operator> <name>raftLogRestoreFromSnapshot</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name> <operator>=</operator> <name>raftLogBeginIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogEndIndex</name></name> <operator>=</operator> <name>raftLogEndIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogIsEmpty</name></name> <operator>=</operator> <name>raftLogIsEmpty</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogEntryCount</name></name> <operator>=</operator> <name>raftLogEntryCount</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name> <operator>=</operator> <name>raftLogLastIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastTerm</name></name> <operator>=</operator> <name>raftLogLastTerm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogAppendEntry</name></name> <operator>=</operator> <name>raftLogAppendEntry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogGetEntry</name></name> <operator>=</operator> <name>raftLogGetEntry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogTruncate</name></name> <operator>=</operator> <name>raftLogTruncate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogWriteIndex</name></name> <operator>=</operator> <name>raftLogWriteIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogExist</name></name> <operator>=</operator> <name>raftLogExist</name></expr>;</expr_stmt>

  <return>return <expr><name>pLogStore</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logStoreDestory</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pLogStore</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>pWalHandle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>walCloseReader</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWalHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pWalHandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosLRUCacheEraseUnrefEntries</name><argument_list>(<argument><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosLRUCacheCleanup</name><argument_list>(<argument><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// log[m .. n]</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>raftLogRestoreFromSnapshot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>snapshotIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>snapshotIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><call><name>walRestoreFromSnapshot</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>snapshotIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>err</name> <init>= <expr><name>terrno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>errStr</name> <init>= <expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>sysErr</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sysErrStr</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>,
            <argument><expr><literal type="string">"wal restore from snapshot error, index:%"</literal> <name>PRId64</name> <literal type="string">", err:%d %X, msg:%s, syserr:%d, sysmsg:%s"</literal></expr></argument>,
            <argument><expr><name>snapshotIndex</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errStr</name></expr></argument>, <argument><expr><name>sysErr</name></expr></argument>, <argument><expr><name>sysErrStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncIndex</name></type> <name>raftLogBeginIndex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type>          <name>firstVer</name> <init>= <expr><call><name>walGetFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>firstVer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncIndex</name></type> <name>raftLogEndIndex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>raftLogLastIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>raftLogIsEmpty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>walIsEmpty</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftLogEntryCount</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>beginIndex</name> <init>= <expr><call><name>raftLogBeginIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>endIndex</name> <init>= <expr><call><name>raftLogEndIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>count</name> <init>= <expr><name>endIndex</name> <operator>-</operator> <name>beginIndex</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>count</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncIndex</name></type> <name>raftLogLastIndex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncIndex</name></type>          <name>lastIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type>          <name>lastVer</name> <init>= <expr><call><name>walGetLastVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>lastVer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncIndex</name></type> <name>raftLogWriteIndex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type>          <name>lastVer</name> <init>= <expr><call><name>walGetLastVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>lastVer</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raftLogExist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>b</name> <init>= <expr><call><name>walLogExist</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// if success, return last term</comment>
<comment type="line">// if not log, return 0</comment>
<comment type="line">// if error, return SYNC_TERM_INVALID</comment>
<function><type><name>SyncTerm</name></type> <name>raftLogLastTerm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>walIsEmpty</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pLastEntry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>raftLogGetLastEntry</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pLastEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pLastEntry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SyncTerm</name></type> <name>lastTerm</name> <init>= <expr><name><name>pLastEntry</name><operator>-&gt;</operator><name>term</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pLastEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>lastTerm</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>SYNC_TERM_INVALID</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// can not be here!</comment>
  <return>return <expr><name>SYNC_TERM_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>raftLogAppendEntry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type>    <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWalSyncInfo</name></type> <name>syncMeta</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>syncMeta</name><operator>.</operator><name>isWeek</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>isWeak</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>syncMeta</name><operator>.</operator><name>seqNum</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>seqNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>syncMeta</name><operator>.</operator><name>term</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsWriteBegin</name> <init>= <expr><call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>walAppendLog</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>, <argument><expr><name>syncMeta</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsWriteEnd</name> <init>= <expr><call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsElapsed</name> <init>= <expr><name>tsWriteEnd</name> <operator>-</operator> <name>tsWriteBegin</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>err</name> <init>= <expr><name>terrno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>errStr</name> <init>= <expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>sysErr</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sysErrStr</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"wal write error, index:%"</literal> <name>PRId64</name> <literal type="string">", err:%d %X, msg:%s, syserr:%d, sysmsg:%s"</literal></expr></argument>,
            <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errStr</name></expr></argument>, <argument><expr><name>sysErr</name></expr></argument>, <argument><expr><name>sysErrStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"write index:%"</literal> <name>PRId64</name> <literal type="string">", type:%s, origin type:%s, elapsed:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
          <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tsElapsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// entry found, return 0</comment>
<comment type="line">// entry not found, return -1, terrno = TSDB_CODE_WAL_LOG_NOT_EXIST</comment>
<comment type="line">// other error, return -1</comment>
<function><type><name>int32_t</name></type> <name>raftLogGetEntry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts1</name> <init>= <expr><call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SWalReader</name><modifier>*</modifier></type> <name>pWalHandle</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWalHandle</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWalHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_INTERNAL_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal handle is NULL"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts2</name> <init>= <expr><call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walReadVer</name><argument_list>(<argument><expr><name>pWalHandle</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts3</name> <init>= <expr><call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// code = walReadVerCached(pWalHandle, index);</comment>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>err</name> <init>= <expr><name>terrno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>errStr</name> <init>= <expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>sysErr</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sysErrStr</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"wal read not exist, index:%"</literal> <name>PRId64</name> <literal type="string">", err:%d %X, msg:%s, syserr:%d, sysmsg:%s"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>,
              <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errStr</name></expr></argument>, <argument><expr><name>sysErr</name></expr></argument>, <argument><expr><name>sysErrStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"wal read error, index:%"</literal> <name>PRId64</name> <literal type="string">", err:%d %X, msg:%s, syserr:%d, sysmsg:%s"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>,
              <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errStr</name></expr></argument>, <argument><expr><name>sysErr</name></expr></argument>, <argument><expr><name>sysErrStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
        int32_t saveErr = terrno;
        walCloseReadHandle(pWalHandle);
        terrno = saveErr;
    */</comment>

    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <call><name>syncEntryBuild</name><argument_list>(<argument><expr><name><name>pWalHandle</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>ppEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_CLIENT_REQUEST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>originalRpcType</name></name> <operator>=</operator> <name><name>pWalHandle</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>seqNum</name></name> <operator>=</operator> <name><name>pWalHandle</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>syncMeta</name><operator>.</operator><name>seqNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>isWeak</name></name> <operator>=</operator> <name><name>pWalHandle</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>syncMeta</name><operator>.</operator><name>isWeek</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pWalHandle</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>syncMeta</name><operator>.</operator><name>term</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>dataLen</name></name> <operator>==</operator> <name><name>pWalHandle</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pWalHandle</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>pWalHandle</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
    int32_t saveErr = terrno;
    walCloseReadHandle(pWalHandle);
    terrno = saveErr;
  */</comment>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts4</name> <init>= <expr><call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsElapsed</name> <init>= <expr><name>ts4</name> <operator>-</operator> <name>ts1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsElapsedLock</name> <init>= <expr><name>ts2</name> <operator>-</operator> <name>ts1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsElapsedRead</name> <init>= <expr><name>ts3</name> <operator>-</operator> <name>ts2</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsElapsedBuild</name> <init>= <expr><name>ts4</name> <operator>-</operator> <name>ts3</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>,
          <argument><expr><literal type="string">"read index:%"</literal> <name>PRId64</name> <literal type="string">", elapsed:%"</literal> <name>PRId64</name> <literal type="string">", elapsed-lock:%"</literal> <name>PRId64</name> <literal type="string">", elapsed-read:%"</literal> <name>PRId64</name>
          <literal type="string">", elapsed-build:%"</literal> <name>PRId64</name></expr></argument>,
          <argument><expr><name>index</name></expr></argument>, <argument><expr><name>tsElapsed</name></expr></argument>, <argument><expr><name>tsElapsedLock</name></expr></argument>, <argument><expr><name>tsElapsedRead</name></expr></argument>, <argument><expr><name>tsElapsedBuild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// truncate semantic</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>raftLogTruncate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSyncLogStore</name></name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>fromIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// need not truncate</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>wallastVer</name> <init>= <expr><call><name>walGetLastVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fromIndex</name> <operator>&gt;</operator> <name>wallastVer</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// need not truncate</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>walCommitVer</name> <init>= <expr><call><name>walGetCommittedVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fromIndex</name> <operator>&lt;=</operator> <name>walCommitVer</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// delete from cache</comment>
  <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name>fromIndex</name></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;=</operator> <name>wallastVer</name></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"cache delete index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>walRollback</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>fromIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>err</name> <init>= <expr><name>terrno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>errStr</name> <init>= <expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>sysErr</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sysErrStr</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal truncate error, from-index:%"</literal> <name>PRId64</name> <literal type="string">", err:%d %X, msg:%s, syserr:%d, sysmsg:%s"</literal></expr></argument>,
           <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fromIndex</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errStr</name></expr></argument>, <argument><expr><name>sysErr</name></expr></argument>, <argument><expr><name>sysErrStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// event log</comment>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"log truncate, from-index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>fromIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// entry found, return 0</comment>
<comment type="line">// entry not found, return -1, terrno = TSDB_CODE_WAL_LOG_NOT_EXIST</comment>
<comment type="line">// other error, return -1</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>raftLogGetLastEntry</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppLastEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ppLastEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppLastEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>walIsEmpty</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name> <init>= <expr><call><name>raftLogLastIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lastIndex</name> <operator>&gt;=</operator> <name>SYNC_INDEX_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>raftLogGetEntry</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>, <argument><expr><name>lastIndex</name></expr></argument>, <argument><expr><name>ppLastEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftLogUpdateCommitIndex</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// need not update</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>snapshotVer</name> <init>= <expr><call><name>walGetSnapshotVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>walCommitVer</name> <init>= <expr><call><name>walGetCommittedVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>wallastVer</name> <init>= <expr><call><name>walGetLastVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>index</name> <argument_list type="generic">&lt; <argument><expr><name>snapshotVer</name> <operator>||</operator> <name>index</name></expr></argument> &gt;</argument_list></name> <name>wallastVer</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// ignore</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>walCommit</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>err</name> <init>= <expr><name>terrno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>errStr</name> <init>= <expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>sysErr</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sysErrStr</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal update commit index error, index:%"</literal> <name>PRId64</name> <literal type="string">", err:%d %X, msg:%s, syserr:%d, sysmsg:%s"</literal></expr></argument>,
           <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errStr</name></expr></argument>, <argument><expr><name>sysErr</name></expr></argument>, <argument><expr><name>sysErrStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncIndex</name></type> <name>raftlogCommitIndex</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncIndex</name></type> <name>logStoreFirstIndex</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>walGetFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncIndex</name></type> <name>logStoreWalCommitVer</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWal</name><modifier>*</modifier></type>              <name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>walGetCommittedVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
