<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncRequestVote.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRequestVote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftCfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncVoteMgr.h"</cpp:file></cpp:include>

<comment type="line">// TLA+ Spec</comment>
<comment type="line">// HandleRequestVoteRequest(i, j, m) ==</comment>
<comment type="line">//    LET logOk == \/ m.mlastLogTerm &gt; LastTerm(log[i])</comment>
<comment type="line">//                 \/ /\ m.mlastLogTerm = LastTerm(log[i])</comment>
<comment type="line">//                    /\ m.mlastLogIndex &gt;= Len(log[i])</comment>
<comment type="line">//        grant == /\ m.mterm = currentTerm[i]</comment>
<comment type="line">//                 /\ logOk</comment>
<comment type="line">//                 /\ votedFor[i] \in {Nil, j}</comment>
<comment type="line">//    IN /\ m.mterm &lt;= currentTerm[i]</comment>
<comment type="line">//       /\ \/ grant  /\ votedFor' = [votedFor EXCEPT ![i] = j]</comment>
<comment type="line">//          \/ ~grant /\ UNCHANGED votedFor</comment>
<comment type="line">//       /\ Reply([mtype        |-&gt; RequestVoteResponse,</comment>
<comment type="line">//                 mterm        |-&gt; currentTerm[i],</comment>
<comment type="line">//                 mvoteGranted |-&gt; grant,</comment>
<comment type="line">//                 \* mlog is used just for the `elections' history variable for</comment>
<comment type="line">//                 \* the proof. It would not exist in a real implementation.</comment>
<comment type="line">//                 mlog         |-&gt; log[i],</comment>
<comment type="line">//                 msource      |-&gt; i,</comment>
<comment type="line">//                 mdest        |-&gt; j],</comment>
<comment type="line">//                 m)</comment>
<comment type="line">//       /\ UNCHANGED &lt;&lt;state, currentTerm, candidateVars, leaderVars, logVars&gt;&gt;</comment>
<comment type="line">//</comment>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>syncNodeOnRequestVoteLogOK</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncRequestVote</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncTerm</name></type>  <name>myLastTerm</name> <init>= <expr><call><name>syncNodeGetLastTerm</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>myLastIndex</name> <init>= <expr><call><name>syncNodeGetLastIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
            <argument><expr><literal type="string">"logok:0, {my-lterm:%"</literal> <name>PRIu64</name> <literal type="string">", my-lindex:%"</literal> <name>PRId64</name> <literal type="string">", recv-lterm:%"</literal> <name>PRIu64</name> <literal type="string">", recv-lindex:%"</literal> <name>PRId64</name>
            <literal type="string">", recv-term:%"</literal> <name>PRIu64</name> <literal type="string">"}"</literal></expr></argument>,
            <argument><expr><name>myLastTerm</name></expr></argument>, <argument><expr><name>myLastIndex</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>myLastTerm</name> <operator>==</operator> <name>SYNC_TERM_INVALID</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
            <argument><expr><literal type="string">"logok:0, {my-lterm:%"</literal> <name>PRIu64</name> <literal type="string">", my-lindex:%"</literal> <name>PRId64</name> <literal type="string">", recv-lterm:%"</literal> <name>PRIu64</name> <literal type="string">", recv-lindex:%"</literal> <name>PRId64</name>
            <literal type="string">", recv-term:%"</literal> <name>PRIu64</name> <literal type="string">"}"</literal></expr></argument>,
            <argument><expr><name>myLastTerm</name></expr></argument>, <argument><expr><name>myLastIndex</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name> <operator>&gt;</operator> <name>myLastTerm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
            <argument><expr><literal type="string">"logok:1, {my-lterm:%"</literal> <name>PRIu64</name> <literal type="string">", my-lindex:%"</literal> <name>PRId64</name> <literal type="string">", recv-lterm:%"</literal> <name>PRIu64</name> <literal type="string">", recv-lindex:%"</literal> <name>PRId64</name>
            <literal type="string">", recv-term:%"</literal> <name>PRIu64</name> <literal type="string">"}"</literal></expr></argument>,
            <argument><expr><name>myLastTerm</name></expr></argument>, <argument><expr><name>myLastIndex</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name> <operator>==</operator> <name>myLastTerm</name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name> <operator>&gt;=</operator> <name>myLastIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
            <argument><expr><literal type="string">"logok:1, {my-lterm:%"</literal> <name>PRIu64</name> <literal type="string">", my-lindex:%"</literal> <name>PRId64</name> <literal type="string">", recv-lterm:%"</literal> <name>PRIu64</name> <literal type="string">", recv-lindex:%"</literal> <name>PRId64</name>
            <literal type="string">", recv-term:%"</literal> <name>PRIu64</name> <literal type="string">"}"</literal></expr></argument>,
            <argument><expr><name>myLastTerm</name></expr></argument>, <argument><expr><name>myLastIndex</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"logok:0, {my-lterm:%"</literal> <name>PRIu64</name> <literal type="string">", my-lindex:%"</literal> <name>PRId64</name> <literal type="string">", recv-lterm:%"</literal> <name>PRIu64</name> <literal type="string">", recv-lindex:%"</literal> <name>PRId64</name>
          <literal type="string">", recv-term:%"</literal> <name>PRIu64</name> <literal type="string">"}"</literal></expr></argument>,
          <argument><expr><name>myLastTerm</name></expr></argument>, <argument><expr><name>myLastIndex</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnRequestVote</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncRequestVote</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// if already drop replica, do not process</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeInRaftGroup</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvRequestVote</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"not in my config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>logOK</name> <init>= <expr><call><name>syncNodeOnRequestVoteLogOK</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// maybe update term</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&gt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// syncNodeUpdateTerm(ths, pMsg-&gt;term);</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&lt;=</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>grant</name> <init>= <expr><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>==</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>logOK</name> <operator>&amp;&amp;</operator>
               <operator>(</operator><operator>(</operator><operator>!</operator><call><name>raftStoreHasVoted</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>syncUtilSameId</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>grant</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// maybe has already voted for pMsg-&gt;srcId</comment>
    <comment type="line">// vote again, no harm</comment>
    <expr_stmt><expr><call><name>raftStoreVote</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// candidate ?</comment>
    <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// forbid elect for this round</comment>
    <expr_stmt><expr><call><name>syncNodeResetElectTimer</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// send msg</comment>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncBuildRequestVoteReply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncRequestVoteReply</name><modifier>*</modifier></type> <name>pReply</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>voteGranted</name></name> <operator>=</operator> <name>grant</name></expr>;</expr_stmt>

  <comment type="line">// trace log</comment>
  <expr_stmt><expr><call><name>syncLogRecvRequestVote</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pReply</name><operator>-&gt;</operator><name>voteGranted</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogSendRequestVoteReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pReply</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReply</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
