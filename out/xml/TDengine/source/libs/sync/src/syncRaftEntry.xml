<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncRaftEntry.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>

<function><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>syncEntryBuild</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>dataLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncRaftEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dataLen</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>rid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <return>return <expr><name>pEntry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>syncEntryBuildFromClientRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncClientRequest</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>syncEntryBuild</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>seqNum</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>seqNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>isWeak</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>isWeak</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pEntry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>syncEntryBuildFromRpcMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>syncEntryBuild</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_CLIENT_REQUEST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>seqNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>isWeak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pEntry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>syncEntryBuildFromAppendEntries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>syncEntryBuild</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pEntry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>syncEntryBuildNoop</name><parameter_list>(<parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>syncEntryBuild</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_CLIENT_REQUEST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name> <operator>=</operator> <name>TDMT_SYNC_NOOP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>seqNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>isWeak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMsgHead</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <return>return <expr><name>pEntry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncEntryDestroy</name><parameter_list>(<parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"free entry: %p"</literal></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncEntry2OriginalRpc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SRaftEntryHashCache</name><modifier>*</modifier></type> <name>raftCacheCreate</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRaftEntryHashCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRaftEntryHashCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, raft cache create error"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pEntryHash</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>pEntryHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, raft cache create hash error"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>maxCount</name></name> <operator>=</operator> <name>maxCount</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>currentCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSyncNode</name></name> <operator>=</operator> <name>pSyncNode</name></expr>;</expr_stmt>

  <return>return <expr><name>pCache</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raftCacheDestroy</name><parameter_list>(<parameter><decl><type><name>SRaftEntryHashCache</name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pEntryHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// success, return 1</comment>
<comment type="line">// max count, return 0</comment>
<comment type="line">// error, return -1</comment>
<function><type><name>int32_t</name></type> <name>raftCachePutEntry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRaftEntryHashCache</name></name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>currentCount</name></name> <operator>&gt;=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>maxCount</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pEntryHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>currentCount</name></name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"raft cache add, type:%s,%d, type2:%s,%d, index:%"</literal> <name>PRId64</name> <literal type="string">", bytes:%d"</literal></expr></argument>,
          <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>,
          <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// success, return 0</comment>
<comment type="line">// error, return -1</comment>
<comment type="line">// not exist, return -1, terrno = TSDB_CODE_WAL_LOG_NOT_EXIST</comment>
<function><type><name>int32_t</name></type> <name>raftCacheGetEntry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRaftEntryHashCache</name></name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ppEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pTmp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pEntryHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>pTmp</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppEntry</name></expr></argument>, <argument><expr><name>pTmp</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"raft cache get, type:%s,%d, type2:%s,%d, index:%"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>msgType</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// success, return 0</comment>
<comment type="line">// error, return -1</comment>
<comment type="line">// not exist, return -1, terrno = TSDB_CODE_WAL_LOG_NOT_EXIST</comment>
<function><type><name>int32_t</name></type> <name>raftCacheGetEntryP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRaftEntryHashCache</name></name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ppEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pTmp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pEntryHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>pTmp</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"raft cache get, type:%s,%d, type2:%s,%d, index:%"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>msgType</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCacheDelEntry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRaftEntryHashCache</name></name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pEntryHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>currentCount</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCacheGetAndDel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRaftEntryHashCache</name></name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ppEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pTmp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pEntryHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>pTmp</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppEntry</name></expr></argument>, <argument><expr><name>pTmp</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"raft cache get-and-del, type:%s,%d, type2:%s,%d, index:%"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>msgType</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pEntryHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>currentCount</name></name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCacheClear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRaftEntryHashCache</name></name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pEntryHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>currentCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>keyFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmpFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeRaftEntry</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SRaftEntryCache</name><modifier>*</modifier></type> <name>raftEntryCacheCreate</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRaftEntryCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRaftEntryCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, raft cache create error"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name> <operator>=</operator>
      <call><name>tSkipListCreate</name><argument_list>(<argument><expr><name>MAX_SKIP_LIST_LEVEL</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpFn</name></expr></argument>, <argument><expr><name>SL_ALLOW_DUP_KEY</name></expr></argument>, <argument><expr><name>keyFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, raft cache create hash error"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>refMgr</name></name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>freeRaftEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>maxCount</name></name> <operator>=</operator> <name>maxCount</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>currentCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSyncNode</name></name> <operator>=</operator> <name>pSyncNode</name></expr>;</expr_stmt>

  <return>return <expr><name>pCache</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raftEntryCacheDestroy</name><parameter_list>(<parameter><decl><type><name>SRaftEntryCache</name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tSkipListDestroy</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>refMgr</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>refMgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>refMgr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// success, return 1</comment>
<comment type="line">// max count, return 0</comment>
<comment type="line">// error, return -1</comment>
<function><type><name>int32_t</name></type> <name>raftEntryCachePutEntry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRaftEntryCache</name></name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>currentCount</name></name> <operator>&gt;=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>maxCount</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>pSkipListNode</name> <init>= <expr><call><name>tSkipListPut</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSkipListNode</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>currentCount</name></name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>rid</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>refMgr</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>rid</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"raft cache add, type:%s,%d, type2:%s,%d, index:%"</literal> <name>PRId64</name> <literal type="string">", bytes:%d"</literal></expr></argument>,
          <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>,
          <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// find one, return 1</comment>
<comment type="line">// not found, return 0</comment>
<comment type="line">// error, return -1</comment>
<function><type><name>int32_t</name></type> <name>raftEntryCacheGetEntry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRaftEntryCache</name></name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ppEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>raftEntryCacheGetEntryP</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppEntry</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>rid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// find one, return 1</comment>
<comment type="line">// not found, return 0</comment>
<comment type="line">// error, return -1</comment>
<function><type><name>int32_t</name></type> <name>raftEntryCacheGetEntryP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRaftEntryCache</name></name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>index2</name> <init>= <expr><name>index</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>entryPArray</name> <init>= <expr><call><name>tSkipListGet</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>index2</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>arraySize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>entryPArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>arraySize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppNode</name> <init>= <expr><operator>(</operator><name>SSkipListNode</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>entryPArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>ppNode</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><operator>*</operator><name>ppNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>refMgr</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>rid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>arraySize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>entryPArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// count = -1, clear all</comment>
<comment type="line">// count &gt;= 0, clear count</comment>
<comment type="line">// return -1, error</comment>
<comment type="line">// return delete count</comment>
<function><type><name>int32_t</name></type> <name>raftEntryCacheClear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRaftEntryCache</name></name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>returnCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// clear all</comment>
    <decl_stmt><decl><type><name>SSkipListIterator</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><call><name>tSkipListCreateIter</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>tSkipListIterNext</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><call><name>tSkipListIterGet</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>returnCnt</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>tSkipListDestroyIter</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tSkipListDestroy</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name> <operator>=</operator>
        <call><name>tSkipListCreate</name><argument_list>(<argument><expr><name>MAX_SKIP_LIST_LEVEL</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpFn</name></expr></argument>, <argument><expr><name>SL_ALLOW_DUP_KEY</name></expr></argument>, <argument><expr><name>keyFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// clear count</comment>
    <decl_stmt><decl><type><name>int</name></type>                <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSkipListIterator</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><call><name>tSkipListCreateIter</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>            <name>delNodeArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSkipListNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// free entry</comment>
    <while>while <condition>(<expr><call><name>tSkipListIterNext</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><call><name>tSkipListIterGet</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>&gt;=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// sDebug("push pNode:%p", pNode);</comment>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>delNodeArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>returnCnt</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// syncEntryDestroy(pEntry);</comment>
      <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>refMgr</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>rid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>tSkipListDestroyIter</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// delete skiplist node</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>arraySize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>delNodeArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arraySize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppNode</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>delNodeArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// sDebug("get pNode:%p", *ppNode);</comment>
      <expr_stmt><expr><call><name>tSkipListRemoveNode</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pSkipList</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ppNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>delNodeArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>currentCount</name></name> <operator>-=</operator> <name>returnCnt</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>returnCnt</name></expr>;</return>
</block_content>}</block></function>
</unit>
