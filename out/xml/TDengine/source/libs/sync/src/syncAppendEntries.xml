<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncAppendEntries.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncAppendEntries.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncPipeline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncReplication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncCommit.h"</cpp:file></cpp:include>

<comment type="line">// TLA+ Spec</comment>
<comment type="line">// HandleAppendEntriesRequest(i, j, m) ==</comment>
<comment type="line">//    LET logOk == \/ m.mprevLogIndex = 0</comment>
<comment type="line">//                 \/ /\ m.mprevLogIndex &gt; 0</comment>
<comment type="line">//                    /\ m.mprevLogIndex &lt;= Len(log[i])</comment>
<comment type="line">//                    /\ m.mprevLogTerm = log[i][m.mprevLogIndex].term</comment>
<comment type="line">//    IN /\ m.mterm &lt;= currentTerm[i]</comment>
<comment type="line">//       /\ \/ /\ \* reject request</comment>
<comment type="line">//                \/ m.mterm &lt; currentTerm[i]</comment>
<comment type="line">//                \/ /\ m.mterm = currentTerm[i]</comment>
<comment type="line">//                   /\ state[i] = Follower</comment>
<comment type="line">//                   /\ \lnot logOk</comment>
<comment type="line">//             /\ Reply([mtype           |-&gt; AppendEntriesResponse,</comment>
<comment type="line">//                       mterm           |-&gt; currentTerm[i],</comment>
<comment type="line">//                       msuccess        |-&gt; FALSE,</comment>
<comment type="line">//                       mmatchIndex     |-&gt; 0,</comment>
<comment type="line">//                       msource         |-&gt; i,</comment>
<comment type="line">//                       mdest           |-&gt; j],</comment>
<comment type="line">//                       m)</comment>
<comment type="line">//             /\ UNCHANGED &lt;&lt;serverVars, logVars&gt;&gt;</comment>
<comment type="line">//          \/ \* return to follower state</comment>
<comment type="line">//             /\ m.mterm = currentTerm[i]</comment>
<comment type="line">//             /\ state[i] = Candidate</comment>
<comment type="line">//             /\ state' = [state EXCEPT ![i] = Follower]</comment>
<comment type="line">//             /\ UNCHANGED &lt;&lt;currentTerm, votedFor, logVars, messages&gt;&gt;</comment>
<comment type="line">//          \/ \* accept request</comment>
<comment type="line">//             /\ m.mterm = currentTerm[i]</comment>
<comment type="line">//             /\ state[i] = Follower</comment>
<comment type="line">//             /\ logOk</comment>
<comment type="line">//             /\ LET index == m.mprevLogIndex + 1</comment>
<comment type="line">//                IN \/ \* already done with request</comment>
<comment type="line">//                       /\ \/ m.mentries = &lt;&lt; &gt;&gt;</comment>
<comment type="line">//                          \/ /\ m.mentries /= &lt;&lt; &gt;&gt;</comment>
<comment type="line">//                             /\ Len(log[i]) &gt;= index</comment>
<comment type="line">//                             /\ log[i][index].term = m.mentries[1].term</comment>
<comment type="line">//                          \* This could make our commitIndex decrease (for</comment>
<comment type="line">//                          \* example if we process an old, duplicated request),</comment>
<comment type="line">//                          \* but that doesn't really affect anything.</comment>
<comment type="line">//                       /\ commitIndex' = [commitIndex EXCEPT ![i] =</comment>
<comment type="line">//                                              m.mcommitIndex]</comment>
<comment type="line">//                       /\ Reply([mtype           |-&gt; AppendEntriesResponse,</comment>
<comment type="line">//                                 mterm           |-&gt; currentTerm[i],</comment>
<comment type="line">//                                 msuccess        |-&gt; TRUE,</comment>
<comment type="line">//                                 mmatchIndex     |-&gt; m.mprevLogIndex +</comment>
<comment type="line">//                                                     Len(m.mentries),</comment>
<comment type="line">//                                 msource         |-&gt; i,</comment>
<comment type="line">//                                 mdest           |-&gt; j],</comment>
<comment type="line">//                                 m)</comment>
<comment type="line">//                       /\ UNCHANGED &lt;&lt;serverVars, log&gt;&gt;</comment>
<comment type="line">//                   \/ \* conflict: remove 1 entry</comment>
<comment type="line">//                       /\ m.mentries /= &lt;&lt; &gt;&gt;</comment>
<comment type="line">//                       /\ Len(log[i]) &gt;= index</comment>
<comment type="line">//                       /\ log[i][index].term /= m.mentries[1].term</comment>
<comment type="line">//                       /\ LET new == [index2 \in 1..(Len(log[i]) - 1) |-&gt;</comment>
<comment type="line">//                                          log[i][index2]]</comment>
<comment type="line">//                          IN log' = [log EXCEPT ![i] = new]</comment>
<comment type="line">//                       /\ UNCHANGED &lt;&lt;serverVars, commitIndex, messages&gt;&gt;</comment>
<comment type="line">//                   \/ \* no conflict: append entry</comment>
<comment type="line">//                       /\ m.mentries /= &lt;&lt; &gt;&gt;</comment>
<comment type="line">//                       /\ Len(log[i]) = m.mprevLogIndex</comment>
<comment type="line">//                       /\ log' = [log EXCEPT ![i] =</comment>
<comment type="line">//                                      Append(log[i], m.mentries[1])]</comment>
<comment type="line">//                       /\ UNCHANGED &lt;&lt;serverVars, commitIndex, messages&gt;&gt;</comment>
<comment type="line">//       /\ UNCHANGED &lt;&lt;candidateVars, leaderVars&gt;&gt;</comment>
<comment type="line">//</comment>

<function><type><name>int32_t</name></type> <name>syncNodeFollowerCommit</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>newCommitIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"can not do follower commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// maybe update commit index, leader notice me</comment>
  <if_stmt><if>if <condition>(<expr><name>newCommitIndex</name> <operator>&gt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// has commit entry in local</comment>
    <if_stmt><if>if <condition>(<expr><name>newCommitIndex</name> <operator>&lt;=</operator> <call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// advance commit index to sanpshot first</comment>
      <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitBegin</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitEnd</name> <init>= <expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"commit by snapshot from index:%"</literal> <name>PRId64</name> <literal type="string">" to index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>commitBegin</name></expr></argument>, <argument><expr><name>commitEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>beginIndex</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>endIndex</name> <init>= <expr><name>newCommitIndex</name></expr></init></decl>;</decl_stmt>

      <comment type="line">// update commit index</comment>
      <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name>newCommitIndex</name></expr>;</expr_stmt>

      <comment type="line">// call back Wal</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogUpdateCommitIndex</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeDoCommit</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>beginIndex</name></expr></argument>, <argument><expr><name>endIndex</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>syncLogAppendEntriesToRaftEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pEntry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnAppendEntries</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>            <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>accepted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// if already drop replica, do not process</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeInRaftGroup</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"not in my config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_IGNORE</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncBuildAppendEntriesReply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"build rsp error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_IGNORE</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncAppendEntriesReply</name><modifier>*</modifier></type> <name>pReply</name> <init>= <expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// prepare response msg</comment>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>success</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_SEND_RESPONSE</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&gt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeResetElectTimer</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>&lt;</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncRaftEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, incomplete append entries received. prev index:%"</literal> <name>PRId64</name> <literal type="string">", term:%"</literal> <name>PRId64</name> <literal type="string">", datalen:%d"</literal></expr></argument>,
           <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_IGNORE</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>syncLogAppendEntriesToRaftEntry</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get raft entry from append entries since %s"</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_IGNORE</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>||</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, invalid previous log index in msg. index:%"</literal> <name>PRId64</name> <literal type="string">",  term:%"</literal> <name>PRId64</name> <literal type="string">", prevLogIndex:%"</literal> <name>PRId64</name>
           <literal type="string">", prevLogTerm:%"</literal> <name>PRId64</name></expr></argument>,
           <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_IGNORE</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, recv append entries msg. index:%"</literal> <name>PRId64</name> <literal type="string">", term:%"</literal> <name>PRId64</name> <literal type="string">", preLogIndex:%"</literal> <name>PRId64</name>
         <literal type="string">", prevLogTerm:%"</literal> <name>PRId64</name> <literal type="string">" commitIndex:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
         <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// accept</comment>
  <if_stmt><if>if <condition>(<expr><call><name>syncLogBufferAccept</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_SEND_RESPONSE</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>accepted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>_SEND_RESPONSE</name>:</label>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <call><name>syncLogBufferProceed</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReply</name><operator>-&gt;</operator><name>lastMatchTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>= <expr><operator>(</operator><name><name>pReply</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>&gt;=</operator> <name><name>pReply</name><operator>-&gt;</operator><name>lastSendIndex</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>accepted</name> <operator>&amp;&amp;</operator> <name>matched</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>success</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <comment type="line">// update commit index only after matching</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncNodeUpdateCommitIndex</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// ack, i.e. send response</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReply</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// commit index, i.e. leader notice me</comment>
  <if_stmt><if>if <condition>(<expr><call><name>syncLogBufferCommit</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to commit raft fsm log since %s."</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_out</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_out</name>:</label>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_IGNORE</name>:</label>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnAppendEntriesOld</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>            <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// if already drop replica, do not process</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeInRaftGroup</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"not in my config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_IGNORE</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// prepare response msg</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncBuildAppendEntriesReply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"build rsp error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_IGNORE</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncAppendEntriesReply</name><modifier>*</modifier></type> <name>pReply</name> <init>= <expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>success</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <comment type="line">// pReply-&gt;matchIndex = ths-&gt;pLogStore-&gt;syncLogLastIndex(ths-&gt;pLogStore);</comment>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"reject, small term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_SEND_RESPONSE</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&gt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeResetElectTimer</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>startIndex</name> <init>= <expr><call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name> <init>= <expr><call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>&gt;</operator> <name>lastIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"reject, index not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_SEND_RESPONSE</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>&gt;=</operator> <name>startIndex</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SyncTerm</name></type> <name>myPreLogTerm</name> <init>= <expr><call><name>syncNodeGetPreTerm</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// ASSERT(myPreLogTerm != SYNC_TERM_INVALID);</comment>
    <if_stmt><if>if <condition>(<expr><name>myPreLogTerm</name> <operator>==</operator> <name>SYNC_TERM_INVALID</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"reject, pre-term invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_SEND_RESPONSE</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>myPreLogTerm</name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"reject, pre-term not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_SEND_RESPONSE</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// accept</comment>
  <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>success</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasAppendEntries</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasAppendEntries</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pAppendEntry</name> <init>= <expr><call><name>syncEntryBuildFromAppendEntries</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pAppendEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>appendIndex</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type> <name>hLocal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type> <name>hAppend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pLocalEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type>      <name>pCache</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>hLocal</name> <operator>=</operator> <call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>appendIndex</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>appendIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>hLocal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pLocalEntry</name> <operator>=</operator> <operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>hLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheHit</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"hit cache index:%"</literal> <name>PRId64</name> <literal type="string">", bytes:%u, %p"</literal></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>, <argument><expr><name><name>pLocalEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>pLocalEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheMiss</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"miss cache index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogGetEntry</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pLocalEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// get local entry success</comment>

      <if_stmt><if>if <condition>(<expr><name><name>pLocalEntry</name><operator>-&gt;</operator><name>term</name></name> <operator>==</operator> <name><name>pAppendEntry</name><operator>-&gt;</operator><name>term</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// do nothing</comment>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"log match, do nothing, index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// truncate</comment>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogTruncate</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name><name>logBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ignore, truncate error, append-index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>logBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name>hLocal</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>hLocal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pLocalEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>hAppend</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>hAppend</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pAppendEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <goto>goto <name>_IGNORE</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pAppendEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>appendIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// append</comment>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogAppendEntry</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>pAppendEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name><name>logBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ignore, append error, append-index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>logBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name>hLocal</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>hLocal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pLocalEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>hAppend</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>hAppend</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pAppendEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <goto>goto <name>_IGNORE</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>syncCacheEntry</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>pAppendEntry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hAppend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// log not exist</comment>

        <comment type="line">// truncate</comment>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogTruncate</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name><name>logBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ignore, log not exist, truncate error, append-index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>logBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pLocalEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pAppendEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>_IGNORE</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// append</comment>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogAppendEntry</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>pAppendEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name><name>logBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ignore, log not exist, append error, append-index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>logBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name>hLocal</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>hLocal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pLocalEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>hAppend</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>hAppend</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pAppendEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <goto>goto <name>_IGNORE</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>syncCacheEntry</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>pAppendEntry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hAppend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// get local entry success</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>logBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ignore, get local entry error, append-index:%"</literal> <name>PRId64</name> <literal type="string">" err:%d"</literal></expr></argument>, <argument><expr><name>appendIndex</name></expr></argument>,
                 <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>logBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>hLocal</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>hLocal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pLocalEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>hAppend</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>hAppend</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pAppendEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <goto>goto <name>_IGNORE</name>;</goto>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// update match index</comment>
    <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name><name>pAppendEntry</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>hLocal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>hLocal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pLocalEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>hAppend</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>hAppend</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pAppendEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// no append entries, do nothing</comment>
    <comment type="line">// maybe has extra entries, no harm</comment>

    <comment type="line">// update match index</comment>
    <expr_stmt><expr><name><name>pReply</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// maybe update commit index, leader notice me</comment>
  <expr_stmt><expr><call><name>syncNodeFollowerCommit</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>syncLogRecvAppendEntries</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <goto>goto <name>_SEND_RESPONSE</name>;</goto>

<label><name>_IGNORE</name>:</label>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_SEND_RESPONSE</name>:</label>
  <comment type="line">// msg event log</comment>
  <expr_stmt><expr><call><name>syncLogSendAppendEntriesReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pReply</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// send response</comment>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReply</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
