<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncVoteMgr.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncVoteMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>voteGrantedClearVotes</name><parameter_list>(<parameter><decl><type><name>SVotesGranted</name> <modifier>*</modifier></type><name>pVotesGranted</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>isGranted</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>isGranted</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>votes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SVotesGranted</name> <modifier>*</modifier></type><name>voteGrantedCreate</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVotesGranted</name> <modifier>*</modifier></type><name>pVotesGranted</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVotesGranted</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVotesGranted</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>replicas</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>voteGrantedClearVotes</name><argument_list>(<argument><expr><name>pVotesGranted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>quorum</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>quorum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>toLeader</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>pSyncNode</name></name> <operator>=</operator> <name>pSyncNode</name></expr>;</expr_stmt>

  <return>return <expr><name>pVotesGranted</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>voteGrantedDestroy</name><parameter_list>(<parameter><decl><type><name>SVotesGranted</name> <modifier>*</modifier></type><name>pVotesGranted</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pVotesGranted</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVotesGranted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>voteGrantedUpdate</name><parameter_list>(<parameter><decl><type><name>SVotesGranted</name> <modifier>*</modifier></type><name>pVotesGranted</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>replicas</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>voteGrantedClearVotes</name><argument_list>(<argument><expr><name>pVotesGranted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>quorum</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>quorum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>toLeader</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>pSyncNode</name></name> <operator>=</operator> <name>pSyncNode</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>voteGrantedMajority</name><parameter_list>(<parameter><decl><type><name>SVotesGranted</name> <modifier>*</modifier></type><name>pVotesGranted</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>votes</name></name> <operator>&gt;=</operator> <name><name>pVotesGranted</name><operator>-&gt;</operator><name>quorum</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>voteGrantedVote</name><parameter_list>(<parameter><decl><type><name>SVotesGranted</name> <modifier>*</modifier></type><name>pVotesGranted</name></decl></parameter>, <parameter><decl><type><name>SyncRequestVoteReply</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pMsg</name><operator>-&gt;</operator><name>voteGranted</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNFatal</name><argument_list>(<argument><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"vote granted should be true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>!=</operator> <name><name>pVotesGranted</name><operator>-&gt;</operator><name>term</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"vote grant term:%"</literal> <name>PRId64</name> <literal type="string">" not matched with msg term:%"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncUtilSameId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVotesGranted</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNFatal</name><argument_list>(<argument><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"vote granted raftId not matched with msg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVotesGranted</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name><name>pVotesGranted</name><operator>-&gt;</operator><name>replicas</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>pVotesGranted</name><operator>-&gt;</operator><name>replicaNum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNFatal</name><argument_list>(<argument><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"invalid msg srcId, index:%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>isGranted</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pVotesGranted</name><operator>-&gt;</operator><name>votes</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>isGranted</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>votes</name></name> <operator>&gt;</operator> <name><name>pVotesGranted</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNFatal</name><argument_list>(<argument><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"votes:%d not matched with replicaNum:%d"</literal></expr></argument>, <argument><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>votes</name></name></expr></argument>,
            <argument><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>voteGrantedReset</name><parameter_list>(<parameter><decl><type><name>SVotesGranted</name> <modifier>*</modifier></type><name>pVotesGranted</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>voteGrantedClearVotes</name><argument_list>(<argument><expr><name>pVotesGranted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesGranted</name><operator>-&gt;</operator><name>toLeader</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SVotesRespond</name> <modifier>*</modifier></type><name>votesRespondCreate</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVotesRespond</name> <modifier>*</modifier></type><name>pVotesRespond</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVotesRespond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVotesRespond</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>replicas</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>pSyncNode</name></name> <operator>=</operator> <name>pSyncNode</name></expr>;</expr_stmt>

  <return>return <expr><name>pVotesRespond</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>votesRespondDestory</name><parameter_list>(<parameter><decl><type><name>SVotesRespond</name> <modifier>*</modifier></type><name>pVotesRespond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pVotesRespond</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVotesRespond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>votesRespondUpdate</name><parameter_list>(<parameter><decl><type><name>SVotesRespond</name> <modifier>*</modifier></type><name>pVotesRespond</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>replicas</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>pSyncNode</name></name> <operator>=</operator> <name>pSyncNode</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>votesResponded</name><parameter_list>(<parameter><decl><type><name>SVotesRespond</name> <modifier>*</modifier></type><name>pVotesRespond</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftId</name> <modifier>*</modifier></type><name>pRaftId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVotesRespond</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name><name>pVotesRespond</name><operator>-&gt;</operator><name>replicas</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>pRaftId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pVotesRespond</name><operator>-&gt;</operator><name>isRespond</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>votesRespondAdd</name><parameter_list>(<parameter><decl><type><name>SVotesRespond</name> <modifier>*</modifier></type><name>pVotesRespond</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncRequestVoteReply</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>term</name></name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"vote respond add error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVotesRespond</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name><name>pVotesRespond</name><operator>-&gt;</operator><name>replicas</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>isRespond</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>sNFatal</name><argument_list>(<argument><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"votes respond not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>votesRespondReset</name><parameter_list>(<parameter><decl><type><name>SVotesRespond</name> <modifier>*</modifier></type><name>pVotesRespond</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>isRespond</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pVotesRespond</name><operator>-&gt;</operator><name>isRespond</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
