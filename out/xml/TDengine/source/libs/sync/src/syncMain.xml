<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncMain.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncAppendEntries.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncAppendEntriesReply.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncCommit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncElection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncEnv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncIndexMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncPipeline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftCfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncReplication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRequestVote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRequestVoteReply.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRespMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncSnapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncTimeout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncVoteMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>syncNodeEqPingTimer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>syncNodeEqElectTimer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>syncNodeEqHeartbeatTimer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeEqNoop</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeAppendNoop</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>syncNodeEqPeerHeartbeatTimer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>syncIsConfigChanged</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncCfg</name><modifier>*</modifier></type> <name>pOldCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSyncCfg</name><modifier>*</modifier></type> <name>pNewCfg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncHbTimerInit</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>pSyncTimer</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name></type> <name>destId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncHbTimerStart</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>pSyncTimer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncHbTimerStop</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>pSyncTimer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeUpdateNewConfigIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SSyncCfg</name><modifier>*</modifier></type> <name>pNewCfg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>syncNodeInConfig</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSyncCfg</name><modifier>*</modifier></type> <name>config</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>syncNodeDoConfigChange</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SSyncCfg</name><modifier>*</modifier></type> <name>newConfig</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>lastConfigChangeIndex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>syncNodeIsOptimizedOneReplica</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>syncNodeCanChange</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeLeaderTransfer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeLeaderTransferTo</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SNodeInfo</name></type> <name>newLeader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncDoLeaderTransfer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ESyncStrategy</name></type> <name>syncNodeStrategy</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int64_t</name></type> <name>syncOpen</name><parameter_list>(<parameter><decl><type><name>SSyncInfo</name><modifier>*</modifier></type> <name>pSyncInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeOpen</name><argument_list>(<argument><expr><name>pSyncInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open sync node"</literal></expr></argument>, <argument><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>rid</name></name> <operator>=</operator> <call><name>syncNodeAdd</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>rid</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeClose</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingBaseLine</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>pingMs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerMS</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>pingMs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electBaseLine</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>electMs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>hbBaseLine</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>heartbeatMs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerMS</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>heartbeatMs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>msgcb</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>msgcb</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>rid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncStart</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to acquire rid: %"</literal> <name>PRId64</name> <literal type="string">" of tsNodeReftId for pSyncNode"</literal></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>syncNodeRestore</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to restore sync log buffer since %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>syncNodeStart</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to start sync node since %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncStop</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>isStart</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeRemove</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncPreStop</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodePreClose</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>syncNodeCheckNewConfig</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSyncCfg</name><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeInConfig</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>-</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncReconfig</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>, <parameter><decl><type><name>SSyncCfg</name><modifier>*</modifier></type> <name>pNewCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeCheckNewConfig</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pNewCfg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_NEW_CONFIG_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to reconfig since invalid new config"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncNodeUpdateNewConfigIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pNewCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeDoConfigChange</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pNewCfg</name></expr></argument>, <argument><expr><name>SYNC_INDEX_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeStopHeartbeatTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>syncHbTimerInit</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peerHeartbeatTimerArr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>syncNodeStartHeartbeatTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//syncNodeReplicate(pSyncNode);</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncProcessMsg</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncIsInit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_SYNC_HEARTBEAT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnHeartbeat</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SYNC_HEARTBEAT_REPLY</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnHeartbeatReply</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SYNC_TIMEOUT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnTimeout</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SYNC_CLIENT_REQUEST</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnClientRequest</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SYNC_REQUEST_VOTE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnRequestVote</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SYNC_REQUEST_VOTE_REPLY</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnRequestVoteReply</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SYNC_APPEND_ENTRIES</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnAppendEntries</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SYNC_APPEND_ENTRIES_REPLY</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnAppendEntriesReply</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SYNC_SNAPSHOT_SEND</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnSnapshot</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SYNC_SNAPSHOT_RSP</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnSnapshotReply</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SYNC_LOCAL_CMD</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncNodeOnLocalCmd</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to process msg:%p since invalid type:%s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>,
             <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLeaderTransfer</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncNodeLeaderTransfer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncIndex</name></type> <name>syncMinMatchIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>minMatchIndex</name> <init>= <expr><name>SYNC_INDEX_INVALID</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>minMatchIndex</name> <operator>=</operator> <call><name>syncIndexMgrGetIndex</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>matchIndex</name> <init>= <expr><call><name>syncIndexMgrGetIndex</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>matchIndex</name> <operator>&lt;</operator> <name>minMatchIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minMatchIndex</name> <operator>=</operator> <name>matchIndex</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>minMatchIndex</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBeginSnapshot</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>lastApplyIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"sync begin snapshot error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>syncNodeIsMnode</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// mnode</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>logRetention</name> <init>= <expr><name>SYNC_MNODE_LOG_RETENTION</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>beginIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>endIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogEndIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>   <name>logNum</name> <init>= <expr><name>endIndex</name> <operator>-</operator> <name>beginIndex</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>      <name>isEmpty</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogIsEmpty</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>isEmpty</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>isEmpty</name> <operator>&amp;&amp;</operator> <name>logNum</name> <operator>&lt;</operator> <name>logRetention</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"new-snapshot-index:%"</literal> <name>PRId64</name> <literal type="string">", log-num:%"</literal> <name>PRId64</name> <literal type="string">", empty:%d, do not delete wal"</literal></expr></argument>,
              <argument><expr><name>lastApplyIndex</name></expr></argument>, <argument><expr><name>logNum</name></expr></argument>, <argument><expr><name>isEmpty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <goto>goto <name>_DEL_WAL</name>;</goto>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>lastApplyIndex</name> <operator>-=</operator> <name>SYNC_VNODE_LOG_RETENTION</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>beginIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>endIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogEndIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>      <name>isEmpty</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogIsEmpty</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>isEmpty</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>lastApplyIndex</name> <operator>&gt;=</operator> <name>beginIndex</name> <operator>&amp;&amp;</operator> <name>lastApplyIndex</name> <operator>&lt;=</operator> <name>endIndex</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"new-snapshot-index:%"</literal> <name>PRId64</name> <literal type="string">", empty:%d, do not delete wal"</literal></expr></argument>, <argument><expr><name>lastApplyIndex</name></expr></argument>, <argument><expr><name>isEmpty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// vnode</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// multi replicas</comment>

      <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>minMatchIndex</name></name> <operator>=</operator> <call><name>syncMinMatchIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int64_t</name></type> <name>matchIndex</name> <init>= <expr><call><name>syncIndexMgrGetIndex</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>lastApplyIndex</name> <operator>&gt;</operator> <name>matchIndex</name></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
              <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
                      <argument><expr><literal type="string">"new-snapshot-index:%"</literal> <name>PRId64</name> <literal type="string">" is greater than match-index:%"</literal> <name>PRId64</name>
                      <literal type="string">" of %s:%d, do not delete wal"</literal></expr></argument>,
                      <argument><expr><name>lastApplyIndex</name></expr></argument>, <argument><expr><name>matchIndex</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

            <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>lastApplyIndex</name> <operator>&gt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>minMatchIndex</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
                  <argument><expr><literal type="string">"new-snapshot-index:%"</literal> <name>PRId64</name> <literal type="string">" is greater than min-match-index:%"</literal> <name>PRId64</name> <literal type="string">", do not delete wal"</literal></expr></argument>,
                  <argument><expr><name>lastApplyIndex</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>minMatchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_CANDIDATE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"new-snapshot-index:%"</literal> <name>PRId64</name> <literal type="string">" candidate, do not delete wal"</literal></expr></argument>, <argument><expr><name>lastApplyIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"new-snapshot-index:%"</literal> <name>PRId64</name> <literal type="string">" unknown state, do not delete wal"</literal></expr></argument>, <argument><expr><name>lastApplyIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>

      <goto>goto <name>_DEL_WAL</name>;</goto>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// one replica</comment>

      <goto>goto <name>_DEL_WAL</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_DEL_WAL</name>:</label>

  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncIndex</name></type>          <name>snapshotVer</name> <init>= <expr><call><name>walGetSnapshotVer</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncIndex</name></type>          <name>walCommitVer</name> <init>= <expr><call><name>walGetCommittedVer</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncIndex</name></type>          <name>wallastVer</name> <init>= <expr><call><name>walGetLastVer</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastApplyIndex</name> <operator>&lt;=</operator> <name>walCommitVer</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>snapshottingIndex</name> <init>= <expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>snapshottingIndex</name> <operator>==</operator> <name>SYNC_INDEX_INVALID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>, <argument><expr><name>lastApplyIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>snapshottingTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walBeginSnapshot</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><name>lastApplyIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"wal snapshot begin, index:%"</literal> <name>PRId64</name> <literal type="string">", last apply index:%"</literal> <name>PRId64</name></expr></argument>,
                  <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>, <argument><expr><name>lastApplyIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"wal snapshot begin error since:%s, index:%"</literal> <name>PRId64</name> <literal type="string">", last apply index:%"</literal> <name>PRId64</name></expr></argument>,
                  <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>, <argument><expr><name>lastApplyIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>, <argument><expr><name>SYNC_INDEX_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshotting for %"</literal> <name>PRId64</name> <literal type="string">", do not delete wal for new-snapshot-index:%"</literal> <name>PRId64</name></expr></argument>,
                <argument><expr><name>snapshottingIndex</name></expr></argument>, <argument><expr><name>lastApplyIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncEndSnapshot</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"sync end snapshot error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SYNC_INDEX_INVALID</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walEndSnapshot</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"wal snapshot end error since:%s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"wal snapshot end, index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>, <argument><expr><name>SYNC_INDEX_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncStepDown</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>newTerm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"sync step down error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>newTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncNodeIsReadyForRead</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_INTERNAL_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"sync ready for read error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>restoreFinish</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>ready</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpApplyQueueEmptyCb</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// apply queue not empty</comment>
    <expr_stmt><expr><name>ready</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogIsEmpty</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SyncIndex</name></type>       <name>lastIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type>      <name>pCache</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type>      <name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastIndex</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lastIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheHit</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"hit cache index:%"</literal> <name>PRId64</name> <literal type="string">", bytes:%u, %p"</literal></expr></argument>, <argument><expr><name>lastIndex</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheMiss</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"miss cache index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>lastIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogGetEntry</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>lastIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name> <operator>==</operator> <name>TDMT_SYNC_NOOP</name> <operator>&amp;&amp;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name> <operator>==</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>ready</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ready</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_RESTORING</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ready</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncIsReadyForRead</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"sync ready for read error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>ready</name> <init>= <expr><call><name>syncNodeIsReadyForRead</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ready</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncSnapshotSending</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name>syncNodeSnapshotSending</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncSnapshotRecving</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name>syncNodeSnapshotRecving</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeLeaderTransfer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, only one replica, cannot leader transfer"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_ONE_REPLICA</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeInfo</name></type> <name>newLeader</name> <init>= <expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNodeInfo</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>matchIndex0</name> <init>= <expr><call><name>syncIndexMgrGetIndex</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>matchIndex1</name> <init>= <expr><call><name>syncIndexMgrGetIndex</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>matchIndex1</name> <operator>&gt;</operator> <name>matchIndex0</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>newLeader</name> <operator>=</operator> <operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNodeInfo</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeLeaderTransferTo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>newLeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeLeaderTransferTo</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SNodeInfo</name></type> <name>newLeader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, only one replica, cannot leader transfer"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_ONE_REPLICA</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"begin leader transfer to %s:%u"</literal></expr></argument>, <argument><expr><name><name>newLeader</name><operator>.</operator><name>nodeFqdn</name></name></expr></argument>, <argument><expr><name><name>newLeader</name><operator>.</operator><name>nodePort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildLeaderTransfer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncLeaderTransfer</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>newLeaderId</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>syncUtilAddr2U64</name><argument_list>(<argument><expr><name><name>newLeader</name><operator>.</operator><name>nodeFqdn</name></name></expr></argument>, <argument><expr><name><name>newLeader</name><operator>.</operator><name>nodePort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>newLeaderId</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>newNodeInfo</name></name> <operator>=</operator> <name>newLeader</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncNodePropose</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncState</name></type> <name>syncGetState</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncState</name></type> <name>state</name> <init>= <expr><block>{<expr><operator>.</operator><name>state</name> <operator>=</operator> <name>TAOS_SYNC_STATE_ERROR</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>restored</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>restoreFinish</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>state</name><operator>.</operator><name>canRead</name></name> <operator>=</operator> <call><name>syncNodeIsReadyForRead</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>state</name><operator>.</operator><name>canRead</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>restored</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t syncGetSnapshotByIndex(int64_t rid, SyncIndex index, SSnapshot* pSnapshot) {
  if (index &lt; SYNC_INDEX_BEGIN) {
    return -1;
  }

  SSyncNode* pSyncNode = syncNodeAcquire(rid);
  if (pSyncNode == NULL) {
    return -1;
  }
  ASSERT(rid == pSyncNode-&gt;rid);

  SSyncRaftEntry* pEntry = NULL;
  int32_t         code = pSyncNode-&gt;pLogStore-&gt;syncLogGetEntry(pSyncNode-&gt;pLogStore, index, &amp;pEntry);
  if (code != 0) {
    if (pEntry != NULL) {
      syncEntryDestroy(pEntry);
    }
    syncNodeRelease(pSyncNode);
    return -1;
  }
  ASSERT(pEntry != NULL);

  pSnapshot-&gt;data = NULL;
  pSnapshot-&gt;lastApplyIndex = index;
  pSnapshot-&gt;lastApplyTerm = pEntry-&gt;term;
  pSnapshot-&gt;lastConfigIndex = syncNodeGetSnapshotConfigIndex(pSyncNode, index);

  syncEntryDestroy(pEntry);
  syncNodeRelease(pSyncNode);
  return 0;
}

int32_t syncGetSnapshotMeta(int64_t rid, struct SSnapshotMeta* sMeta) {
  SSyncNode* pSyncNode = syncNodeAcquire(rid);
  if (pSyncNode == NULL) {
    return -1;
  }
  ASSERT(rid == pSyncNode-&gt;rid);
  sMeta-&gt;lastConfigIndex = pSyncNode-&gt;pRaftCfg-&gt;lastConfigIndex;

  sTrace("vgId:%d, get snapshot meta, lastConfigIndex:%" PRId64, pSyncNode-&gt;vgId, pSyncNode-&gt;pRaftCfg-&gt;lastConfigIndex);

  syncNodeRelease(pSyncNode);
  return 0;
}

int32_t syncGetSnapshotMetaByIndex(int64_t rid, SyncIndex snapshotIndex, struct SSnapshotMeta* sMeta) {
  SSyncNode* pSyncNode = syncNodeAcquire(rid);
  if (pSyncNode == NULL) {
    return -1;
  }
  ASSERT(rid == pSyncNode-&gt;rid);

  ASSERT(pSyncNode-&gt;pRaftCfg-&gt;configIndexCount &gt;= 1);
  SyncIndex lastIndex = (pSyncNode-&gt;pRaftCfg-&gt;configIndexArr)[0];

  for (int32_t i = 0; i &lt; pSyncNode-&gt;pRaftCfg-&gt;configIndexCount; ++i) {
    if ((pSyncNode-&gt;pRaftCfg-&gt;configIndexArr)[i] &gt; lastIndex &amp;&amp;
        (pSyncNode-&gt;pRaftCfg-&gt;configIndexArr)[i] &lt;= snapshotIndex) {
      lastIndex = (pSyncNode-&gt;pRaftCfg-&gt;configIndexArr)[i];
    }
  }
  sMeta-&gt;lastConfigIndex = lastIndex;
  sTrace("vgId:%d, get snapshot meta by index:%" PRId64 " lcindex:%" PRId64, pSyncNode-&gt;vgId, snapshotIndex,
         sMeta-&gt;lastConfigIndex);

  syncNodeRelease(pSyncNode);
  return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SyncIndex</name></type> <name>syncNodeGetSnapshotConfigIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>snapshotLastApplyIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name> <init>= <expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&gt;</operator> <name>lastIndex</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&lt;=</operator> <name>snapshotLastApplyIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastIndex</name> <operator>=</operator> <operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync get last config index, index:%"</literal> <name>PRId64</name> <literal type="string">" lcindex:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
         <argument><expr><name>snapshotLastApplyIndex</name></expr></argument>, <argument><expr><name>lastIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>lastIndex</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncGetRetryEpSet</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SEp</name><modifier>*</modifier></type> <name>pEp</name> <init>= <expr><operator>&amp;</operator><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodeFqdn</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEp</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodePort</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync get retry epset, index:%d %s:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name> <operator>=</operator> <operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>myIndex</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync get retry epset numOfEps:%d inUse:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncPropose</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWeak</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"sync propose error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncNodePropose</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>isWeak</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodePropose</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWeak</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"sync propose not leader, %s, type:%s"</literal></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// not restored, vnode enable</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>restoreFinish</name></name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_PROPOSE_NOT_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"failed to sync propose since not ready, type:%s, last:%"</literal> <name>PRId64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>syncNodeGetLastIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// heartbeat timeout</comment>
  <if_stmt><if>if <condition>(<expr><call><name>syncNodeHeartbeatReplyTimeout</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_PROPOSE_NOT_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"failed to sync propose since hearbeat timeout, type:%s, last:%"</literal> <name>PRId64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>syncNodeGetLastIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// optimized one replica</comment>
  <if_stmt><if>if <condition>(<expr><call><name>syncNodeIsOptimizedOneReplica</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>retIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>syncNodeOnClientRequest</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyIndex</name></name> <operator>=</operator> <name>retIndex</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyTerm</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, propose optimized msg, index:%"</literal> <name>PRId64</name> <literal type="string">" type:%s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>retIndex</name></expr></argument>,
             <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_INTERNAL_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to propose optimized msg, index:%"</literal> <name>PRId64</name> <literal type="string">" type:%s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>retIndex</name></expr></argument>,
             <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SRespStub</name></type> <name>stub</name> <init>= <expr><block>{<expr><operator>.</operator><name>createTime</name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>, <expr><operator>.</operator><name>rpcMsg</name> <operator>=</operator> <operator>*</operator><name>pMsg</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>  <name>seqNum</name> <init>= <expr><call><name>syncRespMgrAdd</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRpcMsg</name></type>   <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>syncBuildClientRequest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>seqNum</name></expr></argument>, <argument><expr><name>isWeak</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to propose msg while serialize since %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncRespMgrDel</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name></expr></argument>, <argument><expr><name>seqNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"propose msg, type:%s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>pSyncNode</name><operator>-&gt;</operator><name>syncEqMsg</name></name>)<argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>msgcb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to propose msg while enqueue since %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncRespMgrDel</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name></expr></argument>, <argument><expr><name>seqNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncHbTimerInit</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>pSyncTimer</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name></type> <name>destId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>pTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>timerMS</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>hbBaseLine</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>timerCb</name></name> <operator>=</operator> <name>syncNodeEqPeerHeartbeatTimer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name>destId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>timeStamp</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncTimer</name><operator>-&gt;</operator><name>logicClock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncHbTimerStart</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>pSyncTimer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>syncIsInit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncHbTimerData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>syncHbTimerDataAcquire</name><argument_list>(<argument><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>hbDataRid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncHbTimerData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>rid</name></name> <operator>=</operator> <call><name>syncHbTimerDataAdd</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>hbDataRid</name></name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>rid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>timeStamp</name></name> <operator>=</operator> <name>tsNow</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>syncNodeRid</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>rid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pTimer</name></name> <operator>=</operator> <name>pSyncTimer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pSyncTimer</name><operator>-&gt;</operator><name>destId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>logicClock</name></name> <operator>=</operator> <name><name>pSyncTimer</name><operator>-&gt;</operator><name>logicClock</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>execTime</name></name> <operator>=</operator> <name>tsNow</name> <operator>+</operator> <name><name>pSyncTimer</name><operator>-&gt;</operator><name>timerMS</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>timerCb</name></name></expr></argument>, <argument><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>timerMS</name></name> <operator>/</operator> <name>HEARTBEAT_TICK_NUM</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>rid</name></name><operator>)</operator></expr></argument>,
                 <argument><expr><call><name>syncEnv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>pTimerManager</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncTimer</name><operator>-&gt;</operator><name>pTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start ctrl hb timer error, sync env is stop"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncHbTimerStop</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>pSyncTimer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncTimer</name><operator>-&gt;</operator><name>logicClock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosTmrStop</name><argument_list>(<argument><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>pTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>pTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncHbTimerDataRemove</name><argument_list>(<argument><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>hbDataRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>hbDataRid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeLogStoreRestoreOnNeed</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"log store not created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pFsm not registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"FpGetSnapshotInfo not registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get snapshot info since %s"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitIndex</name> <init>= <expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>firstVer</name> <init>= <expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastVer</name> <init>= <expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lastVer</name> <argument_list type="generic">&lt; <argument><expr><name>commitIndex</name> <operator>||</operator> <name>firstVer</name></expr></argument> &gt;</argument_list></name> <name>commitIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogRestoreFromSnapshot</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to restore log store from snapshot since %s. lastVer: %"</literal> <name>PRId64</name> <literal type="string">", snapshotVer: %"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lastVer</name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// open/close --------------</comment>
<function><type><name>SSyncNode</name><modifier>*</modifier></type> <name>syncNodeOpen</name><parameter_list>(<parameter><decl><type><name>SSyncInfo</name><modifier>*</modifier></type> <name>pSyncInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosDirExist</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pSyncInfo</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to create dir:%s since %s"</literal></expr></argument>, <argument><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%sraft_config.json"</literal></expr></argument>, <argument><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// create a new raft config file</comment>
    <decl_stmt><decl><type><name>SRaftCfgMeta</name></type> <name>meta</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>meta</name><operator>.</operator><name>isStandBy</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>isStandBy</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>meta</name><operator>.</operator><name>snapshotStrategy</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>snapshotStrategy</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>meta</name><operator>.</operator><name>lastConfigIndex</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>meta</name><operator>.</operator><name>batchSize</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>batchSize</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>raftCfgCreateFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncCfg</name></name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create raft cfg file at %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync config not input"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncCfg</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// update syncCfg by raft_config.json</comment>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>=</operator> <call><name>raftCfgOpen</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open raft cfg file at %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>replicaNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>syncIsConfigChanged</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncCfg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, use sync config from input options and write to cfg file"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncCfg</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>raftCfgPersist</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to persist raft cfg file at %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_error</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, use sync config from raft cfg file"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncCfg</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>raftCfgClose</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// init by SSyncInfo</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSyncCfg</name><modifier>*</modifier></type> <name>pCfg</name> <init>= <expr><operator>&amp;</operator><name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncCfg</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, replica:%d selfIndex:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>myIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeInfo</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>&amp;</operator><name><name>pCfg</name><operator>-&gt;</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, index:%d ep:%s:%u"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodePort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>raftStorePath</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>raftStorePath</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%sraft_store.json"</literal></expr></argument>, <argument><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
           <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%sraft_config.json"</literal></expr></argument>, <argument><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pWal</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>pWal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>msgcb</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>msgcb</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>syncSendMSg</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncSendMSg</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>syncEqMsg</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncEqMsg</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>syncEqCtrlMsg</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>syncEqCtrlMsg</name></name></expr>;</expr_stmt>

  <comment type="line">// create raft log ring buffer</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name></name> <operator>=</operator> <call><name>syncLogBufferCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to init sync log buffer since %s. vgId:%d"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init raft config</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>=</operator> <call><name>raftCfgOpen</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open raft cfg file at %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init internal</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>myNodeInfo</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>nodeInfo</name><index>[<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>myIndex</name></name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncUtilNodeInfo2RaftId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myNodeInfo</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to determine my raft member id"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init peersNum, peers, peersId</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>myIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNodeInfo</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncUtilNodeInfo2RaftId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to determine raft member id, peer:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// init replicaNum, replicasId</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncUtilNodeInfo2RaftId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to determine raft member id, replica:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// init raft algorithm</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>=</operator> <name><name>pSyncInfo</name><operator>-&gt;</operator><name>pFsm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>quorum</name></name> <operator>=</operator> <call><name>syncUtilQuorum</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>leaderCache</name></name> <operator>=</operator> <name>EMPTY_RAFT_ID</name></expr>;</expr_stmt>

  <comment type="line">// init life cycle outside</comment>

  <comment type="line">// TLA+ Spec</comment>
  <comment type="line">// InitHistoryVars == /\ elections = {}</comment>
  <comment type="line">//                    /\ allLogs   = {}</comment>
  <comment type="line">//                    /\ voterLog  = [i \in Server |-&gt; [j \in {} |-&gt; &lt;&lt;&gt;&gt;]]</comment>
  <comment type="line">// InitServerVars == /\ currentTerm = [i \in Server |-&gt; 1]</comment>
  <comment type="line">//                   /\ state       = [i \in Server |-&gt; Follower]</comment>
  <comment type="line">//                   /\ votedFor    = [i \in Server |-&gt; Nil]</comment>
  <comment type="line">// InitCandidateVars == /\ votesResponded = [i \in Server |-&gt; {}]</comment>
  <comment type="line">//                      /\ votesGranted   = [i \in Server |-&gt; {}]</comment>
  <comment type="line">// \* The values nextIndex[i][i] and matchIndex[i][i] are never read, since the</comment>
  <comment type="line">// \* leader does not send itself messages. It's still easier to include these</comment>
  <comment type="line">// \* in the functions.</comment>
  <comment type="line">// InitLeaderVars == /\ nextIndex  = [i \in Server |-&gt; [j \in Server |-&gt; 1]]</comment>
  <comment type="line">//                   /\ matchIndex = [i \in Server |-&gt; [j \in Server |-&gt; 0]]</comment>
  <comment type="line">// InitLogVars == /\ log          = [i \in Server |-&gt; &lt;&lt; &gt;&gt;]</comment>
  <comment type="line">//                /\ commitIndex  = [i \in Server |-&gt; 0]</comment>
  <comment type="line">// Init == /\ messages = [m \in {} |-&gt; 0]</comment>
  <comment type="line">//         /\ InitHistoryVars</comment>
  <comment type="line">//         /\ InitServerVars</comment>
  <comment type="line">//         /\ InitCandidateVars</comment>
  <comment type="line">//         /\ InitLeaderVars</comment>
  <comment type="line">//         /\ InitLogVars</comment>
  <comment type="line">//</comment>

  <comment type="line">// init TLA+ server vars</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name> <operator>=</operator> <call><name>raftStoreOpen</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>raftStorePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open raft store at path %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>raftStorePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init TLA+ candidate vars</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name> <operator>=</operator> <call><name>voteGrantedCreate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create VotesGranted"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesRespond</name></name> <operator>=</operator> <call><name>votesRespondCreate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesRespond</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create VotesRespond"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init TLA+ leader vars</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name></name> <operator>=</operator> <call><name>syncIndexMgrCreate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create SyncIndexMgr"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name> <operator>=</operator> <call><name>syncIndexMgrCreate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create SyncIndexMgr"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init TLA+ log vars</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>=</operator> <call><name>logStoreCreate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create SyncLogStore"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitIndex</name> <init>= <expr><name>SYNC_INDEX_INVALID</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get snapshot info, code:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;</operator> <name>commitIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>commitIndex</name> <operator>=</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"reset commit index by snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name>commitIndex</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>syncNodeLogStoreRestoreOnNeed</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// timer ms init</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingBaseLine</name></name> <operator>=</operator> <name>PING_TIMER_MS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electBaseLine</name></name> <operator>=</operator> <name>tsElectInterval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>hbBaseLine</name></name> <operator>=</operator> <name>tsHeartbeatInterval</name></expr>;</expr_stmt>

  <comment type="line">// init ping timer</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pPingTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerMS</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pingBaseLine</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerLogicClock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerLogicClockUser</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>FpPingTimerCB</name></name> <operator>=</operator> <name>syncNodeEqPingTimer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// init elect timer</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pElectTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerMS</name></name> <operator>=</operator> <call><name>syncUtilElectRandomMS</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electBaseLine</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>electBaseLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerLogicClock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>FpElectTimerCB</name></name> <operator>=</operator> <name>syncNodeEqElectTimer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// init heartbeat timer</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pHeartbeatTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerMS</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>hbBaseLine</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClockUser</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>FpHeartbeatTimerCB</name></name> <operator>=</operator> <name>syncNodeEqHeartbeatTimer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// init peer heartbeat timer</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>syncHbTimerInit</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peerHeartbeatTimerArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// tools</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name> <operator>=</operator> <call><name>syncRespMgrCreate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>SYNC_RESP_TTL_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create SyncRespMgr"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// restore state</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>restoreFinish</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <comment type="line">// snapshot senders</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncSnapshotSender</name><modifier>*</modifier></type> <name>pSender</name> <init>= <expr><call><name>snapshotSenderCreate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// ASSERT(pSender != NULL);</comment>
    <expr_stmt><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>pSender</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sSTrace</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender create new while open, data:%p"</literal></expr></argument>, <argument><expr><name>pSender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// snapshot receivers</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name> <operator>=</operator> <call><name>snapshotReceiverCreate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>EMPTY_RAFT_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// is config changing</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>changing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <comment type="line">// replication mgr</comment>
  <expr_stmt><expr><call><name>syncNodeLogReplMgrInit</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// peer state</comment>
  <expr_stmt><expr><call><name>syncNodePeerStateInit</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//</comment>
  <comment type="line">// min match index</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>minMatchIndex</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>

  <comment type="line">// start in syncNodeStart</comment>
  <comment type="line">// start raft</comment>
  <comment type="line">// syncNodeBecomeFollower(pSyncNode);</comment>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>timeNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name>timeNow</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>leaderTime</name></name> <operator>=</operator> <name>timeNow</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>lastReplicateTime</name></name> <operator>=</operator> <name>timeNow</name></expr>;</expr_stmt>

  <comment type="line">// snapshotting</comment>
  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>, <argument><expr><name>SYNC_INDEX_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// init log buffer</comment>
  <if_stmt><if>if <condition>(<expr><call><name>syncLogBufferInit</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to init sync log buffer since %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>isStart</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>becomeLeaderNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configChangeNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>hbSlowNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>hbrSlowNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>tmrRoutineNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"sync open, node:%p"</literal></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsElectInterval:%d, tsHeartbeatInterval:%d, tsHeartbeatTimeout:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>tsElectInterval</name></expr></argument>,
         <argument><expr><name>tsHeartbeatInterval</name></expr></argument>, <argument><expr><name>tsHeartbeatTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pSyncNode</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>pFsm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncInfo</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>syncNodeClose</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pSyncNode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeMaybeUpdateCommitBySnapshot</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeRestore</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"log store not created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"ring log buffer not created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastVer</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogCommitIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>endIndex</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lastVer</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>endIndex</name> <operator>!=</operator> <name>lastVer</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_INCOMPLETE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to restore sync node since %s. expected lastLogIndex: %"</literal> <name>PRId64</name> <literal type="string">", lastVer: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
           <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>endIndex</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lastVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>endIndex</name> <operator>==</operator> <name>lastVer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>commitIndex</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>syncLogBufferCommit</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeStart</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// start raft</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>raftStoreNextTerm</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeBecomeLeader</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"one replica start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Raft 3.6.2 Committing entries from previous terms</comment>
    <expr_stmt><expr><call><name>syncNodeAppendNoop</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeBecomeFollower</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"first start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeStartPingTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeStartOld</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// start raft</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>raftStoreNextTerm</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeBecomeLeader</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"one replica start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Raft 3.6.2 Committing entries from previous terms</comment>
    <expr_stmt><expr><call><name>syncNodeAppendNoop</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncMaybeAdvanceCommitIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeBecomeFollower</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"first start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeStartPingTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeStartStandBy</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// state change</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeStopHeartbeatTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// reset elect timer, long enough</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>electMS</name> <init>= <expr><name>TIMER_MAX_MS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncNodeRestartElectTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>electMS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeStartPingTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodePreClose</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpApplyQueueItems</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>aqItems</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpApplyQueueItems</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, pre close, %d items in apply queue"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>aqItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>aqItems</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>aqItems</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>snapshotReceiverIsStart</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snapshotReceiverForceStop</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>snapshotReceiverDestroy</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// stop elect timer</comment>
  <expr_stmt><expr><call><name>syncNodeStopElectTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// stop heartbeat timer</comment>
  <expr_stmt><expr><call><name>syncNodeStopHeartbeatTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncHbTimerDataFree</name><parameter_list>(<parameter><decl><type><name>SSyncHbTimerData</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeClose</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"sync close, node:%p"</literal></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>raftStoreClose</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>syncNodeLogReplMgrDestroy</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncRespMgrDestroy</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>voteGrantedDestroy</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>votesRespondDestory</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesRespond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesRespond</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncIndexMgrDestroy</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncIndexMgrDestroy</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>logStoreDestory</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogBufferDestroy</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>raftCfgClose</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>syncNodeStopPingTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeStopElectTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeStopHeartbeatTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sSTrace</name><argument_list>(<argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"snapshot sender destroy while close, data:%p"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>snapshotSenderIsStart</name><argument_list>(<argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snapshotSenderStop</name><argument_list>(<argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>snapshotSenderDestroy</name><argument_list>(<argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>snapshotReceiverIsStart</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snapshotReceiverForceStop</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>snapshotReceiverDestroy</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ESyncStrategy</name></type> <name>syncNodeStrategy</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>snapshotStrategy</name></name></expr>;</return> </block_content>}</block></function>

<comment type="line">// timer control --------------</comment>
<function><type><name>int32_t</name></type> <name>syncNodeStartPingTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>syncIsInit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>FpPingTimerCB</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerMS</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><call><name>syncEnv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>pTimerManager</name></expr></argument>,
                 <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pPingTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerLogicClock</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerLogicClockUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start ping timer error, sync env is stop"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeStopPingTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerLogicClockUser</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosTmrStop</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pPingTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pPingTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeStartElectTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>syncIsInit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerMS</name></name> <operator>=</operator> <name>ms</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>execTime</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call> <operator>+</operator> <name>ms</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerParam</name><operator>.</operator><name>executeTime</name></name><operator>)</operator></expr></argument>, <argument><expr><name>execTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerParam</name><operator>.</operator><name>logicClock</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerLogicClock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerParam</name><operator>.</operator><name>pSyncNode</name></name> <operator>=</operator> <name>pSyncNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerParam</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>FpElectTimerCB</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerMS</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>rid</name></name><operator>)</operator></expr></argument>, <argument><expr><call><name>syncEnv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>pTimerManager</name></expr></argument>,
                 <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pElectTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start elect timer error, sync env is stop"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeStopElectTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerLogicClock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosTmrStop</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pElectTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pElectTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeRestartElectTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncNodeStopElectTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeStartElectTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeResetElectTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>electMS</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>isStandBy</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>electMS</name> <operator>=</operator> <name>TIMER_MAX_MS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>electMS</name> <operator>=</operator> <call><name>syncUtilElectRandomMS</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electBaseLine</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>electBaseLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeRestartElectTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>electMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"reset elect timer, min:%d, max:%d, ms:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electBaseLine</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>electBaseLine</name></name></expr></argument>,
          <argument><expr><name>electMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeDoStartHeartbeatTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>syncIsInit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>FpHeartbeatTimerCB</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerMS</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><call><name>syncEnv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>pTimerManager</name></expr></argument>,
                 <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pHeartbeatTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClock</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClockUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start heartbeat timer error, sync env is stop"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"start heartbeat timer, ms:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeStartHeartbeatTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  pSyncNode-&gt;heartbeatTimerMS = pSyncNode-&gt;hbBaseLine;
  ret = syncNodeDoStartHeartbeatTimer(pSyncNode);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>pSyncTimer</name> <init>= <expr><call><name>syncNodeGetHbTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pSyncTimer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncHbTimerStart</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pSyncTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeStopHeartbeatTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  atomic_add_fetch_64(&amp;pSyncNode-&gt;heartbeatTimerLogicClockUser, 1);
  taosTmrStop(pSyncNode-&gt;pHeartbeatTimer);
  pSyncNode-&gt;pHeartbeatTimer = NULL;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>pSyncTimer</name> <init>= <expr><call><name>syncNodeGetHbTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pSyncTimer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncHbTimerStop</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pSyncTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeRestartHeartbeatTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>syncNodeStopHeartbeatTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeStartHeartbeatTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// utils --------------</comment>
<function><type><name>int32_t</name></type> <name>syncNodeSendMsgById</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>destRaftId</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name></type> <name>epSet</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilRaftId2EpSet</name><argument_list>(<argument><expr><name>destRaftId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>syncSendMSg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// htonl</comment>
    <expr_stmt><expr><call><name>syncUtilMsgHtoN</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>noResp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>syncSendMSg</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync send msg by id error, fp-send-msg is null"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeSendMsgByInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeInfo</name><modifier>*</modifier></type> <name>nodeInfo</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name></type> <name>epSet</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilNodeInfo2EpSet</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>syncSendMSg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// htonl</comment>
    <expr_stmt><expr><call><name>syncUtilMsgHtoN</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>noResp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>syncSendMSg</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync send msg by info error, fp-send-msg is null"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>syncNodeInConfig</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSyncCfg</name><modifier>*</modifier></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>b1</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>b2</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>config</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodeFqdn</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>myNodeInfo</name><operator>.</operator><name>nodeFqdn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodePort</name> <operator>==</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myNodeInfo</name><operator>.</operator><name>nodePort</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>b1</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>config</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRaftId</name></type> <name>raftId</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>raftId</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>syncUtilAddr2U64</name><argument_list>(<argument><expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodeFqdn</name></expr></argument>, <argument><expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raftId</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><operator>&amp;</operator><name>raftId</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>b2</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>b1</name> <operator>==</operator> <name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>b1</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>syncIsConfigChanged</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncCfg</name><modifier>*</modifier></type> <name>pOldCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSyncCfg</name><modifier>*</modifier></type> <name>pNewCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOldCfg</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>!=</operator> <name><name>pNewCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOldCfg</name><operator>-&gt;</operator><name>myIndex</name></name> <operator>!=</operator> <name><name>pNewCfg</name><operator>-&gt;</operator><name>myIndex</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pOldCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SNodeInfo</name><modifier>*</modifier></type> <name>pOldInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pOldCfg</name><operator>-&gt;</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SNodeInfo</name><modifier>*</modifier></type> <name>pNewInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pNewCfg</name><operator>-&gt;</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pOldInfo</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>, <argument><expr><name><name>pNewInfo</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pOldInfo</name><operator>-&gt;</operator><name>nodePort</name></name> <operator>!=</operator> <name><name>pNewInfo</name><operator>-&gt;</operator><name>nodePort</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeDoConfigChange</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SSyncCfg</name><modifier>*</modifier></type> <name>pNewConfig</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>lastConfigChangeIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncCfg</name></type> <name>oldConfig</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncIsConfigChanged</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldConfig</name></expr></argument>, <argument><expr><name>pNewConfig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, sync not reconfig since not changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <operator>*</operator><name>pNewConfig</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name> <operator>=</operator> <name>lastConfigChangeIndex</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configChangeNum</name></name><operator>++</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>IamInOld</name> <init>= <expr><call><name>syncNodeInConfig</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IamInNew</name> <init>= <expr><call><name>syncNodeInConfig</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pNewConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>isDrop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>isAdd</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>IamInOld</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>IamInNew</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>isDrop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>isDrop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>IamInOld</name> <operator>&amp;&amp;</operator> <name>IamInNew</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>isAdd</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>isAdd</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// log begin config change</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>oldCfgStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>newCfgStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncCfg2SimpleStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldConfig</name></expr></argument>, <argument><expr><name>oldCfgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oldCfgStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncCfg2SimpleStr</name><argument_list>(<argument><expr><name>pNewConfig</name></expr></argument>, <argument><expr><name>oldCfgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oldCfgStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"begin do config change, from %s to %s"</literal></expr></argument>, <argument><expr><name>oldCfgStr</name></expr></argument>, <argument><expr><name>oldCfgStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>IamInNew</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>isStandBy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// change isStandBy to normal</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>isDrop</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>isStandBy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="line">// set standby</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add last config index</comment>
  <expr_stmt><expr><call><name>raftCfgAddConfigIndex</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name></expr></argument>, <argument><expr><name>lastConfigChangeIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>IamInNew</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//-----------------------------------------</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// save snapshot senders</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>oldReplicaNum</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRaftId</name></type> <name><name>oldReplicasId</name><index>[<expr><name>TSDB_MAX_REPLICA</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>oldReplicasId</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oldReplicasId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSyncSnapshotSender</name><modifier>*</modifier></type> <name><name>oldSenders</name><index>[<expr><name>TSDB_MAX_REPLICA</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>oldSenders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sSTrace</name><argument_list>(<argument><expr><name><name>oldSenders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"snapshot sender save old"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// init internal</comment>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>myNodeInfo</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>nodeInfo</name><index>[<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>myIndex</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncUtilNodeInfo2RaftId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myNodeInfo</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// init peersNum, peers, peersId</comment>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>myIndex</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNodeInfo</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>syncUtilNodeInfo2RaftId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// init replicaNum, replicasId</comment>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>syncUtilNodeInfo2RaftId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// update quorum first</comment>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>quorum</name></name> <operator>=</operator> <call><name>syncUtilQuorum</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>syncIndexMgrUpdate</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncIndexMgrUpdate</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>voteGrantedUpdate</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>votesRespondUpdate</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesRespond</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// reset snapshot senders</comment>

    <comment type="line">// clear new</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// reset new</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <comment type="line">// reset sender</comment>
      <decl_stmt><decl><type><name>bool</name></type> <name>reset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oldReplicasId</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>oldSenders</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>addr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender reset for: %"</literal> <name>PRId64</name> <literal type="string">", newIndex:%d, %s:%d, %p"</literal></expr></argument>,
                  <argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>addr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>oldSenders</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>oldSenders</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>oldSenders</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>reset</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

          <comment type="line">// reset replicaIndex</comment>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>oldreplicaIndex</name> <init>= <expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>-&gt;</operator><name>replicaIndex</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>-&gt;</operator><name>replicaIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender udpate replicaIndex from %d to %d, %s:%d, %p, reset:%d"</literal></expr></argument>, <argument><expr><name>oldreplicaIndex</name></expr></argument>,
                  <argument><expr><name>i</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">// create new</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>snapshotSenderCreate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sSTrace</name><argument_list>(<argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"snapshot sender create new while reconfig, data:%p"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sSTrace</name><argument_list>(<argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"snapshot sender already exist, data:%p"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// free old</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>oldSenders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender destroy old, data:%p replica-index:%d"</literal></expr></argument>, <argument><expr><name><name>oldSenders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snapshotSenderDestroy</name><argument_list>(<argument><expr><name><name>oldSenders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>oldSenders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// persist cfg</comment>
    <expr_stmt><expr><call><name>raftCfgPersist</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>tmpbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"config change from %d to %d, index:%"</literal> <name>PRId64</name> <literal type="string">", %s  --&gt;  %s"</literal></expr></argument>,
             <argument><expr><name><name>oldConfig</name><operator>.</operator><name>replicaNum</name></name></expr></argument>, <argument><expr><name><name>pNewConfig</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>, <argument><expr><name>lastConfigChangeIndex</name></expr></argument>, <argument><expr><name>oldCfgStr</name></expr></argument>, <argument><expr><name>newCfgStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// change isStandBy to normal (election timeout)</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncNodeBecomeLeader</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Raft 3.6.2 Committing entries from previous terms</comment>
      <expr_stmt><expr><call><name>syncNodeAppendNoop</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// syncMaybeAdvanceCommitIndex(pSyncNode);</comment>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>syncNodeBecomeFollower</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// persist cfg</comment>
    <expr_stmt><expr><call><name>raftCfgPersist</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"do not config change from %d to %d, index:%"</literal> <name>PRId64</name> <literal type="string">", %s  --&gt;  %s"</literal></expr></argument>, <argument><expr><name><name>oldConfig</name><operator>.</operator><name>replicaNum</name></name></expr></argument>,
           <argument><expr><name><name>pNewConfig</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>, <argument><expr><name>lastConfigChangeIndex</name></expr></argument>, <argument><expr><name>oldCfgStr</name></expr></argument>, <argument><expr><name>newCfgStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_END</name>:</label>
  <comment type="line">// log end config change</comment>
  <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"end do config change, from %s to %s"</literal></expr></argument>, <argument><expr><name>oldCfgStr</name></expr></argument>, <argument><expr><name>newCfgStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// raft state change --------------</comment>
<function><type><name>void</name></type> <name>syncNodeUpdateTerm</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>term</name> <operator>&gt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>raftStoreSetTerm</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tmpBuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"update term to %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeBecomeFollower</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>tmpBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>raftStoreClearVote</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeUpdateTermWithoutStepDown</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>term</name> <operator>&gt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>raftStoreSetTerm</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeStepDown</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>newTerm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name> <operator>&gt;</operator> <name>newTerm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"step down, ignore, new-term:%"</literal> <name>PRId64</name> <literal type="string">", current-term:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>newTerm</name></expr></argument>,
            <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"step down, new-term:%"</literal> <name>PRId64</name> <literal type="string">", current-term:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>newTerm</name></expr></argument>,
            <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name> <operator>&lt;</operator> <name>newTerm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>raftStoreSetTerm</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>, <argument><expr><name>newTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tmpBuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"step down, update term to %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>newTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeBecomeFollower</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>tmpBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>raftStoreClearVote</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncNodeBecomeFollower</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"step down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeLeaderChangeRsp</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>syncRespCleanRsp</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeBecomeFollower</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>debugStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// maybe clear leader cache</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>leaderCache</name></name> <operator>=</operator> <name>EMPTY_RAFT_ID</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>hbSlowNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// state change</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeStopHeartbeatTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// reset elect timer</comment>
  <expr_stmt><expr><call><name>syncNodeResetElectTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// send rsp to client</comment>
  <expr_stmt><expr><call><name>syncNodeLeaderChangeRsp</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// call back</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpBecomeFollowerCb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpBecomeFollowerCb</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// min match index</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>minMatchIndex</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>

  <comment type="line">// reset log buffer</comment>
  <expr_stmt><expr><call><name>syncLogBufferReset</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// trace log</comment>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"become follower %s"</literal></expr></argument>, <argument><expr><name>debugStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// TLA+ Spec</comment>
<comment type="line">// \* Candidate i transitions to leader.</comment>
<comment type="line">// BecomeLeader(i) ==</comment>
<comment type="line">//     /\ state[i] = Candidate</comment>
<comment type="line">//     /\ votesGranted[i] \in Quorum</comment>
<comment type="line">//     /\ state'      = [state EXCEPT ![i] = Leader]</comment>
<comment type="line">//     /\ nextIndex'  = [nextIndex EXCEPT ![i] =</comment>
<comment type="line">//                          [j \in Server |-&gt; Len(log[i]) + 1]]</comment>
<comment type="line">//     /\ matchIndex' = [matchIndex EXCEPT ![i] =</comment>
<comment type="line">//                          [j \in Server |-&gt; 0]]</comment>
<comment type="line">//     /\ elections'  = elections \cup</comment>
<comment type="line">//                          {[eterm     |-&gt; currentTerm[i],</comment>
<comment type="line">//                            eleader   |-&gt; i,</comment>
<comment type="line">//                            elog      |-&gt; log[i],</comment>
<comment type="line">//                            evotes    |-&gt; votesGranted[i],</comment>
<comment type="line">//                            evoterLog |-&gt; voterLog[i]]}</comment>
<comment type="line">//     /\ UNCHANGED &lt;&lt;messages, currentTerm, votedFor, candidateVars, logVars&gt;&gt;</comment>
<comment type="line">//</comment>
<function><type><name>void</name></type> <name>syncNodeBecomeLeader</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>debugStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>leaderTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>becomeLeaderNum</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>hbrSlowNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// reset restoreFinish</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>restoreFinish</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <comment type="line">// state change</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>;</expr_stmt>

  <comment type="line">// set leader cache</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>leaderCache</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// maybe overwrite myself, no harm</comment>
    <comment type="line">// just do it!</comment>

    <comment type="line">// pSyncNode-&gt;pNextIndex-&gt;index[i] = pSyncNode-&gt;pLogStore-&gt;getLastIndex(pSyncNode-&gt;pLogStore) + 1;</comment>

    <comment type="line">// maybe wal is deleted</comment>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncTerm</name></type>  <name>lastTerm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>syncNodeGetLastIndexTerm</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lastIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// maybe overwrite myself, no harm</comment>
    <comment type="line">// just do it!</comment>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// init peer mgr</comment>
  <expr_stmt><expr><call><name>syncNodePeerStateInit</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  <comment type="line">// update sender private term</comment>
  SSyncSnapshotSender* pMySender = syncNodeGetSnapshotSender(pSyncNode, &amp;(pSyncNode-&gt;myRaftId));
  if (pMySender != NULL) {
    for (int32_t i = 0; i &lt; pSyncNode-&gt;pMatchIndex-&gt;replicaNum; ++i) {
      if ((pSyncNode-&gt;senders)[i]-&gt;privateTerm &gt; pMySender-&gt;privateTerm) {
        pMySender-&gt;privateTerm = (pSyncNode-&gt;senders)[i]-&gt;privateTerm;
      }
    }
    (pMySender-&gt;privateTerm) += 100;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// close receiver</comment>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
      <call><name>snapshotReceiverIsStart</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snapshotReceiverForceStop</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// stop elect timer</comment>
  <expr_stmt><expr><call><name>syncNodeStopElectTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// start heartbeat timer</comment>
  <expr_stmt><expr><call><name>syncNodeStartHeartbeatTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// send heartbeat right now</comment>
  <expr_stmt><expr><call><name>syncNodeHeartbeatPeers</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// call back</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpBecomeLeaderCb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpBecomeLeaderCb</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// min match index</comment>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>minMatchIndex</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>

  <comment type="line">// reset log buffer</comment>
  <expr_stmt><expr><call><name>syncLogBufferReset</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// trace log</comment>
  <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"become leader %s"</literal></expr></argument>, <argument><expr><name>debugStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeCandidate2Leader</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_CANDIDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>voteGrantedMajority</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeBecomeLeader</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"candidate to leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"state change syncNodeCandidate2Leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncNodeAppendNoop</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to append noop entry since %s"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lastIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, become leader. term: %"</literal> <name>PRId64</name> <literal type="string">", commit index: %"</literal> <name>PRId64</name> <literal type="string">", last index: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
        <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name>lastIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeCandidate2LeaderOld</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_CANDIDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>voteGrantedMajority</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeBecomeLeader</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"candidate to leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Raft 3.6.2 Committing entries from previous terms</comment>
  <expr_stmt><expr><call><name>syncNodeAppendNoop</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncMaybeAdvanceCommitIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeReplicate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncNodeIsMnode</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodePeerStateInit</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peerStates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lastSendIndex</name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peerStates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lastSendTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeFollower2Candidate</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TAOS_SYNC_STATE_CANDIDATE</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, become candidate from follower. term: %"</literal> <name>PRId64</name> <literal type="string">", commit index: %"</literal> <name>PRId64</name> <literal type="string">", last index: %"</literal> <name>PRId64</name></expr></argument>,
        <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name>lastIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"follower to candidate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeLeader2Follower</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeBecomeFollower</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"leader to follower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, become follower from leader. term: %"</literal> <name>PRId64</name> <literal type="string">", commit index: %"</literal> <name>PRId64</name> <literal type="string">", last index: %"</literal> <name>PRId64</name></expr></argument>,
        <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name>lastIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"leader to follower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeCandidate2Follower</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_CANDIDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeBecomeFollower</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"candidate to follower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, become follower from candidate. term: %"</literal> <name>PRId64</name> <literal type="string">", commit index: %"</literal> <name>PRId64</name> <literal type="string">", last index: %"</literal> <name>PRId64</name></expr></argument>,
        <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name>lastIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"candidate to follower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// just called by syncNodeVoteForSelf</comment>
<comment type="line">// need assert</comment>
<function><type><name>void</name></type> <name>syncNodeVoteForTerm</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pRaftId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>term</name> <operator>==</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>raftStoreHasVoted</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>raftStoreVote</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>, <argument><expr><name>pRaftId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// simulate get vote from outside</comment>
<function><type><name>void</name></type> <name>syncNodeVoteForSelf</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>syncNodeVoteForTerm</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncBuildRequestVoteReply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncRequestVoteReply</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>voteGranted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>voteGrantedVote</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>votesRespondAdd</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesRespond</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// return if has a snapshot</comment>
<function><type><name>bool</name></type> <name>syncNodeHasSnapshot</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>      <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>lastApplyIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>lastApplyTerm</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>lastConfigIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;=</operator> <name>SYNC_INDEX_BEGIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return max(logLastIndex, snapshotLastIndex)</comment>
<comment type="line">// if no snapshot and log, return -1</comment>
<function><type><name>SyncIndex</name></type> <name>syncNodeGetLastIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>lastApplyIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>lastApplyTerm</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>lastConfigIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logLastIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name> <init>= <expr><ternary><condition><expr><name>logLastIndex</name> <operator>&gt;</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr> ?</condition><then> <expr><name>logLastIndex</name></expr> </then><else>: <expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>lastIndex</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return the last term of snapshot and log</comment>
<comment type="line">// if error, return SYNC_TERM_INVALID (by syncLogLastTerm)</comment>
<function><type><name>SyncTerm</name></type> <name>syncNodeGetLastTerm</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncTerm</name></type> <name>lastTerm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>syncNodeHasSnapshot</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// has snapshot</comment>
    <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>lastApplyIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>lastApplyTerm</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>lastConfigIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logLastIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>logLastIndex</name> <operator>&gt;</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastTerm</name> <operator>=</operator> <call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastTerm</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>lastTerm</name> <operator>=</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// no snapshot</comment>
    <expr_stmt><expr><name>lastTerm</name> <operator>=</operator> <call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastTerm</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>lastTerm</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// get last index and term along with snapshot</comment>
<function><type><name>int32_t</name></type> <name>syncNodeGetLastIndexTerm</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name><modifier>*</modifier></type> <name>pLastIndex</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name><modifier>*</modifier></type> <name>pLastTerm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pLastIndex</name> <operator>=</operator> <call><name>syncNodeGetLastIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pLastTerm</name> <operator>=</operator> <call><name>syncNodeGetLastTerm</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return append-entries first try index</comment>
<function><type><name>SyncIndex</name></type> <name>syncNodeSyncStartIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>syncStartIndex</name> <init>= <expr><call><name>syncNodeGetLastIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>syncStartIndex</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// if index &gt; 0, return index - 1</comment>
<comment type="line">// else, return -1</comment>
<function><type><name>SyncIndex</name></type> <name>syncNodeGetPreIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>preIndex</name> <init>= <expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>preIndex</name> <operator>&lt;</operator> <name>SYNC_INDEX_INVALID</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>preIndex</name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>preIndex</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// if index &lt; 0, return SYNC_TERM_INVALID</comment>
<comment type="line">// if index == 0, return 0</comment>
<comment type="line">// if index &gt; 0, return preTerm</comment>
<comment type="line">// if error, return SYNC_TERM_INVALID</comment>
<function><type><name>SyncTerm</name></type> <name>syncNodeGetPreTerm</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>SYNC_INDEX_BEGIN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>SYNC_TERM_INVALID</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>SYNC_INDEX_BEGIN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncTerm</name></type>  <name>preTerm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>preIndex</name> <init>= <expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pPreEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type>      <name>pCache</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type>      <name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preIndex</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>preIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPreEntry</name> <operator>=</operator> <operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheHit</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"hit cache index:%"</literal> <name>PRId64</name> <literal type="string">", bytes:%u, %p"</literal></expr></argument>, <argument><expr><name>preIndex</name></expr></argument>, <argument><expr><name><name>pPreEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>pPreEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheMiss</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"miss cache index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>preIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogGetEntry</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>preIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPreEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>,
                        <expr><operator>.</operator><name>lastApplyIndex</name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>,
                        <expr><operator>.</operator><name>lastApplyTerm</name> <operator>=</operator> <name>SYNC_TERM_INVALID</name></expr>,
                        <expr><operator>.</operator><name>lastConfigIndex</name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pPreEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>preTerm</name> <operator>=</operator> <name><name>pPreEntry</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pPreEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>preTerm</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>==</operator> <name>preIndex</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"sync node get pre term error, index:%"</literal> <name>PRId64</name> <literal type="string">", snap-index:%"</literal> <name>PRId64</name> <literal type="string">", snap-term:%"</literal> <name>PRId64</name></expr></argument>,
          <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SYNC_TERM_INVALID</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// get pre index and term of "index"</comment>
<function><type><name>int32_t</name></type> <name>syncNodeGetPreIndexTerm</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name><modifier>*</modifier></type> <name>pPreIndex</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name><modifier>*</modifier></type> <name>pPreTerm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pPreIndex</name> <operator>=</operator> <call><name>syncNodeGetPreIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pPreTerm</name> <operator>=</operator> <call><name>syncNodeGetPreTerm</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncNodeEqPingTimer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncIsInit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pingTimerLogicClockUser</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pingTimerLogicClock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncBuildTimeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>SYNC_TIMEOUT_PING</name></expr></argument>, <argument><expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pingTimerLogicClock</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pingTimerMS</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to build ping msg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// sTrace("enqueue ping msg");</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>syncEqMsg</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>msgcb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to sync enqueue ping msg since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>syncNodeEqPingTimer</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pingTimerMS</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><call><name>syncEnv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>pTimerManager</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pPingTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncNodeEqElectTimer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncIsInit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>    <name>rid</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>syncEqMsg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsNow</name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>electTimerParam</name><operator>.</operator><name>executeTime</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>syncBuildTimeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>SYNC_TIMEOUT_ELECTION</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>electTimerParam</name><operator>.</operator><name>logicClock</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>electTimerMS</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to build elect msg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncTimeout</name><modifier>*</modifier></type> <name>pTimeout</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><literal type="string">"enqueue elect msg lc:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTimeout</name><operator>-&gt;</operator><name>logicClock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>syncEqMsg</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>msgcb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to sync enqueue elect msg since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncNodeEqHeartbeatTimer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncIsInit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClockUser</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncBuildTimeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>SYNC_TIMEOUT_HEARTBEAT</name></expr></argument>, <argument><expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClock</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>heartbeatTimerMS</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to build heartbeat msg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, enqueue heartbeat timer"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>syncEqMsg</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>msgcb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to enqueue heartbeat msg since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>syncNodeEqHeartbeatTimer</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>heartbeatTimerMS</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><call><name>syncEnv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>pTimerManager</name></expr></argument>,
                   <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pHeartbeatTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"==syncNodeEqHeartbeatTimer== heartbeatTimerLogicClock:%"</literal> <name>PRId64</name> <literal type="string">", heartbeatTimerLogicClockUser:%"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClock</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClockUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncNodeEqPeerHeartbeatTimer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>hbDataRid</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSyncHbTimerData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>syncHbTimerDataAcquire</name><argument_list>(<argument><expr><name>hbDataRid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"hb timer get pData NULL, %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>hbDataRid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name> <init>= <expr><call><name>syncNodeAcquire</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>syncNodeRid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncHbTimerDataRelease</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"hb timer get pSyncNode NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>pSyncTimer</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pTimer</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>isStart</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncHbTimerDataRelease</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, hb timer sync node already stop"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncHbTimerDataRelease</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, hb timer sync node not leader"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncHbTimerDataRelease</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, hb timer raft store already stop"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// sTrace("vgId:%d, eq peer hb timer", pSyncNode-&gt;vgId);</comment>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>timerLogicClock</name> <init>= <expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncTimer</name><operator>-&gt;</operator><name>logicClock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>msgLogicClock</name> <init>= <expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>logicClock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>timerLogicClock</name> <operator>==</operator> <name>msgLogicClock</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>tsNow</name> <operator>&gt;</operator> <name><name>pData</name><operator>-&gt;</operator><name>execTime</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>        
        sTrace(
            "vgId:%d, hbDataRid:%ld,  EXECUTE this step-------- heartbeat tsNow:%ld, exec:%ld, tsNow-exec:%ld, "
            "---------",
            pSyncNode-&gt;vgId, hbDataRid, tsNow, pData-&gt;execTime, tsNow - pData-&gt;execTime);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>execTime</name></name> <operator>+=</operator> <name><name>pSyncTimer</name><operator>-&gt;</operator><name>timerMS</name></name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildHeartbeat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SyncHeartbeat</name><modifier>*</modifier></type> <name>pSyncMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>destId</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>minMatchIndex</name></name> <operator>=</operator> <call><name>syncMinMatchIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>privateTerm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>timeStamp</name></name> <operator>=</operator> <name>tsNow</name></expr>;</expr_stmt>

        <comment type="line">// update reset time</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>timerElapsed</name> <init>= <expr><name>tsNow</name> <operator>-</operator> <name><name>pSyncTimer</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>timeStamp</name></name> <operator>=</operator> <name>tsNow</name></expr>;</expr_stmt>

        <comment type="line">// send msg</comment>
        <expr_stmt><expr><call><name>syncLogSendHeartbeat</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>timerElapsed</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>execTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>syncNodeSendHeartbeat</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>        
        sTrace(
            "vgId:%d, hbDataRid:%ld,  pass this step-------- heartbeat tsNow:%ld, exec:%ld, tsNow-exec:%ld, ---------",
            pSyncNode-&gt;vgId, hbDataRid, tsNow, pData-&gt;execTime, tsNow - pData-&gt;execTime);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>syncIsInit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// sTrace("vgId:%d, reset peer hb timer", pSyncNode-&gt;vgId);</comment>
        <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>syncNodeEqPeerHeartbeatTimer</name></expr></argument>, <argument><expr><name><name>pSyncTimer</name><operator>-&gt;</operator><name>timerMS</name></name> <operator>/</operator> <name>HEARTBEAT_TICK_NUM</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>hbDataRid</name></expr></argument>,
                     <argument><expr><call><name>syncEnv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>pTimerManager</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncTimer</name><operator>-&gt;</operator><name>pTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"sync env is stop, reset peer hb timer error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, do not send hb, timerLogicClock:%"</literal> <name>PRId64</name> <literal type="string">", msgLogicClock:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
             <argument><expr><name>timerLogicClock</name></expr></argument>, <argument><expr><name>msgLogicClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncHbTimerDataRelease</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeRelease</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeEqNoop</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type>       <name>index</name> <init>= <expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogWriteIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>        <name>term</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>syncEntryBuildNoop</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncBuildClientRequestFromNoopEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><literal type="string">"propose msg, type:noop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>pNode</name><operator>-&gt;</operator><name>syncEqMsg</name></name>)<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>msgcb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to propose noop msg while enqueue since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deleteCacheEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncCacheEntry</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name><modifier>*</modifier><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"in cache index:%"</literal> <name>PRId64</name> <literal type="string">", bytes:%u, %p"</literal></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>entryLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LRUStatus</name></type> <name>status</name> <init>= <expr><call><name>taosLRUCacheInsert</name><argument_list>(<argument><expr><name><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name>entryLen</name></expr></argument>,
                                        <argument><expr><name>deleteCacheEntry</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>TAOS_LRU_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TAOS_LRU_STATUS_OK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeAppend</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// append to log buffer</comment>
  <if_stmt><if>if <condition>(<expr><call><name>syncLogBufferAppend</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to enqueue sync log buffer. index:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// proceed match index, with replicating on needed</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>matchIndex</name> <init>= <expr><call><name>syncLogBufferProceed</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, append raft entry. index: %"</literal> <name>PRId64</name> <literal type="string">", term: %"</literal> <name>PRId64</name> <literal type="string">" pBuf: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name>
         <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
         <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>,
         <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// multi replica</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// single replica</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncNodeUpdateCommitIndex</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>matchIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>syncLogBufferCommit</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to commit until commitIndex:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncNodeHeartbeatReplyTimeout</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>toCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>recvTime</name> <init>= <expr><call><name>syncIndexMgrGetRecvTime</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>recvTime</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>recvTime</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>tsNow</name> <operator>-</operator> <name>recvTime</name> <operator>&gt;</operator> <name>tsHeartbeatTimeout</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>toCount</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>toCount</name> <operator>&gt;=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>quorum</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncNodeSnapshotSending</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>b</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncNodeSnapshotRecving</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeAppendNoop</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><call><name>syncLogBufferGetEndIndex</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>  <name>term</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>syncEntryBuildNoop</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncNodeAppend</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeAppendNoopOld</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type>       <name>index</name> <init>= <expr><call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogWriteIndex</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>        <name>term</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>syncEntryBuildNoop</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogAppendEntry</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"append noop error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>syncCacheEntry</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnHeartbeat</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncHeartbeat</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pRpcMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>            <name><name>tbuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>TRACE_TO_STR</name><argument_list>(<argument><expr><name>trace</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timeDiff</name> <init>= <expr><name>tsMs</name> <operator>-</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncLogRecvHeartbeat</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>timeDiff</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildHeartbeatReply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncHeartbeatReply</name><modifier>*</modifier></type> <name>pMsgReply</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsgReply</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgReply</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgReply</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgReply</name><operator>-&gt;</operator><name>privateTerm</name></name> <operator>=</operator> <literal type="number">8864</literal></expr>;</expr_stmt>  <comment type="line">// magic number</comment>
  <expr_stmt><expr><name><name>pMsgReply</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgReply</name><operator>-&gt;</operator><name>timeStamp</name></name> <operator>=</operator> <name>tsMs</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>==</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncIndexMgrSetRecvTime</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pNextIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>, <argument><expr><name>tsMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>syncNodeResetElectTimer</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>minMatchIndex</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>minMatchIndex</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// syncNodeFollowerCommit(ths, pMsg-&gt;commitIndex);</comment>
      <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsgLocalCmd</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildLocalCmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsgLocalCmd</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SyncLocalCmd</name><modifier>*</modifier></type> <name>pSyncMsg</name> <init>= <expr><name><name>rpcMsgLocalCmd</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>SYNC_LOCAL_CMD_FOLLOWER_CMT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>fcIndex</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>fcIndex</name> <init>= <expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>fcIndex</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>syncEqMsg</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>msgcb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>ths</name><operator>-&gt;</operator><name>syncEqMsg</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>msgcb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsgLocalCmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync enqueue fc-commit msg error, code:%d"</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcMsgLocalCmd</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync enqueue fc-commit msg, fc-index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fcIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&gt;=</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// syncNodeStepDown(ths, pMsg-&gt;term);</comment>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsgLocalCmd</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildLocalCmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsgLocalCmd</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SyncLocalCmd</name><modifier>*</modifier></type> <name>pSyncMsg</name> <init>= <expr><name><name>rpcMsgLocalCmd</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>SYNC_LOCAL_CMD_STEP_DOWN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>sdNewTerm</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>syncEqMsg</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>msgcb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>ths</name><operator>-&gt;</operator><name>syncEqMsg</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>msgcb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsgLocalCmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync enqueue step-down msg error, code:%d"</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcMsgLocalCmd</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync enqueue step-down msg, new-term: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>sdNewTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
    // htonl
    SMsgHead* pHead = rpcMsg.pCont;
    pHead-&gt;contLen = htonl(pHead-&gt;contLen);
    pHead-&gt;vgId = htonl(pHead-&gt;vgId);
  */</comment>

  <comment type="line">// reply</comment>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsgReply</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnHeartbeatReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pRpcMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>            <name><name>tbuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>TRACE_TO_STR</name><argument_list>(<argument><expr><name>trace</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncHeartbeatReply</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type>    <name>pMgr</name> <init>= <expr><call><name>syncNodeGetLogReplMgr</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMgr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get log repl mgr for the peer at addr 0x016%"</literal> <name>PRIx64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncLogRecvHeartbeatReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>tsMs</name> <operator>-</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>syncIndexMgrSetRecvTime</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr></argument>, <argument><expr><name>tsMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>syncLogReplMgrProcessHeartbeatReply</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnHeartbeatReplyOld</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncHeartbeatReply</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pRpcMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>            <name><name>tbuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>TRACE_TO_STR</name><argument_list>(<argument><expr><name>trace</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timeDiff</name> <init>= <expr><name>tsMs</name> <operator>-</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncLogRecvHeartbeatReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>timeDiff</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update last reply time, make decision whether the other node is alive or not</comment>
  <expr_stmt><expr><call><name>syncIndexMgrSetRecvTime</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr></argument>, <argument><expr><name>tsMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnLocalCmd</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncLocalCmd</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncLogRecvLocalCmd</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>cmd</name></name> <operator>==</operator> <name>SYNC_LOCAL_CMD_STEP_DOWN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>sdNewTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>cmd</name></name> <operator>==</operator> <name>SYNC_LOCAL_CMD_FOLLOWER_CMT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncNodeUpdateCommitIndex</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>fcIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>syncLogBufferCommit</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to commit raft log since %s. commit index: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"error local cmd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnLocalCmdOld</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncLocalCmd</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncLogRecvLocalCmd</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>cmd</name></name> <operator>==</operator> <name>SYNC_LOCAL_CMD_STEP_DOWN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>sdNewTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>cmd</name></name> <operator>==</operator> <name>SYNC_LOCAL_CMD_FOLLOWER_CMT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeFollowerCommit</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>fcIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"error local cmd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TLA+ Spec</comment>
<comment type="line">// ClientRequest(i, v) ==</comment>
<comment type="line">//     /\ state[i] = Leader</comment>
<comment type="line">//     /\ LET entry == [term  |-&gt; currentTerm[i],</comment>
<comment type="line">//                      value |-&gt; v]</comment>
<comment type="line">//            newLog == Append(log[i], entry)</comment>
<comment type="line">//        IN  log' = [log EXCEPT ![i] = newLog]</comment>
<comment type="line">//     /\ UNCHANGED &lt;&lt;messages, serverVars, candidateVars,</comment>
<comment type="line">//                    leaderVars, commitIndex&gt;&gt;</comment>
<comment type="line">//</comment>

<function><type><name>int32_t</name></type> <name>syncNodeOnClientRequest</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name><modifier>*</modifier></type> <name>pRetIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"on client request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type>       <name>index</name> <init>= <expr><call><name>syncLogBufferGetEndIndex</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>        <name>term</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_CLIENT_REQUEST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>syncEntryBuildFromClientRequest</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>syncEntryBuildFromRpcMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pRetIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pRetIndex</name><operator>)</operator> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncNodeAppend</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>vnodeIsMsgBlock</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"failed to append blocking msg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnClientRequestOld</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name><modifier>*</modifier></type> <name>pRetIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"on client request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type>       <name>index</name> <init>= <expr><call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogWriteIndex</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>        <name>term</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_CLIENT_REQUEST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>syncEntryBuildFromClientRequest</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>syncEntryBuildFromRpcMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// append entry</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogAppendEntry</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// del resp mgr, call FpCommitCb</comment>
        <decl_stmt><decl><type><name>SFsmCbMeta</name></type> <name>cbMeta</name> <init>= <expr><block>{
            <expr><operator>.</operator><name>index</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr>,
            <expr><operator>.</operator><name>lastConfigIndex</name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>,
            <expr><operator>.</operator><name>isWeak</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>isWeak</name></name></expr>,
            <expr><operator>.</operator><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
            <expr><operator>.</operator><name>state</name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>state</name></name></expr>,
            <expr><operator>.</operator><name>seqNum</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>seqNum</name></name></expr>,
            <expr><operator>.</operator><name>term</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr>,
            <expr><operator>.</operator><name>currentTerm</name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>,
            <expr><operator>.</operator><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpCommitCb</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>syncCacheEntry</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if mulit replica, start replicate right now</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncNodeReplicate</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if only myself, maybe commit right now</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>syncNodeIsMnode</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>syncMaybeAdvanceCommitIndex</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>syncOneReplicaAdvance</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pRetIndex</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRetIndex</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRetIndex</name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>syncStr</name><parameter_list>(<parameter><decl><type><name>ESyncState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TAOS_SYNC_STATE_FOLLOWER</name></expr>:</case>
      <return>return <expr><literal type="string">"follower"</literal></expr>;</return>
    <case>case <expr><name>TAOS_SYNC_STATE_CANDIDATE</name></expr>:</case>
      <return>return <expr><literal type="string">"candidate"</literal></expr>;</return>
    <case>case <expr><name>TAOS_SYNC_STATE_LEADER</name></expr>:</case>
      <return>return <expr><literal type="string">"leader"</literal></expr>;</return>
    <case>case <expr><name>TAOS_SYNC_STATE_ERROR</name></expr>:</case>
      <return>return <expr><literal type="string">"error"</literal></expr>;</return>
    <case>case <expr><name>TAOS_SYNC_STATE_OFFLINE</name></expr>:</case>
      <return>return <expr><literal type="string">"offline"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t syncDoLeaderTransfer(SSyncNode* ths, SRpcMsg* pRpcMsg, SSyncRaftEntry* pEntry) {
  if (ths-&gt;state != TAOS_SYNC_STATE_FOLLOWER) {
    sNTrace(ths, "I am not follower, can not do leader transfer");
    return 0;
  }

  if (!ths-&gt;restoreFinish) {
    sNTrace(ths, "restore not finish, can not do leader transfer");
    return 0;
  }

  if (pEntry-&gt;term &lt; ths-&gt;pRaftStore-&gt;currentTerm) {
    sNTrace(ths, "little term:%" PRId64 ", can not do leader transfer", pEntry-&gt;term);
    return 0;
  }

  if (pEntry-&gt;index &lt; syncNodeGetLastIndex(ths)) {
    sNTrace(ths, "little index:%" PRId64 ", can not do leader transfer", pEntry-&gt;index);
    return 0;
  }

  <comment type="block">/*
    if (ths-&gt;vgId &gt; 1) {
      sNTrace(ths, "I am vnode, can not do leader transfer");
      return 0;
    }
  */</comment>

  SyncLeaderTransfer* pSyncLeaderTransfer = pRpcMsg-&gt;pCont;
  sNTrace(ths, "do leader transfer, index:%" PRId64, pEntry-&gt;index);

  bool sameId = syncUtilSameId(&amp;(pSyncLeaderTransfer-&gt;newLeaderId), &amp;(ths-&gt;myRaftId));
  bool sameNodeInfo = strcmp(pSyncLeaderTransfer-&gt;newNodeInfo.nodeFqdn, ths-&gt;myNodeInfo.nodeFqdn) == 0 &amp;&amp;
                      pSyncLeaderTransfer-&gt;newNodeInfo.nodePort == ths-&gt;myNodeInfo.nodePort;

  bool same = sameId || sameNodeInfo;
  if (same) {
    <comment type="line">// reset elect timer now!</comment>
    int32_t electMS = 1;
    int32_t ret = syncNodeRestartElectTimer(ths, electMS);
    ASSERT(ret == 0);

    sNTrace(ths, "maybe leader transfer to %s:%d %" PRId64, pSyncLeaderTransfer-&gt;newNodeInfo.nodeFqdn,
            pSyncLeaderTransfer-&gt;newNodeInfo.nodePort, pSyncLeaderTransfer-&gt;newLeaderId.addr);
  }

  if (ths-&gt;pFsm-&gt;FpLeaderTransferCb != NULL) {
    SFsmCbMeta cbMeta = {
        .code = 0,
        .currentTerm = ths-&gt;pRaftStore-&gt;currentTerm,
        .flag = 0,
        .index = pEntry-&gt;index,
        .lastConfigIndex = syncNodeGetSnapshotConfigIndex(ths, pEntry-&gt;index),
        .isWeak = pEntry-&gt;isWeak,
        .seqNum = pEntry-&gt;seqNum,
        .state = ths-&gt;state,
        .term = pEntry-&gt;term,
    };
    ths-&gt;pFsm-&gt;FpLeaderTransferCb(ths-&gt;pFsm, pRpcMsg, &amp;cbMeta);
  }

  return 0;
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>syncNodeUpdateNewConfigIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SSyncCfg</name><modifier>*</modifier></type> <name>pNewCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pNewCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRaftId</name></type> <name>raftId</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>raftId</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>syncUtilAddr2U64</name><argument_list>(<argument><expr><operator>(</operator><name><name>pNewCfg</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodeFqdn</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pNewCfg</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raftId</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>myRaftId</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>raftId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pNewCfg</name><operator>-&gt;</operator><name>myIndex</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncNodeIsOptimizedOneReplica</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>syncUtilUserCommit</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeDoCommit</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>beginIndex</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>endIndex</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>beginIndex</name> <operator>&gt;</operator> <name>endIndex</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ths</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// advance commit index to sanpshot first</comment>
    <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;=</operator> <name>beginIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"commit by snapshot from index:%"</literal> <name>PRId64</name> <literal type="string">" to index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>beginIndex</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// update begin index</comment>
      <expr_stmt><expr><name>beginIndex</name> <operator>=</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ESyncState</name></type> <name>state</name> <init>= <expr><name>flag</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"commit by wal from index:%"</literal> <name>PRId64</name> <literal type="string">" to index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>beginIndex</name></expr></argument>, <argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// execute fsm</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>i</name> <init>= <expr><name>beginIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>endIndex</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>SYNC_INDEX_INVALID</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type>      <name>pCache</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type>      <name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheHit</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"hit cache index:%"</literal> <name>PRId64</name> <literal type="string">", bytes:%u, %p"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheMiss</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"miss cache index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogGetEntry</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line">// ASSERT(code == 0);</comment>
          <comment type="line">// ASSERT(pEntry != NULL);</comment>
          <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"get log entry error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sFatal</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, get log entry %"</literal> <name>PRId64</name> <literal type="string">" error when commit since %s"</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>syncEntry2OriginalRpc</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"do commit index:%"</literal> <name>PRId64</name> <literal type="string">", type:%s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// user commit</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpCommitCb</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>syncUtilUserCommit</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>bool</name></type> <name>internalExecute</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>restoreFinish</name></name> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>internalExecute</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"user commit index:%"</literal> <name>PRId64</name> <literal type="string">", internal:%d, type:%s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>internalExecute</name></expr></argument>,
                  <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="line">// execute fsm in apply thread, or execute outside syncPropose</comment>
          <if_stmt><if>if <condition>(<expr><name>internalExecute</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SFsmCbMeta</name></type> <name>cbMeta</name> <init>= <expr><block>{
                <expr><operator>.</operator><name>index</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr>,
                <expr><operator>.</operator><name>lastConfigIndex</name> <operator>=</operator> <call><name>syncNodeGetSnapshotConfigIndex</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>isWeak</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>isWeak</name></name></expr>,
                <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                <expr><operator>.</operator><name>state</name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>state</name></name></expr>,
                <expr><operator>.</operator><name>seqNum</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>seqNum</name></name></expr>,
                <expr><operator>.</operator><name>term</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr>,
                <expr><operator>.</operator><name>currentTerm</name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>,
                <expr><operator>.</operator><name>flag</name> <operator>=</operator> <name>flag</name></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>syncRespMgrGetAndDel</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name></expr></argument>, <argument><expr><name><name>cbMeta</name><operator>.</operator><name>seqNum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rpcMsg</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpCommitCb</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
        <comment type="line">// execute in pre-commit</comment>
        <comment type="line">// leader transfer</comment>
        if (pEntry-&gt;originalRpcType == TDMT_SYNC_LEADER_TRANSFER) {
          code = syncDoLeaderTransfer(ths, &amp;rpcMsg, pEntry);
          ASSERT(code == 0);
        }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">// restore finish</comment>
        <comment type="line">// if only snapshot, a noop entry will be append, so syncLogLastIndex is always ok</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>restoreFinish</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpRestoreFinishCb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpRestoreFinishCb</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>restoreFinish</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>restoreDelay</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ths</name><operator>-&gt;</operator><name>leaderTime</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"restore finish, index:%"</literal> <name>PRId64</name> <literal type="string">", elapsed:%"</literal> <name>PRId64</name> <literal type="string">" ms"</literal></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>restoreDelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncNodeInRaftGroup</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pRaftId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><name>pRaftId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncSnapshotSender</name><modifier>*</modifier></type> <name>syncNodeGetSnapshotSender</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pDestId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncSnapshotSender</name><modifier>*</modifier></type> <name>pSender</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><name>pDestId</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pSender</name> <operator>=</operator> <operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>pSender</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>syncNodeGetHbTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pDestId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncTimer</name><modifier>*</modifier></type> <name>pTimer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><name>pDestId</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pTimer</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>peerHeartbeatTimerArr</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>pTimer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SPeerState</name><modifier>*</modifier></type> <name>syncNodeGetPeerState</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>pDestId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPeerState</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><name>pDestId</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pState</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>peerStates</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>pState</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncNodeNeedSendAppendEntries</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>pDestId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPeerState</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><call><name>syncNodeGetPeerState</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pState</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, replica maybe dropped"</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>sendIndex</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>tsNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pState</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>==</operator> <name>sendIndex</name> <operator>&amp;&amp;</operator> <name>tsNow</name> <operator>-</operator> <name><name>pState</name><operator>-&gt;</operator><name>lastSendTime</name></name> <operator>&lt;</operator> <name>SYNC_APPEND_ENTRIES_TIMEOUT_MS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncNodeCanChange</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>changing</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"sync cannot change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>&gt;=</operator> <name>SYNC_INDEX_BEGIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name> <init>= <expr><call><name>syncNodeGetLastIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>!=</operator> <name>lastIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"sync cannot change2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncSnapshotSender</name><modifier>*</modifier></type> <name>pSender</name> <init>= <expr><call><name>syncNodeGetSnapshotSender</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pSender</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSender</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"sync cannot change3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
