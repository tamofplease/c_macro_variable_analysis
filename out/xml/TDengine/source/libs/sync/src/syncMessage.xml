<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncMessage.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>syncBuildTimeout</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>ESyncTimeoutType</name></type> <name>timeoutType</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>logicClock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timerMS</name></decl></parameter>,
                         <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncTimeout</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_TIMEOUT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncTimeout</name><modifier>*</modifier></type> <name>pTimeout</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTimeout</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTimeout</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_TIMEOUT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTimeout</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTimeout</name><operator>-&gt;</operator><name>timeoutType</name></name> <operator>=</operator> <name>timeoutType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTimeout</name><operator>-&gt;</operator><name>logicClock</name></name> <operator>=</operator> <name>logicClock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTimeout</name><operator>-&gt;</operator><name>timerMS</name></name> <operator>=</operator> <name>timerMS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTimeout</name><operator>-&gt;</operator><name>timeStamp</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTimeout</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildClientRequest</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pOriginal</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>seqNum</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWeak</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncClientRequest</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pOriginal</name><operator>-&gt;</operator><name>contLen</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_CLIENT_REQUEST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncClientRequest</name><modifier>*</modifier></type> <name>pClientRequest</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_CLIENT_REQUEST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>originalRpcType</name></name> <operator>=</operator> <name><name>pOriginal</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>seqNum</name></name> <operator>=</operator> <name>seqNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>isWeak</name></name> <operator>=</operator> <name>isWeak</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name><name>pOriginal</name><operator>-&gt;</operator><name>contLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pOriginal</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pOriginal</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildClientRequestFromNoopEntry</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncClientRequest</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_CLIENT_REQUEST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncClientRequest</name><modifier>*</modifier></type> <name>pClientRequest</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_CLIENT_REQUEST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>originalRpcType</name></name> <operator>=</operator> <name>TDMT_SYNC_NOOP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pClientRequest</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pEntry</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildRequestVote</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncRequestVote</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_REQUEST_VOTE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncRequestVote</name><modifier>*</modifier></type> <name>pRequestVote</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRequestVote</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequestVote</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_REQUEST_VOTE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequestVote</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildRequestVoteReply</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncRequestVoteReply</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_REQUEST_VOTE_REPLY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncRequestVoteReply</name><modifier>*</modifier></type> <name>pRequestVoteReply</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRequestVoteReply</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequestVoteReply</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_REQUEST_VOTE_REPLY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequestVoteReply</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildAppendEntries</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncAppendEntries</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dataLen</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_APPEND_ENTRIES</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pAppendEntries</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pAppendEntries</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAppendEntries</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAppendEntries</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_APPEND_ENTRIES</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAppendEntries</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildAppendEntriesReply</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncAppendEntriesReply</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_APPEND_ENTRIES_REPLY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncAppendEntriesReply</name><modifier>*</modifier></type> <name>pAppendEntriesReply</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pAppendEntriesReply</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAppendEntriesReply</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_APPEND_ENTRIES_REPLY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAppendEntriesReply</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildAppendEntriesFromRaftLog</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>prevLogTerm</name></decl></parameter>,
                                          <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dataLen</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncAppendEntries</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dataLen</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_APPEND_ENTRIES</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name> <operator>=</operator> <name>prevLogTerm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>privateTerm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildHeartbeat</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncHeartbeat</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_HEARTBEAT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncHeartbeat</name><modifier>*</modifier></type> <name>pHeartbeat</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHeartbeat</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHeartbeat</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_HEARTBEAT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHeartbeat</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildHeartbeatReply</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncHeartbeatReply</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_HEARTBEAT_REPLY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncHeartbeatReply</name><modifier>*</modifier></type> <name>pHeartbeatReply</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHeartbeatReply</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHeartbeatReply</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_HEARTBEAT_REPLY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHeartbeatReply</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t syncBuildPreSnapshot(SRpcMsg* pMsg, int32_t vgId) {
  int32_t bytes = sizeof(SyncPreSnapshot);
  pMsg-&gt;pCont = rpcMallocCont(bytes);
  pMsg-&gt;msgType = TDMT_SYNC_PRE_SNAPSHOT;
  pMsg-&gt;contLen = bytes;
  if (pMsg-&gt;pCont == NULL) {
    terrno = TSDB_CODE_OUT_OF_MEMORY;
    return -1;
  }

  SyncPreSnapshot* pPreSnapshot = pMsg-&gt;pCont;
  pPreSnapshot-&gt;bytes = bytes;
  pPreSnapshot-&gt;msgType = TDMT_SYNC_PRE_SNAPSHOT;
  pPreSnapshot-&gt;vgId = vgId;
  return 0;
}

int32_t syncBuildPreSnapshotReply(SRpcMsg* pMsg, int32_t vgId) {
  int32_t bytes = sizeof(SyncPreSnapshotReply);
  pMsg-&gt;pCont = rpcMallocCont(bytes);
  pMsg-&gt;msgType = TDMT_SYNC_PRE_SNAPSHOT_REPLY;
  pMsg-&gt;contLen = bytes;
  if (pMsg-&gt;pCont == NULL) {
    terrno = TSDB_CODE_OUT_OF_MEMORY;
    return -1;
  }

  SyncPreSnapshotReply* pPreSnapshotReply = pMsg-&gt;pCont;
  pPreSnapshotReply-&gt;bytes = bytes;
  pPreSnapshotReply-&gt;msgType = TDMT_SYNC_PRE_SNAPSHOT_REPLY;
  pPreSnapshotReply-&gt;vgId = vgId;
  return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>syncBuildSnapshotSend</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncSnapshotSend</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dataLen</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_SNAPSHOT_SEND</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncSnapshotSend</name><modifier>*</modifier></type> <name>pSnapshotSend</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pSnapshotSend</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSnapshotSend</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSnapshotSend</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_SNAPSHOT_SEND</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSnapshotSend</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildSnapshotSendRsp</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncSnapshotRsp</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_SNAPSHOT_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncSnapshotRsp</name><modifier>*</modifier></type> <name>pPreSnapshotRsp</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pPreSnapshotRsp</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPreSnapshotRsp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_SNAPSHOT_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPreSnapshotRsp</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildLeaderTransfer</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncLeaderTransfer</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_LEADER_TRANSFER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncLeaderTransfer</name><modifier>*</modifier></type> <name>pLeaderTransfer</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pLeaderTransfer</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLeaderTransfer</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_LEADER_TRANSFER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLeaderTransfer</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncBuildLocalCmd</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncLocalCmd</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_LOCAL_CMD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncLocalCmd</name><modifier>*</modifier></type> <name>pLocalCmd</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pLocalCmd</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLocalCmd</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_LOCAL_CMD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLocalCmd</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>syncTimerTypeStr</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ESyncTimeoutType</name></name></type> <name>timerType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>timerType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SYNC_TIMEOUT_PING</name></expr>:</case>
      <return>return <expr><literal type="string">"ping"</literal></expr>;</return>
    <case>case <expr><name>SYNC_TIMEOUT_ELECTION</name></expr>:</case>
      <return>return <expr><literal type="string">"elect"</literal></expr>;</return>
    <case>case <expr><name>SYNC_TIMEOUT_HEARTBEAT</name></expr>:</case>
      <return>return <expr><literal type="string">"heartbeat"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>syncLocalCmdGetStr</name><parameter_list>(<parameter><decl><type><name>ESyncLocalCmd</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SYNC_LOCAL_CMD_STEP_DOWN</name></expr>:</case>
      <return>return <expr><literal type="string">"step-down"</literal></expr>;</return>
    <case>case <expr><name>SYNC_LOCAL_CMD_FOLLOWER_CMT</name></expr>:</case>
      <return>return <expr><literal type="string">"follower-commit"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"unknown-local-cmd"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>
</unit>
