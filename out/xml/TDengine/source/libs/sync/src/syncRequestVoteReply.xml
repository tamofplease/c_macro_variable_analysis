<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncRequestVoteReply.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRequestVoteReply.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncVoteMgr.h"</cpp:file></cpp:include>

<comment type="line">// TLA+ Spec</comment>
<comment type="line">// HandleRequestVoteResponse(i, j, m) ==</comment>
<comment type="line">//    \* This tallies votes even when the current state is not Candidate, but</comment>
<comment type="line">//    \* they won't be looked at, so it doesn't matter.</comment>
<comment type="line">//    /\ m.mterm = currentTerm[i]</comment>
<comment type="line">//    /\ votesResponded' = [votesResponded EXCEPT ![i] =</comment>
<comment type="line">//                              votesResponded[i] \cup {j}]</comment>
<comment type="line">//    /\ \/ /\ m.mvoteGranted</comment>
<comment type="line">//          /\ votesGranted' = [votesGranted EXCEPT ![i] =</comment>
<comment type="line">//                                  votesGranted[i] \cup {j}]</comment>
<comment type="line">//          /\ voterLog' = [voterLog EXCEPT ![i] =</comment>
<comment type="line">//                              voterLog[i] @@ (j :&gt; m.mlog)]</comment>
<comment type="line">//       \/ /\ ~m.mvoteGranted</comment>
<comment type="line">//          /\ UNCHANGED &lt;&lt;votesGranted, voterLog&gt;&gt;</comment>
<comment type="line">//    /\ Discard(m)</comment>
<comment type="line">//    /\ UNCHANGED &lt;&lt;serverVars, votedFor, leaderVars, logVars&gt;&gt;</comment>
<comment type="line">//</comment>

<function><type><name>int32_t</name></type> <name>syncNodeOnRequestVoteReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncRequestVoteReply</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// if already drop replica, do not process</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeInRaftGroup</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvRequestVoteReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"not in my config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// drop stale response</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvRequestVoteReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"drop stale response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// ASSERT(!(pMsg-&gt;term &gt; ths-&gt;pRaftStore-&gt;currentTerm));</comment>
  <comment type="line">//  no need this code, because if I receive reply.term, then I must have sent for that term.</comment>
  <comment type="line">//   if (pMsg-&gt;term &gt; ths-&gt;pRaftStore-&gt;currentTerm) {</comment>
  <comment type="line">//     syncNodeUpdateTerm(ths, pMsg-&gt;term);</comment>
  <comment type="line">//   }</comment>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&gt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvRequestVoteReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"error term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncLogRecvRequestVoteReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>==</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// This tallies votes even when the current state is not Candidate,</comment>
  <comment type="line">// but they won't be looked at, so it doesn't matter.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_CANDIDATE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>pVotesRespond</name><operator>-&gt;</operator><name>term</name></name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"vote respond error vote-respond-mgr term:%"</literal> <name>PRIu64</name> <literal type="string">", msg term:%"</literal> <name>PRIu64</name> <literal type="string">""</literal></expr></argument>,
              <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pVotesRespond</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>votesRespondAdd</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pVotesRespond</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>voteGranted</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// add vote</comment>
      <expr_stmt><expr><call><name>voteGrantedVote</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// maybe to leader</comment>
      <if_stmt><if>if <condition>(<expr><call><name>voteGrantedMajority</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ths</name><operator>-&gt;</operator><name>pVotesGranted</name><operator>-&gt;</operator><name>toLeader</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>syncNodeCandidate2Leader</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="line">// prevent to leader again!</comment>
          <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>pVotesGranted</name><operator>-&gt;</operator><name>toLeader</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <empty_stmt>;</empty_stmt>
      <comment type="line">// do nothing</comment>
      <comment type="line">// UNCHANGED &lt;&lt;votesGranted, voterLog&gt;&gt;</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
