<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncElection.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncElection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftCfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncVoteMgr.h"</cpp:file></cpp:include>

<comment type="line">// TLA+ Spec</comment>
<comment type="line">// RequestVote(i, j) ==</comment>
<comment type="line">//    /\ state[i] = Candidate</comment>
<comment type="line">//    /\ j \notin votesResponded[i]</comment>
<comment type="line">//    /\ Send([mtype         |-&gt; RequestVoteRequest,</comment>
<comment type="line">//             mterm         |-&gt; currentTerm[i],</comment>
<comment type="line">//             mlastLogTerm  |-&gt; LastTerm(log[i]),</comment>
<comment type="line">//             mlastLogIndex |-&gt; Len(log[i]),</comment>
<comment type="line">//             msource       |-&gt; i,</comment>
<comment type="line">//             mdest         |-&gt; j])</comment>
<comment type="line">//    /\ UNCHANGED &lt;&lt;serverVars, candidateVars, leaderVars, logVars&gt;&gt;</comment>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeRequestVotePeers</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_CANDIDATE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><literal type="string">"not candidate, stop elect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncBuildRequestVote</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SyncRequestVote</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeGetLastIndexTerm</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeElect</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"begin election"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electNum</name></name><operator>++</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeFollower2Candidate</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_CANDIDATE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"not candidate, can not elect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// start election</comment>
  <expr_stmt><expr><call><name>raftStoreNextTerm</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>raftStoreClearVote</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>voteGrantedReset</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>votesRespondReset</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesRespond</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>syncNodeVoteForSelf</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>voteGrantedMajority</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// only myself, to leader</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name><operator>-&gt;</operator><name>toLeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeCandidate2Leader</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name><operator>-&gt;</operator><name>toLeader</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// only myself, to leader</comment>
    <expr_stmt><expr><call><name>voteGrantedUpdate</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>votesRespondUpdate</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesRespond</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>quorum</name></name> <operator>=</operator> <call><name>syncUtilQuorum</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>syncNodeCandidate2Leader</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name><operator>-&gt;</operator><name>toLeader</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeRequestVotePeers</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>syncNodeResetElectTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
