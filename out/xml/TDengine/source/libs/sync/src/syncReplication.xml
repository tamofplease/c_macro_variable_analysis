<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncReplication.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncReplication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncIndexMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncPipeline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<comment type="line">// TLA+ Spec</comment>
<comment type="line">// AppendEntries(i, j) ==</comment>
<comment type="line">//    /\ i /= j</comment>
<comment type="line">//    /\ state[i] = Leader</comment>
<comment type="line">//    /\ LET prevLogIndex == nextIndex[i][j] - 1</comment>
<comment type="line">//           prevLogTerm == IF prevLogIndex &gt; 0 THEN</comment>
<comment type="line">//                              log[i][prevLogIndex].term</comment>
<comment type="line">//                          ELSE</comment>
<comment type="line">//                              0</comment>
<comment type="line">//           \* Send up to 1 entry, constrained by the end of the log.</comment>
<comment type="line">//           lastEntry == Min({Len(log[i]), nextIndex[i][j]})</comment>
<comment type="line">//           entries == SubSeq(log[i], nextIndex[i][j], lastEntry)</comment>
<comment type="line">//       IN Send([mtype          |-&gt; AppendEntriesRequest,</comment>
<comment type="line">//                mterm          |-&gt; currentTerm[i],</comment>
<comment type="line">//                mprevLogIndex  |-&gt; prevLogIndex,</comment>
<comment type="line">//                mprevLogTerm   |-&gt; prevLogTerm,</comment>
<comment type="line">//                mentries       |-&gt; entries,</comment>
<comment type="line">//                \* mlog is used as a history variable for the proof.</comment>
<comment type="line">//                \* It would not exist in a real implementation.</comment>
<comment type="line">//                mlog           |-&gt; log[i],</comment>
<comment type="line">//                mcommitIndex   |-&gt; Min({commitIndex[i], lastEntry}),</comment>
<comment type="line">//                msource        |-&gt; i,</comment>
<comment type="line">//                mdest          |-&gt; j])</comment>
<comment type="line">//    /\ UNCHANGED &lt;&lt;serverVars, candidateVars, leaderVars, logVars&gt;&gt;</comment>

<function_decl><type><name>int32_t</name></type> <name>syncNodeMaybeSendAppendEntries</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>destRaftId</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>syncNodeReplicateOne</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pDestId</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>snapshot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"deprecated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// next index</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>nextIndex</name> <init>= <expr><call><name>syncIndexMgrGetIndex</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name></name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>snapshot</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// maybe start snapshot</comment>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logStartIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logEndIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogEndIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>nextIndex</name> <argument_list type="generic">&lt; <argument><expr><name>logStartIndex</name> <operator>||</operator> <name>nextIndex</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> &gt;</argument_list></name> <name>logEndIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"maybe start snapshot for next-index:%"</literal> <name>PRId64</name> <literal type="string">", start:%"</literal> <name>PRId64</name> <literal type="string">", end:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>nextIndex</name></expr></argument>,
              <argument><expr><name>logStartIndex</name></expr></argument>, <argument><expr><name>logEndIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// start snapshot</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncNodeStartSnapshot</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pre index, pre term</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>preLogIndex</name> <init>= <expr><call><name>syncNodeGetPreIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>nextIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>  <name>preLogTerm</name> <init>= <expr><call><name>syncNodeGetPreTerm</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>nextIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// prepare entry</comment>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>            <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type>      <name>pCache</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type>      <name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextIndex</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nextIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheHit</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"hit cache index:%"</literal> <name>PRId64</name> <literal type="string">", bytes:%u, %p"</literal></expr></argument>, <argument><expr><name>nextIndex</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheMiss</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"miss cache index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>nextIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogGetEntry</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>nextIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncBuildAppendEntries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pMsg</name> <operator>=</operator> <name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// no entry in log</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>syncBuildAppendEntries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pMsg</name> <operator>=</operator> <name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"replicate to %s:%d error, next-index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>nextIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// prepare msg</comment>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <operator>*</operator><name>pDestId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>=</operator> <name>preLogIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name> <operator>=</operator> <name>preLogTerm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>privateTerm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <comment type="line">// pMsg-&gt;privateTerm = syncIndexMgrGetTerm(pSyncNode-&gt;pNextIndex, pDestId);</comment>

  <comment type="line">// send msg</comment>
  <expr_stmt><expr><call><name>syncNodeMaybeSendAppendEntries</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeReplicate</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncNodeReplicateWithoutLock</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeReplicateWithoutLock</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_LEADER</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>logReplMgrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogReplMgrReplicateOnce</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeReplicateOld</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"do replicate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pDestId</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeReplicateOne</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type>    <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int16_t</name></type> <name>port</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, do append entries error for %s:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeSendAppendEntries</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>destRaftId</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <operator>*</operator><name>destRaftId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><name>destRaftId</name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeSendAppendEntriesOld</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>destRaftId</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync-append-entries msg is NULL"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SPeerState</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><call><name>syncNodeGetPeerState</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>destRaftId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pState</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, replica maybe dropped"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// save index, otherwise pMsg will be free by rpc</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>saveLastSendIndex</name> <init>= <expr><name><name>pState</name><operator>-&gt;</operator><name>lastSendIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>saveLastSendIndex</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncLogSendAppendEntries</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><name>destRaftId</name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pState</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>=</operator> <name>saveLastSendIndex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pState</name><operator>-&gt;</operator><name>lastSendTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeMaybeSendAppendEntries</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>destRaftId</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>syncNodeNeedSendAppendEntries</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>destRaftId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeSendAppendEntries</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>destRaftId</name></expr></argument>, <argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>logBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>port</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>destRaftId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"do not repcate to %s:%d for index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeSendHeartbeat</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>destId</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><name>destId</name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeHeartbeatPeers</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>syncBuildHeartbeat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, build sync-heartbeat error"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SyncHeartbeat</name><modifier>*</modifier></type> <name>pSyncMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>minMatchIndex</name></name> <operator>=</operator> <call><name>syncMinMatchIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>privateTerm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>timeStamp</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

    <comment type="line">// send msg</comment>
    <expr_stmt><expr><call><name>syncLogSendHeartbeat</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncNodeSendHeartbeat</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
