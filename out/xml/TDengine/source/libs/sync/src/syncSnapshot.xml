<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncSnapshot.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncSnapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncIndexMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncPipeline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftCfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncReplication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<function><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>snapshotSenderCreate</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>replicaIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>condition</name> <init>= <expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStartRead</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopRead</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
                   <operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotDoRead</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>condition</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pSender</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncSnapshotSender</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pSender</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_INVALID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_INVALID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>pReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>sendingMS</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_RETRY_MS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name></name> <operator>=</operator> <name>pSyncNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>replicaIndex</name></name> <operator>=</operator> <name>replicaIndex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>endTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot create snapshot sender"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pSender</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>snapshotSenderDestroy</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSender</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// free current block</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// close reader</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pSender</name><operator>-&gt;</operator><name>pReader</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopRead</name></name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pReader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"stop reader error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>pReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// free sender</comment>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>snapshotSenderIsStart</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pSender</name><operator>-&gt;</operator><name>start</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>snapshotSenderStart</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>snapshotSenderIsStart</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_BEGIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_INVALID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>pReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name> <operator>=</operator> <name>SYNC_TERM_INVALID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastConfigIndex</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>lastConfig</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>lastConfig</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>sendingMS</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>lastSendTime</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <comment type="line">// build begin msg</comment>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildSnapshotSend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name><name>pSender</name><operator>-&gt;</operator><name>replicaIndex</name></name></expr>]</index></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>beginIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastConfigIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastConfig</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>lastConfig</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_PRE_SNAPSHOT</name></expr>;</expr_stmt>

  <comment type="line">// send msg</comment>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogSendSyncSnapshotSend</name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// event log</comment>
  <expr_stmt><expr><call><name>sSTrace</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>snapshotSenderStop</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// update flag</comment>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>finish</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>endTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// close reader</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSender</name><operator>-&gt;</operator><name>pReader</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopRead</name></name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pReader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>pReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// free current block</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// event log</comment>
  <expr_stmt><expr><call><name>sSTrace</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// when sender receive ack, call this function to send msg from seq</comment>
<comment type="line">// seq = ack + 1, already updated</comment>
<function><type><name>int32_t</name></type> <name>snapshotSend</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// free memory last time (current seq - 1)</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// read data</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotDoRead</name></name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pReader</name></name></expr></argument>,
                                                           <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// has read data</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// read finish, update seq to end</comment>
    <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_END</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// build msg</comment>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildSnapshotSend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name><name>pSender</name><operator>-&gt;</operator><name>replicaIndex</name></name></expr>]</index></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>beginIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastConfigIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastConfig</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>lastConfig</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt>

  <comment type="line">// pMsg-&gt;privateTerm = pSender-&gt;privateTerm;</comment>

  <if_stmt><if>if <condition>(<expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// send msg</comment>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogSendSyncSnapshotSend</name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>lastSendTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// event log</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <name>SYNC_SNAPSHOT_SEQ_END</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sSTrace</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender finish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sSTrace</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender sending"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// send snapshot data from cache</comment>
<function><type><name>int32_t</name></type> <name>snapshotReSend</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// send current block data</comment>

  <comment type="line">// build msg</comment>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildSnapshotSend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name><name>pSender</name><operator>-&gt;</operator><name>replicaIndex</name></name></expr>]</index></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>beginIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastConfigIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastConfig</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>lastConfig</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">//  pMsg-&gt;privateTerm = pSender-&gt;privateTerm;</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pCurrentBlock</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>blockLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// send msg</comment>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogSendSyncSnapshotSend</name><argument_list>(<argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>lastSendTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// event log</comment>
  <expr_stmt><expr><call><name>sSTrace</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender resend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>snapshotSenderUpdateProgress</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name></decl></parameter>, <parameter><decl><type><name>SyncSnapshotRsp</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>ack</name></name> <operator>==</operator> <name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>ack</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// return 0, start ok</comment>
<comment type="line">// return 1, last snapshot finish ok</comment>
<comment type="line">// return -1, error</comment>
<function><type><name>int32_t</name></type> <name>syncNodeStartSnapshot</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name> <modifier>*</modifier></type><name>pDestId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"starting snapshot ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name> <init>= <expr><call><name>syncNodeGetSnapshotSender</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSender</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"start snapshot error, sender is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>snapshotSenderIsStart</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender already start, ignore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>snapshotSenderIsStart</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pSender</name><operator>-&gt;</operator><name>finish</name></name> <operator>&amp;&amp;</operator>
      <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pSender</name><operator>-&gt;</operator><name>endTime</name></name> <operator>&lt;</operator> <name>SNAPSHOT_WAIT_MS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender too frequently, ignore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start snapshot for peer: %s:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>snapshotSenderStart</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender start error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>snapshotReceiverCreate</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name></type> <name>fromId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>condition</name> <init>= <expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStartWrite</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopWrite</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
                   <operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotDoWrite</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>condition</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pReceiver</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncSnapshotReceiver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pReceiver</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_BEGIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name></name> <operator>=</operator> <name>pSyncNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>fromId</name></name> <operator>=</operator> <name>fromId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastConfigIndex</name></name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot create snapshot receiver"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pReceiver</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>snapshotReceiverDestroy</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pReceiver</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// close writer</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopWrite</name></name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>,
                                                                    <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// free receiver</comment>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>snapshotReceiverIsStart</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pReceiver</name><operator>-&gt;</operator><name>start</name></name></expr>;</return> </block_content>}</block></function>

<comment type="line">// force stop</comment>
<function><type><name>void</name></type> <name>snapshotReceiverForceStop</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// force close, abandon incomplete data</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// event log</comment>
    <expr_stmt><expr><call><name>sRTrace</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver force stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopWrite</name></name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                                                                  <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <comment type="line">// event log</comment>
  <comment type="line">// sRTrace(pReceiver, "snapshot receiver force stop");</comment>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>snapshotReceiverStartWriter</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name></decl></parameter>, <parameter><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pBeginMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>snapshotReceiverIsStart</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update ack</comment>
  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_BEGIN</name></expr>;</expr_stmt>

  <comment type="line">// update snapshot</comment>
  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>=</operator> <name><name>pBeginMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name> <operator>=</operator> <name><name>pBeginMsg</name><operator>-&gt;</operator><name>lastTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastConfigIndex</name></name> <operator>=</operator> <name><name>pBeginMsg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>pBeginMsg</name><operator>-&gt;</operator><name>beginIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name><name>pBeginMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr>;</expr_stmt>

  <comment type="line">// start writer</comment>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStartWrite</name></name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>,
                                                                 <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshotParam</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// event log</comment>
  <expr_stmt><expr><call><name>sRTrace</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver start writer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>snapshotReceiverStart</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name></decl></parameter>, <parameter><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pPreMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>snapshotReceiverIsStart</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, snapshot receiver has started."</literal></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_PRE_SNAPSHOT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>fromId</name></name> <operator>=</operator> <name><name>pPreMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>pPreMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>

  <comment type="line">// event log</comment>
  <expr_stmt><expr><call><name>sRTrace</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// just set start = false</comment>
<comment type="line">// FpSnapshotStopWrite should not be called, assert writer == NULL</comment>
<function><type><name>int32_t</name></type> <name>snapshotReceiverStop</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopWrite</name></name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                                                                  <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <comment type="line">// event log</comment>
  <expr_stmt><expr><call><name>sRTrace</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// when recv last snapshot block, apply data into snapshot</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>snapshotReceiverFinish</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name></decl></parameter>, <parameter><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <name>SYNC_SNAPSHOT_SEQ_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// write data</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotDoWrite</name></name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
                                                           <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"snapshot write error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// reset wal</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator>
        <call><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogRestoreFromSnapshot</name></name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"wal restore from snapshot error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// update commit index</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// maybe update term</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name> <operator>&gt;</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>raftStorePersist</name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// stop writer, apply data</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopWrite</name></name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                                                           <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"snapshot stop writer true error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="line">// update progress</comment>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_END</name></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><literal type="string">"snapshot stop writer true error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// event log</comment>
  <expr_stmt><expr><call><name>sRTrace</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver got last data, finish, apply snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// apply data block</comment>
<comment type="line">// update progress</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>snapshotReceiverGotData</name><parameter_list>(<parameter><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name></decl></parameter>, <parameter><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// apply data block</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotDoWrite</name></name><argument_list>(<argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>,
                                                                   <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// update progress</comment>
    <expr_stmt><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt>

    <comment type="line">// event log</comment>
    <expr_stmt><expr><call><name>sRTrace</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver receiving"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SyncIndex</name></type> <name>syncNodeGetSnapBeginIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>ths</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>snapStart</name> <init>= <expr><name>SYNC_INDEX_INVALID</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>syncNodeIsMnode</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>snapStart</name> <operator>=</operator> <name>SYNC_INDEX_BEGIN</name></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncLogStoreData</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SWal</name>              <modifier>*</modifier></type><name>pWal</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type>    <name>isEmpty</name> <init>= <expr><call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogIsEmpty</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>walCommitVer</name> <init>= <expr><call><name>walGetCommittedVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isEmpty</name> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>!=</operator> <name>walCommitVer</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"commit not same, wal-commit:%"</literal> <name>PRId64</name> <literal type="string">", commit:%"</literal> <name>PRId64</name> <literal type="string">", ignore"</literal></expr></argument>, <argument><expr><name>walCommitVer</name></expr></argument>,
              <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>snapStart</name> <operator>=</operator> <name>walCommitVer</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>snapStart</name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>snapStart</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeOnSnapshotPre</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>snapshotReceiverIsStart</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// already start</comment>

    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>&gt;</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>startTime</name></name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_START_RECEIVER</name>;</goto>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>==</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>startTime</name></name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_SEND_REPLY</name>;</goto>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// ignore</comment>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// start new</comment>
    <goto>goto <name>_START_RECEIVER</name>;</goto>
  </block_content>}</block></else></if_stmt>

<label><name>_START_RECEIVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>&gt;</operator> <name>SNAPSHOT_MAX_CLOCK_SKEW_MS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver time skew too much"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// waiting for clock match</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>timeNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>timeNow</name> <operator>&lt;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver pre waitting for true time, now:%"</literal> <name>PRId64</name> <literal type="string">", stime:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>timeNow</name></expr></argument>,
              <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>timeNow</name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><call><name>snapshotReceiverIsStart</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snapshotReceiverForceStop</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>snapshotReceiverStart</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// set start-time same with sender</comment>
  </block_content>}</block></else></if_stmt>

<label><name>_SEND_REPLY</name>:</label>
    <comment type="line">// build msg</comment>
    <empty_stmt>;</empty_stmt>  <comment type="line">// make complier happy</comment>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildSnapshotSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncSnapshotRsp</name> <modifier>*</modifier></type><name>pRspMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>lastIndex</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>lastTerm</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt>  <comment type="line">// receiver maybe already closed</comment>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>snapBeginIndex</name></name> <operator>=</operator> <call><name>syncNodeGetSnapBeginIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// send msg</comment>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogSendSyncSnapshotRsp</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pRspMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeOnSnapshotBegin</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// condition 1</comment>
  <decl_stmt><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>snapshotReceiverIsStart</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver not start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReceiver</name><operator>-&gt;</operator><name>startTime</name></name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver time not equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// start writer</comment>
  <expr_stmt><expr><call><name>snapshotReceiverStartWriter</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// build msg</comment>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildSnapshotSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncSnapshotRsp</name> <modifier>*</modifier></type><name>pRspMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>lastIndex</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>lastTerm</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name></expr>;</expr_stmt>  <comment type="line">// receiver maybe already closed</comment>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>snapBeginIndex</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

  <comment type="line">// send msg</comment>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogSendSyncSnapshotRsp</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pRspMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeOnSnapshotTransfering</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// condition 4</comment>
  <comment type="line">// transfering</comment>
  <decl_stmt><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// waiting for clock match</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timeNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>timeNow</name> <operator>&lt;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver transfering waitting for true time, now:%"</literal> <name>PRId64</name> <literal type="string">", stime:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>timeNow</name></expr></argument>,
            <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snapshotReceiverGotData</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// build msg</comment>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildSnapshotSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncSnapshotRsp</name> <modifier>*</modifier></type><name>pRspMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>lastIndex</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>lastTerm</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name></expr>;</expr_stmt>  <comment type="line">// receiver maybe already closed</comment>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>snapBeginIndex</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

  <comment type="line">// send msg</comment>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogSendSyncSnapshotRsp</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pRspMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeOnSnapshotEnd</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// condition 2</comment>
  <comment type="line">// end, finish FSM</comment>
  <decl_stmt><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// waiting for clock match</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timeNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>timeNow</name> <operator>&lt;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver finish waitting for true time, now:%"</literal> <name>PRId64</name> <literal type="string">", stime:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>timeNow</name></expr></argument>,
            <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>timeNow</name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>snapshotReceiverFinish</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snapshotReceiverStop</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// build msg</comment>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildSnapshotSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncSnapshotRsp</name> <modifier>*</modifier></type><name>pRspMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>lastIndex</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>lastTerm</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>ack</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name></expr>;</expr_stmt>  <comment type="line">// receiver maybe already closed</comment>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>snapBeginIndex</name></name> <operator>=</operator> <name><name>pReceiver</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

  <comment type="line">// send msg</comment>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogSendSyncSnapshotRsp</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pRspMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// receiver on message</comment>
<comment type="line">//</comment>
<comment type="line">// condition 1, recv SYNC_SNAPSHOT_SEQ_PRE_SNAPSHOT</comment>
<comment type="line">//              if receiver already start</comment>
<comment type="line">//                    if sender.start-time &gt; receiver.start-time, restart receiver(reply snapshot start)</comment>
<comment type="line">//                    if sender.start-time = receiver.start-time, maybe duplicate msg</comment>
<comment type="line">//                    if sender.start-time &lt; receiver.start-time, ignore</comment>
<comment type="line">//              else</comment>
<comment type="line">//                    waiting for clock match</comment>
<comment type="line">//                    start receiver(reply snapshot start)</comment>
<comment type="line">//</comment>
<comment type="line">// condition 2, recv SYNC_SNAPSHOT_SEQ_BEGIN</comment>
<comment type="line">//              a. create writer with &lt;begin, end&gt;</comment>
<comment type="line">//</comment>
<comment type="line">// condition 3, recv SYNC_SNAPSHOT_SEQ_END, finish receiver(apply snapshot data, update commit index, maybe reconfig)</comment>
<comment type="line">//</comment>
<comment type="line">// condition 4, recv SYNC_SNAPSHOT_SEQ_FORCE_CLOSE, force close</comment>
<comment type="line">//</comment>
<comment type="line">// condition 5, got data, update ack</comment>
<comment type="line">//</comment>
<function><type><name>int32_t</name></type> <name>syncNodeOnSnapshot</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name> <modifier>*</modifier></type><name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// if already drop replica, do not process</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeInRaftGroup</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvSyncSnapshotSend</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"not in my config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvSyncSnapshotSend</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"reject, small term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&gt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>syncNodeResetElectTimer</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>                <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncSnapshotReceiver</name> <modifier>*</modifier></type><name>pReceiver</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>syncLogRecvSyncSnapshotSend</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// state, term, seq/ack</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>==</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <name>SYNC_SNAPSHOT_SEQ_PRE_SNAPSHOT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>syncNodeOnSnapshotPre</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <name>SYNC_SNAPSHOT_SEQ_BEGIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>syncNodeOnSnapshotBegin</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <name>SYNC_SNAPSHOT_SEQ_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>syncNodeOnSnapshotEnd</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogBufferReInit</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <name>SYNC_SNAPSHOT_SEQ_FORCE_CLOSE</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// force close, no response</comment>
        <expr_stmt><expr><call><name>snapshotReceiverForceStop</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>&gt;</operator> <name>SYNC_SNAPSHOT_SEQ_BEGIN</name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>&lt;</operator> <name>SYNC_SNAPSHOT_SEQ_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>syncNodeOnSnapshotTransfering</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// error log</comment>
        <expr_stmt><expr><call><name>sRTrace</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver recv error seq:%d, my ack:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// error log</comment>
      <expr_stmt><expr><call><name>sRTrace</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver term not equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// error log</comment>
    <expr_stmt><expr><call><name>sRTrace</name><argument_list>(<argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><literal type="string">"snapshot receiver not follower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnSnapshotReplyPre</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SyncSnapshotRsp</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// get sender</comment>
  <decl_stmt><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name> <init>= <expr><call><name>syncNodeGetSnapshotSender</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSender</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// prepare &lt;begin, end&gt;</comment>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>snapBeginIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"prepare snapshot, recv-begin:%"</literal> <name>PRId64</name> <literal type="string">", snapshot.last:%"</literal> <name>PRId64</name> <literal type="string">", snapshot.term:%"</literal> <name>PRId64</name></expr></argument>,
          <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>snapBeginIndex</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>snapBeginIndex</name></name> <operator>&gt;</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"snapshot last index too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update sender</comment>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>snapshot</name></expr>;</expr_stmt>

  <comment type="line">// start reader</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStartRead</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>pReader</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"create snapshot reader error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update next index</comment>
  <expr_stmt><expr><call><name>syncIndexMgrSetIndex</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update seq</comment>
  <expr_stmt><expr><name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_BEGIN</name></expr>;</expr_stmt>

  <comment type="line">// build begin msg</comment>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncBuildSnapshotSend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pSendMsg</name> <init>= <expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pSendMsg</name><operator>-&gt;</operator><name>srcId</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSendMsg</name><operator>-&gt;</operator><name>destId</name></name> <operator>=</operator> <operator>(</operator><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name></name><operator>)</operator><index>[<expr><name><name>pSender</name><operator>-&gt;</operator><name>replicaIndex</name></name></expr>]</index></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSendMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSendMsg</name><operator>-&gt;</operator><name>beginIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSendMsg</name><operator>-&gt;</operator><name>lastIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSendMsg</name><operator>-&gt;</operator><name>lastTerm</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSendMsg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastConfigIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSendMsg</name><operator>-&gt;</operator><name>lastConfig</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>lastConfig</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSendMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSendMsg</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name>SYNC_SNAPSHOT_SEQ_BEGIN</name></expr>;</expr_stmt>

  <comment type="line">// send msg</comment>
  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSendMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogSendSyncSnapshotSend</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pSendMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// sender on message</comment>
<comment type="line">//</comment>
<comment type="line">// condition 1 sender receives SYNC_SNAPSHOT_SEQ_END, close sender</comment>
<comment type="line">// condition 2 sender receives ack, set seq = ack + 1, send msg from seq</comment>
<comment type="line">// condition 3 sender receives error msg, just print error log</comment>
<comment type="line">//</comment>
<function><type><name>int32_t</name></type> <name>syncNodeOnSnapshotReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name> <modifier>*</modifier></type><name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncSnapshotRsp</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// if already drop replica, do not process</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeInRaftGroup</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvSyncSnapshotRsp</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"maybe replica already dropped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// get sender</comment>
  <decl_stmt><decl><type><name>SSyncSnapshotSender</name> <modifier>*</modifier></type><name>pSender</name> <init>= <expr><call><name>syncNodeGetSnapshotSender</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSender</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>!=</operator> <name><name>pSender</name><operator>-&gt;</operator><name>startTime</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvSyncSnapshotRsp</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"sender/receiver start time not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncLogRecvSyncSnapshotRsp</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// state, term, seq/ack</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>==</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// prepare &lt;begin, end&gt;, send begin msg</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>ack</name></name> <operator>==</operator> <name>SYNC_SNAPSHOT_SEQ_PRE_SNAPSHOT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>syncNodeOnSnapshotReplyPre</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>ack</name></name> <operator>==</operator> <name>SYNC_SNAPSHOT_SEQ_BEGIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snapshotSenderUpdateProgress</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snapshotSend</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// receive ack is finish, close sender</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>ack</name></name> <operator>==</operator> <name>SYNC_SNAPSHOT_SEQ_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snapshotSenderStop</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SSyncLogReplMgr</name> <modifier>*</modifier></type><name>pMgr</name> <init>= <expr><call><name>syncNodeGetLogReplMgr</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pMgr</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>syncLogReplMgrReset</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// send next msg</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>ack</name></name> <operator>==</operator> <name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// update sender ack</comment>
        <expr_stmt><expr><call><name>snapshotSenderUpdateProgress</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snapshotSend</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>ack</name></name> <operator>==</operator> <name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// maybe resend</comment>
        <expr_stmt><expr><call><name>snapshotReSend</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// error log</comment>
        <expr_stmt><expr><call><name>sSError</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender recv error ack:%d, my seq:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>ack</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// error log</comment>
      <expr_stmt><expr><call><name>sSError</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender term not equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// error log</comment>
    <expr_stmt><expr><call><name>sSError</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>, <argument><expr><literal type="string">"snapshot sender not leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
