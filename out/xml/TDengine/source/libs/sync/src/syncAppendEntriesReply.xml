<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncAppendEntriesReply.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncAppendEntriesReply.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncCommit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncIndexMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncPipeline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncReplication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncSnapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<comment type="line">// TLA+ Spec</comment>
<comment type="line">// HandleAppendEntriesResponse(i, j, m) ==</comment>
<comment type="line">//    /\ m.mterm = currentTerm[i]</comment>
<comment type="line">//    /\ \/ /\ m.msuccess \* successful</comment>
<comment type="line">//          /\ nextIndex'  = [nextIndex  EXCEPT ![i][j] = m.mmatchIndex + 1]</comment>
<comment type="line">//          /\ matchIndex' = [matchIndex EXCEPT ![i][j] = m.mmatchIndex]</comment>
<comment type="line">//       \/ /\ \lnot m.msuccess \* not successful</comment>
<comment type="line">//          /\ nextIndex' = [nextIndex EXCEPT ![i][j] =</comment>
<comment type="line">//                               Max({nextIndex[i][j] - 1, 1})]</comment>
<comment type="line">//          /\ UNCHANGED &lt;&lt;matchIndex&gt;&gt;</comment>
<comment type="line">//    /\ Discard(m)</comment>
<comment type="line">//    /\ UNCHANGED &lt;&lt;serverVars, candidateVars, logVars, elections&gt;&gt;</comment>
<comment type="line">//</comment>

<function><type><name>int32_t</name></type> <name>syncNodeOnAppendEntriesReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncAppendEntriesReply</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// if already drop replica, do not process</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeInRaftGroup</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvAppendEntriesReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"not in my config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// drop stale response</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvAppendEntriesReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"drop stale response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&gt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncLogRecvAppendEntriesReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"error term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>==</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d received append entries reply. srcId:0x%016"</literal> <name>PRIx64</name> <literal type="string">",  term:%"</literal> <name>PRId64</name> <literal type="string">", matchIndex:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
           <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>success</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>oldMatchIndex</name> <init>= <expr><call><name>syncIndexMgrGetIndex</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>&gt;</operator> <name>oldMatchIndex</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>syncIndexMgrSetIndex</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// commit if needed</comment>
      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>indexLikely</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitIndex</name> <init>= <expr><call><name>syncNodeCheckCommitIndex</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>indexLikely</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogBufferCommit</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// replicate log</comment>
    <decl_stmt><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name> <init>= <expr><call><name>syncNodeGetLogReplMgr</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pMgr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get log repl mgr for src addr: 0x%016"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogReplMgrProcessReply</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnAppendEntriesReplyOld</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SyncAppendEntriesReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// if already drop replica, do not process</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeInRaftGroup</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvAppendEntriesReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"not in my config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// drop stale response</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogRecvAppendEntriesReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"drop stale response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>&gt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncLogRecvAppendEntriesReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"error term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>syncNodeStepDown</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name> <operator>==</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>success</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>oldMatchIndex</name> <init>= <expr><call><name>syncIndexMgrGetIndex</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>&gt;</operator> <name>oldMatchIndex</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>syncIndexMgrSetIndex</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>syncMaybeAdvanceCommitIndex</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// maybe update minMatchIndex</comment>
        <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>minMatchIndex</name></name> <operator>=</operator> <call><name>syncMinMatchIndex</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>syncIndexMgrSetIndex</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pNextIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SyncIndex</name></type> <name>nextIndex</name> <init>= <expr><call><name>syncIndexMgrGetIndex</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pNextIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>nextIndex</name> <operator>&gt;</operator> <name>SYNC_INDEX_BEGIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>--</operator><name>nextIndex</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>syncIndexMgrSetIndex</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pNextIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>, <argument><expr><name>nextIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// send next append entries</comment>
    <decl_stmt><decl><type><name>SPeerState</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><call><name>syncNodeGetPeerState</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pState</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>==</operator> <name><name>pState</name><operator>-&gt;</operator><name>lastSendIndex</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>timeNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>elapsed</name> <init>= <expr><name>timeNow</name> <operator>-</operator> <name><name>pState</name><operator>-&gt;</operator><name>lastSendTime</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"sync-append-entries rtt elapsed:%"</literal> <name>PRId64</name> <literal type="string">", index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>elapsed</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>lastSendIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>syncNodeReplicateOne</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>syncLogRecvAppendEntriesReply</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
