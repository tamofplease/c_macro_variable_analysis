<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncRaftStore.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<comment type="line">// private function</comment>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>raftStoreInit</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>raftStoreFileExist</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// public function</comment>
<function><type><name>SRaftStore</name> <modifier>*</modifier></type><name>raftStoreOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRaftStore</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaftStore</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raftStoreFileExist</name><argument_list>(<argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>raftStoreInit</name><argument_list>(<argument><expr><name>pRaftStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>storeBuf</name><index>[<expr><name>RAFT_STORE_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>pFile</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>storeBuf</name></expr></argument>, <argument><expr><name>RAFT_STORE_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>raftStoreDeserialize</name><argument_list>(<argument><expr><name>pRaftStore</name></expr></argument>, <argument><expr><name>storeBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pRaftStore</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>raftStoreInit</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRaftStore</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>pFile</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>raftStorePersist</name><argument_list>(<argument><expr><name>pRaftStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftStore</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftStoreClose</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pRaftStore</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftStore</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRaftStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRaftStore</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftStorePersist</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRaftStore</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>storeBuf</name><index>[<expr><name>RAFT_STORE_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>raftStoreSerialize</name><argument_list>(<argument><expr><name>pRaftStore</name></expr></argument>, <argument><expr><name>storeBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>storeBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>storeBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>storeBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>RAFT_STORE_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raftStoreFileExist</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftStoreSerialize</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRaftStore</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>u64Buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64Buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64Buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"current_term"</literal></expr></argument>, <argument><expr><name>u64Buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64Buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64Buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"vote_for_addr"</literal></expr></argument>, <argument><expr><name>u64Buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"vote_for_vgid"</literal></expr></argument>, <argument><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name> <init>= <expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name><operator>.</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name>u64</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"addr_host"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"addr_port"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>serialized</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>len2</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len2</name> <operator>&lt;</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftStoreDeserialize</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRaftStore</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <name>RAFT_STORE_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pCurrentTerm</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"current_term"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cJSON_IsString</name><argument_list>(<argument><expr><name>pCurrentTerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>pCurrentTerm</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pVoteForAddr</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"vote_for_addr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cJSON_IsString</name><argument_list>(<argument><expr><name>pVoteForAddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>pVoteForAddr</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name><operator>.</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pVoteForVgid</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"vote_for_vgid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pVoteForVgid</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>raftStoreHasVoted</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name>syncUtilEmptyId</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><operator>!</operator><name>b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raftStoreVote</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name> <modifier>*</modifier></type><name>pRaftId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>syncUtilEmptyId</name><argument_list>(<argument><expr><name>pRaftId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name></name> <operator>=</operator> <operator>*</operator><name>pRaftId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>raftStorePersist</name><argument_list>(<argument><expr><name>pRaftStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raftStoreClearVote</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>voteFor</name></name> <operator>=</operator> <name>EMPTY_RAFT_ID</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>raftStorePersist</name><argument_list>(<argument><expr><name>pRaftStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raftStoreNextTerm</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>raftStorePersist</name><argument_list>(<argument><expr><name>pRaftStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raftStoreSetTerm</name><parameter_list>(<parameter><decl><type><name>SRaftStore</name> <modifier>*</modifier></type><name>pRaftStore</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>raftStorePersist</name><argument_list>(<argument><expr><name>pRaftStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
