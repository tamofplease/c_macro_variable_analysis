<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncPipeline.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncPipeline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncCommit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncIndexMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncReplication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRespMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncSnapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<function><type><name>int64_t</name></type> <name>syncLogBufferGetEndIndex</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>index</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogBufferAppend</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>-</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>&gt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to append due to sync log buffer full. index:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_out</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pExist</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pExist</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// initial log buffer with at least one item, e.g. commitIndex</comment>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pMatch</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name>pMatch</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no matched log entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMatch</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncLogBufEntry</name></type> <name>tmp</name> <init>= <expr><block>{<expr><operator>.</operator><name>pItem</name> <operator>=</operator> <name>pEntry</name></expr>, <expr><operator>.</operator><name>prevLogIndex</name> <operator>=</operator> <name><name>pMatch</name><operator>-&gt;</operator><name>index</name></name></expr>, <expr><operator>.</operator><name>prevLogTerm</name> <operator>=</operator> <name><name>pMatch</name><operator>-&gt;</operator><name>term</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>=</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_out</name>:</label>
  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncTerm</name></type> <name>syncLogReplMgrGetPrevLogTerm</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type>       <name>prevIndex</name> <init>= <expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>        <name>prevLogTerm</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>prevIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>prevIndex</name> <operator>&gt;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>prevIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>prevIndex</name> <operator>&gt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>prevIndex</name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no log entry found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prevLogTerm</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>
    <return>return <expr><name>prevLogTerm</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMgr</name> <operator>&amp;&amp;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>&lt;=</operator> <name>prevIndex</name> <operator>&amp;&amp;</operator> <name>prevIndex</name> <operator>&lt;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>timeMs</name> <init>= <expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><operator>(</operator><name>prevIndex</name> <operator>+</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>timeMs</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name>timeMs</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no log entry found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prevLogTerm</name> <operator>=</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><operator>(</operator><name>prevIndex</name> <operator>+</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>term</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>prevIndex</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>prevLogTerm</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>prevLogTerm</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>prevIndex</name> <operator>==</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogGetEntry</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>prevIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEntry</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>prevLogTerm</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>prevLogTerm</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get log term since %s. index: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>prevIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>syncEntryBuildDummy</name><parameter_list>(<parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>syncEntryBuildNoop</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogValidateAlignmentOfCommit</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>commitIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>firstVer</name> <init>= <expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>firstVer</name> <operator>&gt;</operator> <name>commitIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, firstVer of WAL log greater than tsdb commit version + 1. firstVer: %"</literal> <name>PRId64</name>
           <literal type="string">", tsdb commit version: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
           <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>firstVer</name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastVer</name> <init>= <expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lastVer</name> <operator>&lt;</operator> <name>commitIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, lastVer of WAL log less than tsdb commit version. lastVer: %"</literal> <name>PRId64</name>
           <literal type="string">", tsdb commit version: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
           <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>lastVer</name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogBufferInitWithoutLock</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"log store not created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pFsm not registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"FpGetSnapshotInfo not registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get snapshot info since %s"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitIndex</name> <init>= <expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>  <name>commitTerm</name> <init>= <expr><call><name>TMAX</name><argument_list>(<argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>syncLogValidateAlignmentOfCommit</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_INCOMPLETE</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastVer</name> <init>= <expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lastVer</name> <operator>&gt;=</operator> <name>commitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>toIndex</name> <init>= <expr><name>lastVer</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// update match index</comment>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name>commitIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name>toIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>=</operator> <name>toIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// load log entries in reverse order</comment>
  <decl_stmt><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type>  <name>pLogStore</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type>       <name>index</name> <init>= <expr><name>toIndex</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>            <name>takeDummy</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>takeDummy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogGetEntry</name></name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEntry</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get log entry since %s. index:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>taken</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>emptySize</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>toIndex</name> <operator>-</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>emptySize</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSyncLogBufEntry</name></type> <name>tmp</name> <init>= <expr><block>{<expr><operator>.</operator><name>pItem</name> <operator>=</operator> <name>pEntry</name></expr>, <expr><operator>.</operator><name>prevLogIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>prevLogTerm</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>taken</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>toIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>prevLogIndex</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>prevLogTerm</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>taken</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>index</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// put a dummy record at commitIndex if present in log buffer</comment>
  <if_stmt><if>if <condition>(<expr><name>takeDummy</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pDummy</name> <init>= <expr><call><name>syncEntryBuildDummy</name><argument_list>(<argument><expr><name>commitTerm</name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDummy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SSyncLogBufEntry</name></type> <name>tmp</name> <init>= <expr><block>{<expr><operator>.</operator><name>pItem</name> <operator>=</operator> <name>pDummy</name></expr>, <expr><operator>.</operator><name>prevLogIndex</name> <operator>=</operator> <name>commitIndex</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>prevLogTerm</name> <operator>=</operator> <name>commitTerm</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>commitIndex</name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>toIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>prevLogIndex</name> <operator>=</operator> <name>commitIndex</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>prevLogTerm</name> <operator>=</operator> <name>commitTerm</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update startIndex</comment>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>=</operator> <ternary><condition><expr><name>takeDummy</name></expr> ?</condition><then> <expr><name>index</name></expr> </then><else>: <expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, init sync log buffer. buffer: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
        <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// validate</comment>
  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogBufferInit</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncLogBufferInitWithoutLock</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogBufferReInit</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncLogBufferInitWithoutLock</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to re-initialize sync log buffer since %s."</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>SyncTerm</name></type> <name>syncLogBufferGetLastMatchTerm</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncIndex</name></type>       <name>index</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogBufferAccept</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>prevTerm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>prevIndex</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>  <name>lastMatchTerm</name> <init>= <expr><call><name>syncLogBufferGetLastMatchTerm</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, already committed. index: %"</literal> <name>PRId64</name> <literal type="string">", term: %"</literal> <name>PRId64</name> <literal type="string">". log buffer: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name>
           <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
           <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>,
           <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SyncTerm</name></type> <name>term</name> <init>= <expr><call><name>syncLogReplMgrGetPrevLogTerm</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>_out</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>-</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>&gt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, out of buffer range. index: %"</literal> <name>PRId64</name> <literal type="string">", term: %"</literal> <name>PRId64</name> <literal type="string">". log buffer: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name>
          <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
          <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>,
          <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_out</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>&amp;&amp;</operator> <name>lastMatchTerm</name> <operator>!=</operator> <name>prevTerm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, not ready to accept. index: %"</literal> <name>PRId64</name> <literal type="string">", term: %"</literal> <name>PRId64</name> <literal type="string">": prevterm: %"</literal> <name>PRId64</name>
          <literal type="string">" != lastmatch: %"</literal> <name>PRId64</name> <literal type="string">". log buffer: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
          <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>prevTerm</name></expr></argument>, <argument><expr><name>lastMatchTerm</name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>,
          <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_out</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// check current in buffer</comment>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pExist</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pExist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name><name>pExist</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name> <operator>!=</operator> <name><name>pExist</name><operator>-&gt;</operator><name>term</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogBufferRollback</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, duplicate log entry received. index: %"</literal> <name>PRId64</name> <literal type="string">", term: %"</literal> <name>PRId64</name> <literal type="string">". log buffer: [%"</literal> <name>PRId64</name>
             <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
             <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>,
             <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SyncTerm</name></type> <name>existPrevTerm</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>prevLogTerm</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name> <operator>==</operator> <name><name>pExist</name><operator>-&gt;</operator><name>term</name></name> <operator>&amp;&amp;</operator> <name>prevTerm</name> <operator>==</operator> <name>existPrevTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <goto>goto <name>_out</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update</comment>
  <decl_stmt><decl><type><name>SSyncLogBufEntry</name></type> <name>tmp</name> <init>= <expr><block>{<expr><operator>.</operator><name>pItem</name> <operator>=</operator> <name>pEntry</name></expr>, <expr><operator>.</operator><name>prevLogIndex</name> <operator>=</operator> <name>prevIndex</name></expr>, <expr><operator>.</operator><name>prevLogTerm</name> <operator>=</operator> <name>prevTerm</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

  <comment type="line">// update end index</comment>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// success</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_out</name>:</label>
  <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogStorePersist</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastVer</name> <init>= <expr><call><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lastVer</name> <operator>&gt;=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>&amp;&amp;</operator> <call><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogTruncate</name></name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to truncate log store since %s. from index:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>lastVer</name> <operator>=</operator> <call><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>lastVer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogAppendEntry</name></name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to append sync log entry since %s. index:%"</literal> <name>PRId64</name> <literal type="string">", term:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
           <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>lastVer</name> <operator>=</operator> <call><name><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>lastVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>syncLogBufferProceed</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name><modifier>*</modifier></type> <name>pMatchTerm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>matchIndex</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>index</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// try to proceed</comment>
    <decl_stmt><decl><type><name>SSyncLogBufEntry</name><modifier>*</modifier></type> <name>pBufEntry</name> <init>= <expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncIndex</name></type>         <name>prevLogIndex</name> <init>= <expr><name><name>pBufEntry</name><operator>-&gt;</operator><name>prevLogIndex</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncTerm</name></type>          <name>prevLogTerm</name> <init>= <expr><name><name>pBufEntry</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type>   <name>pEntry</name> <init>= <expr><name><name>pBufEntry</name><operator>-&gt;</operator><name>pItem</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot proceed match index in log buffer. no raft entry at next pos of matchIndex:%"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_out</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// match</comment>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pMatch</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pMatch</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMatch</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMatch</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>prevLogIndex</name> <operator>==</operator> <name><name>pMatch</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pMatch</name><operator>-&gt;</operator><name>term</name></name> <operator>!=</operator> <name>prevLogTerm</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sInfo</name><argument_list>(
          <argument><expr><literal type="string">"vgId:%d, mismatching sync log entries encountered. "</literal>
          <literal type="string">"{ index:%"</literal> <name>PRId64</name> <literal type="string">", term:%"</literal> <name>PRId64</name>
          <literal type="string">" } "</literal>
          <literal type="string">"{ index:%"</literal> <name>PRId64</name> <literal type="string">", term:%"</literal> <name>PRId64</name> <literal type="string">", prevLogIndex:%"</literal> <name>PRId64</name> <literal type="string">", prevLogTerm:%"</literal> <name>PRId64</name> <literal type="string">" } "</literal></expr></argument>,
          <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pMatch</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pMatch</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>prevLogIndex</name></expr></argument>, <argument><expr><name>prevLogTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_out</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// increase match index</comment>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, log buffer proceed. start index: %"</literal> <name>PRId64</name> <literal type="string">", match index: %"</literal> <name>PRId64</name> <literal type="string">", end index: %"</literal> <name>PRId64</name></expr></argument>,
           <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// replicate on demand</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncNodeReplicateWithoutLock</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// persist</comment>
    <if_stmt><if>if <condition>(<expr><call><name>syncLogStorePersist</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to persist sync log entry from buffer since %s. index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// update my match index</comment>
    <expr_stmt><expr><name>matchIndex</name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncIndexMgrSetIndex</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>  <comment type="line">// end of while</comment>

<label><name>_out</name>:</label>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name>matchIndex</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMatchTerm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pMatchTerm</name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>matchIndex</name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name><name>pItem</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>matchIndex</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogFsmExecute</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SSyncFSM</name><modifier>*</modifier></type> <name>pFsm</name></decl></parameter>, <parameter><decl><type><name>ESyncState</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpCommitCb</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"No commit cb registered for the FSM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>restoreFinish</name></name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>vnodeIsMsgBlock</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, blocking msg ready to execute. index:%"</literal> <name>PRId64</name> <literal type="string">", term: %"</literal> <name>PRId64</name> <literal type="string">", type: %s"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncEntry2OriginalRpc</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFsmCbMeta</name></type> <name>cbMeta</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cbMeta</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cbMeta</name><operator>.</operator><name>lastConfigIndex</name></name> <operator>=</operator> <call><name>syncNodeGetSnapshotConfigIndex</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cbMeta</name><operator>.</operator><name>isWeak</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>isWeak</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cbMeta</name><operator>.</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cbMeta</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>role</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cbMeta</name><operator>.</operator><name>seqNum</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>seqNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cbMeta</name><operator>.</operator><name>term</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cbMeta</name><operator>.</operator><name>currentTerm</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cbMeta</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncRespMgrGetAndDel</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name></expr></argument>, <argument><expr><name><name>cbMeta</name><operator>.</operator><name>seqNum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rpcMsg</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>pFsm</name><operator>-&gt;</operator><name>FpCommitCb</name></name><argument_list>(<argument><expr><name>pFsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogBufferValidate</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>&lt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>&lt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>&lt;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>-</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>&lt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogBufferCommit</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>commitIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type>  <name>pLogStore</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncFSM</name><modifier>*</modifier></type>       <name>pFsm</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ESyncState</name></type>      <name>role</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>        <name>term</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncGroupId</name></type>     <name>vgId</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>upperIndex</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><name>commitIndex</name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>            <name>inBuf</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>commitIndex</name> <operator>&lt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, stale commit index. current:%"</literal> <name>PRId64</name> <literal type="string">", notified:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>,
           <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_out</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, commit. log buffer: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">"), role: %d, term: %"</literal> <name>PRId64</name></expr></argument>,
         <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// execute in fsm</comment>
  <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>index</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;=</operator> <name>upperIndex</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// get a log entry</comment>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>syncLogBufferGetOneEntry</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_out</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// execute it</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncUtilUserCommit</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, commit sync barrier. index: %"</literal> <name>PRId64</name> <literal type="string">", term:%"</literal> <name>PRId64</name> <literal type="string">", type: %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
            <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>originalRpcType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>syncLogFsmExecute</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pFsm</name></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to execute sync log entry. index:%"</literal> <name>PRId64</name> <literal type="string">", term:%"</literal> <name>PRId64</name>
             <literal type="string">", role: %d, current term: %"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, committed index: %"</literal> <name>PRId64</name> <literal type="string">", term: %"</literal> <name>PRId64</name> <literal type="string">", role: %d, current term: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inBuf</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// recycle</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>until</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>-</operator> <operator>(</operator><name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>until</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>=</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>_out</name>:</label>
  <comment type="line">// mark as restored if needed</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pNode</name><operator>-&gt;</operator><name>restoreFinish</name></name> <operator>&amp;&amp;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>&gt;=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpRestoreFinishCb</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>restoreFinish</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, restore finished. log buffer: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
          <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inBuf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogReplMgrReset</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>retryBackoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogReplMgrRetryOnNeed</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>&lt;=</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pDestId</name> <init>= <expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name><name>pMgr</name><operator>-&gt;</operator><name>peerId</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgr</name><operator>-&gt;</operator><name>retryBackoff</name></name> <operator>==</operator> <name>SYNC_MAX_RETRY_BACKOFF</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogReplMgrReset</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, reset sync log repl mgr since retry backoff exceeding limit. peer: %"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
          <argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>retried</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>retryWaitMs</name> <init>= <expr><call><name>syncLogGetRetryBackoffTimeMs</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>nowMs</name> <init>= <expr><call><name>taosGetMonoTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>firstIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type> <name>term</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><name>index</name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>barrier</name> <operator>||</operator> <operator>(</operator><name>index</name> <operator>==</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>||</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nowMs</name> <operator>&lt;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>timeMs</name> <operator>+</operator> <name>retryWaitMs</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>acked</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>barrier</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>syncLogBufferReplicateOneTo</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>barrier</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to replicate sync log entry since %s. index: %"</literal> <name>PRId64</name> <literal type="string">", dest: %"</literal> <name>PRIx64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
             <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>barrier</name> <operator>==</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>barrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>timeMs</name> <operator>=</operator> <name>nowMs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>term</name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>acked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>retried</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>firstIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>firstIndex</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>_out</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>retried</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>retryBackoff</name></name> <operator>=</operator> <call><name>syncLogGetNextRetryBackoff</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, resent %d sync log entries. dest: %"</literal> <name>PRIx64</name> <literal type="string">", indexes: %"</literal> <name>PRId64</name> <literal type="string">" ..., terms: ... %"</literal> <name>PRId64</name>
          <literal type="string">", retryWaitMs: %"</literal> <name>PRId64</name> <literal type="string">", repl mgr: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
          <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>firstIndex</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>retryWaitMs</name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>,
          <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogReplMgrProcessReplyInRecoveryMode</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>,
                                                 <parameter><decl><type><name>SyncAppendEntriesReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRaftId</name></type>         <name>destId</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync log repl mgr restored. peer: %s:%d (%"</literal> <name>PRIx64</name> <literal type="string">"), mgr: rs(%d) [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name>
            <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">"), buffer: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
            <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>,
            <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>&lt;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>||</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>&gt;=</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>syncLogReplMgrRetryOnNeed</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>acked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>success</name></name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync log repl mgr restored. peer: %s:%d (%"</literal> <name>PRIx64</name> <literal type="string">"), mgr: rs(%d) [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name>
            <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">"), buffer: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
            <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>,
            <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>success</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>&gt;=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to rollback match index. peer: %s:%d, match index: %"</literal> <name>PRId64</name> <literal type="string">", last sent: %"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>syncNodeStartSnapshot</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>destId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to start snapshot for peer %s:%d"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, snapshot replication to peer %s:%d"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// check last match term</comment>
  <decl_stmt><decl><type><name>SyncTerm</name></type>  <name>term</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>firstVer</name> <init>= <expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>syncLogReplMgrGetPrevLogTerm</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>term</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>term</name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastMatchTerm</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>firstVer</name> <operator>||</operator> <name>index</name> <operator>==</operator> <name>firstVer</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>term</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>terrno</name> <operator>==</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>syncNodeStartSnapshot</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>destId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to start snapshot for peer %s:%d"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, snapshot replication to peer %s:%d"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>firstVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastMatchTerm</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>index</name> <operator>=</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;</operator> <name>firstVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// attempt to replicate the raft log at index</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogReplMgrReset</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>syncLogReplMgrReplicateProbeOnce</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogReplMgrProcessHeartbeatReply</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncHeartbeatReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>!=</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>peerStartTime</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, reset sync log repl mgr in heartbeat. peer: %"</literal> <name>PRIx64</name> <literal type="string">", start time:%"</literal> <name>PRId64</name> <literal type="string">", old:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
          <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>peerStartTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncLogReplMgrReset</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>peerStartTime</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogReplMgrProcessReply</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncAppendEntriesReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name> <operator>!=</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>peerStartTime</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, reset sync log repl mgr in appendlog reply. peer: %"</literal> <name>PRIx64</name> <literal type="string">", start time:%"</literal> <name>PRId64</name>
          <literal type="string">", old:%"</literal> <name>PRId64</name></expr></argument>,
          <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>peerStartTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncLogReplMgrReset</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>peerStartTime</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogReplMgrProcessReplyInNormalMode</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogReplMgrProcessReplyInRecoveryMode</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogReplMgrReplicateOnce</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogReplMgrReplicateAttemptedOnce</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogReplMgrReplicateProbeOnce</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogReplMgrReplicateProbeOnce</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>retryMaxWaitMs</name> <init>= <expr><name>SYNC_LOG_REPL_RETRY_WAIT_MS</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SYNC_MAX_RETRY_BACKOFF</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>nowMs</name> <init>= <expr><call><name>taosGetMonoTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>&gt;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>&amp;&amp;</operator>
      <name>nowMs</name> <operator>&lt;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>timeMs</name> <operator>+</operator> <name>retryMaxWaitMs</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogReplMgrReset</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRaftId</name><modifier>*</modifier></type>  <name>pDestId</name> <init>= <expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name><name>pMgr</name><operator>-&gt;</operator><name>peerId</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>barrier</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>  <name>term</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>syncLogBufferReplicateOneTo</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>barrier</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to replicate log entry since %s. index: %"</literal> <name>PRId64</name> <literal type="string">", dest: 0x%016"</literal> <name>PRIx64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>barrier</name> <operator>=</operator> <name>barrier</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>timeMs</name> <operator>=</operator> <name>nowMs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>term</name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>acked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>=</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, attempted to probe the %d'th peer with msg of index:%"</literal> <name>PRId64</name> <literal type="string">" term: %"</literal> <name>PRId64</name>
         <literal type="string">". pMgr(rs:%d): [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">"), pBuf: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name>
         <literal type="string">")"</literal></expr></argument>,
         <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>peerId</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>,
         <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogReplMgrReplicateAttemptedOnce</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pDestId</name> <init>= <expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name><name>pMgr</name><operator>-&gt;</operator><name>peerId</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>batchSize</name> <init>= <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>nowMs</name> <init>= <expr><call><name>taosGetMonoTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>limit</name> <init>= <expr><name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>batchSize</name> <operator>&lt;</operator> <name>count</name><operator>++</operator> <operator>||</operator> <name>limit</name> <operator>&lt;=</operator> <name>index</name> <operator>-</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>index</name> <operator>&amp;&amp;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><operator>(</operator><name>index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>barrier</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>  <name>pos</name> <init>= <expr><name>index</name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pDestId</name> <init>= <expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name><name>pMgr</name><operator>-&gt;</operator><name>peerId</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>     <name>barrier</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncTerm</name></type> <name>term</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>syncLogBufferReplicateOneTo</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>barrier</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to replicate log entry since %s. index: %"</literal> <name>PRId64</name> <literal type="string">", dest: 0x%016"</literal> <name>PRIx64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
             <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>barrier</name> <operator>=</operator> <name>barrier</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>timeMs</name> <operator>=</operator> <name>nowMs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>term</name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>acked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>=</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>barrier</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, replicated sync barrier to dest: %"</literal> <name>PRIx64</name> <literal type="string">". index: %"</literal> <name>PRId64</name> <literal type="string">", term: %"</literal> <name>PRId64</name>
            <literal type="string">", repl mgr: rs(%d) [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
            <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>,
            <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>syncLogReplMgrRetryOnNeed</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, attempted to replicate %d msgs to the %d'th peer. pMgr(rs:%d): [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name>
         <literal type="string">"), pBuf: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
         <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>peerId</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>,
         <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogReplMgrProcessReplyInNormalMode</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncAppendEntriesReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>restored</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>&lt;=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>&lt;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name></expr>)</condition> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>&lt;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>&amp;&amp;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>retryBackoff</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>firstSentMs</name> <init>= <expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>timeMs</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>lastSentMs</name> <init>= <expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><operator>(</operator><name><name>pMgr</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>timeMs</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>timeDiffMs</name> <init>= <expr><name>lastSentMs</name> <operator>-</operator> <name>firstSentMs</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>timeDiffMs</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>timeDiffMs</name> <operator>&lt;</operator> <operator>(</operator><name>SYNC_LOG_REPL_RETRY_WAIT_MS</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>pMgr</name><operator>-&gt;</operator><name>retryBackoff</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>retryBackoff</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>acked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>=</operator> <name><name>pMgr</name><operator>-&gt;</operator><name>matchIndex</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>syncLogReplMgrReplicateAttemptedOnce</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>syncLogReplMgrCreate</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncLogReplMgr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMgr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>states</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMgr</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>TSDB_SYNC_LOG_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pMgr</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogReplMgrDestroy</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMgr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeLogReplMgrInit</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>logReplMgrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>logReplMgrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>syncLogReplMgrCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>logReplMgrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>peerId</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>logReplMgrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncNodeLogReplMgrDestroy</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>syncLogReplMgrDestroy</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>logReplMgrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>logReplMgrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>syncLogBufferCreate</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncLogBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>TSDB_SYNC_LOG_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadMutexAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to init log buffer mutexattr due to %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadMutexAttrSetType</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to set log buffer mutexattr type due to %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to init log buffer mutex due to %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pBuf</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogBufferClear</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>index</name> <operator>+</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogBufferDestroy</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>syncLogBufferClear</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosThreadMutexAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogBufferRollback</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>toIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>&lt;</operator> <name>toIndex</name> <operator>&amp;&amp;</operator> <name>toIndex</name> <operator>&lt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rollback sync log buffer. toindex: %"</literal> <name>PRId64</name> <literal type="string">", buffer: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name>
        <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>,
        <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>toIndex</name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// trunc buffer</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>toIndex</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>index</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>=</operator> <name>toIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>toIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// trunc wal</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastVer</name> <init>= <expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lastVer</name> <operator>&gt;=</operator> <name>toIndex</name> <operator>&amp;&amp;</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogTruncate</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>toIndex</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to truncate log store since %s. from index:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>toIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>lastVer</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>toIndex</name> <operator>==</operator> <name>lastVer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>syncLogBufferValidate</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogBufferReset</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastVer</name> <init>= <expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lastVer</name> <operator>==</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogBufferRollback</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, reset sync log buffer. buffer: [%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
        <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// reset repl mgr</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>logReplMgrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>syncLogReplMgrReset</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>syncLogBufferGetOneEntry</name><parameter_list>(<parameter><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pInBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>endIndex</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>startIndex</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// startIndex might be dummy</comment>
    <expr_stmt><expr><operator>*</operator><name>pInBuf</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>pItem</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pInBuf</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogGetEntry</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEntry</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get log entry since %s. index:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>pEntry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncLogBufferReplicateOneTo</name><parameter_list>(<parameter><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SyncTerm</name><modifier>*</modifier></type> <name>pTerm</name></decl></parameter>,
                                    <parameter><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pDestId</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pBarrier</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>         <name>msgOut</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>            <name>inBuf</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTerm</name></type>        <name>prevLogTerm</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncLogBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogBuf</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>syncLogBufferGetOneEntry</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get raft entry for index: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSyncLogReplMgr</name><modifier>*</modifier></type> <name>pMgr</name> <init>= <expr><call><name>syncNodeGetLogReplMgr</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pMgr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, reset sync log repl mgr of peer: %"</literal> <name>PRIx64</name> <literal type="string">" since %s. index: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
              <argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncLogReplMgrReset</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pBarrier</name> <operator>=</operator> <call><name>syncLogIsReplicationBarrier</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>prevLogTerm</name> <operator>=</operator> <call><name>syncLogReplMgrGetPrevLogTerm</name><argument_list>(<argument><expr><name>pMgr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>prevLogTerm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get prev log term since %s. index: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTerm</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pTerm</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncBuildAppendEntriesFromRaftLog</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name>prevLogTerm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get append entries for index:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syncNodeSendAppendEntries</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, replicate one msg index: %"</literal> <name>PRId64</name> <literal type="string">" term: %"</literal> <name>PRId64</name> <literal type="string">" prevterm: %"</literal> <name>PRId64</name> <literal type="string">" to dest: 0x%016"</literal> <name>PRIx64</name></expr></argument>,
         <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>prevLogTerm</name></expr></argument>, <argument><expr><name><name>pDestId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inBuf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>msgOut</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msgOut</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inBuf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
