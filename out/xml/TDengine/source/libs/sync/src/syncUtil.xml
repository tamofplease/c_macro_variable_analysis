<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncUtil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncIndexMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftCfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncSnapshot.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>addEpIntoEpSet</name><parameter_list>(<parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fqdn</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>uint64_t</name></type> <name>syncUtilAddr2U64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hostU32</name> <init>= <expr><call><name>taosGetIpv4FromFqdn</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hostU32</name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to resolve ipv4 addr, host:%s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_FQDN</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>hostU32</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>port</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>u64</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncUtilU642Addr</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>u64</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hostU32</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>u64</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000000FFFFFFFF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name> <init>= <expr><block>{<expr><operator>.</operator><name>s_addr</name> <operator>=</operator> <name>hostU32</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosInetNtoa</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>u64</name> <operator>&amp;</operator> <literal type="number">0x00000000FFFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncUtilNodeInfo2EpSet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>addEpIntoEpSet</name><argument_list>(<argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nodePort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncUtilRaftId2EpSet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>raftId</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><name>TSDB_FQDN_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>raftId</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>addEpIntoEpSet</name><argument_list>(<argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncUtilNodeInfo2RaftId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SyncGroupId</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>raftId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ipv4</name> <init>= <expr><call><name>taosGetIpv4FromFqdn</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ipv4</name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal> <operator>||</operator> <name>ipv4</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to resolve ipv4 addr, fqdn: %s"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_FQDN</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>ipbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tinet_ntoa</name><argument_list>(<argument><expr><name>ipbuf</name></expr></argument>, <argument><expr><name>ipv4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>raftId</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>syncUtilAddr2U64</name><argument_list>(<argument><expr><name>ipbuf</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nodePort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>raftId</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncUtilSameId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>pId1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>pId2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pId1</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>pId2</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name><name>pId1</name><operator>-&gt;</operator><name>vgId</name></name> <operator>==</operator> <name><name>pId2</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncUtilEmptyId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>pId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name><name>pId</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pId</name><operator>-&gt;</operator><name>vgId</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>syncUtilRand</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>max</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncUtilElectRandomMS</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rdm</name> <init>= <expr><name>min</name> <operator>+</operator> <call><name>syncUtilRand</name><argument_list>(<argument><expr><name>max</name> <operator>-</operator> <name>min</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// sDebug("random min:%d, max:%d, rdm:%d", min, max, rdm);</comment>
  <return>return <expr><name>rdm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncUtilQuorum</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>replicaNum</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>replicaNum</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>cJSON</name><modifier>*</modifier></type> <name>syncUtilRaftId2Json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>   <name><name>u64buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"vgId"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"SRaftId"</literal></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pJson</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>syncUtilCanPrint</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">126</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>syncUtilPrintBin</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>memLen</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>s</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>memLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncUtilCanPrint</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>syncUtilPrintBin2</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>len2</name> <init>= <expr><name>len</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>s</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%d,"</literal></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncUtilMsgHtoN</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMsgHead</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><name>msg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncUtilMsgNtoH</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMsgHead</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><name>msg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncUtilUserPreCommit</name><parameter_list>(<parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>msgType</name> <operator>!=</operator> <name>TDMT_SYNC_NOOP</name> <operator>&amp;&amp;</operator> <name>msgType</name> <operator>!=</operator> <name>TDMT_SYNC_LEADER_TRANSFER</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncUtilUserRollback</name><parameter_list>(<parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>msgType</name> <operator>!=</operator> <name>TDMT_SYNC_NOOP</name> <operator>&amp;&amp;</operator> <name>msgType</name> <operator>!=</operator> <name>TDMT_SYNC_LEADER_TRANSFER</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>syncCfg2SimpleStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncCfg</name><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><literal type="string">"{r-num:%d, my:%d, "</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>myIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%s:%d, "</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodeFqdn</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%s:%d}"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodeFqdn</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// for leader</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>syncHearbeatReplyTime2Str</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>tsMs</name> <init>= <expr><call><name>syncIndexMgrGetRecvTime</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d:%"</literal> <name>PRId64</name> <literal type="string">","</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tsMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d:%"</literal> <name>PRId64</name> <literal type="string">"}"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tsMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// for follower</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>syncHearbeatTime2Str</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>tsMs</name> <init>= <expr><call><name>syncIndexMgrGetRecvTime</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d:%"</literal> <name>PRId64</name> <literal type="string">","</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tsMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d:%"</literal> <name>PRId64</name> <literal type="string">"}"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tsMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncPeerState2Str</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SPeerState</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><call><name>syncNodeGetPeerState</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pState</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d:%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">", "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>lastSendIndex</name></name></expr></argument>,
                      <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>lastSendTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d:%"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">"}"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>lastSendIndex</name></name></expr></argument>,
                      <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>lastSendTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncPrintNodeLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>ELogLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dflag</name></decl></parameter>, <parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pRaftStore</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>currentTerm</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// save error code, otherwise it will be overwritten</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>errCode</name> <init>= <expr><name>terrno</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>lastApplyIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>lastApplyTerm</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logLastIndex</name> <init>= <expr><name>SYNC_INDEX_INVALID</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logBeginIndex</name> <init>= <expr><name>SYNC_INDEX_INVALID</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>logLastIndex</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>logBeginIndex</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>cacheHit</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheHit</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cacheMiss</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheMiss</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>cfgStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncCfg2SimpleStr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name><operator>)</operator></expr></argument>, <argument><expr><name>cfgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cfgStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>peerStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><literal type="string">"{"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncPeerState2Str</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>peerStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peerStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>hbrTimeStr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">"hbr:{"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncHearbeatReplyTime2Str</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>hbrTimeStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbrTimeStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>hbTimeStr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">"hb:{"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncHearbeatTime2Str</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>hbTimeStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbTimeStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>quorum</name> <init>= <expr><call><name>syncNodeDynamicQuorum</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>eventLog</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// {0};</comment>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argpointer</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>writeLen</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>eventLog</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eventLog</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>aqItems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpApplyQueueItems</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>aqItems</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpApplyQueueItems</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// restore error code</comment>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>errCode</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosPrintLog</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>dflag</name></expr></argument>,
                 <argument><expr><literal type="string">"vgId:%d, sync %s "</literal>
                 <literal type="string">"%s"</literal>
                 <literal type="string">", term:%"</literal> <name>PRIu64</name> <literal type="string">", commit-index:%"</literal> <name>PRId64</name> <literal type="string">", first-ver:%"</literal> <name>PRId64</name> <literal type="string">", last-ver:%"</literal> <name>PRId64</name>
                 <literal type="string">", min:%"</literal> <name>PRId64</name> <literal type="string">", snap:%"</literal> <name>PRId64</name> <literal type="string">", snap-term:%"</literal> <name>PRIu64</name>
                 <literal type="string">", elect-times:%d, as-leader-times:%d, cfg-ch-times:%d, hit:%d, mis:%d, hb-slow:%d, hbr-slow:%d, "</literal>
                 <literal type="string">"aq-items:%d, snaping:%"</literal> <name>PRId64</name> <literal type="string">", replicas:%d, last-cfg:%"</literal> <name>PRId64</name>
                 <literal type="string">", chging:%d, restore:%d, quorum:%d, elect-lc-timer:%"</literal> <name>PRId64</name> <literal type="string">", hb:%"</literal> <name>PRId64</name> <literal type="string">", %s, %s, %s, %s"</literal></expr></argument>,
                 <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>eventLog</name></expr></argument>, <argument><expr><name>currentTerm</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name>logBeginIndex</name></expr></argument>,
                 <argument><expr><name>logLastIndex</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>minMatchIndex</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>electNum</name></name></expr></argument>,
                 <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>becomeLeaderNum</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>configChangeNum</name></name></expr></argument>, <argument><expr><name>cacheHit</name></expr></argument>, <argument><expr><name>cacheMiss</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>hbSlowNum</name></name></expr></argument>,
                 <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>hbrSlowNum</name></name></expr></argument>, <argument><expr><name>aqItems</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>,
                 <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>changing</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>restoreFinish</name></name></expr></argument>, <argument><expr><name>quorum</name></expr></argument>,
                 <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>electTimerLogicClock</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClockUser</name></name></expr></argument>, <argument><expr><name>peerStr</name></expr></argument>, <argument><expr><name>cfgStr</name></expr></argument>, <argument><expr><name>hbTimeStr</name></expr></argument>,
                 <argument><expr><name>hbrTimeStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncPrintSnapshotSenderLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>ELogLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dflag</name></decl></parameter>, <parameter><decl><type><name>SSyncSnapshotSender</name><modifier>*</modifier></type> <name>pSender</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name><name>pSender</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pRaftStore</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>lastApplyIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>lastApplyTerm</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logLastIndex</name> <init>= <expr><name>SYNC_INDEX_INVALID</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logBeginIndex</name> <init>= <expr><name>SYNC_INDEX_INVALID</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>logLastIndex</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>logBeginIndex</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>cfgStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncCfg2SimpleStr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name><operator>)</operator></expr></argument>, <argument><expr><name>cfgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cfgStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>peerStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><literal type="string">"{"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncPeerState2Str</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>peerStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peerStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>quorum</name> <init>= <expr><call><name>syncNodeDynamicQuorum</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRaftId</name></type>  <name>destId</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name><name>pSender</name><operator>-&gt;</operator><name>replicaIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>eventLog</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// {0};</comment>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argpointer</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>writeLen</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>eventLog</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eventLog</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosPrintLog</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>dflag</name></expr></argument>,
               <argument><expr><literal type="string">"vgId:%d, sync %s "</literal>
               <literal type="string">"%s {%p s-param:%"</literal> <name>PRId64</name> <literal type="string">" e-param:%"</literal> <name>PRId64</name> <literal type="string">" laindex:%"</literal> <name>PRId64</name> <literal type="string">" laterm:%"</literal> <name>PRIu64</name> <literal type="string">" lcindex:%"</literal> <name>PRId64</name>
               <literal type="string">" seq:%d ack:%d finish:%d replica-index:%d %s:%d}"</literal>
               <literal type="string">", tm:%"</literal> <name>PRIu64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", fst:%"</literal> <name>PRId64</name> <literal type="string">", lst:%"</literal> <name>PRId64</name> <literal type="string">", min:%"</literal> <name>PRId64</name> <literal type="string">", snap:%"</literal> <name>PRId64</name>
               <literal type="string">", snap-tm:%"</literal> <name>PRIu64</name> <literal type="string">", sby:%d, stgy:%d, bch:%d, r-num:%d, lcfg:%"</literal> <name>PRId64</name>
               <literal type="string">", chging:%d, rsto:%d, dquorum:%d, elt:%"</literal> <name>PRId64</name> <literal type="string">", hb:%"</literal> <name>PRId64</name> <literal type="string">", %s, %s"</literal></expr></argument>,
               <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>eventLog</name></expr></argument>, <argument><expr><name>pSender</name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name></expr></argument>,
               <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr></argument>,
               <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastConfigIndex</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>ack</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>finish</name></name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>replicaIndex</name></name></expr></argument>,
               <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name>logBeginIndex</name></expr></argument>, <argument><expr><name>logLastIndex</name></expr></argument>,
               <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>minMatchIndex</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>isStandBy</name></name></expr></argument>,
               <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>snapshotStrategy</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>batchSize</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>,
               <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>changing</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>restoreFinish</name></name></expr></argument>, <argument><expr><name>quorum</name></expr></argument>,
               <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>electTimerLogicClock</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClockUser</name></name></expr></argument>, <argument><expr><name>peerStr</name></expr></argument>, <argument><expr><name>cfgStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncPrintSnapshotReceiverLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>ELogLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dflag</name></decl></parameter>, <parameter><decl><type><name>SSyncSnapshotReceiver</name><modifier>*</modifier></type> <name>pReceiver</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name><name>pReceiver</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pRaftStore</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>lastApplyIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>lastApplyTerm</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logLastIndex</name> <init>= <expr><name>SYNC_INDEX_INVALID</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logBeginIndex</name> <init>= <expr><name>SYNC_INDEX_INVALID</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>logLastIndex</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>logBeginIndex</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>cfgStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncCfg2SimpleStr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name><operator>)</operator></expr></argument>, <argument><expr><name>cfgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cfgStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>peerStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><literal type="string">"{"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncPeerState2Str</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>peerStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peerStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>quorum</name> <init>= <expr><call><name>syncNodeDynamicQuorum</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRaftId</name></type>  <name>fromId</name> <init>= <expr><name><name>pReceiver</name><operator>-&gt;</operator><name>fromId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>fromId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>eventLog</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// {0};</comment>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argpointer</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>writeLen</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>eventLog</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eventLog</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosPrintLog</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>dflag</name></expr></argument>,
               <argument><expr><literal type="string">"vgId:%d, sync %s "</literal>
               <literal type="string">"%s {%p start:%d ack:%d term:%"</literal> <name>PRIu64</name> <literal type="string">" start-time:%"</literal> <name>PRId64</name> <literal type="string">" from:%s:%d s-param:%"</literal> <name>PRId64</name>
               <literal type="string">" e-param:%"</literal> <name>PRId64</name> <literal type="string">" laindex:%"</literal> <name>PRId64</name> <literal type="string">" laterm:%"</literal> <name>PRIu64</name> <literal type="string">" lcindex:%"</literal> <name>PRId64</name>
               <literal type="string">"}"</literal>
               <literal type="string">", tm:%"</literal> <name>PRIu64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", fst:%"</literal> <name>PRId64</name> <literal type="string">", lst:%"</literal> <name>PRId64</name> <literal type="string">", min:%"</literal> <name>PRId64</name> <literal type="string">", snap:%"</literal> <name>PRId64</name>
               <literal type="string">", snap-tm:%"</literal> <name>PRIu64</name> <literal type="string">", sby:%d, stgy:%d, bch:%d, r-num:%d, lcfg:%"</literal> <name>PRId64</name>
               <literal type="string">", chging:%d, rsto:%d, dquorum:%d, elt:%"</literal> <name>PRId64</name> <literal type="string">", hb:%"</literal> <name>PRId64</name> <literal type="string">", %s, %s"</literal></expr></argument>,
               <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>eventLog</name></expr></argument>, <argument><expr><name>pReceiver</name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>ack</name></name></expr></argument>,
               <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>start</name></name></expr></argument>,
               <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshotParam</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr></argument>,
               <argument><expr><name><name>pReceiver</name><operator>-&gt;</operator><name>snapshot</name><operator>.</operator><name>lastConfigIndex</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name>logBeginIndex</name></expr></argument>,
               <argument><expr><name>logLastIndex</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>minMatchIndex</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyTerm</name></name></expr></argument>,
               <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>isStandBy</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>snapshotStrategy</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>batchSize</name></name></expr></argument>,
               <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>changing</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>restoreFinish</name></name></expr></argument>, <argument><expr><name>quorum</name></expr></argument>,
               <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>electTimerLogicClock</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClockUser</name></name></expr></argument>, <argument><expr><name>peerStr</name></expr></argument>, <argument><expr><name>cfgStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvTimer</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncTimeout</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timeDIff</name> <init>= <expr><name>tsNow</name> <operator>-</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(
      <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"recv sync-timer {type:%s, lc:%"</literal> <name>PRId64</name> <literal type="string">", ms:%d, ts:%"</literal> <name>PRId64</name> <literal type="string">", elapsed:%"</literal> <name>PRId64</name> <literal type="string">", data:%p}, %s"</literal></expr></argument>,
      <argument><expr><call><name>syncTimerTypeStr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeoutType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>logicClock</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timerMS</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></argument>, <argument><expr><name>timeDIff</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvLocalCmd</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncLocalCmd</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"recv sync-local-cmd {cmd:%d-%s, sd-new-term:%"</literal> <name>PRId64</name> <literal type="string">", fc-index:%"</literal> <name>PRId64</name> <literal type="string">"}, %s"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>,
          <argument><expr><call><name>syncLocalCmdGetStr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>sdNewTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>fcIndex</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendAppendEntriesReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"send sync-append-entries-reply to %s:%d, {term:%"</literal> <name>PRId64</name> <literal type="string">", pterm:%"</literal> <name>PRId64</name>
          <literal type="string">", success:%d, lsend-index:%"</literal> <name>PRId64</name> <literal type="string">", match:%"</literal> <name>PRId64</name> <literal type="string">"}, %s"</literal></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastMatchTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>success</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvAppendEntriesReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"recv sync-append-entries-reply from %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", pterm:%"</literal> <name>PRId64</name>
          <literal type="string">", success:%d, lsend-index:%"</literal> <name>PRId64</name> <literal type="string">", match:%"</literal> <name>PRId64</name> <literal type="string">"}, %s"</literal></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastMatchTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>success</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastSendIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>matchIndex</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendHeartbeat</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncHeartbeat</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>printX</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timerElapsed</name></decl></parameter>,
                          <parameter><decl><type><name>int64_t</name></type> <name>execTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>printX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
            <argument><expr><literal type="string">"send sync-heartbeat to %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", min-match:%"</literal> <name>PRId64</name> <literal type="string">", ts:%"</literal> <name>PRId64</name>
            <literal type="string">"}, x"</literal></expr></argument>,
            <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>minMatchIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
            <argument><expr><literal type="string">"send sync-heartbeat to %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", min-match:%"</literal> <name>PRId64</name> <literal type="string">", ts:%"</literal> <name>PRId64</name>
            <literal type="string">"}, timer-elapsed:%"</literal> <name>PRId64</name> <literal type="string">", next-exec:%"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>minMatchIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></argument>, <argument><expr><name>timerElapsed</name></expr></argument>, <argument><expr><name>execTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvHeartbeat</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncHeartbeat</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeDiff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>timeDiff</name> <operator>&gt;</operator> <name>SYNC_HEARTBEAT_SLOW_MS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>hbSlowNum</name></name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
           <argument><expr><literal type="string">"recv sync-heartbeat from %s:%d slow {term:%"</literal> <name>PRId64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", min-match:%"</literal> <name>PRId64</name> <literal type="string">", ts:%"</literal> <name>PRId64</name>
           <literal type="string">"}, %s, net elapsed:%"</literal> <name>PRId64</name></expr></argument>,
           <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>minMatchIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>timeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"recv sync-heartbeat from %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", min-match:%"</literal> <name>PRId64</name> <literal type="string">", ts:%"</literal> <name>PRId64</name>
          <literal type="string">"}, %s, net elapsed:%"</literal> <name>PRId64</name></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>minMatchIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>timeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendHeartbeatReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncHeartbeatReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"send sync-heartbeat-reply from %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", ts:%"</literal> <name>PRId64</name> <literal type="string">"}, %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
          <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvHeartbeatReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncHeartbeatReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeDiff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>timeDiff</name> <operator>&gt;</operator> <name>SYNC_HEARTBEAT_REPLY_SLOW_MS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>hbrSlowNum</name></name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
            <argument><expr><literal type="string">"recv sync-heartbeat-reply from %s:%d slow {term:%"</literal> <name>PRId64</name> <literal type="string">", ts:%"</literal> <name>PRId64</name> <literal type="string">"}, %s, net elapsed:%"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>timeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"recv sync-heartbeat-reply from %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", ts:%"</literal> <name>PRId64</name> <literal type="string">"}, %s, net elapsed:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,
          <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeStamp</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>timeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendSyncPreSnapshot</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncPreSnapshot</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"send sync-pre-snapshot to %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">"}, %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvSyncPreSnapshot</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncPreSnapshot</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"recv sync-pre-snapshot from %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">"}, %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendSyncPreSnapshotReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncPreSnapshotReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"send sync-pre-snapshot-reply to %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", snap-start:%"</literal> <name>PRId64</name> <literal type="string">"}, %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
          <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>snapStart</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvSyncPreSnapshotReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncPreSnapshotReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"recv sync-pre-snapshot-reply from %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", snap-start:%"</literal> <name>PRId64</name> <literal type="string">"}, %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>,
          <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>snapStart</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendSyncSnapshotSend</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncSnapshotSend</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"send sync-snapshot-send to %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", begin:%"</literal> <name>PRId64</name> <literal type="string">", end:%"</literal> <name>PRId64</name> <literal type="string">", lterm:%"</literal> <name>PRId64</name>
          <literal type="string">", stime:%"</literal> <name>PRId64</name> <literal type="string">", seq:%d}, %s"</literal></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>beginIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvSyncSnapshotSend</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncSnapshotSend</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"recv sync-snapshot-send from %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", begin:%"</literal> <name>PRId64</name> <literal type="string">", lst:%"</literal> <name>PRId64</name> <literal type="string">", lterm:%"</literal> <name>PRId64</name>
          <literal type="string">", stime:%"</literal> <name>PRId64</name> <literal type="string">", seq:%d, len:%u}, %s"</literal></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>beginIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>,
          <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendSyncSnapshotRsp</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncSnapshotRsp</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"send sync-snapshot-rsp to %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", begin:%"</literal> <name>PRId64</name> <literal type="string">", lst:%"</literal> <name>PRId64</name> <literal type="string">", lterm:%"</literal> <name>PRId64</name>
          <literal type="string">", stime:%"</literal> <name>PRId64</name> <literal type="string">", ack:%d}, %s"</literal></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>snapBeginIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>ack</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvSyncSnapshotRsp</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncSnapshotRsp</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"recv sync-snapshot-rsp from %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", begin:%"</literal> <name>PRId64</name> <literal type="string">", lst:%"</literal> <name>PRId64</name> <literal type="string">", lterm:%"</literal> <name>PRId64</name>
          <literal type="string">", stime:%"</literal> <name>PRId64</name> <literal type="string">", ack:%d}, %s"</literal></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>snapBeginIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>ack</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvAppendEntries</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"recv sync-append-entries from %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", pre-index:%"</literal> <name>PRId64</name> <literal type="string">", pre-term:%"</literal> <name>PRId64</name>
          <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", pterm:%"</literal> <name>PRId64</name> <literal type="string">", datalen:%d}, %s"</literal></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>privateTerm</name></name></expr></argument>,
          <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendAppendEntries</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntries</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"send sync-append-entries to %s:%d, {term:%"</literal> <name>PRId64</name> <literal type="string">", pre-index:%"</literal> <name>PRId64</name> <literal type="string">", pre-term:%"</literal> <name>PRId64</name>
          <literal type="string">", lsend-index:%"</literal> <name>PRId64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", datalen:%d}, %s"</literal></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>,
          <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvRequestVote</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncRequestVote</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>voteGranted</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// if (!(sDebugFlag &amp; DEBUG_TRACE)) return;</comment>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>logBuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>voteGranted</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
           <argument><expr><literal type="string">"recv sync-request-vote from %s:%d, {term:%"</literal> <name>PRId64</name> <literal type="string">", lindex:%"</literal> <name>PRId64</name> <literal type="string">", lterm:%"</literal> <name>PRId64</name> <literal type="string">"}, %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>,
           <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
           <argument><expr><literal type="string">"recv sync-request-vote from %s:%d, {term:%"</literal> <name>PRId64</name> <literal type="string">", lindex:%"</literal> <name>PRId64</name> <literal type="string">", lterm:%"</literal> <name>PRId64</name> <literal type="string">"}, granted:%d"</literal></expr></argument>,
           <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name></expr></argument>, <argument><expr><name>voteGranted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendRequestVote</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncRequestVote</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// if (!(sDebugFlag &amp; DEBUG_TRACE)) return;</comment>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><literal type="string">"send sync-request-vote to %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", lindex:%"</literal> <name>PRId64</name> <literal type="string">", lterm:%"</literal> <name>PRId64</name> <literal type="string">"}, %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>,
         <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>lastLogTerm</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvRequestVoteReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncRequestVoteReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// if (!(sDebugFlag &amp; DEBUG_TRACE)) return;</comment>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"recv sync-request-vote-reply from %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", grant:%d}, %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>,
         <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>voteGranted</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendRequestVoteReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncRequestVoteReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// if (!(sDebugFlag &amp; DEBUG_TRACE)) return;</comment>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"send sync-request-vote-reply to %s:%d {term:%"</literal> <name>PRId64</name> <literal type="string">", grant:%d}, %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>,
         <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>voteGranted</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
