<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncCommit.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncCommit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncIndexMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<comment type="line">// \* Leader i advances its commitIndex.</comment>
<comment type="line">// \* This is done as a separate step from handling AppendEntries responses,</comment>
<comment type="line">// \* in part to minimize atomic regions, and in part so that leaders of</comment>
<comment type="line">// \* single-server clusters are able to mark entries committed.</comment>
<comment type="line">// AdvanceCommitIndex(i) ==</comment>
<comment type="line">//     /\ state[i] = Leader</comment>
<comment type="line">//     /\ LET \* The set of servers that agree up through index.</comment>
<comment type="line">//            Agree(index) == {i} \cup {k \in Server :</comment>
<comment type="line">//                                          matchIndex[i][k] &gt;= index}</comment>
<comment type="line">//            \* The maximum indexes for which a quorum agrees</comment>
<comment type="line">//            agreeIndexes == {index \in 1..Len(log[i]) :</comment>
<comment type="line">//                                 Agree(index) \in Quorum}</comment>
<comment type="line">//            \* New value for commitIndex'[i]</comment>
<comment type="line">//            newCommitIndex ==</comment>
<comment type="line">//               IF /\ agreeIndexes /= {}</comment>
<comment type="line">//                  /\ log[i][Max(agreeIndexes)].term = currentTerm[i]</comment>
<comment type="line">//               THEN</comment>
<comment type="line">//                   Max(agreeIndexes)</comment>
<comment type="line">//               ELSE</comment>
<comment type="line">//                   commitIndex[i]</comment>
<comment type="line">//        IN commitIndex' = [commitIndex EXCEPT ![i] = newCommitIndex]</comment>
<comment type="line">//     /\ UNCHANGED &lt;&lt;messages, serverVars, candidateVars, leaderVars, log&gt;&gt;</comment>
<comment type="line">//</comment>
<function><type><name>void</name></type> <name>syncOneReplicaAdvance</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"pSyncNode is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"not leader, can not advance commit index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"not one replica, can not advance commit index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// advance commit index to snapshot first</comment>
  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitBegin</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitEnd</name> <init>= <expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"commit by snapshot from index:%"</literal> <name>PRId64</name> <literal type="string">" to index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>commitBegin</name></expr></argument>, <argument><expr><name>commitEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// advance commit index as large as possible</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastIndex</name> <init>= <expr><call><name>syncNodeGetLastIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lastIndex</name> <operator>&gt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"commit by wal from index:%"</literal> <name>PRId64</name> <literal type="string">" to index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lastIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name>lastIndex</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// call back Wal</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>walCommitVer</name> <init>= <expr><call><name>logStoreWalCommitVer</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>&gt;</operator> <name>walCommitVer</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogUpdateCommitIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncMaybeAdvanceCommitIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"deprecated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"pSyncNode is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"not leader, can not advance commit index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// advance commit index to sanpshot first</comment>
  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>&gt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitBegin</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitEnd</name> <init>= <expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"commit by snapshot from index:%"</literal> <name>PRId64</name> <literal type="string">" to index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>commitBegin</name></expr></argument>, <argument><expr><name>commitEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update commit index</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>newCommitIndex</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>index</name> <init>= <expr><call><name>syncNodeGetLastIndex</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&gt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>;</condition> <incr><expr><operator>--</operator><name>index</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>agree</name> <init>= <expr><call><name>syncAgree</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>agree</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// term</comment>
      <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type>      <name>pCache</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type>      <name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheHit</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"hit cache index:%"</literal> <name>PRId64</name> <literal type="string">", bytes:%u, %p"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>cacheMiss</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"miss cache index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogGetEntry</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"advance commit index error, read wal index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <comment type="line">// cannot commit, even if quorum agree. need check term!</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name> <operator>&lt;=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// update commit index</comment>
        <expr_stmt><expr><name>newCommitIndex</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"can not commit due to term not equal, index:%"</literal> <name>PRId64</name> <literal type="string">", term:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
                <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>syncEntryDestroy</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// advance commit index as large as possible</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>walCommitVer</name> <init>= <expr><call><name>logStoreWalCommitVer</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>walCommitVer</name> <operator>&gt;</operator> <name>newCommitIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>newCommitIndex</name> <operator>=</operator> <name>walCommitVer</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// maybe execute fsm</comment>
  <if_stmt><if>if <condition>(<expr><name>newCommitIndex</name> <operator>&gt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>beginIndex</name> <init>= <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>endIndex</name> <init>= <expr><name>newCommitIndex</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// update commit index</comment>
    <expr_stmt><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <name>newCommitIndex</name></expr>;</expr_stmt>

    <comment type="line">// call back Wal</comment>
    <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogUpdateCommitIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// execute fsm</comment>
    <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncNodeDoCommit</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>beginIndex</name></expr></argument>, <argument><expr><name>endIndex</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><literal type="string">"advance commit index error, do commit begin:%"</literal> <name>PRId64</name> <literal type="string">", end:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>beginIndex</name></expr></argument>,
                <argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncAgreeIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><name>SRaftId</name><modifier>*</modifier></type> <name>pRaftId</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// I am leader, I agree</comment>
  <if_stmt><if>if <condition>(<expr><call><name>syncUtilSameId</name><argument_list>(<argument><expr><name>pRaftId</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// follower agree</comment>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>matchIndex</name> <init>= <expr><call><name>syncIndexMgrGetIndex</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>, <argument><expr><name>pRaftId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>matchIndex</name> <operator>&gt;=</operator> <name>index</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// not agree</comment>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>syncNodeAbs64</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>a</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name> <operator>-</operator> <name>b</name></expr> </then><else>: <expr><name>b</name> <operator>-</operator> <name>a</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeDynamicQuorum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>quorum</name></name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  int32_t quorum = 1;  <comment type="line">// self</comment>

  int64_t timeNow = taosGetTimestampMs();
  for (int i = 0; i &lt; pSyncNode-&gt;peersNum; ++i) {
    int64_t   peerStartTime = syncIndexMgrGetStartTime(pSyncNode-&gt;pNextIndex, &amp;(pSyncNode-&gt;peersId)[i]);
    int64_t   peerRecvTime = syncIndexMgrGetRecvTime(pSyncNode-&gt;pNextIndex, &amp;(pSyncNode-&gt;peersId)[i]);
    SyncIndex peerMatchIndex = syncIndexMgrGetIndex(pSyncNode-&gt;pMatchIndex, &amp;(pSyncNode-&gt;peersId)[i]);

    int64_t recvTimeDiff = TABS(peerRecvTime - timeNow);
    int64_t startTimeDiff = TABS(peerStartTime - pSyncNode-&gt;startTime);
    int64_t logDiff = TABS(peerMatchIndex - syncNodeGetLastIndex(pSyncNode));

    <comment type="block">/*
        int64_t recvTimeDiff = syncNodeAbs64(peerRecvTime, timeNow);
        int64_t startTimeDiff = syncNodeAbs64(peerStartTime, pSyncNode-&gt;startTime);
        int64_t logDiff = syncNodeAbs64(peerMatchIndex, syncNodeGetLastIndex(pSyncNode));
    */</comment>

    int32_t addQuorum = 0;

    if (recvTimeDiff &lt; SYNC_MAX_RECV_TIME_RANGE_MS) {
      if (startTimeDiff &lt; SYNC_MAX_START_TIME_RANGE_MS) {
        addQuorum = 1;
      } else {
        if (logDiff &lt; SYNC_ADD_QUORUM_COUNT) {
          addQuorum = 1;
        } else {
          addQuorum = 0;
        }
      }
    } else {
      addQuorum = 0;
    }

    <comment type="block">/*
        if (recvTimeDiff &lt; SYNC_MAX_RECV_TIME_RANGE_MS) {
          addQuorum = 1;
        } else {
          addQuorum = 0;
        }

        if (startTimeDiff &gt; SYNC_MAX_START_TIME_RANGE_MS) {
          addQuorum = 0;
        }
    */</comment>

    quorum += addQuorum;
  }

  ASSERT(quorum &lt;= pSyncNode-&gt;replicaNum);

  if (quorum &lt; pSyncNode-&gt;quorum) {
    quorum = pSyncNode-&gt;quorum;
  }

  return quorum;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
bool syncAgree(SSyncNode* pSyncNode, SyncIndex index) {
  int agreeCount = 0;
  for (int i = 0; i &lt; pSyncNode-&gt;replicaNum; ++i) {
    if (syncAgreeIndex(pSyncNode, &amp;(pSyncNode-&gt;replicasId[i]), index)) {
      ++agreeCount;
    }
    if (agreeCount &gt;= syncNodeDynamicQuorum(pSyncNode)) {
      return true;
    }
  }
  return false;
}
*/</comment>

<function><type><name>bool</name></type> <name>syncNodeAgreedUpon</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>            <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncIndexMgr</name><modifier>*</modifier></type> <name>pMatches</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>==</operator> <name><name>pMatches</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>matchIndex</name> <init>= <expr><name><name>pMatches</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>matchIndex</name> <operator>&gt;=</operator> <name>index</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>count</name> <operator>&gt;=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>quorum</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syncAgree</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>agreeCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>syncAgreeIndex</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>agreeCount</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>agreeCount</name> <operator>&gt;=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>quorum</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>syncNodeUpdateCommitIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>commitIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>lastVer</name> <init>= <expr><call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>commitIndex</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>commitIndex</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>commitIndex</name></expr></argument>, <argument><expr><name>lastVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogUpdateCommitIndex</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>syncNodeCheckCommitIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>indexLikely</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>indexLikely</name> <operator>&gt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>&amp;&amp;</operator> <call><name>syncNodeAgreedUpon</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>indexLikely</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>commitIndex</name> <init>= <expr><name>indexLikely</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>syncNodeUpdateCommitIndex</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, agreed upon. role:%d, term:%"</literal> <name>PRId64</name> <literal type="string">", index: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
           <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>, <argument><expr><name>commitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>ths</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
