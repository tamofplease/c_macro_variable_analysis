<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncRespMgr.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRespMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftStore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<function><type><name>SSyncRespMgr</name> <modifier>*</modifier></type><name>syncRespMgrCreate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ttl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncRespMgr</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncRespMgr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>seqNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncRespMgrDestroy</name><parameter_list>(<parameter><decl><type><name>SSyncRespMgr</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pObj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>syncRespMgrAdd</name><parameter_list>(<parameter><decl><type><name>SSyncRespMgr</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRespStub</name> <modifier>*</modifier></type><name>pStub</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>seq</name> <init>= <expr><operator>++</operator><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>seqNum</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pStub</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRespStub</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"save message handle:%p, type:%s seq:%"</literal> <name>PRIu64</name> <literal type="string">" code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>,
          <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>seq</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncRespMgrDel</name><parameter_list>(<parameter><decl><type><name>SSyncRespMgr</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>seq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"remove message handle, seq:%"</literal> <name>PRIu64</name> <literal type="string">" code:%d"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncRespMgrGet</name><parameter_list>(<parameter><decl><type><name>SSyncRespMgr</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>seq</name></decl></parameter>, <parameter><decl><type><name>SRespStub</name> <modifier>*</modifier></type><name>pStub</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRespStub</name> <modifier>*</modifier></type><name>pTmp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStub</name></expr></argument>, <argument><expr><name>pTmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRespStub</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"get message handle, type:%s seq:%"</literal> <name>PRIu64</name> <literal type="string">" handle:%p"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>seq</name></expr></argument>,
            <argument><expr><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="line">// get one object</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="line">// get none object</comment>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncRespMgrGetAndDel</name><parameter_list>(<parameter><decl><type><name>SSyncRespMgr</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>seq</name></decl></parameter>, <parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRespStub</name> <modifier>*</modifier></type><name>pStub</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStub</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pInfo</name> <operator>=</operator> <name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>info</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"get-and-del message handle:%p, type:%s seq:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="line">// get one object</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="line">// get none object</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncRespCleanByTTL</name><parameter_list>(<parameter><decl><type><name>SSyncRespMgr</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRespStub</name> <modifier>*</modifier></type><name>pStub</name> <init>= <expr><operator>(</operator><name>SRespStub</name> <operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>        <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>        <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncNode</name> <modifier>*</modifier></type><name>pSyncNode</name> <init>= <expr><name><name>pObj</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>delIndexArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>delIndexArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, resp mgr begin clean by ttl"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>pStub</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>    <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pStub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pSeqNum</name> <init>= <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nowMS</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nowMS</name> <operator>-</operator> <name><name>pStub</name><operator>-&gt;</operator><name>createTime</name></name> <operator>&gt;</operator> <name>ttl</name> <operator>||</operator> <operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>ttl</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>delIndexArray</name></expr></argument>, <argument><expr><name>pSeqNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SFsmCbMeta</name></type> <name>cbMeta</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>index</name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>,
          <expr><operator>.</operator><name>lastConfigIndex</name> <operator>=</operator> <name>SYNC_INDEX_INVALID</name></expr>,
          <expr><operator>.</operator><name>isWeak</name> <operator>=</operator> <name>false</name></expr>,
          <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>TSDB_CODE_SYN_TIMEOUT</name></expr>,
          <expr><operator>.</operator><name>state</name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name></expr>,
          <expr><operator>.</operator><name>seqNum</name> <operator>=</operator> <operator>*</operator><name>pSeqNum</name></expr>,
          <expr><operator>.</operator><name>term</name> <operator>=</operator> <name>SYNC_TERM_INVALID</name></expr>,
          <expr><operator>.</operator><name>currentTerm</name> <operator>=</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr>,
          <expr><operator>.</operator><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <comment type="line">// TODO: and make rpcMsg body, call commit cb</comment>
      <comment type="line">// pSyncNode-&gt;pFsm-&gt;FpCommitCb(pSyncNode-&gt;pFsm, &amp;pStub-&gt;rpcMsg, cbMeta);</comment>

      <expr_stmt><expr><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStub</name><operator>-&gt;</operator><name>rpcMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pStub</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name></expr></argument>, <argument><expr><name>pStub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>arraySize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>delIndexArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, resp mgr end clean by ttl, sum:%d, cnt:%d, array-size:%d"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>arraySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arraySize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pSeqNum</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>delIndexArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRespHash</name></name></expr></argument>, <argument><expr><name>pSeqNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, resp mgr clean by ttl, seq:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pSeqNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>delIndexArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncRespCleanRsp</name><parameter_list>(<parameter><decl><type><name>SSyncRespMgr</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncRespCleanByTTL</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncRespClean</name><parameter_list>(<parameter><decl><type><name>SSyncRespMgr</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncRespCleanByTTL</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
