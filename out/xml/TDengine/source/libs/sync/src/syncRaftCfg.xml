<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncRaftCfg.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftCfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<comment type="line">// file must already exist!</comment>
<function><type><name>SRaftCfgIndex</name> <modifier>*</modifier></type><name>raftCfgIndexOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRaftCfgIndex</name> <modifier>*</modifier></type><name>pRaftCfgIndex</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRaftCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>pFile</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><name>MAX_CONFIG_INDEX_COUNT</name> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>len</name> <init>= <expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>raftCfgIndexFromStr</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>pRaftCfgIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pRaftCfgIndex</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgIndexClose</name><parameter_list>(<parameter><decl><type><name>SRaftCfgIndex</name> <modifier>*</modifier></type><name>pRaftCfgIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pRaftCfgIndex</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>pFile</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRaftCfgIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgIndexPersist</name><parameter_list>(<parameter><decl><type><name>SRaftCfgIndex</name> <modifier>*</modifier></type><name>pRaftCfgIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRaftCfgIndex</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>raftCfgIndex2Str</name><argument_list>(<argument><expr><name>pRaftCfgIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgIndexAddConfigIndex</name><parameter_list>(<parameter><decl><type><name>SRaftCfgIndex</name> <modifier>*</modifier></type><name>pRaftCfgIndex</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>configIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexCount</name></name> <operator>&lt;=</operator> <name>MAX_CONFIG_INDEX_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexArr</name></name><operator>)</operator><index>[<expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr>]</index> <operator>=</operator> <name>configIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexCount</name></name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type><name>raftCfgIndex2Json</name><parameter_list>(<parameter><decl><type><name>SRaftCfgIndex</name> <modifier>*</modifier></type><name>pRaftCfgIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"configIndexCount"</literal></expr></argument>, <argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pIndexArr</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"configIndexArr"</literal></expr></argument>, <argument><expr><name>pIndexArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf64</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexArr</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pIndexObj</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pIndexObj</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name>buf64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pIndexArr</name></expr></argument>, <argument><expr><name>pIndexObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"SRaftCfgIndex"</literal></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pJson</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>raftCfgIndex2Str</name><parameter_list>(<parameter><decl><type><name>SRaftCfgIndex</name> <modifier>*</modifier></type><name>pRaftCfgIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>raftCfgIndex2Json</name><argument_list>(<argument><expr><name>pRaftCfgIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>serialized</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>serialized</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgIndexFromJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name></decl></parameter>, <parameter><decl><type><name>SRaftCfgIndex</name> <modifier>*</modifier></type><name>pRaftCfgIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"SRaftCfgIndex"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJsonConfigIndexCount</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"configIndexCount"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexCount</name></name> <operator>=</operator> <call><name>cJSON_GetNumberValue</name><argument_list>(<argument><expr><name>pJsonConfigIndexCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pIndexArr</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"configIndexArr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>arraySize</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>pIndexArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>arraySize</name> <operator>==</operator> <name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexArr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexArr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arraySize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pIndexObj</name> <init>= <expr><call><name>cJSON_GetArrayItem</name><argument_list>(<argument><expr><name>pIndexArr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pIndexObj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pIndex</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pIndexObj</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cJSON_IsString</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name><name>pRaftCfgIndex</name><operator>-&gt;</operator><name>configIndexArr</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgIndexFromStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SRaftCfgIndex</name> <modifier>*</modifier></type><name>pRaftCfgIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRoot</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>raftCfgIndexFromJson</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>pRaftCfgIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgIndexCreateFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>err</name> <init>= <expr><name>terrno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errStr</name> <init>= <expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>sysErr</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sysErrStr</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"create raft cfg index file error, err:%d %X, msg:%s, syserr:%d, sysmsg:%s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errStr</name></expr></argument>, <argument><expr><name>sysErr</name></expr></argument>,
           <argument><expr><name>sysErrStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRaftCfgIndex</name></type> <name>raftCfgIndex</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>raftCfgIndex</name><operator>.</operator><name>configIndexArr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>raftCfgIndex</name><operator>.</operator><name>configIndexArr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>raftCfgIndex</name><operator>.</operator><name>configIndexCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>raftCfgIndex</name><operator>.</operator><name>configIndexArr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>raftCfgIndex2Str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>raftCfgIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ---------------------------------------</comment>
<comment type="line">// file must already exist!</comment>
<function><type><name>SRaftCfg</name> <modifier>*</modifier></type><name>raftCfgOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRaftCfg</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRaftCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pFile</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>CONFIG_FILE_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>len</name> <init>= <expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>raftCfgFromStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pCfg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgClose</name><parameter_list>(<parameter><decl><type><name>SRaftCfg</name> <modifier>*</modifier></type><name>pRaftCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRaftCfg</name><operator>-&gt;</operator><name>pFile</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRaftCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgPersist</name><parameter_list>(<parameter><decl><type><name>SRaftCfg</name> <modifier>*</modifier></type><name>pRaftCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRaftCfg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>raftCfg2Str</name><argument_list>(<argument><expr><name>pRaftCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>CONFIG_FILE_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>CONFIG_FILE_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"too long config str:%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// int64_t ret = taosWriteFile(pRaftCfg-&gt;pFile, s, strlen(s) + 1);</comment>
  <comment type="line">// ASSERT(ret == strlen(s) + 1);</comment>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgAddConfigIndex</name><parameter_list>(<parameter><decl><type><name>SRaftCfg</name> <modifier>*</modifier></type><name>pRaftCfg</name></decl></parameter>, <parameter><decl><type><name>SyncIndex</name></type> <name>configIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name> <operator>&lt;=</operator> <name>MAX_CONFIG_INDEX_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name></name><operator>)</operator><index>[<expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr>]</index> <operator>=</operator> <name>configIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type><name>syncCfg2Json</name><parameter_list>(<parameter><decl><type><name>SSyncCfg</name> <modifier>*</modifier></type><name>pSyncCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>   <name><name>u64buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pSyncCfg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"replicaNum"</literal></expr></argument>, <argument><expr><name><name>pSyncCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"myIndex"</literal></expr></argument>, <argument><expr><name><name>pSyncCfg</name><operator>-&gt;</operator><name>myIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pNodeInfoArr</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"nodeInfo"</literal></expr></argument>, <argument><expr><name>pNodeInfoArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pNodeInfo</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pNodeInfo</name></expr></argument>, <argument><expr><literal type="string">"nodePort"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>pSyncCfg</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator><operator>.</operator><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pNodeInfo</name></expr></argument>, <argument><expr><literal type="string">"nodeFqdn"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>pSyncCfg</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator><operator>.</operator><name>nodeFqdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pNodeInfoArr</name></expr></argument>, <argument><expr><name>pNodeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pRoot</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncCfgFromJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name></decl></parameter>, <parameter><decl><type><name>SSyncCfg</name> <modifier>*</modifier></type><name>pSyncCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pSyncCfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// cJSON *pJson = cJSON_GetObjectItem(pRoot, "SSyncCfg");</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>cJSON</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><name>pRoot</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pReplicaNum</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"replicaNum"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>pReplicaNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncCfg</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>=</operator> <call><name>cJSON_GetNumberValue</name><argument_list>(<argument><expr><name>pReplicaNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pMyIndex</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"myIndex"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>pMyIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSyncCfg</name><operator>-&gt;</operator><name>myIndex</name></name> <operator>=</operator> <call><name>cJSON_GetNumberValue</name><argument_list>(<argument><expr><name>pMyIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pNodeInfoArr</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"nodeInfo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>arraySize</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>pNodeInfoArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>arraySize</name> <operator>==</operator> <name><name>pSyncCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arraySize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pNodeInfo</name> <init>= <expr><call><name>cJSON_GetArrayItem</name><argument_list>(<argument><expr><name>pNodeInfoArr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pNodeInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pNodePort</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pNodeInfo</name></expr></argument>, <argument><expr><literal type="string">"nodePort"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>pNodePort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name><name>pSyncCfg</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator><operator>.</operator><name>nodePort</name> <operator>=</operator> <call><name>cJSON_GetNumberValue</name><argument_list>(<argument><expr><name>pNodePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pNodeFqdn</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pNodeInfo</name></expr></argument>, <argument><expr><literal type="string">"nodeFqdn"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cJSON_IsString</name><argument_list>(<argument><expr><name>pNodeFqdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>pSyncCfg</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator><operator>.</operator><name>nodeFqdn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>pSyncCfg</name><operator>-&gt;</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator><operator>.</operator><name>nodeFqdn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
             <argument><expr><name><name>pNodeFqdn</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type><name>raftCfg2Json</name><parameter_list>(<parameter><decl><type><name>SRaftCfg</name> <modifier>*</modifier></type><name>pRaftCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"SSyncCfg"</literal></expr></argument>, <argument><expr><call><name>syncCfg2Json</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"isStandBy"</literal></expr></argument>, <argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>isStandBy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"snapshotStrategy"</literal></expr></argument>, <argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>snapshotStrategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"batchSize"</literal></expr></argument>, <argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>batchSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf64</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"lastConfigIndex"</literal></expr></argument>, <argument><expr><name>buf64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"configIndexCount"</literal></expr></argument>, <argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pIndexArr</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"configIndexArr"</literal></expr></argument>, <argument><expr><name>pIndexArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pIndexObj</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pIndexObj</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name>buf64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pIndexArr</name></expr></argument>, <argument><expr><name>pIndexObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"RaftCfg"</literal></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pJson</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>raftCfg2Str</name><parameter_list>(<parameter><decl><type><name>SRaftCfg</name> <modifier>*</modifier></type><name>pRaftCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>raftCfg2Json</name><argument_list>(<argument><expr><name>pRaftCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>serialized</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>serialized</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgCreateFile</name><parameter_list>(<parameter><decl><type><name>SSyncCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>SRaftCfgMeta</name></type> <name>meta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>err</name> <init>= <expr><name>terrno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errStr</name> <init>= <expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>sysErr</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sysErrStr</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"create raft cfg file error, err:%d %X, msg:%s, syserr:%d, sysmsg:%s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errStr</name></expr></argument>, <argument><expr><name>sysErr</name></expr></argument>, <argument><expr><name>sysErrStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRaftCfg</name></type> <name>raftCfg</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>raftCfg</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>*</operator><name>pCfg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>raftCfg</name><operator>.</operator><name>isStandBy</name></name> <operator>=</operator> <name><name>meta</name><operator>.</operator><name>isStandBy</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>raftCfg</name><operator>.</operator><name>batchSize</name></name> <operator>=</operator> <name><name>meta</name><operator>.</operator><name>batchSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>raftCfg</name><operator>.</operator><name>snapshotStrategy</name></name> <operator>=</operator> <name><name>meta</name><operator>.</operator><name>snapshotStrategy</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>raftCfg</name><operator>.</operator><name>lastConfigIndex</name></name> <operator>=</operator> <name><name>meta</name><operator>.</operator><name>lastConfigIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>raftCfg</name><operator>.</operator><name>configIndexCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>raftCfg</name><operator>.</operator><name>configIndexArr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>raftCfg</name><operator>.</operator><name>configIndexArr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>raftCfg</name><operator>.</operator><name>configIndexArr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>raftCfg2Str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>raftCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>CONFIG_FILE_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>CONFIG_FILE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// int64_t ret = taosWriteFile(pFile, s, strlen(s) + 1);</comment>
  <comment type="line">// ASSERT(ret == strlen(s) + 1);</comment>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgFromJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name></decl></parameter>, <parameter><decl><type><name>SRaftCfg</name> <modifier>*</modifier></type><name>pRaftCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// memset(pRaftCfg, 0, sizeof(SRaftCfg));</comment>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"RaftCfg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJsonIsStandBy</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"isStandBy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>isStandBy</name></name> <operator>=</operator> <call><name>cJSON_GetNumberValue</name><argument_list>(<argument><expr><name>pJsonIsStandBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJsonBatchSize</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"batchSize"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>batchSize</name></name> <operator>=</operator> <call><name>cJSON_GetNumberValue</name><argument_list>(<argument><expr><name>pJsonBatchSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJsonSnapshotStrategy</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"snapshotStrategy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>snapshotStrategy</name></name> <operator>=</operator> <call><name>cJSON_GetNumberValue</name><argument_list>(<argument><expr><name>pJsonSnapshotStrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJsonLastConfigIndex</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"lastConfigIndex"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><name>pJsonLastConfigIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pJsonConfigIndexCount</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"configIndexCount"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name> <operator>=</operator> <call><name>cJSON_GetNumberValue</name><argument_list>(<argument><expr><name>pJsonConfigIndexCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pIndexArr</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"configIndexArr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>arraySize</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>pIndexArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>arraySize</name> <operator>==</operator> <name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arraySize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pIndexObj</name> <init>= <expr><call><name>cJSON_GetArrayItem</name><argument_list>(<argument><expr><name>pIndexArr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pIndexObj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pIndex</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pIndexObj</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cJSON_IsString</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>cJSON</name>  <modifier>*</modifier></type><name>pJsonSyncCfg</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"SSyncCfg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncCfgFromJson</name><argument_list>(<argument><expr><name>pJsonSyncCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftCfgFromStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SRaftCfg</name> <modifier>*</modifier></type><name>pRaftCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRoot</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>raftCfgFromJson</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>pRaftCfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
