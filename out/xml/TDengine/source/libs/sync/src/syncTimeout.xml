<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/src/syncTimeout.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncTimeout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncElection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftCfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRaftLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncReplication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncRespMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncSnapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncNodeCleanConfigIndex</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>newArrIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name><name>newConfigIndexArr</name><index>[<expr><name>MAX_CONFIG_INDEX_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name> <operator>!=</operator> <name>SYNC_INDEX_INVALID</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>snapshot</name><operator>.</operator><name>lastConfigIndex</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// pass</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// save</comment>
        <expr_stmt><expr><name><name>newConfigIndexArr</name><index>[<expr><name>newArrIndex</name></expr>]</index></name> <operator>=</operator> <name><name>ths</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>newArrIndex</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>oldCnt</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name> <operator>=</operator> <name>newArrIndex</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexArr</name></name></expr></argument>, <argument><expr><name>newConfigIndexArr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newConfigIndexArr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>raftCfgPersist</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftCfg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sNFatal</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"failed to persist cfg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"clean config index arr, old-cnt:%d, new-cnt:%d"</literal></expr></argument>, <argument><expr><name>oldCnt</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>configIndexCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncNodeTimerRoutine</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ths</name><operator>-&gt;</operator><name>tmrRoutineNum</name></name><operator>++</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>tmrRoutineNum</name></name> <operator>%</operator> <literal type="number">60</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sNInfo</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"timer routines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"timer routines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// timer replicate</comment>
  <expr_stmt><expr><call><name>syncNodeReplicate</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// clean mnode index</comment>
  <if_stmt><if>if <condition>(<expr><call><name>syncNodeIsMnode</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncNodeCleanConfigIndex</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>timeNow</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ths</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncSnapshotSender</name><modifier>*</modifier></type> <name>pSender</name> <init>= <expr><call><name>syncNodeGetSnapshotSender</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pSender</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>ths</name><operator>-&gt;</operator><name>isStart</name></name> <operator>&amp;&amp;</operator> <name><name>ths</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name> <operator>&amp;&amp;</operator> <name><name>pSender</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator>
          <name>timeNow</name> <operator>-</operator> <name><name>pSender</name><operator>-&gt;</operator><name>lastSendTime</name></name> <operator>&gt;</operator> <name>SYNC_SNAP_RESEND_MS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snapshotReSend</name><argument_list>(<argument><expr><name>pSender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, do not resend: nstart%d, now:%"</literal> <name>PRId64</name> <literal type="string">", lstsend:%"</literal> <name>PRId64</name> <literal type="string">", diff:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
               <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>isStart</name></name></expr></argument>, <argument><expr><name>timeNow</name></expr></argument>, <argument><expr><name><name>pSender</name><operator>-&gt;</operator><name>lastSendTime</name></name></expr></argument>, <argument><expr><name>timeNow</name> <operator>-</operator> <name><name>pSender</name><operator>-&gt;</operator><name>lastSendTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ths</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SYNC_INDEX_INVALID</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// end timeout wal snapshot</comment>
    <if_stmt><if>if <condition>(<expr><name>timeNow</name> <operator>-</operator> <name><name>ths</name><operator>-&gt;</operator><name>snapshottingTime</name></name> <operator>&gt;</operator> <name>SYNC_DEL_WAL_MS</name> <operator>&amp;&amp;</operator>
        <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ths</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SYNC_INDEX_INVALID</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>ths</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><call><name>walEndSnapshot</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sNError</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"timer wal snapshot end error since:%s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><literal type="string">"wal snapshot end, index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ths</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ths</name><operator>-&gt;</operator><name>snapshottingIndex</name></name></expr></argument>, <argument><expr><name>SYNC_INDEX_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncNodeIsMnode</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>syncRespClean</name><argument_list>(<argument><expr><name><name>ths</name><operator>-&gt;</operator><name>pSyncRespMgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnTimeout</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncTimeout</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name><name>pRpc</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>syncLogRecvTimer</name><argument_list>(<argument><expr><name>ths</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeoutType</name></name> <operator>==</operator> <name>SYNC_TIMEOUT_PING</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ths</name><operator>-&gt;</operator><name>pingTimerLogicClockUser</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>logicClock</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>pingTimerCounter</name></name><operator>)</operator></expr>;</expr_stmt>

      <comment type="line">// syncNodePingAll(ths);</comment>
      <comment type="line">// syncNodePingPeers(ths);</comment>

      <expr_stmt><expr><call><name>syncNodeTimerRoutine</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeoutType</name></name> <operator>==</operator> <name>SYNC_TIMEOUT_ELECTION</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ths</name><operator>-&gt;</operator><name>electTimerLogicClock</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>logicClock</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>electTimerCounter</name></name><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>syncNodeElect</name><argument_list>(<argument><expr><name>ths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeoutType</name></name> <operator>==</operator> <name>SYNC_TIMEOUT_HEARTBEAT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ths</name><operator>-&gt;</operator><name>heartbeatTimerLogicClockUser</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>logicClock</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>ths</name><operator>-&gt;</operator><name>heartbeatTimerCounter</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync timer, type:replicate count:%"</literal> <name>PRIu64</name> <literal type="string">", lc-user:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
             <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>heartbeatTimerCounter</name></name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>heartbeatTimerLogicClockUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// syncNodeReplicate(ths, true);</comment>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, recv unknown timer-type:%d"</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>timeoutType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
