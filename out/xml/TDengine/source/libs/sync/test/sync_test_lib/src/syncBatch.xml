<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/test/sync_test_lib/src/syncBatch.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncBatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncTest.h"</cpp:file></cpp:include>

<comment type="line">// ---- message process SyncClientRequestBatch----</comment>

<comment type="line">// block1:</comment>
<comment type="line">// block2: SRaftMeta array</comment>
<comment type="line">// block3: rpc msg array (with pCont)</comment>

<function><type><name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>syncClientRequestBatchBuild</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier><modifier>*</modifier></type> <name>rpcMsgPArr</name></decl></parameter>, <parameter><decl><type><name>SRaftMeta</name><modifier>*</modifier></type> <name>raftArr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>arrSize</name></decl></parameter>,
                                                    <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rpcMsgPArr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>arrSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>raftMetaArrayLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRaftMeta</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>arrSize</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rpcArrayLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>arrSize</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <operator>(</operator><name>raftMetaArrayLen</name> <operator>+</operator> <name>rpcArrayLen</name><operator>)</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type>                <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncClientRequestBatch</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dataLen</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_CLIENT_REQUEST_BATCH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name> <operator>=</operator> <name>arrSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRaftMeta</name><modifier>*</modifier></type> <name>raftMetaArr</name> <init>= <expr><operator>(</operator><name>SRaftMeta</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name><modifier>*</modifier></type>   <name>msgArr</name> <init>= <expr><operator>(</operator><name>SRpcMsg</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>raftMetaArrayLen</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// init raftMetaArr</comment>
    <expr_stmt><expr><name><name>raftMetaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isWeak</name> <operator>=</operator> <name><name>raftArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isWeak</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raftMetaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seqNum</name> <operator>=</operator> <name><name>raftArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seqNum</name></expr>;</expr_stmt>

    <comment type="line">// init msgArr</comment>
    <expr_stmt><expr><name><name>msgArr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>rpcMsgPArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pMsg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncClientRequestBatch2RpcMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pSyncMsg</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pSyncMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name><name>pSyncMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncClientRequestBatchDestroy</name><parameter_list>(<parameter><decl><type><name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncClientRequestBatchDestroyDeep</name><parameter_list>(<parameter><decl><type><name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>arrSize</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>raftMetaArrayLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRaftMeta</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>arrSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>msgArr</name> <init>= <expr><operator>(</operator><name>SRpcMsg</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>raftMetaArrayLen</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>msgArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pCont</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>msgArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pCont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SRaftMeta</name><modifier>*</modifier></type> <name>syncClientRequestBatchMetaArr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pSyncMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRaftMeta</name><modifier>*</modifier></type> <name>raftMetaArr</name> <init>= <expr><operator>(</operator><name>SRaftMeta</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pSyncMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>raftMetaArr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>syncClientRequestBatchRpcMsgArr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pSyncMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>arrSize</name> <init>= <expr><name><name>pSyncMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>raftMetaArrayLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRaftMeta</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>arrSize</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>msgArr</name> <init>= <expr><operator>(</operator><name>SRpcMsg</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pSyncMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>raftMetaArrayLen</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>msgArr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>syncClientRequestBatchFromRpcMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pSyncMsg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSyncMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pSyncMsg</name></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>==</operator> <name><name>pSyncMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pSyncMsg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name><modifier>*</modifier></type> <name>syncClientRequestBatch2Json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>   <name><name>u64buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"vgId"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"msgType"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"dataLen"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"dataCount"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SRaftMeta</name><modifier>*</modifier></type> <name>metaArr</name> <init>= <expr><call><name>syncClientRequestBatchMetaArr</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRpcMsg</name><modifier>*</modifier></type>   <name>msgArr</name> <init>= <expr><call><name>syncClientRequestBatchRpcMsgArr</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pMetaArr</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"metaArr"</literal></expr></argument>, <argument><expr><name>pMetaArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"seqNum"</literal></expr></argument>, <argument><expr><name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seqNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"isWeak"</literal></expr></argument>, <argument><expr><name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isWeak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pMetaArr</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pMsgArr</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"msgArr"</literal></expr></argument>, <argument><expr><name>pMsgArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pRpcMsgJson</name> <init>= <expr><call><name>syncRpcMsg2Json</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgArr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pMsgArr</name></expr></argument>, <argument><expr><name>pRpcMsgJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>syncUtilPrintBin</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>syncUtilPrintBin2</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"data2"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"SyncClientRequestBatch"</literal></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pJson</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>syncClientRequestBatch2Str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>syncClientRequestBatch2Json</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>serialized</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>serialized</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// for debug ----------------------</comment>
<function><type><name>void</name></type> <name>syncClientRequestBatchPrint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>syncClientRequestBatch2Str</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"syncClientRequestBatchPrint | len:%d | %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncClientRequestBatchPrint2</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>syncClientRequestBatch2Str</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"syncClientRequestBatchPrint2 | len:%d | %s | %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncClientRequestBatchLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>syncClientRequestBatch2Str</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"syncClientRequestBatchLog | len:%d | %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncClientRequestBatchLog2</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncClientRequestBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>gRaftDetailLog</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>syncClientRequestBatch2Str</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sLTrace</name><argument_list>(<argument><expr><literal type="string">"syncClientRequestBatchLog2 | len:%d | %s | %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// ---- message process SyncAppendEntriesBatch----</comment>

<comment type="line">// block1: SOffsetAndContLen</comment>
<comment type="line">// block2: SOffsetAndContLen Array</comment>
<comment type="line">// block3: entry Array</comment>

<function><type><name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>syncAppendEntriesBatchBuild</name><parameter_list>(<parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>entryPArr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>arrSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>entryPArr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>arrSize</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>metaArrayLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOffsetAndContLen</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>arrSize</name></expr></init></decl>;</decl_stmt>  <comment type="line">// &lt;offset, contLen&gt;</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>entryArrayLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>  <comment type="line">// SRpcMsg pCont</comment>
    <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>entryPArr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>entryArrayLen</name> <operator>+=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <operator>(</operator><name>metaArrayLen</name> <operator>+</operator> <name>entryArrayLen</name><operator>)</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type>                <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyncAppendEntriesBatch</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dataLen</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>vgId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SYNC_APPEND_ENTRIES_BATCH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name> <operator>=</operator> <name>arrSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SOffsetAndContLen</name><modifier>*</modifier></type> <name>metaArr</name> <init>= <expr><operator>(</operator><name>SOffsetAndContLen</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>              <name>pData</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// init meta &lt;offset, contLen&gt;</comment>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>metaArrayLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>contLen</name> <operator>=</operator> <name><name>entryPArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>metaArr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>metaArr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>contLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>contLen</name> <operator>=</operator> <name><name>entryPArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// init entry array</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>contLen</name> <operator>==</operator> <name><name>entryPArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pData</name> <operator>+</operator> <name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name><name>entryPArr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pMsg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOffsetAndContLen</name><modifier>*</modifier></type> <name>syncAppendEntriesBatchMetaTableArray</name><parameter_list>(<parameter><decl><type><name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>SOffsetAndContLen</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncAppendEntriesBatchDestroy</name><parameter_list>(<parameter><decl><type><name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncAppendEntriesBatchSerialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bufLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&lt;=</operator> <name>bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncAppendEntriesBatchDeserialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SyncAppendEntriesBatch</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>syncAppendEntriesBatchSerialize2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncAppendEntriesBatchSerialize</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>syncAppendEntriesBatchDeserialize2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type>                <name>bytes</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncAppendEntriesBatchDeserialize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pMsg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncAppendEntriesBatch2RpcMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncAppendEntriesBatchSerialize</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncAppendEntriesBatchFromRpcMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>, <parameter><decl><type><name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>syncAppendEntriesBatchDeserialize</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>syncAppendEntriesBatchFromRpcMsg2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pRpcMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>syncAppendEntriesBatchDeserialize2</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pMsg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name><modifier>*</modifier></type> <name>syncAppendEntriesBatch2Json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>   <name><name>u64buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"vgId"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"msgType"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pSrcId</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pSrcId</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>   <name>pTmp</name> <init>= <expr><name>pSrcId</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name>u64</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pTmp</name></expr></argument>, <argument><expr><literal type="string">"addr_host"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pTmp</name></expr></argument>, <argument><expr><literal type="string">"addr_port"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pSrcId</name></expr></argument>, <argument><expr><literal type="string">"vgId"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"srcId"</literal></expr></argument>, <argument><expr><name>pSrcId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pDestId</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pDestId</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>   <name>pTmp</name> <init>= <expr><name>pDestId</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name>u64</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pTmp</name></expr></argument>, <argument><expr><literal type="string">"addr_host"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pTmp</name></expr></argument>, <argument><expr><literal type="string">"addr_port"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pDestId</name></expr></argument>, <argument><expr><literal type="string">"vgId"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"destId"</literal></expr></argument>, <argument><expr><name>pDestId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"term"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"prevLogIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"prevLogTerm"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"commitIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>privateTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"privateTerm"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"dataCount"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"dataLen"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>metaArrayLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOffsetAndContLen</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr></init></decl>;</decl_stmt>  <comment type="line">// &lt;offset, contLen&gt;</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>entryArrayLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>-</operator> <name>metaArrayLen</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"metaArrayLen"</literal></expr></argument>, <argument><expr><name>metaArrayLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"entryArrayLen"</literal></expr></argument>, <argument><expr><name>entryArrayLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SOffsetAndContLen</name><modifier>*</modifier></type> <name>metaArr</name> <init>= <expr><operator>(</operator><name>SOffsetAndContLen</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pMetaArr</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"metaArr"</literal></expr></argument>, <argument><expr><name>pMetaArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"contLen"</literal></expr></argument>, <argument><expr><name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pMetaArr</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pEntryArr</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"entryArr"</literal></expr></argument>, <argument><expr><name>pEntryArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SSyncRaftEntry</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>metaArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>          <name>pEntryJson</name> <init>= <expr><call><name>syncEntry2Json</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pEntryArr</name></expr></argument>, <argument><expr><name>pEntryJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>syncUtilPrintBin</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>syncUtilPrintBin2</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"data2"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"SyncAppendEntriesBatch"</literal></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pJson</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>syncAppendEntriesBatch2Str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>syncAppendEntriesBatch2Json</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>serialized</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>serialized</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// for debug ----------------------</comment>
<function><type><name>void</name></type> <name>syncAppendEntriesBatchPrint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>syncAppendEntriesBatch2Str</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"syncAppendEntriesBatchPrint | len:%d | %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncAppendEntriesBatchPrint2</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>syncAppendEntriesBatch2Str</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"syncAppendEntriesBatchPrint2 | len:%d | %s | %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncAppendEntriesBatchLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>syncAppendEntriesBatch2Str</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"syncAppendEntriesBatchLog | len:%d | %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncAppendEntriesBatchLog2</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>gRaftDetailLog</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>syncAppendEntriesBatch2Str</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sLTrace</name><argument_list>(<argument><expr><literal type="string">"syncAppendEntriesBatchLog2 | len:%d | %s | %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogSendAppendEntriesBatch</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"send sync-append-entries-batch to %s:%d, {term:%"</literal> <name>PRId64</name> <literal type="string">", pre-index:%"</literal> <name>PRId64</name> <literal type="string">", pre-term:%"</literal> <name>PRId64</name>
          <literal type="string">", pterm:%"</literal> <name>PRId64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", datalen:%d, count:%d}, %s"</literal></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>privateTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>,
          <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncLogRecvAppendEntriesBatch</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyncAppendEntriesBatch</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>host</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncUtilU642Addr</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sNTrace</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>,
          <argument><expr><literal type="string">"recv sync-append-entries-batch from %s:%d, {term:%"</literal> <name>PRId64</name> <literal type="string">", pre-index:%"</literal> <name>PRId64</name> <literal type="string">", pre-term:%"</literal> <name>PRId64</name>
          <literal type="string">", pterm:%"</literal> <name>PRId64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", datalen:%d, count:%d}, %s"</literal></expr></argument>,
          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>prevLogTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>privateTerm</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>,
          <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>dataCount</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
