<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/test/sync_test_lib/src/syncRaftLogDebug.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncTest.h"</cpp:file></cpp:include>

<function><type><name>cJSON</name><modifier>*</modifier></type> <name>logStore2Json</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>u64buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><name>SSyncLogStoreData</name><operator>*</operator><operator>)</operator><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>             <name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pSyncNode"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pWal"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>beginIndex</name> <init>= <expr><call><name>raftLogBeginIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>beginIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"beginIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>endIndex</name> <init>= <expr><call><name>raftLogEndIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"endIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><call><name>raftLogEntryCount</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"entryCount"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>raftLogWriteIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"WriteIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>raftLogIsEmpty</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"IsEmpty"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>raftLogLastIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"LastIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>raftLogLastTerm</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"LastTerm"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pEntries</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pEntries"</literal></expr></argument>, <argument><expr><name>pEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raftLogIsEmpty</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>SyncIndex</name></type> <name>i</name> <init>= <expr><name>beginIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>endIndex</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>raftLogGetEntry</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pEntries</name></expr></argument>, <argument><expr><call><name>syncEntry2Json</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>syncEntryDestory</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"SSyncLogStore"</literal></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pJson</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>logStore2Str</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>logStore2Json</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>serialized</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>serialized</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name><modifier>*</modifier></type> <name>logStoreSimple2Json</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>u64buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncLogStoreData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><name>SSyncLogStoreData</name><operator>*</operator><operator>)</operator><name><name>pLogStore</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>             <name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pSyncNode"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pWal"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>beginIndex</name> <init>= <expr><call><name>raftLogBeginIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>beginIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"beginIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SyncIndex</name></type> <name>endIndex</name> <init>= <expr><call><name>raftLogEndIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"endIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><call><name>raftLogEntryCount</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"entryCount"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>raftLogWriteIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"WriteIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>raftLogIsEmpty</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"IsEmpty"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>raftLogLastIndex</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"LastIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>raftLogLastTerm</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"LastTerm"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"SSyncLogStoreSimple"</literal></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pJson</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>logStoreSimple2Str</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>logStoreSimple2Json</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>serialized</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>serialized</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// for debug -----------------</comment>
<function><type><name>void</name></type> <name>logStorePrint</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>logStore2Str</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"logStorePrint | len:%d | %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logStorePrint2</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>logStore2Str</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"logStorePrint2 | len:%d | %s | %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logStoreLog</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>gRaftDetailLog</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>logStore2Str</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sLTrace</name><argument_list>(<argument><expr><literal type="string">"logStoreLog | len:%d | %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logStoreLog2</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>gRaftDetailLog</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>logStore2Str</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sLTrace</name><argument_list>(<argument><expr><literal type="string">"logStoreLog2 | len:%d | %s | %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// for debug -----------------</comment>
<function><type><name>void</name></type> <name>logStoreSimplePrint</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>logStoreSimple2Str</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"logStoreSimplePrint | len:%d | %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logStoreSimplePrint2</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>logStoreSimple2Str</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"logStoreSimplePrint2 | len:%d | %s | %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logStoreSimpleLog</name><parameter_list>(<parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>logStoreSimple2Str</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"logStoreSimpleLog | len:%d | %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logStoreSimpleLog2</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>SSyncLogStore</name><modifier>*</modifier></type> <name>pLogStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>gRaftDetailLog</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>logStoreSimple2Str</name><argument_list>(<argument><expr><name>pLogStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"logStoreSimpleLog2 | len:%d | %s | %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
