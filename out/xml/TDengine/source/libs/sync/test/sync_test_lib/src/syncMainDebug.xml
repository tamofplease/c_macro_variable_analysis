<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/test/sync_test_lib/src/syncMainDebug.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncTest.h"</cpp:file></cpp:include>

<function><type><name>cJSON</name><modifier>*</modifier></type> <name>syncNode2Json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>   <name><name>u64buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pSyncNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// init by SSyncInfo</comment>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"vgId"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"SRaftCfg"</literal></expr></argument>, <argument><expr><call><name>raftCfg2Json</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"raftStorePath"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>raftStorePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"configPath"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>configPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pWal"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>msgcb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"rpcClient"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>syncSendMSg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"syncSendMSg"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>msgcb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"queue"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>syncEqMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"syncEqMsg"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// init internal</comment>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pMe</name> <init>= <expr><call><name>syncUtilNodeInfo2Json</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myNodeInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"myNodeInfo"</literal></expr></argument>, <argument><expr><name>pMe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pRaftId</name> <init>= <expr><call><name>syncUtilRaftId2Json</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"myRaftId"</literal></expr></argument>, <argument><expr><name>pRaftId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"peersNum"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pPeers</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"peersNodeInfo"</literal></expr></argument>, <argument><expr><name>pPeers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pPeers</name></expr></argument>, <argument><expr><call><name>syncUtilNodeInfo2Json</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pPeersId</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"peersId"</literal></expr></argument>, <argument><expr><name>pPeersId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pPeersId</name></expr></argument>, <argument><expr><call><name>syncUtilRaftId2Json</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"replicaNum"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pReplicasId</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"replicasId"</literal></expr></argument>, <argument><expr><name>pReplicasId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pReplicasId</name></expr></argument>, <argument><expr><call><name>syncUtilRaftId2Json</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// raft algorithm</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pFsm"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"quorum"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pLaderCache</name> <init>= <expr><call><name>syncUtilRaftId2Json</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>leaderCache</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"leaderCache"</literal></expr></argument>, <argument><expr><name>pLaderCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// life cycle</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>rid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"rid"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// tla+ server vars</comment>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"state_str"</literal></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pRaftStore"</literal></expr></argument>, <argument><expr><call><name>raftStore2Json</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// tla+ candidate vars</comment>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pVotesGranted"</literal></expr></argument>, <argument><expr><call><name>voteGranted2Json</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesGranted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pVotesRespond"</literal></expr></argument>, <argument><expr><call><name>votesRespond2Json</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pVotesRespond</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// tla+ leader vars</comment>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pNextIndex"</literal></expr></argument>, <argument><expr><call><name>syncIndexMgr2Json</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNextIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pMatchIndex"</literal></expr></argument>, <argument><expr><call><name>syncIndexMgr2Json</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pMatchIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// tla+ log vars</comment>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pLogStore"</literal></expr></argument>, <argument><expr><call><name>logStore2Json</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"commitIndex"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// timer ms init</comment>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pingBaseLine"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingBaseLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"electBaseLine"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electBaseLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"hbBaseLine"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>hbBaseLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ping timer</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pPingTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pPingTimer"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pingTimerMS"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerLogicClock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pingTimerLogicClock"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerLogicClockUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pingTimerLogicClockUser"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>FpPingTimerCB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"FpPingTimerCB"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pingTimerCounter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pingTimerCounter"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// elect timer</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pElectTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pElectTimer"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"electTimerMS"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerLogicClock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"electTimerLogicClock"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>FpElectTimerCB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"FpElectTimerCB"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>electTimerCounter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"electTimerCounter"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// heartbeat timer</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pHeartbeatTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"pHeartbeatTimer"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"heartbeatTimerMS"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"heartbeatTimerLogicClock"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerLogicClockUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"heartbeatTimerLogicClockUser"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>FpHeartbeatTimerCB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"FpHeartbeatTimerCB"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>u64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>heartbeatTimerCounter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"heartbeatTimerCounter"</literal></expr></argument>, <argument><expr><name>u64buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// callback</comment>
    <comment type="line">// snprintf(u64buf, sizeof(u64buf), "%p", pSyncNode-&gt;FpOnPing);</comment>
    <comment type="line">// cJSON_AddStringToObject(pRoot, "FpOnPing", u64buf);</comment>
    <comment type="line">// snprintf(u64buf, sizeof(u64buf), "%p", pSyncNode-&gt;FpOnPingReply);</comment>
    <comment type="line">// cJSON_AddStringToObject(pRoot, "FpOnPingReply", u64buf);</comment>
    <comment type="line">// snprintf(u64buf, sizeof(u64buf), "%p", pSyncNode-&gt;FpOnRequestVote);</comment>
    <comment type="line">// cJSON_AddStringToObject(pRoot, "FpOnRequestVote", u64buf);</comment>
    <comment type="line">// snprintf(u64buf, sizeof(u64buf), "%p", pSyncNode-&gt;FpOnRequestVoteReply);</comment>
    <comment type="line">// cJSON_AddStringToObject(pRoot, "FpOnRequestVoteReply", u64buf);</comment>
    <comment type="line">// snprintf(u64buf, sizeof(u64buf), "%p", pSyncNode-&gt;FpOnAppendEntries);</comment>
    <comment type="line">// cJSON_AddStringToObject(pRoot, "FpOnAppendEntries", u64buf);</comment>
    <comment type="line">// snprintf(u64buf, sizeof(u64buf), "%p", pSyncNode-&gt;FpOnAppendEntriesReply);</comment>
    <comment type="line">// cJSON_AddStringToObject(pRoot, "FpOnAppendEntriesReply", u64buf);</comment>
    <comment type="line">// snprintf(u64buf, sizeof(u64buf), "%p", pSyncNode-&gt;FpOnTimeout);</comment>
    <comment type="line">// cJSON_AddStringToObject(pRoot, "FpOnTimeout", u64buf);</comment>

    <comment type="line">// restoreFinish</comment>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"restoreFinish"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>restoreFinish</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// snapshot senders</comment>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pSenders</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"senders"</literal></expr></argument>, <argument><expr><name>pSenders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_MAX_REPLICA</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pSenders</name></expr></argument>, <argument><expr><call><name>snapshotSender2Json</name><argument_list>(<argument><expr><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>senders</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// snapshot receivers</comment>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pReceivers</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"receiver"</literal></expr></argument>, <argument><expr><call><name>snapshotReceiver2Json</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pNewNodeReceiver</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// changing</comment>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"changing"</literal></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>changing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"SSyncNode"</literal></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pJson</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>syncNode2Str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>syncNode2Json</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>serialized</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>serialized</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>char</name><modifier>*</modifier></type> <name>syncNode2SimpleStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>s</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSnapshot</name></type> <name>snapshot</name> <init>= <expr><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>lastApplyIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>lastApplyTerm</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pFsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logLastIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogLastIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncIndex</name></type> <name>logBeginIndex</name> <init>= <expr><call><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name><operator>-&gt;</operator><name>syncLogBeginIndex</name></name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pLogStore</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
           <argument><expr><literal type="string">"vgId:%d, sync %s, tm:%"</literal> <name>PRId64</name> <literal type="string">", cmt:%"</literal> <name>PRId64</name> <literal type="string">", fst:%"</literal> <name>PRId64</name> <literal type="string">", lst:%"</literal> <name>PRId64</name> <literal type="string">", snap:%"</literal> <name>PRId64</name>
           <literal type="string">", sby:%d, "</literal>
           <literal type="string">"r-num:%d, "</literal>
           <literal type="string">"lcfg:%"</literal> <name>PRId64</name> <literal type="string">", chging:%d, rsto:%d"</literal></expr></argument>,
           <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftStore</name><operator>-&gt;</operator><name>currentTerm</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>commitIndex</name></name></expr></argument>,
           <argument><expr><name>logBeginIndex</name></expr></argument>, <argument><expr><name>logLastIndex</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>.</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>isStandBy</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>,
           <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>changing</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>restoreFinish</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ping --------------</comment>
<function><type><name>int32_t</name></type> <name>syncNodePing</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftId</name><modifier>*</modifier></type> <name>destRaftId</name></decl></parameter>, <parameter><decl><type><name>SyncPing</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>syncPingLog2</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"==syncNodePing=="</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncPing2RpcMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncRpcMsgLog2</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"==syncNodePing=="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><name>destRaftId</name></expr></argument>, <argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodePingSelf</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SyncPing</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>syncPingBuild3</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodePing</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>syncPingDestroy</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodePingPeers</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>peersNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRaftId</name><modifier>*</modifier></type>  <name>destId</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>peersId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncPing</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>syncPingBuild3</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>, <argument><expr><name>destId</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodePing</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>destId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncPingDestroy</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodePingAll</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>pSyncNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSyncNode</name><operator>-&gt;</operator><name>pRaftCfg</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRaftId</name><modifier>*</modifier></type>  <name>destId</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>replicasId</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyncPing</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>syncPingBuild3</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSyncNode</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>, <argument><expr><name>destId</name></expr></argument>, <argument><expr><name><name>pSyncNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncNodePing</name><argument_list>(<argument><expr><name>pSyncNode</name></expr></argument>, <argument><expr><name>destId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncPingDestroy</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// on message ----</comment>
<function><type><name>int32_t</name></type> <name>syncNodeOnPing</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SyncPing</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, recv sync-ping"</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SyncPingReply</name><modifier>*</modifier></type> <name>pMsgReply</name> <init>= <expr><call><name>syncPingReplyBuild3</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ths</name><operator>-&gt;</operator><name>myRaftId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>srcId</name></name></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>        <name>rpcMsg</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncPingReply2RpcMsg</name><argument_list>(<argument><expr><name>pMsgReply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
    // htonl
    SMsgHead* pHead = rpcMsg.pCont;
    pHead-&gt;contLen = htonl(pHead-&gt;contLen);
    pHead-&gt;vgId = htonl(pHead-&gt;vgId);
  */</comment>

  <expr_stmt><expr><call><name>syncNodeSendMsgById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsgReply</name><operator>-&gt;</operator><name>destId</name></name></expr></argument>, <argument><expr><name>ths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncPingReplyDestroy</name><argument_list>(<argument><expr><name>pMsgReply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncNodeOnPingReply</name><parameter_list>(<parameter><decl><type><name>SSyncNode</name><modifier>*</modifier></type> <name>ths</name></decl></parameter>, <parameter><decl><type><name>SyncPingReply</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, recv sync-ping-reply"</literal></expr></argument>, <argument><expr><name><name>ths</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
