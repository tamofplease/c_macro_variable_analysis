<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/sync/test/sync_test_lib/src/syncIO.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncIO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tdatablock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syncUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttimer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>bool</name></type>     <name>gRaftDetailLog</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>gSyncIO</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="line">// local function ------------</comment>
<function_decl><type><specifier>static</specifier> <name>SSyncIO</name> <modifier>*</modifier></type><name>syncIOCreate</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>syncIODestroy</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>syncIOStartInternal</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>syncIOStopInternal</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name>   <modifier>*</modifier></type><name>syncIOConsumerFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>syncIOProcessRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pParent</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>syncIOProcessReply</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pParent</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOAuth</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>meterId</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>spi</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>encrypt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ckey</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOStartQ</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOStopQ</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOStartPing</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOStopPing</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>syncIOTickQ</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>syncIOTickPing</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// ----------------------------</comment>

<comment type="line">// public function ------------</comment>
<function><type><name>int32_t</name></type> <name>syncIOStart</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>gSyncIO</name> <operator>=</operator> <call><name>syncIOCreate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gSyncIO</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosSeedRand</name><argument_list>(<argument><expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncIOStartInternal</name><argument_list>(<argument><expr><name>gSyncIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"syncIOStart ok, gSyncIO:%p"</literal></expr></argument>, <argument><expr><name>gSyncIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncIOStop</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncIOStopInternal</name><argument_list>(<argument><expr><name>gSyncIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>syncIODestroy</name><argument_list>(<argument><expr><name>gSyncIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncIOSendMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <block>{<block_content>
    <expr_stmt><expr><call><name>syncUtilMsgNtoH</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>logBuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"==syncIOSendMsg== %s:%d msgType:%d"</literal></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>,
             <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>syncRpcMsgLog2</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>syncUtilMsgHtoN</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>noResp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcSendRequest</name><argument_list>(<argument><expr><name><name>gSyncIO</name><operator>-&gt;</operator><name>clientRpc</name></name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncIOEqMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMsgCb</name> <modifier>*</modifier></type><name>msgcb</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>logBuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"==syncIOEqMsg== msgType:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncRpcMsgLog2</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pTemp</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pTemp</name> <operator>=</operator> <call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>pMsgQ</name> <init>= <expr><name><name>gSyncIO</name><operator>-&gt;</operator><name>pMsgQ</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name>pMsgQ</name></expr></argument>, <argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncIOQTimerStart</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncIOStartQ</name><argument_list>(<argument><expr><name>gSyncIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncIOQTimerStop</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncIOStopQ</name><argument_list>(<argument><expr><name>gSyncIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncIOPingTimerStart</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncIOStartPing</name><argument_list>(<argument><expr><name>gSyncIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>syncIOPingTimerStop</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>syncIOStopPing</name><argument_list>(<argument><expr><name>gSyncIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// local function ------------</comment>
<function><type><specifier>static</specifier> <name>SSyncIO</name> <modifier>*</modifier></type><name>syncIOCreate</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><operator>(</operator><name>SSyncIO</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncIO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>pMsgQ</name></name> <operator>=</operator> <call><name>taosOpenQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>pQset</name></name> <operator>=</operator> <call><name>taosOpenQset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosAddIntoQset</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pQset</name></name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>pMsgQ</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>inUse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>addEpIntoEpSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>myAddr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>qTimerMS</name></name> <operator>=</operator> <name>TICK_Q_TIMER_MS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>pingTimerMS</name></name> <operator>=</operator> <name>TICK_Ping_TIMER_MS</name></expr>;</expr_stmt>

  <return>return <expr><name>io</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIODestroy</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>start</name> <init>= <expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>isStart</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>start</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>serverRpc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcClose</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>serverRpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>serverRpc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>clientRpc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcClose</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>clientRpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>clientRpc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pMsgQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseQset</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pQset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOStartInternal</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosBlockSIGPIPE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// cient rpc init</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcInit</name></type> <name>rpcInit</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rpcInit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>localPort</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"SYNC-IO-CLIENT"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>cfp</name></name> <operator>=</operator> <name>syncIOProcessReply</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>idleTime</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>user</name></name> <operator>=</operator> <literal type="string">"sync-io"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name>TAOS_CONN_CLIENT</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>clientRpc</name></name> <operator>=</operator> <call><name>rpcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>clientRpc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to initialize RPC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <comment type="line">// server rpc init</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcInit</name></type> <name>rpcInit</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rpcInit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>rpcInit</name><operator>.</operator><name>localFqdn</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rpcInit</name><operator>.</operator><name>localFqdn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>localPort</name></name> <operator>=</operator> <name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"SYNC-IO-SERVER"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>cfp</name></name> <operator>=</operator> <name>syncIOProcessRequest</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>idleTime</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">1500</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name>TAOS_CONN_SERVER</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRpc</name> <init>= <expr><call><name>rpcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRpc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to start RPC server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <comment type="line">// start consumer thread</comment>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>consumerTid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>syncIOConsumerFunc</name></expr></argument>, <argument><expr><name>io</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sError</name><argument_list>(<argument><expr><literal type="string">"failed to create sync consumer thread since %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <comment type="line">// start tmr thread</comment>
  <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>timerMgr</name></name> <operator>=</operator> <call><name>taosTmrInit</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="string">"SYNC-IO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>isStart</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOStopInternal</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>isStart</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>consumerTid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>consumerTid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosTmrCleanUp</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>timerMgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>syncIOConsumerFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncIO</name>   <modifier>*</modifier></type><name>io</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name> <init>= <expr><call><name>taosAllocateQall</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name>   <modifier>*</modifier></type><name>pRpcMsg</name></decl>, <decl><type ref="prev"/><name>rpcMsg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueueInfo</name></type> <name>qinfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>numOfMsgs</name> <init>= <expr><call><name>taosReadAllQitemsFromQset</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pQset</name></name></expr></argument>, <argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"syncIOConsumerFunc %d msgs are received"</literal></expr></argument>, <argument><expr><name>numOfMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfMsgs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfMsgs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>logBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"==syncIOConsumMsg== msgType:%d"</literal></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>syncRpcMsgLog2</name><argument_list>(<argument><expr><name>logBuf</name></expr></argument>, <argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// use switch case instead of if else</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_PING</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncPing</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SyncPing</name> <modifier>*</modifier></type><name>pSyncMsg</name> <init>= <expr><call><name>syncPingFromRpcMsg2</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSyncMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncPing</name></name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncPingDestroy</name><argument_list>(<argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_PING_REPLY</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncPingReply</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SyncPingReply</name> <modifier>*</modifier></type><name>pSyncMsg</name> <init>= <expr><call><name>syncPingReplyFromRpcMsg2</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSyncMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncPingReply</name></name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncPingReplyDestroy</name><argument_list>(<argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_CLIENT_REQUEST</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncClientRequest</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncClientRequest</name></name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pRpcMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_REQUEST_VOTE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncRequestVote</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SyncRequestVote</name> <modifier>*</modifier></type><name>pSyncMsg</name> <init>= <expr><call><name>syncRequestVoteFromRpcMsg2</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSyncMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncRequestVote</name></name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncRequestVoteDestroy</name><argument_list>(<argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_REQUEST_VOTE_REPLY</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncRequestVoteReply</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SyncRequestVoteReply</name> <modifier>*</modifier></type><name>pSyncMsg</name> <init>= <expr><call><name>syncRequestVoteReplyFromRpcMsg2</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSyncMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncRequestVoteReply</name></name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncRequestVoteReplyDestroy</name><argument_list>(<argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_APPEND_ENTRIES</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncAppendEntries</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SyncAppendEntries</name> <modifier>*</modifier></type><name>pSyncMsg</name> <init>= <expr><call><name>syncAppendEntriesFromRpcMsg2</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSyncMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncAppendEntries</name></name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncAppendEntriesDestroy</name><argument_list>(<argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_APPEND_ENTRIES_REPLY</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncAppendEntriesReply</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SyncAppendEntriesReply</name> <modifier>*</modifier></type><name>pSyncMsg</name> <init>= <expr><call><name>syncAppendEntriesReplyFromRpcMsg2</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSyncMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncAppendEntriesReply</name></name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncAppendEntriesReplyDestroy</name><argument_list>(<argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_TIMEOUT</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncTimeout</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SyncTimeout</name> <modifier>*</modifier></type><name>pSyncMsg</name> <init>= <expr><call><name>syncTimeoutFromRpcMsg2</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSyncMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncTimeout</name></name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncTimeoutDestroy</name><argument_list>(<argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_SNAPSHOT_SEND</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncSnapshot</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SyncSnapshotSend</name> <modifier>*</modifier></type><name>pSyncMsg</name> <init>= <expr><call><name>syncSnapshotSendFromRpcMsg2</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSyncMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncSnapshot</name></name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncSnapshotSendDestroy</name><argument_list>(<argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_SNAPSHOT_RSP</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncSnapshotReply</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SyncSnapshotRsp</name> <modifier>*</modifier></type><name>pSyncMsg</name> <init>= <expr><call><name>syncSnapshotRspFromRpcMsg2</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSyncMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>FpOnSyncSnapshotReply</name></name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pSyncNode</name></name></expr></argument>, <argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>syncSnapshotRspDestroy</name><argument_list>(<argument><expr><name>pSyncMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"unknown msgType:%d, no operator"</literal></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosResetQitems</name><argument_list>(<argument><expr><name>qall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfMsgs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/*
            if (pRpcMsg-&gt;handle != NULL) {
              int msgSize = 32;
              memset(&amp;rpcMsg, 0, sizeof(rpcMsg));
              rpcMsg.msgType = SYNC_RESPONSE;
              rpcMsg.pCont = rpcMallocCont(msgSize);
              rpcMsg.contLen = msgSize;
              snprintf(rpcMsg.pCont, rpcMsg.contLen, "%s", "give a reply");
              rpcMsg.handle = pRpcMsg-&gt;handle;
              rpcMsg.code = 0;

              syncRpcMsgLog2((char *)"syncIOConsumerFunc rpcSendResponse --&gt; ", &amp;rpcMsg);
              rpcSendResponse(&amp;rpcMsg);
            }
      */</comment>

      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosUpdateItemSize</name><argument_list>(<argument><expr><name><name>qinfo</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name>numOfMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name>qall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncIOProcessRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pParent</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>syncUtilMsgNtoH</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>syncRpcMsgLog2</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"==syncIOProcessRequest=="</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><name>pParent</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pTemp</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pTemp</name> <operator>=</operator> <call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pMsgQ</name></name></expr></argument>, <argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncIOProcessReply</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pParent</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SYNC_COMMON_RESPONSE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sTrace</name><argument_list>(<argument><expr><literal type="string">"==syncIOProcessReply=="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>syncRpcMsgLog2</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"==syncIOProcessReply=="</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOAuth</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>meterId</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>spi</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>encrypt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ckey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// app shall retrieve the auth info based on meterID from DB or a data file</comment>
  <comment type="line">// demo code here only for simple demo</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOStartQ</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>syncIOTickQ</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>qTimerMS</name></name></expr></argument>, <argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>timerMgr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>qTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOStopQ</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosTmrStop</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>qTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>qTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOStartPing</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>syncIOTickPing</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>pingTimerMS</name></name></expr></argument>, <argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>timerMgr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>pingTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>syncIOStopPing</name><parameter_list>(<parameter><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosTmrStop</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pingTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>pingTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncIOTickQ</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><operator>(</operator><name>SSyncIO</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRaftId</name></type> <name>srcId</name></decl>, <decl><type ref="prev"/><name>destId</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>srcId</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>syncUtilAddr2U64</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>srcId</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>destId</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>syncUtilAddr2U64</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>destId</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncPingReply</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><call><name>syncPingReplyBuild2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srcId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>destId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"syncIOTickQ"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncPingReply2RpcMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pTemp</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pTemp</name> <operator>=</operator> <call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncRpcMsgLog2</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"==syncIOTickQ=="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>pMsgQ</name></name></expr></argument>, <argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncPingReplyDestroy</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>syncIOTickQ</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>qTimerMS</name></name></expr></argument>, <argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>timerMgr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>qTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncIOTickPing</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncIO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><operator>(</operator><name>SSyncIO</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRaftId</name></type> <name>srcId</name></decl>, <decl><type ref="prev"/><name>destId</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>srcId</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>syncUtilAddr2U64</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>srcId</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>destId</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>syncUtilAddr2U64</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>myAddr</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>destId</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SyncPing</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><call><name>syncPingBuild2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srcId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>destId</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"syncIOTickPing"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// SyncPing *pMsg = syncPingBuild3(&amp;srcId, &amp;destId);</comment>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncPing2RpcMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncRpcMsgLog2</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"==syncIOTickPing=="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcSendRequest</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>clientRpc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>myAddr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncPingDestroy</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>syncIOTickPing</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>pingTimerMS</name></name></expr></argument>, <argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>timerMgr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>pingTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncEntryDestory</name><parameter_list>(<parameter><decl><type><name>SSyncRaftEntry</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function></unit>
