<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/wal/src/walMeta.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"walInt.h"</cpp:file></cpp:include>

<function><type><name>bool</name> <name>FORCE_INLINE</name></type> <name>walLogExist</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>!</operator><call><name>walIsEmpty</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>walGetFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ver</name> <operator>&amp;&amp;</operator> <call><name>walGetLastVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>ver</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name> <name>FORCE_INLINE</name></type> <name>walIsEmpty</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>&lt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name><operator>)</operator></expr>;</return> <comment type="line">// [firstVer, lastVer + 1)</comment>
</block_content>}</block></function>

<function><type><name>int64_t</name> <name>FORCE_INLINE</name></type> <name>walGetFirstVer</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name> <name>FORCE_INLINE</name></type> <name>walGetSnapshotVer</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name> <name>FORCE_INLINE</name></type> <name>walGetLastVer</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name> <name>FORCE_INLINE</name></type> <name>walGetCommittedVer</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name> <name>FORCE_INLINE</name></type> <name>walGetAppliedVer</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int</name></type> <name>walBuildMetaName</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>metaVer</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/meta-ver%d"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>metaVer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int</name></type> <name>walBuildTmpMetaName</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/meta-ver.tmp"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int64_t</name></type> <name>walScanLogGetLastVer</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fileIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fileIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fileIdx</name> <operator>&lt;</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pFileInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>walBuildLogName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>fileSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open file due to %s. file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// ensure size as non-negative</comment>
  <expr_stmt><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>stepSize</name> <init>= <expr><name>WAL_SCAN_BUF_SIZE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>magic</name> <init>= <expr><name>WAL_MAGIC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>walCkHeadSz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>end</name> <init>= <expr><name>fileSize</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>capacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>readSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>firstTrial</name> <init>= <expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>&lt;</operator> <name>fileSize</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>offset</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>offsetForward</name> <init>= <expr><name>offset</name> <operator>-</operator> <name>stepSize</name> <operator>+</operator> <name>walCkHeadSz</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>offsetBackward</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>retVer</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>lastEntryBeginOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>lastEntryEndOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// check recover size</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>tsWalFsyncDataSizeLimit</name> <operator>+</operator> <name>offset</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, possibly corrupted WAL range exceeds size limit (i.e. %"</literal> <name>PRId64</name> <literal type="string">" bytes). offset:%"</literal> <name>PRId64</name>
          <literal type="string">", end:%"</literal> <name>PRId64</name> <literal type="string">", file:%s"</literal></expr></argument>,
          <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>tsWalFsyncDataSizeLimit</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// search for the valid last WAL entry, e.g. block by block</comment>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>firstTrial</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>TMIN</name><argument_list>(<argument><expr><name>fileSize</name></expr></argument>, <argument><expr><name>offsetForward</name> <operator>+</operator> <name>stepSize</name> <operator>-</operator> <name>walCkHeadSz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>
                          </then><else>: <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>offsetBackward</name> <operator>-</operator> <name>stepSize</name> <operator>+</operator> <name>walCkHeadSz</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>stepSize</name></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>firstTrial</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>offsetForward</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>offsetBackward</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>offset</name> <operator>&lt;=</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>readSize</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>capacity</name> <operator>=</operator> <name>readSize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to lseek file due to %s. offset:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>readSize</name> <operator>!=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to read file due to %s. readSize:%"</literal> <name>PRId64</name> <literal type="string">", file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>readSize</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>       <name>candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>       <name>haystack</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>     <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SWalCkHead</name><modifier>*</modifier></type> <name>logContent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>candidate</name> <operator>=</operator> <call><name>tmemmem</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name>readSize</name> <operator>-</operator> <operator>(</operator><name>haystack</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>magic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>candidate</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

      <comment type="line">// validate head</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>len</name> <init>= <expr><name>readSize</name> <operator>-</operator> <name>pos</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>walCkHeadSz</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>logContent</name> <operator>=</operator> <operator>(</operator><name>SWalCkHead</name><operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>pos</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>walValidHeadCksum</name><argument_list>(<argument><expr><name>logContent</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_CHKSUM_MISMATCH</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>wWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to validate checksum of wal entry header. offset:%"</literal> <name>PRId64</name> <literal type="string">", file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
              <argument><expr><name>offset</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>haystack</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>firstTrial</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// validate body</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><name>walCkHeadSz</name> <operator>+</operator> <name><name>logContent</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>extraSize</name> <init>= <expr><name>size</name> <operator>-</operator> <name>len</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>capacity</name> <operator>&lt;</operator> <name>readSize</name> <operator>+</operator> <name>extraSize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>capacity</name> <operator>+=</operator> <name>extraSize</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <goto>goto <name>_err</name>;</goto>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>readSize</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to lseek file due to %s. offset:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>extraSize</name> <operator>!=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>readSize</name></expr></argument>, <argument><expr><name>extraSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to read file due to %s. offset:%"</literal> <name>PRId64</name> <literal type="string">", extraSize:%"</literal> <name>PRId64</name> <literal type="string">", file:%s"</literal></expr></argument>,
                 <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>readSize</name></expr></argument>, <argument><expr><name>extraSize</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>logContent</name> <operator>=</operator> <operator>(</operator><name>SWalCkHead</name><operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>pos</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>walValidBodyCksum</name><argument_list>(<argument><expr><name>logContent</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_CHKSUM_MISMATCH</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>wWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to validate checksum of wal entry body. offset:%"</literal> <name>PRId64</name> <literal type="string">", file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
              <argument><expr><name>offset</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>haystack</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>firstTrial</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// found one</comment>
      <expr_stmt><expr><name>retVer</name> <operator>=</operator> <name><name>logContent</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastEntryBeginOffset</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>pos</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastEntryEndOffset</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>logContent</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr>;</expr_stmt>

      <comment type="line">// try next</comment>
      <expr_stmt><expr><name>haystack</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>fileSize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>firstTrial</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>firstTrial</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>firstTrial</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>retVer</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>retVer</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// truncate file</comment>
  <if_stmt><if>if <condition>(<expr><name>lastEntryEndOffset</name> <operator>!=</operator> <name>fileSize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, repair meta truncate file %s to %"</literal> <name>PRId64</name> <literal type="string">", orig size %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>,
          <argument><expr><name>lastEntryEndOffset</name></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosFtruncateFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>lastEntryEndOffset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to truncate file due to %s. file:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to fsync file due to %s. file:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>=</operator> <name>lastEntryEndOffset</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>retVer</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walRebuildFileInfoSet</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>metaLogList</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>actualLogList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>metaFileNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>metaLogList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>actualFileNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>actualLogList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// both of the lists in asc order</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>actualFileNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pLogInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>actualLogList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>metaFileNum</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pMetaInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>metaLogList</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pMetaInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pMetaInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>&lt;</operator> <name><name>pLogInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMetaInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>==</operator> <name><name>pLogInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pLogInfo</name><operator>)</operator> <operator>=</operator> <operator>*</operator><name>pMetaInfo</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>metaLogList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>actualFileNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pFileInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>actualLogList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>metaLogList</name></expr></argument>, <argument><expr><name>pFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>walAlignVersions</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>&gt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, firstVer:%"</literal> <name>PRId64</name> <literal type="string">" is larger than snapshotVer:%"</literal> <name>PRId64</name> <literal type="string">" + 1. align with it."</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
          <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>&lt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, lastVer:%"</literal> <name>PRId64</name> <literal type="string">" is less than snapshotVer:%"</literal> <name>PRId64</name> <literal type="string">". align with it."</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
          <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>&lt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name> <operator>&lt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, commitVer:%"</literal> <name>PRId64</name> <literal type="string">" is less than snapshotVer:%"</literal> <name>PRId64</name> <literal type="string">". align with it."</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
          <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name> <operator>=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name> <operator>&lt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, appliedVer:%"</literal> <name>PRId64</name> <literal type="string">" is less than snapshotVer:%"</literal> <name>PRId64</name> <literal type="string">". align with it."</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
          <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name> <operator>=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>walLogEntriesComplete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>complete</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>fileIdx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>index</name> <init>= <expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>++</operator><name>fileIdx</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pFileInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>!=</operator> <name>index</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>lastVer</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>fileIdx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>sz</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <comment type="line">// empty is regarded as complete</comment>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>complete</name> <operator>=</operator> <operator>(</operator><name>index</name> <operator>==</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>complete</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, WAL log entries incomplete in range [%"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">"], aligned with snaphotVer:%"</literal> <name>PRId64</name></expr></argument>,
           <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_INCOMPLETE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>complete</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>walCheckAndRepairMeta</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// load log files, get first/snapshot/last version info</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>logPattern</name> <init>= <expr><literal type="string">"^[0-9]+.log$"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idxPattern</name> <init>= <expr><literal type="string">"^[0-9]+.idx$"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>regex_t</name></type>     <name>logRegPattern</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>regex_t</name></type>     <name>idxRegPattern</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>logRegPattern</name></expr></argument>, <argument><expr><name>logPattern</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idxRegPattern</name></expr></argument>, <argument><expr><name>idxPattern</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdDirPtr</name></type> <name>pDir</name> <init>= <expr><call><name>taosOpenDir</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDir</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>logRegPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idxRegPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, path:%s, failed to open since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>actualLog</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalFileInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// scan log files and build new meta</comment>
  <decl_stmt><decl><type><name>TdDirEntryPtr</name></type> <name>pDirEntry</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pDirEntry</name> <operator>=</operator> <call><name>taosReadDir</name><argument_list>(<argument><expr><name>pDir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosDirEntryBaseName</name><argument_list>(<argument><expr><call><name>taosGetDirEntryName</name><argument_list>(<argument><expr><name>pDirEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>code</name> <init>= <expr><call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>logRegPattern</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SWalFileInfo</name></type> <name>fileInfo</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fileInfo</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalFileInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">".log"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fileInfo</name><operator>.</operator><name>firstVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>actualLog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>logRegPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idxRegPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>actualLog</name></expr></argument>, <argument><expr><name>compareWalFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type>     <name>metaFileNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>actualFileNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>actualLog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>firstVerPrev</name> <init>= <expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>lastVerPrev</name> <init>= <expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>updateMeta</name> <init>= <expr><operator>(</operator><name>metaFileNum</name> <operator>!=</operator> <name>actualFileNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <comment type="line">// rebuild meta of file info</comment>
  <expr_stmt><expr><call><name>walRebuildFileInfoSet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name>actualLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>actualLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>sz</name> <operator>==</operator> <name>actualFileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// scan and determine the lastVer</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>fileIdx</name> <init>= <expr><name>sz</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>--</operator><name>fileIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>          <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>       <name>fileSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pFileInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>walBuildLogName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to stat file since %s. file:%s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>lastVer</name></name> <operator>&gt;=</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>&amp;&amp;</operator> <name>fileSize</name> <operator>==</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>totSize</name> <operator>+=</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>updateMeta</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>lastVer</name> <init>= <expr><call><name>walScanLogGetLastVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastVer</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to scan wal last ver since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// remove the empty wal log, and its idx</comment>
      <expr_stmt><expr><call><name>wInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal remove empty file %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>walBuildIdxName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal remove empty file %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// remove its meta entry</comment>
      <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// update lastVer</comment>
    <expr_stmt><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>lastVer</name></name> <operator>=</operator> <name>lastVer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>totSize</name> <operator>+=</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// reset vers info and so on</comment>
  <expr_stmt><expr><name>actualFileNum</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>=</operator> <name>actualFileNum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>totSize</name></name> <operator>=</operator> <name>totSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>actualFileNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SWalFileInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>firstVer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SWalFileInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>lastVer</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>walAlignVersions</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update meta file</comment>
  <if_stmt><if>if <condition>(<expr><name>updateMeta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>walSaveMeta</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>walLogEntriesComplete</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>walReadLogHead</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pLogFile</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>SWalCkHead</name><modifier>*</modifier></type> <name>pCkHead</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pLogFile</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pLogFile</name></expr></argument>, <argument><expr><name>pCkHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walValidHeadCksum</name><argument_list>(<argument><expr><name>pCkHead</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_CHKSUM_MISMATCH</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>walCheckAndRepairIdxFile</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fileIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fileIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fileIdx</name> <operator>&lt;</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pFileInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>walBuildIdxName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fLogNameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>walBuildLogName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name>fLogNameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>fileSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to stat file due to %s. file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>lastVer</name></name> <operator>&gt;=</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>fileSize</name> <operator>==</operator> <operator>(</operator><name><name>pFileInfo</name><operator>-&gt;</operator><name>lastVer</name></name> <operator>-</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// start to repair</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>      <name>offset</name> <init>= <expr><name>fileSize</name> <operator>-</operator> <name>fileSize</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type>    <name>pLogFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type>    <name>pIdxFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWalIdxEntry</name></type> <name>idxEntry</name> <init>= <expr><block>{<expr><operator>.</operator><name>ver</name> <operator>=</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <operator>-</operator>sizeof<operator>(</operator><name>SWalCkHead</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWalCkHead</name></type>   <name>ckHead</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckHead</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ckHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ckHead</name><operator>.</operator><name>head</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>idxEntry</name><operator>.</operator><name>ver</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pIdxFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pIdxFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open file due to %s. file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pLogFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fLogNameStr</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot open file %s, since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fLogNameStr</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// determine the last valid entry end, i.e. offset</comment>
  <while>while <condition>(<expr><operator>(</operator><name>offset</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pIdxFile</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to seek file due to %s. offset:%"</literal> <name>PRId64</name> <literal type="string">", file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pIdxFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idxEntry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to read file due to %s. offset:%"</literal> <name>PRId64</name> <literal type="string">", file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>idxEntry</name><operator>.</operator><name>ver</name></name> <operator>&gt;</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>lastVer</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <operator>(</operator><name><name>idxEntry</name><operator>.</operator><name>ver</name></name> <operator>-</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>walReadLogHead</name><argument_list>(<argument><expr><name>pLogFile</name></expr></argument>, <argument><expr><name><name>idxEntry</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckHead</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to read log file since %s. file:%s, offset:%"</literal> <name>PRId64</name> <literal type="string">", idx entry ver:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
            <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fLogNameStr</name></expr></argument>, <argument><expr><name><name>idxEntry</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>idxEntry</name><operator>.</operator><name>ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>idxEntry</name><operator>.</operator><name>ver</name></name> <operator>==</operator> <name><name>ckHead</name><operator>.</operator><name>head</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>offset</name> <operator>==</operator> <operator>(</operator><name><name>idxEntry</name><operator>.</operator><name>ver</name></name> <operator>-</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// ftruncate idx file</comment>
  <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>fileSize</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosFtruncateFile</name><argument_list>(<argument><expr><name>pIdxFile</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to ftruncate file due to %s. offset:%"</literal> <name>PRId64</name> <literal type="string">", file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
             <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// rebuild idx file</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pIdxFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to seek file due to %s. offset:%"</literal> <name>PRId64</name> <literal type="string">", file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name><name>idxEntry</name><operator>.</operator><name>ver</name></name> <operator>&lt;</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>lastVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>idxEntry</name><operator>.</operator><name>ver</name></name> <operator>==</operator> <name><name>ckHead</name><operator>.</operator><name>head</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>idxEntry</name><operator>.</operator><name>ver</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>idxEntry</name><operator>.</operator><name>offset</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>ckHead</name><operator>.</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>walReadLogHead</name><argument_list>(<argument><expr><name>pLogFile</name></expr></argument>, <argument><expr><name><name>idxEntry</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckHead</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to read wal log head since %s. offset:%"</literal> <name>PRId64</name> <literal type="string">", file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><name><name>idxEntry</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>fLogNameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>wWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal idx append new entry %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>idxEntry</name><operator>.</operator><name>ver</name></name></expr></argument>, <argument><expr><name><name>idxEntry</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pIdxFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idxEntry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to append file since %s. file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pIdxFile</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, faild to fsync file since %s. file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pLogFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pIdxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pLogFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pIdxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>walCheckAndRepairIdx</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>fileIdx</name> <init>= <expr><name>sz</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>--</operator><name>fileIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walCheckAndRepairIdxFile</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to repair idx file since %s. fileIdx:%d"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>walRollFileInfo</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastVer</name></name> <operator>=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>closeTs</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// TODO: change to emplace back</comment>
  <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pNewInfo</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalFileInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNewInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pNewInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewInfo</name><operator>-&gt;</operator><name>lastVer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewInfo</name><operator>-&gt;</operator><name>createTs</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewInfo</name><operator>-&gt;</operator><name>closeTs</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewInfo</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewInfo</name><operator>-&gt;</operator><name>syncedOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pNewInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNewInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>walMetaSerialize</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pRoot</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pFiles</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pField</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRoot</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pMeta</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pFiles</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pRoot</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pFiles</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"firstVer"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"snapshotVer"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"commitVer"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"lastVer"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><name>pFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>pFiles</name></expr></argument>, <argument><expr><name>pField</name> <operator>=</operator> <call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pField</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// cjson only support int32_t or double</comment>
    <comment type="line">// string are used to prohibit the loss of precision</comment>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pField</name></expr></argument>, <argument><expr><literal type="string">"firstVer"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pField</name></expr></argument>, <argument><expr><literal type="string">"lastVer"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>createTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pField</name></expr></argument>, <argument><expr><literal type="string">"createTs"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>closeTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pField</name></expr></argument>, <argument><expr><literal type="string">"closeTs"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>fileSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pField</name></expr></argument>, <argument><expr><literal type="string">"fileSize"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>serialized</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>walMetaDeserialize</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pRoot</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pMeta</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pFiles</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pInfoJson</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pField</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pRoot</name> <operator>=</operator> <call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRoot</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pMeta</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pMeta</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pField</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"firstVer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pField</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pField</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"snapshotVer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pField</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pField</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"commitVer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pField</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pField</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="string">"lastVer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pField</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pFiles</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>pFiles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// deserialize</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayEnsureCap</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pInfoJson</name> <init>= <expr><call><name>cJSON_GetArrayItem</name><argument_list>(<argument><expr><name>pFiles</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pInfoJson</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pField</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pInfoJson</name></expr></argument>, <argument><expr><literal type="string">"firstVer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pField</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pField</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pInfoJson</name></expr></argument>, <argument><expr><literal type="string">"lastVer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pField</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastVer</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pField</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pInfoJson</name></expr></argument>, <argument><expr><literal type="string">"createTs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pField</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>createTs</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pField</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pInfoJson</name></expr></argument>, <argument><expr><literal type="string">"closeTs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pField</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>closeTs</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pField</name> <operator>=</operator> <call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pInfoJson</name></expr></argument>, <argument><expr><literal type="string">"fileSize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pField</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name> <operator>=</operator> <name>pArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>=</operator> <name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>walFindCurMetaVer</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pattern</name> <init>= <expr><literal type="string">"^meta-ver[0-9]+$"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>regex_t</name></type>     <name>walMetaRegexPattern</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>walMetaRegexPattern</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdDirPtr</name></type> <name>pDir</name> <init>= <expr><call><name>taosOpenDir</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDir</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, path:%s, failed to open since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TdDirEntryPtr</name></type> <name>pDirEntry</name></decl>;</decl_stmt>

  <comment type="line">// find existing meta-ver[x].json</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>metaVer</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pDirEntry</name> <operator>=</operator> <call><name>taosReadDir</name><argument_list>(<argument><expr><name>pDir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosDirEntryBaseName</name><argument_list>(<argument><expr><call><name>taosGetDirEntryName</name><argument_list>(<argument><expr><name>pDirEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>code</name> <init>= <expr><call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>walMetaRegexPattern</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"meta-ver%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal find current meta: %s is the meta file, ver %d"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>metaVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal find current meta: %s is not meta file"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>walMetaRegexPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>metaVer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>walUpdateSyncedOffset</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWalFileInfo</name><modifier>*</modifier></type> <name>pFileInfo</name> <init>= <expr><call><name>walGetCurFileInfo</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFileInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>syncedOffset</name></name> <operator>=</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>walSaveMeta</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>  <name>metaVer</name> <init>= <expr><call><name>walFindCurMetaVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tmpFnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>n</name></decl>;</decl_stmt>

  <comment type="line">// fsync the idx and log file at first to ensure validity of meta</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to sync idx file due to %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to sync log file due to %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update synced offset</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>walUpdateSyncedOffset</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// flush to a tmpfile</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>walBuildTmpMetaName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>tmpFnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmpFnameStr</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <literal type="string">"Buffer overflow of file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pMetaFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>tmpFnameStr</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMetaFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open file due to %s. file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmpFnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serialized</name> <init>= <expr><call><name>walMetaSerialize</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pMetaFile</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to write file due to %s. file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmpFnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pMetaFile</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to sync file due to %s. file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmpFnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pMetaFile</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to close file due to %s. file:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmpFnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// rename it</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>walBuildMetaName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>metaVer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <literal type="string">"Buffer overflow of file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosRenameFile</name><argument_list>(<argument><expr><name>tmpFnameStr</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to rename file due to %s. dest:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// delete old file</comment>
  <if_stmt><if>if <condition>(<expr><name>metaVer</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>walBuildMetaName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>metaVer</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pMetaFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>walLoadMeta</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// find existing meta file</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>metaVer</name> <init>= <expr><call><name>walFindCurMetaVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>metaVer</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal find meta ver %d"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>metaVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>walBuildMetaName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>metaVer</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// read metafile</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>fileSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>fileSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal find empty meta ver %d"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>metaVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>fileSize</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// load into fileInfoSet</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>walMetaDeserialize</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to deserialize wal meta. file:%s"</literal></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>walRemoveMeta</name><parameter_list>(<parameter><decl><type><name>SWal</name><modifier>*</modifier></type> <name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>metaVer</name> <init>= <expr><call><name>walFindCurMetaVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>metaVer</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>walBuildMetaName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>metaVer</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
