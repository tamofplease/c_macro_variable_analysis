<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/wal/src/walMgmt.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"walInt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>stop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>inited</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>seq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>refSetId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThread</name></type> <name>thread</name></decl>;</decl_stmt>
}</block></struct></type> <name>SWalMgmt</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>SWalMgmt</name></type> <name>tsWal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>seq</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>walCreateThread</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>walStopThread</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>walFreeObj</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int64_t</name></type> <name>walGetSeq</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tsWal</name><operator>.</operator><name>refSetId</name></name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><name>TSDB_MIN_VNODES</name></expr></argument>, <argument><expr><name>walFreeObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>walCreateThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to init wal module since %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>wInfo</name><argument_list>(<argument><expr><literal type="string">"wal module is initialized, rsetId:%d"</literal></expr></argument>, <argument><expr><name><name>tsWal</name><operator>.</operator><name>refSetId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>walCleanUp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>walStopThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name><name>tsWal</name><operator>.</operator><name>refSetId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wInfo</name><argument_list>(<argument><expr><literal type="string">"wal module is cleaned up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SWal</name> <modifier>*</modifier></type><name>walOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>SWalCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set config</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>fsyncSeq</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>fsyncPeriod</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>retentionSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>retentionSize</name></name> <operator>*=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>segSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>segSize</name></name> <operator>*=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>fsyncSeq</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>fsyncSeq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, path:%s, failed to create directory since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init ref</comment>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to init hash since %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open meta</comment>
  <expr_stmt><expr><call><name>walResetVer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>vers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalFileInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to init taosArray of fileInfoSet due to %s. path:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init gc</comment>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>toDeleteFiles</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalFileInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>toDeleteFiles</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to init taosArray of toDeleteFiles due to %s. path:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init status</comment>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>totSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>lastRollSeq</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// init write buffer</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>head</name><operator>.</operator><name>protoVer</name></name> <operator>=</operator> <name>WAL_PROTO_VER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>WAL_MAGIC</name></expr>;</expr_stmt>

  <comment type="line">// load meta</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>walLoadMeta</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walCheckAndRepairMeta</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot open wal since repair meta file failed"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walCheckAndRepairIdx</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot open wal since repair idx file failed"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add ref</comment>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name><name>tsWal</name><operator>.</operator><name>refSetId</name></name></expr></argument>, <argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>refId</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to add ref for Wal since %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal:%p is opened, level:%d fsyncPeriod:%d"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>level</name></name></expr></argument>,
         <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>fsyncPeriod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pWal</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pWal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walAlter</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>SWalCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pWal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>level</name></name> <operator>==</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name> <operator>&amp;&amp;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>fsyncPeriod</name></name> <operator>==</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>fsyncPeriod</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, old walLevel:%d fsync:%d, new walLevel:%d fsync:%d not change"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>level</name></name></expr></argument>,
           <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>fsyncPeriod</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>fsyncPeriod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>wInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, change old walLevel:%d fsync:%d, new walLevel:%d fsync:%d"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>level</name></name></expr></argument>,
        <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>fsyncPeriod</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>fsyncPeriod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>fsyncPeriod</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>fsyncPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>fsyncSeq</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>fsyncPeriod</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>fsyncSeq</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>fsyncSeq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walPersist</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>walSaveMeta</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>walClose</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>walSaveMeta</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>toDeleteFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>toDeleteFiles</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SWalRef</name> <modifier>*</modifier></type><name>pRef</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SWalRef</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name><name>tsWal</name><operator>.</operator><name>refSetId</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walFreeObj</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name> <init>= <expr><name>wal</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal:%p is freed"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>walNeedFsync</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>fsyncPeriod</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>level</name></name> <operator>!=</operator> <name>TAOS_WAL_FSYNC</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pWal</name><operator>-&gt;</operator><name>fsyncSeq</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walUpdateSeq</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><name>WAL_REFRESH_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>seq</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walFsyncAll</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name> <init>= <expr><call><name>taosIterateRef</name><argument_list>(<argument><expr><name><name>tsWal</name><operator>.</operator><name>refSetId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pWal</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walNeedFsync</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, do fsync, level:%d seq:%d rseq:%d"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fsyncSeq</name></name></expr></argument>,
             <argument><expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, file:%"</literal> <name>PRId64</name> <literal type="string">".log, failed to fsync since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>walGetLastFileFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pWal</name> <operator>=</operator> <call><name>taosIterateRef</name><argument_list>(<argument><expr><name><name>tsWal</name><operator>.</operator><name>refSetId</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>walThreadFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>walUpdateSeq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>walFsyncAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>walCreateThread</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thAttr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>walThreadFunc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to create wal thread since %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"wal thread is launched, thread:0x%08"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><call><name>taosGetPthreadId</name><argument_list>(<argument><expr><name><name>tsWal</name><operator>.</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walStopThread</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>tsWal</name><operator>.</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>tsWal</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsWal</name><operator>.</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"wal thread is stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
