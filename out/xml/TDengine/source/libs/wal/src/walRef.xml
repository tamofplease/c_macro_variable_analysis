<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/wal/src/walRef.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"walInt.h"</cpp:file></cpp:include>

<function><type><name>SWalRef</name> <modifier>*</modifier></type><name>walOpenRef</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWalRef</name> <modifier>*</modifier></type><name>pRef</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalRef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRef</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pRef</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRef</name><operator>-&gt;</operator><name>refFile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRef</name><operator>-&gt;</operator><name>pWal</name></name> <operator>=</operator> <name>pWal</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRef</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRef</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>walCloseRef</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>refId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWalRef</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRef</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ppRef</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SWalRef</name> <modifier>*</modifier></type><name>pRef</name> <init>= <expr><operator>*</operator><name>ppRef</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRef</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal close ref %"</literal> <name>PRId64</name> <literal type="string">", refId %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name></expr></argument>, <argument><expr><name><name>pRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal close ref null, refId %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walRefVer</name><parameter_list>(<parameter><decl><type><name>SWalRef</name> <modifier>*</modifier></type><name>pRef</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name> <init>= <expr><name><name>pRef</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal ref version %"</literal> <name>PRId64</name> <literal type="string">", refId %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name><name>pRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name> <operator>!=</operator> <name>ver</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ver</name> <argument_list type="generic">&lt; <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>||</operator> <name>ver</name></expr></argument> &gt;</argument_list></name> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_INVALID_VER</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
    <comment type="line">// bsearch in fileSet</comment>
    <decl_stmt><decl><type><name>SWalFileInfo</name></type> <name>tmpInfo</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tmpInfo</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SWalFileInfo</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpInfo</name></expr></argument>, <argument><expr><name>compareWalFileInfo</name></expr></argument>, <argument><expr><name>TD_LE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRet</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRef</name><operator>-&gt;</operator><name>refFile</name></name> <operator>=</operator> <name><name>pRet</name><operator>-&gt;</operator><name>firstVer</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<function><type><name>void</name></type> <name>walUnrefVer</name><parameter_list>(<parameter><decl><type><name>SWalRef</name> <modifier>*</modifier></type><name>pRef</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRef</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRef</name><operator>-&gt;</operator><name>refFile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SWalRef</name> <modifier>*</modifier></type><name>walRefCommittedVer</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWalRef</name> <modifier>*</modifier></type><name>pRef</name> <init>= <expr><call><name>walOpenRef</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRef</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ver</name> <init>= <expr><call><name>walGetCommittedVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <comment type="line">// bsearch in fileSet</comment>
  <decl_stmt><decl><type><name>SWalFileInfo</name></type> <name>tmpInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tmpInfo</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWalFileInfo</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpInfo</name></expr></argument>, <argument><expr><name>compareWalFileInfo</name></expr></argument>, <argument><expr><name>TD_LE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRet</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRef</name><operator>-&gt;</operator><name>refFile</name></name> <operator>=</operator> <name><name>pRet</name><operator>-&gt;</operator><name>firstVer</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRef</name></expr>;</return>
</block_content>}</block></function>
</unit>
