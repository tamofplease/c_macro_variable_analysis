<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/wal/src/walRead.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"walInt.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>walFetchHeadNew</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pRead</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>fetchVer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>walFetchBodyNew</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pRead</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>walSkipFetchBodyNew</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pRead</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>SWalReader</name> <modifier>*</modifier></type><name>walOpenReader</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>SWalFilterCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pReader</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name></name> <operator>=</operator> <name>pWal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>readerId</name></name> <operator>=</operator> <call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pLogFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curFileFirstVer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <operator>*</operator><name>cond</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>scanUncommited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>scanNotApplied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>scanMeta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>enableRef</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*if (pReader-&gt;cond.enableRef) {*/</comment>
  <comment type="block">/* taosHashPut(pWal-&gt;pRefHash, &amp;pReader-&gt;readerId, sizeof(int64_t), &amp;pReader, sizeof(void *));*/</comment>
  <comment type="block">/*}*/</comment>

  <return>return <expr><name>pReader</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>walCloseReader</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*if (pReader-&gt;cond.enableRef) {*/</comment>
  <comment type="block">/*taosHashRemove(pReader-&gt;pWal-&gt;pRefHash, &amp;pReader-&gt;readerId, sizeof(int64_t));*/</comment>
  <comment type="block">/*}*/</comment>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walNextValidMsg</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>fetchVer</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>curVersion</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>lastVer</name> <init>= <expr><call><name>walGetLastVer</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>committedVer</name> <init>= <expr><call><name>walGetCommittedVer</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>appliedVer</name> <init>= <expr><call><name>walGetAppliedVer</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>endVer</name> <init>= <expr><ternary><condition><expr><name><name>pReader</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>scanUncommited</name></name></expr> ?</condition><then> <expr><name>lastVer</name></expr> </then><else>: <expr><name>committedVer</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>endVer</name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>appliedVer</name></expr></argument>, <argument><expr><name>endVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal start to fetch, index:%"</literal> <name>PRId64</name> <literal type="string">", last index:%"</literal> <name>PRId64</name> <literal type="string">" commit index:%"</literal> <name>PRId64</name>
         <literal type="string">", applied index:%"</literal> <name>PRId64</name> <literal type="string">", end index:%"</literal> <name>PRId64</name></expr></argument>,
         <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fetchVer</name></expr></argument>, <argument><expr><name>lastVer</name></expr></argument>, <argument><expr><name>committedVer</name></expr></argument>, <argument><expr><name>appliedVer</name></expr></argument>, <argument><expr><name>endVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curStopped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>fetchVer</name> <operator>&lt;=</operator> <name>endVer</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walFetchHeadNew</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>fetchVer</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_VND_SUBMIT</name> <operator>||</operator>
        <operator>(</operator><call><name>IS_META_MSG</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>scanMeta</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>walFetchBodyNew</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>walSkipFetchBodyNew</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>fetchVer</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fetchVer</name> <operator>==</operator> <name><name>pReader</name><operator>-&gt;</operator><name>curVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curStopped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>walReadSeekFilePos</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>fileFirstVer</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pIdxTFile</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pLogTFile</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// seek position</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>ver</name> <operator>-</operator> <name>fileFirstVer</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pIdxTFile</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to seek idx file, index:%"</literal> <name>PRId64</name> <literal type="string">", pos:%"</literal> <name>PRId64</name> <literal type="string">", since %s"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SWalIdxEntry</name></type> <name>entry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name>pIdxTFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to read idx file, since %s"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, read idx file incompletely, read bytes %"</literal> <name>PRId64</name> <literal type="string">", bytes should be %ld"</literal></expr></argument>,
             <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>ver</name></name> <operator>==</operator> <name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pLogTFile</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to seek log file, index:%"</literal> <name>PRId64</name> <literal type="string">", pos:%"</literal> <name>PRId64</name> <literal type="string">", since %s"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name>ver</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>walReadChangeFile</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>fileFirstVer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>walBuildLogName</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><name>fileFirstVer</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pLogFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot open file %s, since %s"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pLogFile</name></name> <operator>=</operator> <name>pLogFile</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>walBuildIdxName</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><name>fileFirstVer</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pIdxFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pIdxFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot open file %s, since %s"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>=</operator> <name>pIdxFile</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curFileFirstVer</name></name> <operator>=</operator> <name>fileFirstVer</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walReadSeekVerImpl</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// bsearch in fileSet</comment>
  <decl_stmt><decl><type><name>SWalFileInfo</name></type> <name>tmpInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tmpInfo</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWalFileInfo</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpInfo</name></expr></argument>, <argument><expr><name>compareWalFileInfo</name></expr></argument>, <argument><expr><name>TD_LE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRet</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"failed to find WAL log file with ver:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_INVALID_VER</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>curFileFirstVer</name></name> <operator>!=</operator> <name><name>pRet</name><operator>-&gt;</operator><name>firstVer</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// error code was set inner</comment>
    <if_stmt><if>if <condition>(<expr><call><name>walReadChangeFile</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pRet</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// error code was set inner</comment>
  <if_stmt><if>if <condition>(<expr><call><name>walReadSeekFilePos</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pRet</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal version reset from %"</literal> <name>PRId64</name> <literal type="string">"(invalid:%d) to %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
         <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>curVersion</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>curInvalid</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walReadSeekVer</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>&amp;&amp;</operator> <name>ver</name> <operator>==</operator> <name><name>pReader</name><operator>-&gt;</operator><name>curVersion</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal index:%"</literal> <name>PRId64</name> <literal type="string">" match, no need to reset"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>||</operator> <name>ver</name> <operator>&lt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, invalid index:%"</literal> <name>PRId64</name> <literal type="string">", first index:%"</literal> <name>PRId64</name> <literal type="string">", last index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name>ver</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&lt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr>)</condition> <block>{<block_content>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walReadSeekVerImpl</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>walSetReaderCapacity</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pRead</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>walFetchHeadNew</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pRead</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>fetchVer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>contLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>seeked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal starts to fetch head, index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fetchVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>||</operator> <name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>!=</operator> <name>fetchVer</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walReadSeekVer</name><argument_list>(<argument><expr><name>pRead</name></expr></argument>, <argument><expr><name>fetchVer</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>=</operator> <name>fetchVer</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>seeked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>contLen</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>contLen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>seeked</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>walReadSeekVerImpl</name><argument_list>(<argument><expr><name>pRead</name></expr></argument>, <argument><expr><name>fetchVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>seeked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>walFetchBodyNew</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pRead</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWalCont</name> <modifier>*</modifier></type><name>pReadHead</name> <init>= <expr><operator>&amp;</operator><name><name>pRead</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>ver</name> <init>= <expr><name><name>pReadHead</name><operator>-&gt;</operator><name>version</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal starts to fetch body, index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRead</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;</operator> <name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SWalCkHead</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>SWalCkHead</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>pHead</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pReadHead</name> <operator>=</operator> <operator>&amp;</operator><name><name>pRead</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name> <operator>!=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><name><name>pReadHead</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal fetch body error:%"</literal> <name>PRId64</name> <literal type="string">", read request index:%"</literal> <name>PRId64</name> <literal type="string">", since %s"</literal></expr></argument>,
             <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal fetch body error:%"</literal> <name>PRId64</name> <literal type="string">", read request index:%"</literal> <name>PRId64</name> <literal type="string">", since file corrupted"</literal></expr></argument>,
             <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReadHead</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>ver</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal fetch body error:%"</literal> <name>PRId64</name> <literal type="string">", read request index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walValidBodyCksum</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal fetch body error:%"</literal> <name>PRId64</name> <literal type="string">", since body checksum not passed"</literal></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, index:%"</literal> <name>PRId64</name> <literal type="string">" is fetched, cursor advance"</literal></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>=</operator> <name>ver</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>walSkipFetchBodyNew</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pRead</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>code</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>==</operator> <name><name>pRead</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, version advance to %"</literal> <name>PRId64</name> <literal type="string">", skip fetch"</literal></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walFetchHead</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pRead</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>SWalCkHead</name> <modifier>*</modifier></type><name>pHead</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>contLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>seeked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d try to fetch ver %"</literal> <name>PRId64</name> <literal type="string">", first ver:%"</literal> <name>PRId64</name> <literal type="string">", commit ver:%"</literal> <name>PRId64</name> <literal type="string">", last ver:%"</literal> <name>PRId64</name>
         <literal type="string">", applied ver:%"</literal> <name>PRId64</name></expr></argument>,
         <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>,
         <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TODO: valid ver</comment>
  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;</operator> <name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>||</operator> <name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>!=</operator> <name>ver</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walReadSeekVer</name><argument_list>(<argument><expr><name>pRead</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>seeked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>contLen</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><name>pHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>contLen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>seeked</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>walReadSeekVerImpl</name><argument_list>(<argument><expr><name>pRead</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>seeked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walValidHeadCksum</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, unexpected wal log index:%"</literal> <name>PRId64</name> <literal type="string">", since head checksum not passed"</literal></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walSkipFetchBody</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pRead</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWalCkHead</name> <modifier>*</modifier></type><name>pHead</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>code</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d skip fetch body %"</literal> <name>PRId64</name> <literal type="string">", first ver:%"</literal> <name>PRId64</name> <literal type="string">", commit ver:%"</literal> <name>PRId64</name> <literal type="string">", last ver:%"</literal> <name>PRId64</name>
         <literal type="string">", applied ver:%"</literal> <name>PRId64</name></expr></argument>,
         <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name></expr></argument>,
         <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>==</operator> <name><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walFetchBody</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pRead</name></decl></parameter>, <parameter><decl><type><name>SWalCkHead</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppHead</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWalCont</name> <modifier>*</modifier></type><name>pReadHead</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppHead</name><operator>)</operator><operator>-&gt;</operator><name>head</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>ver</name> <init>= <expr><name><name>pReadHead</name><operator>-&gt;</operator><name>version</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d fetch body %"</literal> <name>PRId64</name> <literal type="string">", first ver:%"</literal> <name>PRId64</name> <literal type="string">", commit ver:%"</literal> <name>PRId64</name> <literal type="string">", last ver:%"</literal> <name>PRId64</name>
         <literal type="string">", applied ver:%"</literal> <name>PRId64</name></expr></argument>,
         <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>,
         <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRead</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;</operator> <name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SWalCkHead</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>SWalCkHead</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><operator>*</operator><name>ppHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppHead</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pReadHead</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppHead</name><operator>)</operator><operator>-&gt;</operator><name>head</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name> <operator>!=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><name><name>pReadHead</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReadHead</name><operator>-&gt;</operator><name>bodyLen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal fetch body error:%"</literal> <name>PRId64</name> <literal type="string">", read request index:%"</literal> <name>PRId64</name> <literal type="string">", since %s"</literal></expr></argument>,
             <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pReadHead</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal fetch body error:%"</literal> <name>PRId64</name> <literal type="string">", read request index:%"</literal> <name>PRId64</name> <literal type="string">", since file corrupted"</literal></expr></argument>,
             <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pReadHead</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReadHead</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>ver</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal fetch body error, index:%"</literal> <name>PRId64</name> <literal type="string">", read request index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name><name>pReadHead</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walValidBodyCksum</name><argument_list>(<argument><expr><operator>*</operator><name>ppHead</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal fetch body error, index:%"</literal> <name>PRId64</name> <literal type="string">", since body checksum not passed"</literal></expr></argument>, <argument><expr><name><name>pRead</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRead</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>=</operator> <name>ver</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walReadVer</name><parameter_list>(<parameter><decl><type><name>SWalReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal start to read index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>contLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>seeked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walIsEmpty</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>||</operator> <name>ver</name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, invalid index:%"</literal> <name>PRId64</name> <literal type="string">", first index:%"</literal> <name>PRId64</name> <literal type="string">", last index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name>ver</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_LOG_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>||</operator> <name><name>pReader</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>!=</operator> <name>ver</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walReadSeekVer</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, unexpected wal log, index:%"</literal> <name>PRId64</name> <literal type="string">", since %s"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>seeked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>contLen</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>contLen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>seeked</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>walReadSeekVerImpl</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>seeked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to read WAL record head, index:%"</literal> <name>PRId64</name> <literal type="string">", from log file since %s"</literal></expr></argument>,
             <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walValidHeadCksum</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, unexpected wal log, index:%"</literal> <name>PRId64</name> <literal type="string">", since head checksum not passed"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SWalCkHead</name> <modifier>*</modifier></type><name>ptr</name> <init>=
        <expr><operator>(</operator><name>SWalCkHead</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>contLen</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
      <name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to read WAL record body, index:%"</literal> <name>PRId64</name> <literal type="string">", from log file since %s"</literal></expr></argument>,
           <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>ver</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, unexpected wal log, index:%"</literal> <name>PRId64</name> <literal type="string">", read request index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walValidBodyCksum</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, unexpected wal log, index:%"</literal> <name>PRId64</name> <literal type="string">", since body checksum not passed"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>readCkSum</name> <init>= <expr><call><name>walCalcBodyCksum</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>bodyLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>logCkSum</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>cksumBody</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"checksum written into log:%u, checksum calculated:%u"</literal></expr></argument>, <argument><expr><name>logCkSum</name></expr></argument>, <argument><expr><name>readCkSum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>curVersion</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
