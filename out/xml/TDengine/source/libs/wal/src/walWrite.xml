<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/wal/src/walWrite.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tchecksum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"walInt.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>walRestoreFromSnapshot</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>wInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, restore from snapshot, version %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SWalRef</name> <modifier>*</modifier></type><name>pRef</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SWalRef</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name> <operator>&lt;=</operator> <name>ver</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>fileSetSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fileSetSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SWalFileInfo</name> <modifier>*</modifier></type><name>pFileInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>          <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>walBuildLogName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, restore from snapshot, cannot remove file %s since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>wInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, restore from snapshot, remove file %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>walBuildIdxName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot remove file %s since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>wInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, restore from snapshot, remove file %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>walRemoveMeta</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>totSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>lastRollSeq</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <name>ver</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>verInSnapshotting</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walApplyVer</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO: error check</comment>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>appliedVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walCommit</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name> <operator>&gt;=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name> <operator>&lt;=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&lt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_INVALID_VER</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walRollback</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal rollback for version %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>||</operator> <name>ver</name> <operator>&lt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>commitVer</name></name> <operator>||</operator> <name>ver</name> <operator>&lt;=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_INVALID_VER</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// find correct file</comment>
  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&lt;</operator> <call><name>walGetLastFileFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// change current files</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walChangeWrite</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// delete files in descending order</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>fileSetSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>fileSetSize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>walBuildLogName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SWalFileInfo</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>firstVer</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal remove file %s for rollback"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>walBuildIdxName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SWalFileInfo</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>firstVer</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal remove file %s for rollback"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// pop from fileInfoSet</comment>
    <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>walBuildIdxName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><call><name>walGetCurFileFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pIdxFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_APPEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pIdxFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>idxOff</name> <init>= <expr><call><name>walGetVerIdxOffset</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pIdxFile</name></expr></argument>, <argument><expr><name>idxOff</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// read idx file and get log file pos</comment>
  <decl_stmt><decl><type><name>SWalIdxEntry</name></type> <name>entry</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pIdxFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>ver</name></name> <operator>==</operator> <name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>walBuildLogName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><call><name>walGetCurFileFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pLogFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_APPEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal truncate file %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO</comment>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pLogFile</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO</comment>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// validate offset</comment>
  <decl_stmt><decl><type><name>SWalCkHead</name></type> <name>head</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosValidFile</name><argument_list>(<argument><expr><name>pLogFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pLogFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walValidHeadCksum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>head</name><operator>.</operator><name>head</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>ver</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// truncate old files</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosFtruncateFile</name><argument_list>(<argument><expr><name>pLogFile</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosFtruncateFile</name><argument_list>(<argument><expr><name>pIdxFile</name></expr></argument>, <argument><expr><name>idxOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>=</operator> <name>ver</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>&lt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>==</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SWalFileInfo</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>lastVer</name> <operator>=</operator> <name>ver</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SWalFileInfo</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>fileSize</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pIdxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pLogFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walSaveMeta</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to save meta since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// unlock</comment>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>walCheckAndRoll</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walRollImpl</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>passed</name> <init>= <expr><call><name>walGetSeq</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pWal</name><operator>-&gt;</operator><name>lastRollSeq</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>rollPeriod</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>rollPeriod</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>passed</name> <operator>&gt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>rollPeriod</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walRollImpl</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>segSize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>segSize</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>walGetLastFileSize</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>segSize</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walRollImpl</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walGetLastFileCachedSize</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>tsWalFsyncDataSizeLimit</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walSaveMeta</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walBeginSnapshot</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>verInSnapshotting</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal begin snapshot for version %"</literal> <name>PRId64</name> <literal type="string">", first ver %"</literal> <name>PRId64</name> <literal type="string">", last ver %"</literal> <name>PRId64</name></expr></argument>,
         <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check file rolling</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>retentionPeriod</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walGetLastFileSize</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>walRollImpl</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to roll wal files since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walEndSnapshot</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ver</name> <init>= <expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>verInSnapshotting</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal end snapshot for version %"</literal> <name>PRId64</name> <literal type="string">", first ver %"</literal> <name>PRId64</name> <literal type="string">", last ver %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
         <argument><expr><name>ver</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>snapshotVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ts</name> <init>= <expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pRefHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SWalRef</name> <modifier>*</modifier></type><name>pRef</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SWalRef</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal found ref %"</literal> <name>PRId64</name> <literal type="string">", refId %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name></expr></argument>, <argument><expr><name><name>pRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int</name></type>          <name>deleteCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>      <name>newTotSize</name> <init>= <expr><name><name>pWal</name><operator>-&gt;</operator><name>totSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWalFileInfo</name></type> <name>tmp</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <comment type="line">// find files safe to delete</comment>
  <decl_stmt><decl><type><name>SWalFileInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>compareWalFileInfo</name></expr></argument>, <argument><expr><name>TD_LE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SWalFileInfo</name> <modifier>*</modifier></type><name>pLastFileInfo</name> <init>= <expr><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal search found file info: first:%"</literal> <name>PRId64</name> <literal type="string">" last:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>,
           <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>lastVer</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pInfo</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal remove advance one file: first:%"</literal> <name>PRId64</name> <literal type="string">" last:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>,
             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>&lt;=</operator> <name>pLastFileInfo</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal end remove for first:%"</literal> <name>PRId64</name> <literal type="string">" last:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>,
             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal no remove"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// iterate files, until the searched result</comment>
    <for>for <control>(<init><decl><type><name>SWalFileInfo</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>pInfo</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal check remove file %"</literal> <name>PRId64</name> <literal type="string">"(file size %"</literal> <name>PRId64</name> <literal type="string">" close ts %"</literal> <name>PRId64</name>
             <literal type="string">"), new tot size %"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>fileSize</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>closeTs</name></name></expr></argument>, <argument><expr><name>newTotSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>retentionSize</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>retentionSize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>newTotSize</name> <operator>&gt;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>retentionSize</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>
          <operator>(</operator><operator>(</operator><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>retentionPeriod</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
           <operator>(</operator><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>retentionPeriod</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>closeTs</name></name> <operator>+</operator> <name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>retentionPeriod</name></name> <operator>&gt;</operator> <name>ts</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// delete according to file size or close time</comment>
        <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, check pass"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>deleteCnt</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>newTotSize</name> <operator>-=</operator> <name><name>iter</name><operator>-&gt;</operator><name>fileSize</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>toDeleteFiles</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, check not pass"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  <label><name>UPDATE_META</name>:</label>
    <comment type="line">// make new array, remove files</comment>
    <expr_stmt><expr><call><name>taosArrayPopFrontBatch</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><name>deleteCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SWalFileInfo</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>firstVer</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>totSize</name></name> <operator>=</operator> <name>newTotSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>verInSnapshotting</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// save snapshot ver, commit ver</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walSaveMeta</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// delete files</comment>
  <expr_stmt><expr><name>deleteCnt</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>toDeleteFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal should delete %d files"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>deleteCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>deleteCnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>toDeleteFiles</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>walBuildLogName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal remove file %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to remove log file %s due to %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>END</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>walBuildIdxName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>firstVer</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal remove file %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>toDeleteFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>END</name>:</label>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walRollImpl</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>END</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>END</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pIdxFile</name></decl>, <decl><type ref="prev"/><name>pLogFile</name></decl>;</decl_stmt>
  <comment type="line">// create new file</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>newFileFirstVer</name> <init>= <expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fnameStr</name><index>[<expr><name>WAL_FILE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>walBuildIdxName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>newFileFirstVer</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pIdxFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pIdxFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>walBuildLogName</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>newFileFirstVer</name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pLogFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fnameStr</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal create new file for write:%s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fnameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// error code was set inner</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walRollFileInfo</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// switch file</comment>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>=</operator> <name>pIdxFile</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name> <operator>=</operator> <name>pLogFile</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>fileInfoSet</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>lastRollSeq</name></name> <operator>=</operator> <call><name>walGetSeq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walSaveMeta</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to save meta since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>END</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>walWriteIndex</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWalIdxEntry</name></type>  <name>entry</name> <init>= <expr><block>{<expr><operator>.</operator><name>ver</name> <operator>=</operator> <name>ver</name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name>offset</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWalFileInfo</name> <modifier>*</modifier></type><name>pFileInfo</name> <init>= <expr><call><name>walGetCurFileInfo</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pFileInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>idxOffset</name> <init>= <expr><operator>(</operator><name><name>entry</name><operator>.</operator><name>ver</name></name> <operator>-</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, write index, index:%"</literal> <name>PRId64</name> <literal type="string">", offset:%"</literal> <name>PRId64</name> <literal type="string">", at %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
         <argument><expr><name>idxOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to write idx entry due to %s. ver:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// check alignment of idx entries</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>endOffset</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>endOffset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wFatal</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to seek end of idxfile due to %s. ver:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>endOffset</name> <operator>==</operator> <name>idxOffset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <literal type="string">"Offset of idx entries misaligned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>walWriteImpl</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>SWalSyncInfo</name></type> <name>syncMeta</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>body</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bodyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>       <name>offset</name> <init>= <expr><call><name>walGetCurFileOffset</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWalFileInfo</name> <modifier>*</modifier></type><name>pFileInfo</name> <init>= <expr><call><name>walGetCurFileInfo</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pFileInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>head</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>head</name><operator>.</operator><name>bodyLen</name></name> <operator>=</operator> <name>bodyLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>head</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>head</name><operator>.</operator><name>ingestTs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// sync info for sync module</comment>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>head</name><operator>.</operator><name>syncMeta</name></name> <operator>=</operator> <name>syncMeta</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>cksumHead</name></name> <operator>=</operator> <call><name>walCalcHeadCksum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>cksumBody</name></name> <operator>=</operator> <call><name>walCalcBodyCksum</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>bodyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wal write log %"</literal> <name>PRId64</name> <literal type="string">", msgType: %s, cksum head %u cksum body %u"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
         <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>cksumHead</name></name></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name><operator>.</operator><name>cksumBody</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walWriteIndex</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>writeHead</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, file:%"</literal> <name>PRId64</name> <literal type="string">".log, failed to write since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>walGetLastFileFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>body</name></expr></argument>, <argument><expr><name>bodyLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>bodyLen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, file:%"</literal> <name>PRId64</name> <literal type="string">".log, failed to write since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>walGetLastFileFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set status</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>firstVer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWal</name><operator>-&gt;</operator><name>totSize</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>bodyLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>lastVer</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFileInfo</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>bodyLen</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>END</name>:</label>
  <comment type="line">// recover in a reverse order</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosFtruncateFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wFatal</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to ftruncate logfile to offset:%"</literal> <name>PRId64</name> <literal type="string">" during recovery due to %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name>offset</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"failed to recover from error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>idxOffset</name> <init>= <expr><operator>(</operator><name>index</name> <operator>-</operator> <name><name>pFileInfo</name><operator>-&gt;</operator><name>firstVer</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SWalIdxEntry</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosFtruncateFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></argument>, <argument><expr><name>idxOffset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wFatal</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to ftruncate idxfile to offset:%"</literal> <name>PRId64</name> <literal type="string">"during recovery due to %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
           <argument><expr><name>idxOffset</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"failed to recover from error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>walAppendLog</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>SWalSyncInfo</name></type> <name>syncMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>body</name></decl></parameter>,
                     <parameter><decl><type><name>int32_t</name></type> <name>bodyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_INVALID_VER</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walCheckAndRoll</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walInitWriteFile</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walWriteImpl</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><name>syncMeta</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>bodyLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walWriteWithSyncInfo</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>SWalSyncInfo</name></type> <name>syncMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>body</name></decl></parameter>,
                             <parameter><decl><type><name>int32_t</name></type> <name>bodyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// concurrency control:</comment>
  <comment type="line">// if logs are write with assigned index,</comment>
  <comment type="line">// smaller index must be write before larger one</comment>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <name><name>pWal</name><operator>-&gt;</operator><name>vers</name><operator>.</operator><name>lastVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_WAL_INVALID_VER</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walCheckAndRoll</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walInitWriteFile</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>writeCur</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walWriteImpl</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><name>syncMeta</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>bodyLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWal</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>walWrite</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>body</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bodyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWalSyncInfo</name></type> <name>syncMeta</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>isWeek</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>seqNum</name> <operator>=</operator> <name>UINT64_MAX</name></expr>,
      <expr><operator>.</operator><name>term</name> <operator>=</operator> <name>UINT64_MAX</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>walWriteWithSyncInfo</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>msgType</name></expr></argument>, <argument><expr><name>syncMeta</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>bodyLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>walFsync</name><parameter_list>(<parameter><decl><type><name>SWal</name> <modifier>*</modifier></type><name>pWal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forceFsync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>forceFsync</name> <operator>||</operator> <operator>(</operator><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>level</name></name> <operator>==</operator> <name>TAOS_WAL_FSYNC</name> <operator>&amp;&amp;</operator> <name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>fsyncPeriod</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, fileId:%"</literal> <name>PRId64</name> <literal type="string">".idx, do fsync"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>walGetCurFileFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pIdxFile</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, file:%"</literal> <name>PRId64</name> <literal type="string">".idx, fsync failed since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>walGetCurFileFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>wTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, fileId:%"</literal> <name>PRId64</name> <literal type="string">".log, do fsync"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>walGetCurFileFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>pLogFile</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, file:%"</literal> <name>PRId64</name> <literal type="string">".log, fsync failed since %s"</literal></expr></argument>, <argument><expr><name><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>walGetCurFileFirstVer</name><argument_list>(<argument><expr><name>pWal</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
