<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/nodes/src/nodesToSQLFuncs.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmdnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodesUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operatorTypeStr</name><parameter_list>(<parameter><decl><type><name>EOperatorType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OP_TYPE_ADD</name></expr>:</case>
      <return>return <expr><literal type="string">"+"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_SUB</name></expr>:</case>
      <return>return <expr><literal type="string">"-"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_MULTI</name></expr>:</case>
      <return>return <expr><literal type="string">"*"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_DIV</name></expr>:</case>
      <return>return <expr><literal type="string">"/"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_REM</name></expr>:</case>
      <return>return <expr><literal type="string">"%"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_MINUS</name></expr>:</case>
      <return>return <expr><literal type="string">"-"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_BIT_AND</name></expr>:</case>
      <return>return <expr><literal type="string">"&amp;"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_BIT_OR</name></expr>:</case>
      <return>return <expr><literal type="string">"|"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_GREATER_THAN</name></expr>:</case>
      <return>return <expr><literal type="string">"&gt;"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_GREATER_EQUAL</name></expr>:</case>
      <return>return <expr><literal type="string">"&gt;="</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_LOWER_THAN</name></expr>:</case>
      <return>return <expr><literal type="string">"&lt;"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_LOWER_EQUAL</name></expr>:</case>
      <return>return <expr><literal type="string">"&lt;="</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_EQUAL</name></expr>:</case>
      <return>return <expr><literal type="string">"="</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_NOT_EQUAL</name></expr>:</case>
      <return>return <expr><literal type="string">"&lt;&gt;"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_IN</name></expr>:</case>
      <return>return <expr><literal type="string">"IN"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_NOT_IN</name></expr>:</case>
      <return>return <expr><literal type="string">"NOT IN"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_LIKE</name></expr>:</case>
      <return>return <expr><literal type="string">"LIKE"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_NOT_LIKE</name></expr>:</case>
      <return>return <expr><literal type="string">"NOT LIKE"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_MATCH</name></expr>:</case>
      <return>return <expr><literal type="string">"MATCH"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_NMATCH</name></expr>:</case>
      <return>return <expr><literal type="string">"NMATCH"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_IS_NULL</name></expr>:</case>
      <return>return <expr><literal type="string">"IS NULL"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_IS_NOT_NULL</name></expr>:</case>
      <return>return <expr><literal type="string">"IS NOT NULL"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_IS_TRUE</name></expr>:</case>
      <return>return <expr><literal type="string">"IS TRUE"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_IS_FALSE</name></expr>:</case>
      <return>return <expr><literal type="string">"IS FALSE"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_IS_UNKNOWN</name></expr>:</case>
      <return>return <expr><literal type="string">"IS UNKNOWN"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_IS_NOT_TRUE</name></expr>:</case>
      <return>return <expr><literal type="string">"IS NOT TRUE"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_IS_NOT_FALSE</name></expr>:</case>
      <return>return <expr><literal type="string">"IS NOT FALSE"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_IS_NOT_UNKNOWN</name></expr>:</case>
      <return>return <expr><literal type="string">"IS NOT UNKNOWN"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_JSON_GET_VALUE</name></expr>:</case>
      <return>return <expr><literal type="string">"=&gt;"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_JSON_CONTAINS</name></expr>:</case>
      <return>return <expr><literal type="string">"CONTAINS"</literal></expr>;</return>
    <case>case <expr><name>OP_TYPE_ASSIGN</name></expr>:</case>
      <return>return <expr><literal type="string">"="</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logicConditionTypeStr</name><parameter_list>(<parameter><decl><type><name>ELogicConditionType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LOGIC_COND_TYPE_AND</name></expr>:</case>
      <return>return <expr><literal type="string">"AND"</literal></expr>;</return>
    <case>case <expr><name>LOGIC_COND_TYPE_OR</name></expr>:</case>
      <return>return <expr><literal type="string">"OR"</literal></expr>;</return>
    <case>case <expr><name>LOGIC_COND_TYPE_NOT</name></expr>:</case>
      <return>return <expr><literal type="string">"NOT"</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>nodesNodeToSQL</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>colNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>colNode</name><operator>-&gt;</operator><name>dbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"`%s`."</literal></expr></argument>, <argument><expr><name><name>colNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>colNode</name><operator>-&gt;</operator><name>tableAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"`%s`."</literal></expr></argument>, <argument><expr><name><name>colNode</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>colNode</name><operator>-&gt;</operator><name>tableName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"`%s`."</literal></expr></argument>, <argument><expr><name><name>colNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>colNode</name><operator>-&gt;</operator><name>tableAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"`%s`"</literal></expr></argument>, <argument><expr><name><name>colNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>colNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>colNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>nodesGetStrValueFromNode</name><argument_list>(<argument><expr><name>colNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>t</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>nodesError</name><argument_list>(<argument><expr><literal type="string">"fail to get str value from valueNode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NODES_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%.*s...%s"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <name>tlen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>pOpNode</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pOpNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>NODES_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pOpNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" %s "</literal></expr></argument>, <argument><expr><call><name>operatorTypeStr</name><argument_list>(<argument><expr><name><name>pOpNode</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pOpNode</name><operator>-&gt;</operator><name>pRight</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>NODES_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pOpNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SLogicConditionNode</name> <modifier>*</modifier></type><name>pLogicNode</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SNode</name>               <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type>                 <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <macro><name>FOREACH</name><argument_list>(<argument>node</argument>, <argument>pLogicNode-&gt;pParameterList</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" %s "</literal></expr></argument>, <argument><expr><call><name>logicConditionTypeStr</name><argument_list>(<argument><expr><name><name>pLogicNode</name><operator>-&gt;</operator><name>condType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>NODES_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block>

      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SFunctionNode</name> <modifier>*</modifier></type><name>pFuncNode</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SNode</name>         <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type>           <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s("</literal></expr></argument>, <argument><expr><name><name>pFuncNode</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <macro><name>FOREACH</name><argument_list>(<argument>node</argument>, <argument>pFuncNode-&gt;pParameterList</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>NODES_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block>

      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_NODE_LIST</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>pListNode</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SNode</name>         <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type>           <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>        <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <macro><name>FOREACH</name><argument_list>(<argument>node</argument>, <argument>pListNode-&gt;pNodeList</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>++</operator><name>num</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>NODES_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block>

      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>bufSize</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>nodesError</name><argument_list>(<argument><expr><literal type="string">"nodesNodeToSQL unknown node = %s"</literal></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NODES_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
