<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/nodes/src/nodesCloneFuncs.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodesUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_SCALAR_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>     \
  <cpp:value>do {                                 \
    (pDst)-&gt;fldname = (pSrc)-&gt;fldname; \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_CHAR_ARRAY_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>        \
  <cpp:value>do {                                        \
    strcpy((pDst)-&gt;fldname, (pSrc)-&gt;fldname); \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_OBJECT_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro>                  \
  <cpp:value>do {                                                    \
    memcpy(&amp;((pDst)-&gt;fldname), &amp;((pSrc)-&gt;fldname), size); \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_CHAR_POINT_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>         \
  <cpp:value>do {                                         \
    if (NULL == (pSrc)-&gt;fldname) {             \
      break;                                   \
    }                                          \
    (pDst)-&gt;fldname = strdup((pSrc)-&gt;fldname); \
    if (NULL == (pDst)-&gt;fldname) {             \
      return TSDB_CODE_OUT_OF_MEMORY;          \
    }                                          \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_NODE_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>                      \
  <cpp:value>do {                                                 \
    if (NULL == (pSrc)-&gt;fldname) {                     \
      break;                                           \
    }                                                  \
    (pDst)-&gt;fldname = nodesCloneNode((pSrc)-&gt;fldname); \
    if (NULL == (pDst)-&gt;fldname) {                     \
      return TSDB_CODE_OUT_OF_MEMORY;                  \
    }                                                  \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_NODE_FIELD_EX</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>nodePtrType</name></type></parameter>)</parameter_list></cpp:macro>                           \
  <cpp:value>do {                                                                      \
    if (NULL == (pSrc)-&gt;fldname) {                                          \
      break;                                                                \
    }                                                                       \
    (pDst)-&gt;fldname = (nodePtrType)nodesCloneNode((SNode*)(pSrc)-&gt;fldname); \
    if (NULL == (pDst)-&gt;fldname) {                                          \
      return TSDB_CODE_OUT_OF_MEMORY;                                       \
    }                                                                       \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_NODE_LIST_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>                 \
  <cpp:value>do {                                                 \
    if (NULL == (pSrc)-&gt;fldname) {                     \
      break;                                           \
    }                                                  \
    (pDst)-&gt;fldname = nodesCloneList((pSrc)-&gt;fldname); \
    if (NULL == (pDst)-&gt;fldname) {                     \
      return TSDB_CODE_OUT_OF_MEMORY;                  \
    }                                                  \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_OBJECT_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>cloneFunc</name></type></parameter>)</parameter_list></cpp:macro>    \
  <cpp:value>do {                                            \
    if (NULL == (pSrc)-&gt;fldname) {                \
      break;                                      \
    }                                             \
    (pDst)-&gt;fldname = cloneFunc((pSrc)-&gt;fldname); \
    if (NULL == (pDst)-&gt;fldname) {                \
      return TSDB_CODE_OUT_OF_MEMORY;             \
    }                                             \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_BASE_OBJECT_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>copyFunc</name></type></parameter>)</parameter_list></cpp:macro>                                \
  <cpp:value>do {                                                                           \
    if (TSDB_CODE_SUCCESS != copyFunc(&amp;((pSrc)-&gt;fldname), &amp;((pDst)-&gt;fldname))) { \
      return TSDB_CODE_OUT_OF_MEMORY;                                            \
    }                                                                            \
  } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>exprNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SExprNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>resType</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>userAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>orderAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>columnNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SColumnNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>exprNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>colId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>tableAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>dataBlockId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>valueNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>exprNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_POINT_FIELD</name><argument_list>(<argument><expr><name>literal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>translate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>notReserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>placeholderNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typeData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSrc</name><operator>-&gt;</operator><name>translate</name></name> <operator>||</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name><name>pSrc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>datum</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pDst</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pDst</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DECIMAL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BLOB</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_MEDIUMBLOB</name></expr>:</case>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>operatorNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SOperatorNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>exprNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicConditionNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>exprNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>condType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>functionNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>exprNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funcType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>udfBufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tableNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>exprNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>tableAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>singleTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>tableMetaClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>len</name> <init>= <expr><call><name>TABLE_META_SIZE</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SVgroupsInfo</name><modifier>*</modifier></type> <name>vgroupsInfoClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SVgroupsInfo</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>len</name> <init>= <expr><call><name>VGROUPS_INFO_SIZE</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupsInfo</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>realTableNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRealTableNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>tableMetaClone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>pVgroupList</name></expr></argument>, <argument><expr><name>vgroupsInfoClone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>qualDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tempTableNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STempTableNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>STempTableNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pSubquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>joinTableNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJoinTableNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SJoinTableNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>joinType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pOnCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>targetNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STargetNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>dataBlockId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>groupingSetNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SGroupingSetNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SGroupingSetNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>groupingSetType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>orderByExprNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SOrderByExprNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SOrderByExprNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nullOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>limitNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SLimitNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SLimitNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>stateWindowNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStateWindowNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SStateWindowNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sessionWindowNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSessionWindowNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SSessionWindowNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD_EX</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>SColumnNode</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD_EX</name><argument_list>(<argument><expr><name>pGap</name></expr></argument>, <argument><expr><name>SValueNode</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>intervalWindowNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SIntervalWindowNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SIntervalWindowNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pSliding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pFill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nodeListNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeListNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>fillNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SFillNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SFillNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pWStartTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>timeRange</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STimeWindow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>whenThenNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SWhenThenNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SWhenThenNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>exprNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>caseWhenNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SCaseWhenNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SCaseWhenNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>exprNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pElse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pWhenThenList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pTargets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pConditions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>optimizedFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pSlimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>requireDataOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resultDataOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>groupAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicScanCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SScanLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pScanCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pScanPseudoCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>stableId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>pVgroupList</name></expr></argument>, <argument><expr><name>vgroupsInfoClone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>scanType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>scanRange</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STimeWindow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>showRewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pDynamicScanFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>dataRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>sliding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>intervalUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>slidingUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pTagCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pTagIndexCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>triggerType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>watermark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>deleteMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>igExpired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pGroupTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>groupSort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pSubtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>igLastNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicJoinCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJoinLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SJoinLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>joinType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pMergeCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pOnConditions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isSingleTableJoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputTsOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicAggCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SAggLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SAggLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pGroupKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pAggFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicProjectCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SProjectLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SProjectLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pProjections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>stmtName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ignoreGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicVnodeModifCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>modifyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pAffectedRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pStartTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pEndTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>stableId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>tsColName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>deleteTimeRange</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STimeWindow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>pVgroupList</name></expr></argument>, <argument><expr><name>vgroupsInfoClone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pInsertCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicExchangeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SExchangeLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SExchangeLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>srcStartGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>srcEndGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>seqRecvData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicMergeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMergeLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SMergeLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pMergeKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pInputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numOfChannels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>srcGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>groupSort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicWindowCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SWindowLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SWindowLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>winType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>sliding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>intervalUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>slidingUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>sessionGap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pTspk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pTsEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pStateExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>triggerType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>watermark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>deleteMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>igExpired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>windowAlgo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputTsOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>outputTsOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicFillCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SFillLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SFillLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pFillExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pNotFillExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pWStartTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>timeRange</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STimeWindow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputTsOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicSortCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSortLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SSortLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pSortKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>groupSort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicPartitionCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPartitionLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SPartitionLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pPartitionKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pSubtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicIndefRowsFuncCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SIndefRowsFuncLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SIndefRowsFuncLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicInterpFuncCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SInterpFuncLogicNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SInterpFuncLogicNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>logicNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>timeRange</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STimeWindow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fillMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pFillValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pTimeSeries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicSubplanCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SLogicSubplan</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubplanId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD_EX</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>SLogicNode</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>subplanType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>splitFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiNodeCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPhysiNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD_EX</name><argument_list>(<argument><expr><name>pOutputDataBlockDesc</name></expr></argument>, <argument><expr><name>SDataBlockDescNode</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pConditions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiScanCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>physiNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pScanCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pScanPseudoCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiTagScanCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STagScanPhysiNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>STagScanPhysiNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>physiScanCopy</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>pDst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiTableScanCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>physiScanCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>scanRange</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STimeWindow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>dataRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pDynamicScanFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pGroupTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>sliding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>intervalUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>slidingUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>triggerType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>watermark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>igExpired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiSysTableScanCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSystemTableScanPhysiNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SSystemTableScanPhysiNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>physiScanCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>mgmtEpSet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEpSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>showRewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>accountId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>sysInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiWindowCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SWinodwPhysiNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SWinodwPhysiNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>physiNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pTspk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pTsEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>triggerType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>watermark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>igExpired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiIntervalCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>physiWindowCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>sliding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>intervalUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>slidingUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiSessionCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSessionWinodwPhysiNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SSessionWinodwPhysiNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>physiWindowCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiPartitionCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPartitionPhysiNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SPartitionPhysiNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_BASE_OBJECT_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>physiNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pPartitionKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pTargets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dataBlockDescCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>dataBlockId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pSlots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>totalRowSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>outputRowSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>slotDescCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSlotDescNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SSlotDescNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>reserve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>downstreamSourceCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_OBJECT_FIELD</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeAddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>schedId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>execId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fetchMsgType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>localExec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>selectStmtCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSelectStmt</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isDistinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pProjectionList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pFromTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pPartitionByList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pGroupByList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD</name><argument_list>(<argument><expr><name>pHaving</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pOrderByList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD_EX</name><argument_list>(<argument><expr><name>pLimit</name></expr></argument>, <argument><expr><name>SLimitNode</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLONE_NODE_FIELD_EX</name><argument_list>(<argument><expr><name>pLimit</name></expr></argument>, <argument><expr><name>SLimitNode</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_CHAR_ARRAY_FIELD</name><argument_list>(<argument><expr><name>stmtName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isEmptyResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isTimeLineResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasAggFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasRepeatScanFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNode</name><modifier>*</modifier></type> <name>nodesCloneNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>nodesMakeNode</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>columnNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>valueNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SValueNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>operatorNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicConditionNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>functionNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_REAL_TABLE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>realTableNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_TEMP_TABLE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tempTableNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STempTableNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_JOIN_TABLE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>joinTableNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SJoinTableNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SJoinTableNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_GROUPING_SET</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>groupingSetNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SGroupingSetNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SGroupingSetNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ORDER_BY_EXPR</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>orderByExprNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LIMIT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>limitNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SLimitNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SLimitNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_STATE_WINDOW</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>stateWindowNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SStateWindowNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SStateWindowNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SESSION_WINDOW</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sessionWindowNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SSessionWindowNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SSessionWindowNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_INTERVAL_WINDOW</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>intervalWindowNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SIntervalWindowNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SIntervalWindowNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_NODE_LIST</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SNodeListNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_FILL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>fillNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SFillNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SFillNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_TARGET</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>targetNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STargetNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DATABLOCK_DESC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dataBlockDescCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SLOT_DESC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>slotDescCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SSlotDescNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SSlotDescNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DOWNSTREAM_SOURCE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>downstreamSourceCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SDownstreamSourceNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SDownstreamSourceNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LEFT_VALUE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_WHEN_THEN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>whenThenNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SWhenThenNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SWhenThenNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CASE_WHEN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>caseWhenNodeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SELECT_STMT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>selectStmtCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicScanCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SScanLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SScanLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_JOIN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicJoinCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SJoinLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SJoinLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_AGG</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicAggCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SAggLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SAggLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_PROJECT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicProjectCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SProjectLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SProjectLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_VNODE_MODIFY</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicVnodeModifCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SVnodeModifyLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SVnodeModifyLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_EXCHANGE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicExchangeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SExchangeLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SExchangeLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_MERGE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicMergeCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SMergeLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SMergeLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_WINDOW</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicWindowCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SWindowLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SWindowLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_FILL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicFillCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SFillLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SFillLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_SORT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicSortCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SSortLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SSortLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_PARTITION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicPartitionCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SPartitionLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPartitionLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_INDEF_ROWS_FUNC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicIndefRowsFuncCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SIndefRowsFuncLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SIndefRowsFuncLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_INTERP_FUNC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicInterpFuncCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SInterpFuncLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SInterpFuncLogicNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_SUBPLAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicSubplanCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TAG_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiTagScanCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STagScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>STagScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SEQ_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiTableScanCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>STableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SYSTABLE_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiSysTableScanCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SSystemTableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SSystemTableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiIntervalCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SIntervalPhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SIntervalPhysiNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiSessionCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SSessionWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SSessionWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PARTITION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_PARTITION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiPartitionCopy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SPartitionPhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPartitionPhysiNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesError</name><argument_list>(<argument><expr><literal type="string">"nodesCloneNode failed node = %s"</literal></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SNodeList</name><modifier>*</modifier></type> <name>nodesCloneList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>     <name>pNode</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDst</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>
</unit>
