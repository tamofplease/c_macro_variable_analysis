<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/nodes/src/nodesMsgFuncs.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodesUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>htonll</name></cpp:ifndef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htonll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                                                                                   \
  <cpp:value>(((int64_t)x &amp; 0x00000000000000ff) &lt;&lt; 7 * 8) | (((int64_t)x &amp; 0x000000000000ff00) &lt;&lt; 5 * 8) |     \
      (((int64_t)x &amp; 0x0000000000ff0000) &lt;&lt; 3 * 8) | (((int64_t)x &amp; 0x00000000ff000000) &lt;&lt; 1 * 8) | \
      (((int64_t)x &amp; 0x000000ff00000000) &gt;&gt; 1 * 8) | (((int64_t)x &amp; 0x0000ff0000000000) &gt;&gt; 3 * 8) | \
      (((int64_t)x &amp; 0x00ff000000000000) &gt;&gt; 5 * 8) | (((int64_t)x &amp; 0xff00000000000000) &gt;&gt; 7 * 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ntohll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>htonll(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODES_MSG_DEFAULT_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLV_TYPE_ARRAY_ELEM</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tlvForEach</name><parameter_list>(<parameter><type><name>pDecoder</name></type></parameter>, <parameter><type><name>pTlv</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>while (TSDB_CODE_SUCCESS == code &amp;&amp; TSDB_CODE_SUCCESS == (code = tlvGetNextTlv(pDecoder, &amp;pTlv)) &amp;&amp; NULL != pTlv)</cpp:value></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct <name>STlv</name> <block>{
  <decl_stmt><decl><type><name>int16_t</name></type> <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>STlv</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct <name>STlvEncoder</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>allocSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>pBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlvCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>STlvEncoder</name>;</typedef>

<typedef>typedef <type><struct>struct <name>STlvDecoder</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>bufSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pBuf</name></decl>;</decl_stmt>
}</block></struct></type> <name>STlvDecoder</name>;</typedef>

<typedef>typedef <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>FToMsg</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>FToObject</name>)<parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>FMakeObject</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>FSetObject</name>)<parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>nodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>nodeListToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToNodeFromTlv</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToNodeList</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToNodeListFromTlv</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initTlvEncoder</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>=</operator> <name>NODES_MSG_DEFAULT_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>tlvCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>NULL</name> <operator>==</operator> <name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name></expr> ?</condition><then> <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr> </then><else>: <expr><name>TSDB_CODE_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearTlvEncoder</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>endTlvEncode</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pMsg</name> <operator>=</operator> <name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeImpl</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlvLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STlv</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>tlvLen</name> <operator>&gt;</operator> <name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>+</operator> <name>tlvLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pNewBuf</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNewBuf</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <name>pNewBuf</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name> <init>= <expr><operator>(</operator><name>STlv</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>+</operator> <name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>tlvLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pEncoder</name><operator>-&gt;</operator><name>tlvCount</name></name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueImpl</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pNewBuf</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNewBuf</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <name>pNewBuf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>=</operator> <name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>+</operator> <name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeI8</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueI8</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeI16</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueI16</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeI32</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueI32</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeI64</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htonll</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueI64</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htonll</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeU8</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueU8</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeU16</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueU16</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeU64</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htonll</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueU64</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htonll</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeDouble</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>htonll</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueDouble</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>htonll</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeEnum</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueEnum</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeBool</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueBool</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeCStr</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pValue</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueCStr</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueI16</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeBinary</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeImpl</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeObj</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>FToMsg</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObj</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STlv</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STlv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pNewBuf</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>allocSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNewBuf</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <name>pNewBuf</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STlv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name> <init>= <expr><operator>(</operator><name>STlv</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>+</operator> <name>start</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name>start</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STlv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pEncoder</name><operator>-&gt;</operator><name>tlvCount</name></name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeObjArray</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>FToMsg</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>itemSize</name></decl></parameter>,
                                 <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STlv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>TLV_TYPE_ARRAY_ELEM</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pArray</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>itemSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name> <init>= <expr><operator>(</operator><name>STlv</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pEncoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>+</operator> <name>start</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name>start</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STlv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvEncodeValueArray</name><parameter_list>(<parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>FToMsg</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>itemSize</name></decl></parameter>,
                                   <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pArray</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>itemSize</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvGetNextTlv</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>STlv</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pDecoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>bufSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pTlv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pTlv</name> <operator>=</operator> <operator>(</operator><name>STlv</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDecoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>+</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pTlv</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pTlv</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pTlv</name><operator>)</operator><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pTlv</name><operator>)</operator><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pTlv</name><operator>)</operator><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>bufSize</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STlv</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><operator>(</operator><operator>*</operator><name>pTlv</name><operator>)</operator><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tlvDecodeEnd</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pDecoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>bufSize</name></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeImpl</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueImpl</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>bufSize</name></name> <operator>-</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>+</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeI8</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tlvDecodeImpl</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueI8</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvDecodeValueImpl</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeI16</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeImpl</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueI16</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueImpl</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeI32</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeImpl</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueI32</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueImpl</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeI64</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeImpl</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>ntohll</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueI64</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueImpl</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>ntohll</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeU8</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tlvDecodeImpl</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueU8</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvDecodeValueImpl</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeU16</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeImpl</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueU16</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueImpl</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeU64</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeImpl</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>ntohll</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueU64</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueImpl</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>ntohll</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeDouble</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>temp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueDouble</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>temp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>convertIntegerType</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>pValue</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>pValue</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pValue</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeBool</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeI8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>convertIntegerType</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueBool</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>convertIntegerType</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeEnum</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>convertIntegerType</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueEnum</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>convertIntegerType</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeCStr</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueCStr</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI16</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueImpl</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeCStrP</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pValue</name></expr> ?</condition><then> <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr> </then><else>: <expr><name>TSDB_CODE_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeDynBinary</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pValue</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pValue</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>pValue</name></expr></argument>, <argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeBinary</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeObjFromTlv</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STlvDecoder</name></type> <name>decoder</name> <init>= <expr><block>{<expr><operator>.</operator><name>bufSize</name> <operator>=</operator> <name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>pBuf</name> <operator>=</operator> <name><name>pTlv</name><operator>-&gt;</operator><name>value</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeObj</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvGetNextTlv</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTlv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeObjArray</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>itemSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pArray</name> <operator>+</operator> <name>itemSize</name> <operator>*</operator> <name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeValueArray</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>itemSize</name></decl></parameter>,
                                   <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pNum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <operator>*</operator><name>pNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pArray</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>itemSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeObjArrayFromTlv</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>itemSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STlvDecoder</name></type> <name>decoder</name> <init>= <expr><block>{<expr><operator>.</operator><name>bufSize</name> <operator>=</operator> <name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>pBuf</name> <operator>=</operator> <name><name>pTlv</name><operator>-&gt;</operator><name>value</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tlvDecodeObjArray</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>itemSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeDynObjFromTlv</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>FMakeObject</name></type> <name>makeFunc</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>toFunc</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pObj</name> <operator>=</operator> <call><name>makeFunc</name><argument_list>(<argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pObj</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>toFunc</name></expr></argument>, <argument><expr><operator>*</operator><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tlvDecodeDynObj</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>FMakeObject</name></type> <name>makeFunc</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>toFunc</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvGetNextTlv</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTlv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeDynObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>makeFunc</name></expr></argument>, <argument><expr><name>toFunc</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>DATA_TYPE_CODE_TYPE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>DATA_TYPE_CODE_PRECISION</name></decl>, <decl><name>DATA_TYPE_CODE_SCALE</name></decl>, <decl><name>DATA_TYPE_CODE_BYTES</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dataTypeInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataType</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataType</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueU8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueU8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dataTypeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataType</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataType</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>DATA_TYPE_CODE_TYPE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeU8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>DATA_TYPE_CODE_PRECISION</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeU8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>DATA_TYPE_CODE_SCALE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>DATA_TYPE_CODE_BYTES</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToDataTypeInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataType</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueU8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueU8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToDataType</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataType</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>DATA_TYPE_CODE_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>DATA_TYPE_CODE_PRECISION</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>DATA_TYPE_CODE_SCALE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>DATA_TYPE_CODE_BYTES</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>EXPR_CODE_RES_TYPE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>exprNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SExprNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SExprNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>EXPR_CODE_RES_TYPE</name></expr></argument>, <argument><expr><name>dataTypeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToExprNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>EXPR_CODE_RES_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToDataType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>COLUMN_CODE_INLINE_ATTRS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>columnNodeInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SColumnNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>dataTypeInlineToMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI16</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI16</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI16</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>columnNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>COLUMN_CODE_INLINE_ATTRS</name></expr></argument>, <argument><expr><name>columnNodeInlineToMsg</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToColumnNodeInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>msgToDataTypeInline</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueU64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI16</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueEnum</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueCStr</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueCStr</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueCStr</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueCStr</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI16</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI16</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToColumnNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>COLUMN_CODE_INLINE_ATTRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToColumnNodeInline</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>VALUE_CODE_EXPR_BASE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>VALUE_CODE_LITERAL</name></decl>,
  <decl><name>VALUE_CODE_IS_DURATION</name></decl>,
  <decl><name>VALUE_CODE_TRANSLATE</name></decl>,
  <decl><name>VALUE_CODE_NOT_RESERVED</name></decl>,
  <decl><name>VALUE_CODE_IS_NULL</name></decl>,
  <decl><name>VALUE_CODE_DATUM</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>datumToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SValueNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_DATUM</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_DATUM</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_DATUM</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeDouble</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_DATUM</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBinary</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_DATUM</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBinary</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_DATUM</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DECIMAL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BLOB</name></expr>:</case>
      <comment type="line">// todo</comment>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>valueNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SValueNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_EXPR_BASE</name></expr></argument>, <argument><expr><name>exprNodeToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_LITERAL</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_IS_DURATION</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>isDuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_TRANSLATE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>translate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_NOT_RESERVED</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>notReserved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>VALUE_CODE_IS_NULL</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>isNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pNode</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>datumToMsg</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToDatum</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeDouble</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeDouble</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FAILED</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBinary</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>TSDB_MAX_JSON_TAG_LEN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FAILED</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeDynBinary</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DECIMAL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BLOB</name></expr>:</case>
      <comment type="line">// todo</comment>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToValueNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>VALUE_CODE_EXPR_BASE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToExprNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>VALUE_CODE_LITERAL</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeCStrP</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>VALUE_CODE_IS_DURATION</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>isDuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>VALUE_CODE_TRANSLATE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>translate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>VALUE_CODE_NOT_RESERVED</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>notReserved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>VALUE_CODE_IS_NULL</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>isNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>VALUE_CODE_DATUM</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToDatum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>OPERATOR_CODE_EXPR_BASE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>OPERATOR_CODE_OP_TYPE</name></decl>, <decl><name>OPERATOR_CODE_LEFT</name></decl>, <decl><name>OPERATOR_CODE_RIGHT</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>operatorNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SOperatorNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>OPERATOR_CODE_EXPR_BASE</name></expr></argument>, <argument><expr><name>exprNodeToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>OPERATOR_CODE_OP_TYPE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>OPERATOR_CODE_LEFT</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>OPERATOR_CODE_RIGHT</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToOperatorNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>OPERATOR_CODE_EXPR_BASE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToExprNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>OPERATOR_CODE_OP_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>OPERATOR_CODE_LEFT</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>OPERATOR_CODE_RIGHT</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>LOGIC_COND_CODE_EXPR_BASE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>LOGIC_COND_CODE_COND_TYPE</name></decl>, <decl><name>LOGIC_COND_CODE_PARAMETERS</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicConditionNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>LOGIC_COND_CODE_EXPR_BASE</name></expr></argument>, <argument><expr><name>exprNodeToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>LOGIC_COND_CODE_COND_TYPE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>condType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>LOGIC_COND_CODE_PARAMETERS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToLogicConditionNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>LOGIC_COND_CODE_EXPR_BASE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToExprNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LOGIC_COND_CODE_COND_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>condType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>condType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LOGIC_COND_CODE_PARAMETERS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>FUNCTION_CODE_EXPR_BASE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>FUNCTION_CODE_FUNCTION_NAME</name></decl>,
  <decl><name>FUNCTION_CODE_FUNCTION_ID</name></decl>,
  <decl><name>FUNCTION_CODE_FUNCTION_TYPE</name></decl>,
  <decl><name>FUNCTION_CODE_PARAMETERS</name></decl>,
  <decl><name>FUNCTION_CODE_UDF_BUF_SIZE</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>functionNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>FUNCTION_CODE_EXPR_BASE</name></expr></argument>, <argument><expr><name>exprNodeToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>FUNCTION_CODE_FUNCTION_NAME</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>FUNCTION_CODE_FUNCTION_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>FUNCTION_CODE_FUNCTION_TYPE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>funcType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>FUNCTION_CODE_PARAMETERS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>FUNCTION_CODE_UDF_BUF_SIZE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>udfBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToFunctionNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>FUNCTION_CODE_EXPR_BASE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToExprNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>FUNCTION_CODE_FUNCTION_NAME</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeCStr</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>FUNCTION_CODE_FUNCTION_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>FUNCTION_CODE_FUNCTION_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>funcType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>FUNCTION_CODE_PARAMETERS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>FUNCTION_CODE_UDF_BUF_SIZE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>udfBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>ORDER_BY_EXPR_CODE_EXPR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>ORDER_BY_EXPR_CODE_ORDER</name></decl>, <decl><name>ORDER_BY_EXPR_CODE_NULL_ORDER</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>orderByExprNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SOrderByExprNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>ORDER_BY_EXPR_CODE_EXPR</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>ORDER_BY_EXPR_CODE_ORDER</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>ORDER_BY_EXPR_CODE_NULL_ORDER</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nullOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToOrderByExprNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOrderByExprNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>ORDER_BY_EXPR_CODE_EXPR</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>ORDER_BY_EXPR_CODE_ORDER</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>ORDER_BY_EXPR_CODE_NULL_ORDER</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nullOrder</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nullOrder</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>LIMIT_CODE_LIMIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>LIMIT_CODE_OFFSET</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>limitNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SLimitNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SLimitNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>LIMIT_CODE_LIMIT</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>LIMIT_CODE_OFFSET</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToLimitNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLimitNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLimitNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>LIMIT_CODE_LIMIT</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LIMIT_CODE_OFFSET</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>NAME_CODE_TYPE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>NAME_CODE_ACCT_ID</name></decl>, <decl><name>NAME_CODE_DB_NAME</name></decl>, <decl><name>NAME_CODE_TABLE_NAME</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nameToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SName</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeU8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>NAME_CODE_TYPE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>NAME_CODE_ACCT_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>NAME_CODE_DB_NAME</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>NAME_CODE_TABLE_NAME</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToName</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>NAME_CODE_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>NAME_CODE_ACCT_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>NAME_CODE_DB_NAME</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeCStr</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>NAME_CODE_TABLE_NAME</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeCStr</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>TIME_WINDOW_CODE_START_KEY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>TIME_WINDOW_CODE_END_KEY</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>timeWindowToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STimeWindow</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STimeWindow</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>TIME_WINDOW_CODE_START_KEY</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>TIME_WINDOW_CODE_END_KEY</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToTimeWindow</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STimeWindow</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TIME_WINDOW_CODE_START_KEY</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TIME_WINDOW_CODE_END_KEY</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>NODE_LIST_CODE_DATA_TYPE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>NODE_LIST_CODE_NODE_LIST</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nodeListNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SNodeListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SNodeListNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>NODE_LIST_CODE_DATA_TYPE</name></expr></argument>, <argument><expr><name>dataTypeInlineToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>NODE_LIST_CODE_NODE_LIST</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToNodeListNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>NODE_LIST_CODE_DATA_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToDataTypeInline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>NODE_LIST_CODE_NODE_LIST</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>TARGET_CODE_INLINE_ATTRS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>TARGET_CODE_EXPR</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>targetNodeInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STargetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STargetNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueI16</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI16</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>targetNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STargetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STargetNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>TARGET_CODE_INLINE_ATTRS</name></expr></argument>, <argument><expr><name>targetNodeInlineToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>TARGET_CODE_EXPR</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToTargetNodeInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI16</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI16</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToTargetNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TARGET_CODE_INLINE_ATTRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToTargetNodeInline</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TARGET_CODE_EXPR</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>DATA_BLOCK_DESC_CODE_INLINE_ATTRS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>DATA_BLOCK_DESC_CODE_SLOTS</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dataBlockDescNodeInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueI16</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueU8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dataBlockDescNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>DATA_BLOCK_DESC_CODE_INLINE_ATTRS</name></expr></argument>, <argument><expr><name>dataBlockDescNodeInlineToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>DATA_BLOCK_DESC_CODE_SLOTS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToDataBlockDescNodeInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI16</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueU8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToDataBlockDescNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>DATA_BLOCK_DESC_CODE_INLINE_ATTRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToDataBlockDescNodeInline</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>DATA_BLOCK_DESC_CODE_SLOTS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>SLOT_DESC_CODE_INLINE_ATTRS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>slotDescNodeInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSlotDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSlotDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueI16</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dataTypeInlineToMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>reserve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>slotDescNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>SLOT_DESC_CODE_INLINE_ATTRS</name></expr></argument>, <argument><expr><name>slotDescNodeInlineToMsg</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToSlotDescNodeInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSlotDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSlotDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI16</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToDataTypeInline</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueBool</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>reserve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueBool</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueBool</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToSlotDescNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSlotDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSlotDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>SLOT_DESC_CODE_INLINE_ATTRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToSlotDescNodeInline</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>EP_CODE_FQDN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>EP_CODE_port</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>epInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SEp</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SEp</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueU16</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>epToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SEp</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SEp</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>EP_CODE_FQDN</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeU16</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>EP_CODE_port</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToEpInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEp</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SEp</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueCStr</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueU16</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToEp</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEp</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SEp</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>EP_CODE_FQDN</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeCStr</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>EP_CODE_port</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU16</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>EP_SET_CODE_IN_USE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>EP_SET_CODE_NUM_OF_EPS</name></decl>, <decl><name>EP_SET_CODE_EPS</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>epSetInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SEpSet</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SEpSet</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueArray</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>epInlineToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>epSetToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SEpSet</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SEpSet</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>EP_SET_CODE_IN_USE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>EP_SET_CODE_NUM_OF_EPS</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObjArray</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>EP_SET_CODE_EPS</name></expr></argument>, <argument><expr><name>epToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToEpSetInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SEpSet</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfEps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueArray</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>msgToEpInline</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfEps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>=</operator> <name>numOfEps</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToEpSet</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SEpSet</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>EP_SET_CODE_IN_USE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>EP_SET_CODE_NUM_OF_EPS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>EP_SET_CODE_EPS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjArrayFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToEp</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>QUERY_NODE_ADDR_CODE_NODE_ID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>QUERY_NODE_ADDR_CODE_EP_SET</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>queryNodeAddrInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SQueryNodeAddr</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SQueryNodeAddr</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>epSetInlineToMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>queryNodeAddrToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SQueryNodeAddr</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SQueryNodeAddr</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>QUERY_NODE_ADDR_CODE_NODE_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>QUERY_NODE_ADDR_CODE_EP_SET</name></expr></argument>, <argument><expr><name>epSetToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToQueryNodeAddrInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryNodeAddr</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SQueryNodeAddr</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToEpSetInline</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToQueryNodeAddr</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryNodeAddr</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SQueryNodeAddr</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>QUERY_NODE_ADDR_CODE_NODE_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>QUERY_NODE_ADDR_CODE_EP_SET</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToEpSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>DOWNSTREAM_SOURCE_CODE_INLINE_ATTRS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>downstreamSourceNodeInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDownstreamSourceNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>queryNodeAddrInlineToMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>schedId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fetchMsgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>downstreamSourceNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>DOWNSTREAM_SOURCE_CODE_INLINE_ATTRS</name></expr></argument>, <argument><expr><name>downstreamSourceNodeInlineToMsg</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToDownstreamSourceNodeInlineToMsg</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDownstreamSourceNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>msgToQueryNodeAddrInline</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueU64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueU64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>schedId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>fetchMsgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToDownstreamSourceNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDownstreamSourceNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>DOWNSTREAM_SOURCE_CODE_INLINE_ATTRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToDownstreamSourceNodeInlineToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>WHEN_THEN_CODE_EXPR_BASE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>WHEN_THEN_CODE_WHEN</name></decl>, <decl><name>WHEN_THEN_CODE_THEN</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>whenThenNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SWhenThenNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SWhenThenNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>WHEN_THEN_CODE_EXPR_BASE</name></expr></argument>, <argument><expr><name>exprNodeToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>WHEN_THEN_CODE_WHEN</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>WHEN_THEN_CODE_THEN</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pThen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToWhenThenNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWhenThenNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SWhenThenNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>WHEN_THEN_CODE_EXPR_BASE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToExprNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>WHEN_THEN_CODE_WHEN</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>WHEN_THEN_CODE_THEN</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pThen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>CASE_WHEN_CODE_EXPR_BASE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>CASE_WHEN_CODE_CASE</name></decl>, <decl><name>CASE_WHEN_CODE_ELSE</name></decl>, <decl><name>CASE_WHEN_CODE_WHEN_THEN_LIST</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>caseWhenNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SCaseWhenNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>CASE_WHEN_CODE_EXPR_BASE</name></expr></argument>, <argument><expr><name>exprNodeToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>CASE_WHEN_CODE_CASE</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>CASE_WHEN_CODE_ELSE</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pElse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>CASE_WHEN_CODE_WHEN_THEN_LIST</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWhenThenList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToCaseWhenNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCaseWhenNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>CASE_WHEN_CODE_EXPR_BASE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToExprNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>CASE_WHEN_CODE_CASE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>CASE_WHEN_CODE_ELSE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pElse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>CASE_WHEN_CODE_WHEN_THEN_LIST</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWhenThenList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_NODE_CODE_OUTPUT_DESC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_NODE_CODE_CONDITIONS</name></decl>,
  <decl><name>PHY_NODE_CODE_CHILDREN</name></decl>,
  <decl><name>PHY_NODE_CODE_LIMIT</name></decl>,
  <decl><name>PHY_NODE_CODE_SLIMIT</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_NODE_CODE_OUTPUT_DESC</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_NODE_CODE_CONDITIONS</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_NODE_CODE_CHILDREN</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_NODE_CODE_LIMIT</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_NODE_CODE_SLIMIT</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_NODE_CODE_OUTPUT_DESC</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_NODE_CODE_CONDITIONS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_NODE_CODE_CHILDREN</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_NODE_CODE_LIMIT</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_NODE_CODE_SLIMIT</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_SCAN_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_SCAN_CODE_SCAN_COLS</name></decl>,
  <decl><name>PHY_SCAN_CODE_SCAN_PSEUDO_COLS</name></decl>,
  <decl><name>PHY_SCAN_CODE_BASE_UID</name></decl>,
  <decl><name>PHY_SCAN_CODE_BASE_SUID</name></decl>,
  <decl><name>PHY_SCAN_CODE_BASE_TABLE_TYPE</name></decl>,
  <decl><name>PHY_SCAN_CODE_BASE_TABLE_NAME</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiScanNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SCAN_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SCAN_CODE_SCAN_COLS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SCAN_CODE_SCAN_PSEUDO_COLS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SCAN_CODE_BASE_UID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SCAN_CODE_BASE_SUID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SCAN_CODE_BASE_TABLE_TYPE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SCAN_CODE_BASE_TABLE_NAME</name></expr></argument>, <argument><expr><name>nameToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiScanNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_SCAN_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SCAN_CODE_SCAN_COLS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SCAN_CODE_SCAN_PSEUDO_COLS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SCAN_CODE_BASE_UID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SCAN_CODE_BASE_SUID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SCAN_CODE_BASE_TABLE_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SCAN_CODE_BASE_TABLE_NAME</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_LAST_ROW_SCAN_CODE_SCAN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_LAST_ROW_SCAN_CODE_GROUP_TAGS</name></decl>,
  <decl><name>PHY_LAST_ROW_SCAN_CODE_GROUP_SORT</name></decl>,
  <decl><name>PHY_LAST_ROW_SCAN_CODE_IGNULL</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiLastRowScanNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SLastRowScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SLastRowScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_LAST_ROW_SCAN_CODE_SCAN</name></expr></argument>, <argument><expr><name>physiScanNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_LAST_ROW_SCAN_CODE_GROUP_TAGS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_LAST_ROW_SCAN_CODE_GROUP_SORT</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_LAST_ROW_SCAN_CODE_IGNULL</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>ignoreNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiLastRowScanNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLastRowScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLastRowScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_LAST_ROW_SCAN_CODE_SCAN</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiScanNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_LAST_ROW_SCAN_CODE_GROUP_TAGS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_LAST_ROW_SCAN_CODE_GROUP_SORT</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_LAST_ROW_SCAN_CODE_IGNULL</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>ignoreNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_TABLE_SCAN_CODE_SCAN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_TABLE_SCAN_CODE_INLINE_ATTRS</name></decl>,
  <decl><name>PHY_TABLE_SCAN_CODE_DYN_SCAN_FUNCS</name></decl>,
  <decl><name>PHY_TABLE_SCAN_CODE_GROUP_TAGS</name></decl>,
  <decl><name>PHY_TABLE_SCAN_CODE_TAGS</name></decl>,
  <decl><name>PHY_TABLE_SCAN_CODE_SUBTABLE</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiTableScanNodeInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueU8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueU8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueDouble</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataRequired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>igExpired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>assignBlockUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiTableScanNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_TABLE_SCAN_CODE_SCAN</name></expr></argument>, <argument><expr><name>physiScanNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_TABLE_SCAN_CODE_INLINE_ATTRS</name></expr></argument>, <argument><expr><name>physiTableScanNodeInlineToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_TABLE_SCAN_CODE_DYN_SCAN_FUNCS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pDynamicScanFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_TABLE_SCAN_CODE_GROUP_TAGS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_TABLE_SCAN_CODE_TAGS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_TABLE_SCAN_CODE_SUBTABLE</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiTableScanNodeInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueU8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueU8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scanRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scanRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueDouble</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataRequired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueBool</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>igExpired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueBool</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>assignBlockUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiTableScanNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_TABLE_SCAN_CODE_SCAN</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiScanNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_TABLE_SCAN_CODE_INLINE_ATTRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiTableScanNodeInline</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_TABLE_SCAN_CODE_DYN_SCAN_FUNCS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pDynamicScanFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_TABLE_SCAN_CODE_GROUP_TAGS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_TABLE_SCAN_CODE_TAGS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_TABLE_SCAN_CODE_SUBTABLE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_SYSTABLE_SCAN_CODE_SCAN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_SYSTABLE_SCAN_CODE_MGMT_EP_SET</name></decl>,
  <decl><name>PHY_SYSTABLE_SCAN_CODE_SHOW_REWRITE</name></decl>,
  <decl><name>PHY_SYSTABLE_SCAN_CODE_ACCOUNT_ID</name></decl>,
  <decl><name>PHY_SYSTABLE_SCAN_CODE_SYS_INFO</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiSysTableScanNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSystemTableScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSystemTableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SYSTABLE_SCAN_CODE_SCAN</name></expr></argument>, <argument><expr><name>physiScanNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SYSTABLE_SCAN_CODE_MGMT_EP_SET</name></expr></argument>, <argument><expr><name>epSetToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SYSTABLE_SCAN_CODE_SHOW_REWRITE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SYSTABLE_SCAN_CODE_ACCOUNT_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>accountId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SYSTABLE_SCAN_CODE_SYS_INFO</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiSysTableScanNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSystemTableScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSystemTableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_SYSTABLE_SCAN_CODE_SCAN</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiScanNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SYSTABLE_SCAN_CODE_MGMT_EP_SET</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToEpSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SYSTABLE_SCAN_CODE_SHOW_REWRITE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SYSTABLE_SCAN_CODE_ACCOUNT_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>accountId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SYSTABLE_SCAN_CODE_SYS_INFO</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_PROJECT_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_PROJECT_CODE_PROJECTIONS</name></decl>,
  <decl><name>PHY_PROJECT_CODE_MERGE_DATA_BLOCK</name></decl>,
  <decl><name>PHY_PROJECT_CODE_IGNORE_GROUP_ID</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiProjectNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SProjectPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SProjectPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_PROJECT_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_PROJECT_CODE_PROJECTIONS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_PROJECT_CODE_MERGE_DATA_BLOCK</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_PROJECT_CODE_IGNORE_GROUP_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>ignoreGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiProjectNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SProjectPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SProjectPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_PROJECT_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_PROJECT_CODE_PROJECTIONS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_PROJECT_CODE_MERGE_DATA_BLOCK</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_PROJECT_CODE_IGNORE_GROUP_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>ignoreGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_SORT_MERGE_JOIN_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_SORT_MERGE_JOIN_CODE_JOIN_TYPE</name></decl>,
  <decl><name>PHY_SORT_MERGE_JOIN_CODE_MERGE_CONDITION</name></decl>,
  <decl><name>PHY_SORT_MERGE_JOIN_CODE_ON_CONDITIONS</name></decl>,
  <decl><name>PHY_SORT_MERGE_JOIN_CODE_TARGETS</name></decl>,
  <decl><name>PHY_SORT_MERGE_JOIN_CODE_INPUT_TS_ORDER</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiJoinNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSortMergeJoinPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSortMergeJoinPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SORT_MERGE_JOIN_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SORT_MERGE_JOIN_CODE_JOIN_TYPE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>joinType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SORT_MERGE_JOIN_CODE_MERGE_CONDITION</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pMergeCondition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SORT_MERGE_JOIN_CODE_ON_CONDITIONS</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SORT_MERGE_JOIN_CODE_TARGETS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SORT_MERGE_JOIN_CODE_INPUT_TS_ORDER</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiJoinNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortMergeJoinPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSortMergeJoinPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_SORT_MERGE_JOIN_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SORT_MERGE_JOIN_CODE_JOIN_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>joinType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>joinType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SORT_MERGE_JOIN_CODE_MERGE_CONDITION</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pMergeCondition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SORT_MERGE_JOIN_CODE_ON_CONDITIONS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SORT_MERGE_JOIN_CODE_TARGETS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SORT_MERGE_JOIN_CODE_INPUT_TS_ORDER</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_AGG_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_AGG_CODE_EXPR</name></decl>,
  <decl><name>PHY_AGG_CODE_GROUP_KEYS</name></decl>,
  <decl><name>PHY_AGG_CODE_AGG_FUNCS</name></decl>,
  <decl><name>PHY_AGG_CODE_MERGE_DATA_BLOCK</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiAggNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SAggPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SAggPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_AGG_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_AGG_CODE_EXPR</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_AGG_CODE_GROUP_KEYS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_AGG_CODE_AGG_FUNCS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_AGG_CODE_MERGE_DATA_BLOCK</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiAggNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAggPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SAggPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_AGG_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_AGG_CODE_EXPR</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_AGG_CODE_GROUP_KEYS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_AGG_CODE_AGG_FUNCS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_AGG_CODE_MERGE_DATA_BLOCK</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_EXCHANGE_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_EXCHANGE_CODE_SRC_START_GROUP_ID</name></decl>,
  <decl><name>PHY_EXCHANGE_CODE_SRC_END_GROUP_ID</name></decl>,
  <decl><name>PHY_EXCHANGE_CODE_SINGLE_CHANNEL</name></decl>,
  <decl><name>PHY_EXCHANGE_CODE_SRC_ENDPOINTS</name></decl>,
  <decl><name>PHY_EXCHANGE_CODE_SEQ_RECV_DATA</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiExchangeNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SExchangePhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_EXCHANGE_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_EXCHANGE_CODE_SRC_START_GROUP_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_EXCHANGE_CODE_SRC_END_GROUP_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>srcEndGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_EXCHANGE_CODE_SINGLE_CHANNEL</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>singleChannel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_EXCHANGE_CODE_SRC_ENDPOINTS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSrcEndPoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_EXCHANGE_CODE_SEQ_RECV_DATA</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>seqRecvData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiExchangeNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SExchangePhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_EXCHANGE_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_EXCHANGE_CODE_SRC_START_GROUP_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_EXCHANGE_CODE_SRC_END_GROUP_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>srcEndGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_EXCHANGE_CODE_SINGLE_CHANNEL</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>singleChannel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_EXCHANGE_CODE_SRC_ENDPOINTS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSrcEndPoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_EXCHANGE_CODE_SEQ_RECV_DATA</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>seqRecvData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_MERGE_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_MERGE_CODE_MERGE_KEYS</name></decl>,
  <decl><name>PHY_MERGE_CODE_TARGETS</name></decl>,
  <decl><name>PHY_MERGE_CODE_NUM_OF_CHANNELS</name></decl>,
  <decl><name>PHY_MERGE_CODE_SRC_GROUP_ID</name></decl>,
  <decl><name>PHY_MERGE_CODE_GROUP_SORT</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiMergeNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SMergePhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SMergePhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_MERGE_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_MERGE_CODE_MERGE_KEYS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_MERGE_CODE_TARGETS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_MERGE_CODE_NUM_OF_CHANNELS</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_MERGE_CODE_SRC_GROUP_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>srcGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_MERGE_CODE_GROUP_SORT</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiMergeNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergePhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SMergePhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_MERGE_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_MERGE_CODE_MERGE_KEYS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_MERGE_CODE_TARGETS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_MERGE_CODE_NUM_OF_CHANNELS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_MERGE_CODE_SRC_GROUP_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>srcGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_MERGE_CODE_GROUP_SORT</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>PHY_SORT_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>PHY_SORT_CODE_EXPR</name></decl>, <decl><name>PHY_SORT_CODE_SORT_KEYS</name></decl>, <decl><name>PHY_SORT_CODE_TARGETS</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiSortNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSortPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSortPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SORT_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SORT_CODE_EXPR</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SORT_CODE_SORT_KEYS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SORT_CODE_TARGETS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiSortNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSortPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_SORT_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SORT_CODE_EXPR</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SORT_CODE_SORT_KEYS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SORT_CODE_TARGETS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_WINDOW_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_WINDOW_CODE_EXPR</name></decl>,
  <decl><name>PHY_WINDOW_CODE_FUNCS</name></decl>,
  <decl><name>PHY_WINDOW_CODE_TS_PK</name></decl>,
  <decl><name>PHY_WINDOW_CODE_TS_END</name></decl>,
  <decl><name>PHY_WINDOW_CODE_TRIGGER_TYPE</name></decl>,
  <decl><name>PHY_WINDOW_CODE_WATERMARK</name></decl>,
  <decl><name>PHY_WINDOW_CODE_DELETE_MARK</name></decl>,
  <decl><name>PHY_WINDOW_CODE_IG_EXPIRED</name></decl>,
  <decl><name>PHY_WINDOW_CODE_INPUT_TS_ORDER</name></decl>,
  <decl><name>PHY_WINDOW_CODE_OUTPUT_TS_ORDER</name></decl>,
  <decl><name>PHY_WINDOW_CODE_MERGE_DATA_BLOCK</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiWindowNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_EXPR</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_FUNCS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_TS_PK</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTspk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_TS_END</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTsEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_TRIGGER_TYPE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_WATERMARK</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_DELETE_MARK</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_IG_EXPIRED</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>igExpired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_INPUT_TS_ORDER</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_OUTPUT_TS_ORDER</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>outputTsOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_WINDOW_CODE_MERGE_DATA_BLOCK</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiWindowNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_WINDOW_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_EXPR</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_FUNCS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_TS_PK</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTspk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_TS_END</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTsEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_TRIGGER_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_WATERMARK</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_DELETE_MARK</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_IG_EXPIRED</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>igExpired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_INPUT_TS_ORDER</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_OUTPUT_TS_ORDER</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>outputTsOrder</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>outputTsOrder</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_WINDOW_CODE_MERGE_DATA_BLOCK</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeBool</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>PHY_INTERVAL_CODE_WINDOW</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>PHY_INTERVAL_CODE_INLINE_ATTRS</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiIntervalNodeInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SIntervalPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiIntervalNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SIntervalPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INTERVAL_CODE_WINDOW</name></expr></argument>, <argument><expr><name>physiWindowNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INTERVAL_CODE_INLINE_ATTRS</name></expr></argument>, <argument><expr><name>physiIntervalNodeInlineToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiIntervalNodeInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SIntervalPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiIntervalNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SIntervalPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_INTERVAL_CODE_WINDOW</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiWindowNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INTERVAL_CODE_INLINE_ATTRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiIntervalNodeInline</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_FILL_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_FILL_CODE_MODE</name></decl>,
  <decl><name>PHY_FILL_CODE_FILL_EXPRS</name></decl>,
  <decl><name>PHY_FILL_CODE_NOT_FILL_EXPRS</name></decl>,
  <decl><name>PHY_FILL_CODE_WSTART</name></decl>,
  <decl><name>PHY_FILL_CODE_VALUES</name></decl>,
  <decl><name>PHY_FILL_CODE_TIME_RANGE</name></decl>,
  <decl><name>PHY_FILL_CODE_INPUT_TS_ORDER</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiFillNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SFillPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SFillPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_FILL_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_FILL_CODE_MODE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_FILL_CODE_FILL_EXPRS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_FILL_CODE_NOT_FILL_EXPRS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNotFillExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_FILL_CODE_WSTART</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_FILL_CODE_VALUES</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_FILL_CODE_TIME_RANGE</name></expr></argument>, <argument><expr><name>timeWindowToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_FILL_CODE_INPUT_TS_ORDER</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiFillNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SFillPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_FILL_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_FILL_CODE_MODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_FILL_CODE_FILL_EXPRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_FILL_CODE_NOT_FILL_EXPRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pNotFillExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_FILL_CODE_WSTART</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_FILL_CODE_VALUES</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_FILL_CODE_TIME_RANGE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToTimeWindow</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_FILL_CODE_INPUT_TS_ORDER</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>PHY_SESSION_CODE_WINDOW</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>PHY_SESSION_CODE_GAP</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiSessionWindowNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSessionWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSessionWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SESSION_CODE_WINDOW</name></expr></argument>, <argument><expr><name>physiWindowNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_SESSION_CODE_GAP</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>gap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiSessionWindowNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSessionWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSessionWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_SESSION_CODE_WINDOW</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiWindowNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_SESSION_CODE_GAP</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>gap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>PHY_STATE_CODE_WINDOW</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>PHY_STATE_CODE_KEY</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiStateWindowNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SStateWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStateWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_STATE_CODE_WINDOW</name></expr></argument>, <argument><expr><name>physiWindowNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_STATE_CODE_KEY</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pStateKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiStateWindowNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SStateWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_STATE_CODE_WINDOW</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiWindowNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_STATE_CODE_KEY</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pStateKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>PHY_PARTITION_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>PHY_PARTITION_CODE_EXPR</name></decl>, <decl><name>PHY_PARTITION_CODE_KEYS</name></decl>, <decl><name>PHY_PARTITION_CODE_TARGETS</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiPartitionNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SPartitionPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SPartitionPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_PARTITION_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_PARTITION_CODE_EXPR</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_PARTITION_CODE_KEYS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pPartitionKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_PARTITION_CODE_TARGETS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiPartitionNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPartitionPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SPartitionPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_PARTITION_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_PARTITION_CODE_EXPR</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_PARTITION_CODE_KEYS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pPartitionKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_PARTITION_CODE_TARGETS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>PHY_STREAM_PARTITION_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>PHY_STREAM_PARTITION_CODE_TAGS</name></decl>, <decl><name>PHY_STREAM_PARTITION_CODE_SUBTABLE</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiStreamPartitionNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SStreamPartitionPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStreamPartitionPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_STREAM_PARTITION_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiPartitionNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>part</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_STREAM_PARTITION_CODE_TAGS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_STREAM_PARTITION_CODE_SUBTABLE</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiStreamPartitionNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamPartitionPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SStreamPartitionPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_STREAM_PARTITION_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiPartitionNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>part</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_STREAM_PARTITION_CODE_TAGS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_STREAM_PARTITION_CODE_SUBTABLE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>PHY_INDEF_ROWS_FUNC_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>PHY_INDEF_ROWS_FUNC_CODE_EXPRS</name></decl>, <decl><name>PHY_INDEF_ROWS_FUNC_CODE_FUNCS</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiIndefRowsFuncNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SIndefRowsFuncPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SIndefRowsFuncPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INDEF_ROWS_FUNC_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INDEF_ROWS_FUNC_CODE_EXPRS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INDEF_ROWS_FUNC_CODE_FUNCS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiIndefRowsFuncNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndefRowsFuncPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SIndefRowsFuncPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_INDEF_ROWS_FUNC_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INDEF_ROWS_FUNC_CODE_EXPRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INDEF_ROWS_FUNC_CODE_FUNCS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_INERP_FUNC_CODE_BASE_NODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_INERP_FUNC_CODE_EXPR</name></decl>,
  <decl><name>PHY_INERP_FUNC_CODE_FUNCS</name></decl>,
  <decl><name>PHY_INERP_FUNC_CODE_TIME_RANGE</name></decl>,
  <decl><name>PHY_INERP_FUNC_CODE_INTERVAL</name></decl>,
  <decl><name>PHY_INERP_FUNC_CODE_INTERVAL_UNIT</name></decl>,
  <decl><name>PHY_INERP_FUNC_CODE_FILL_MODE</name></decl>,
  <decl><name>PHY_INERP_FUNC_CODE_FILL_VALUES</name></decl>,
  <decl><name>PHY_INERP_FUNC_CODE_TIME_SERIES</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiInterpFuncNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SInterpFuncPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SInterpFuncPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INERP_FUNC_CODE_BASE_NODE</name></expr></argument>, <argument><expr><name>physiNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INERP_FUNC_CODE_EXPR</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INERP_FUNC_CODE_FUNCS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INERP_FUNC_CODE_TIME_RANGE</name></expr></argument>, <argument><expr><name>timeWindowToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INERP_FUNC_CODE_INTERVAL</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INERP_FUNC_CODE_INTERVAL_UNIT</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INERP_FUNC_CODE_FILL_MODE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fillMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INERP_FUNC_CODE_FILL_VALUES</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFillValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_INERP_FUNC_CODE_TIME_SERIES</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTimeSeries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiInterpFuncNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInterpFuncPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SInterpFuncPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_INERP_FUNC_CODE_BASE_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysiNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INERP_FUNC_CODE_EXPR</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INERP_FUNC_CODE_FUNCS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INERP_FUNC_CODE_TIME_RANGE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToTimeWindow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INERP_FUNC_CODE_INTERVAL</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INERP_FUNC_CODE_INTERVAL_UNIT</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INERP_FUNC_CODE_FILL_MODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeEnum</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>fillMode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fillMode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INERP_FUNC_CODE_FILL_VALUES</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFillValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_INERP_FUNC_CODE_TIME_SERIES</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTimeSeries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>PHY_DATA_SINK_CODE_INPUT_DESC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physicDataSinkNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataSinkNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataSinkNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DATA_SINK_CODE_INPUT_DESC</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pInputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysicDataSinkNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataSinkNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataSinkNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_DATA_SINK_CODE_INPUT_DESC</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pInputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>PHY_DISPATCH_CODE_SINK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiDispatchNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataDispatcherNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataDispatcherNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DISPATCH_CODE_SINK</name></expr></argument>, <argument><expr><name>physicDataSinkNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sink</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiDispatchNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDispatcherNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataDispatcherNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_DISPATCH_CODE_SINK</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysicDataSinkNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_QUERY_INSERT_CODE_SINK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_QUERY_INSERT_CODE_COLS</name></decl>,
  <decl><name>PHY_QUERY_INSERT_CODE_TABLE_ID</name></decl>,
  <decl><name>PHY_QUERY_INSERT_CODE_STABLE_ID</name></decl>,
  <decl><name>PHY_QUERY_INSERT_CODE_TABLE_TYPE</name></decl>,
  <decl><name>PHY_QUERY_INSERT_CODE_TABLE_NAME</name></decl>,
  <decl><name>PHY_QUERY_INSERT_CODE_VG_ID</name></decl>,
  <decl><name>PHY_QUERY_INSERT_CODE_EP_SET</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiQueryInsertNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SQueryInserterNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SQueryInserterNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_QUERY_INSERT_CODE_SINK</name></expr></argument>, <argument><expr><name>physicDataSinkNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sink</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_QUERY_INSERT_CODE_COLS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_QUERY_INSERT_CODE_TABLE_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_QUERY_INSERT_CODE_STABLE_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>stableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_QUERY_INSERT_CODE_TABLE_TYPE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_QUERY_INSERT_CODE_TABLE_NAME</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_QUERY_INSERT_CODE_VG_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_QUERY_INSERT_CODE_EP_SET</name></expr></argument>, <argument><expr><name>epSetToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiQueryInsertNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryInserterNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SQueryInserterNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_QUERY_INSERT_CODE_SINK</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysicDataSinkNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_QUERY_INSERT_CODE_COLS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_QUERY_INSERT_CODE_TABLE_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_QUERY_INSERT_CODE_STABLE_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>stableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_QUERY_INSERT_CODE_TABLE_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_QUERY_INSERT_CODE_TABLE_NAME</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeCStr</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_QUERY_INSERT_CODE_VG_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_QUERY_INSERT_CODE_EP_SET</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToEpSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>PHY_DELETER_CODE_SINK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>PHY_DELETER_CODE_TABLE_ID</name></decl>,
  <decl><name>PHY_DELETER_CODE_TABLE_TYPE</name></decl>,
  <decl><name>PHY_DELETER_CODE_TABLE_FNAME</name></decl>,
  <decl><name>PHY_DELETER_CODE_TS_COL_NAME</name></decl>,
  <decl><name>PHY_DELETER_CODE_DELETE_TIME_RANGE</name></decl>,
  <decl><name>PHY_DELETER_CODE_AFFECTED_ROWS</name></decl>,
  <decl><name>PHY_DELETER_CODE_START_TS</name></decl>,
  <decl><name>PHY_DELETER_CODE_END_TS</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiDeleteNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataDeleterNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataDeleterNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DELETER_CODE_SINK</name></expr></argument>, <argument><expr><name>physicDataSinkNodeToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sink</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DELETER_CODE_TABLE_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DELETER_CODE_TABLE_TYPE</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DELETER_CODE_TABLE_FNAME</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DELETER_CODE_TS_COL_NAME</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DELETER_CODE_DELETE_TIME_RANGE</name></expr></argument>, <argument><expr><name>timeWindowToMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>deleteTimeRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DELETER_CODE_AFFECTED_ROWS</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pAffectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DELETER_CODE_START_TS</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>PHY_DELETER_CODE_END_TS</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pEndTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToPhysiDeleteNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDeleterNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataDeleterNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>PHY_DELETER_CODE_SINK</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToPhysicDataSinkNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_DELETER_CODE_TABLE_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_DELETER_CODE_TABLE_TYPE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI8</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_DELETER_CODE_TABLE_FNAME</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeCStr</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableFName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_DELETER_CODE_TS_COL_NAME</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeCStr</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_DELETER_CODE_DELETE_TIME_RANGE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToTimeWindow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>deleteTimeRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_DELETER_CODE_AFFECTED_ROWS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pAffectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_DELETER_CODE_START_TS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PHY_DELETER_CODE_END_TS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pEndTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>SUBPLAN_ID_CODE_QUERY_ID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>SUBPLAN_ID_CODE_GROUP_ID</name></decl>, <decl><name>SUBPLAN_ID_CODE_SUBPLAN_ID</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>subplanIdInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSubplanId</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSubplanId</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subplanId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>subplanIdToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSubplanId</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSubplanId</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>SUBPLAN_ID_CODE_QUERY_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>SUBPLAN_ID_CODE_GROUP_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>SUBPLAN_ID_CODE_SUBPLAN_ID</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subplanId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToSubplanIdInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubplanId</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSubplanId</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueU64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>subplanId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToSubplanId</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubplanId</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSubplanId</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>SUBPLAN_ID_CODE_QUERY_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeU64</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SUBPLAN_ID_CODE_GROUP_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SUBPLAN_ID_CODE_SUBPLAN_ID</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeI32</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>subplanId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
  <decl><name>SUBPLAN_CODE_INLINE_ATTRS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>SUBPLAN_CODE_ROOT_NODE</name></decl>,
  <decl><name>SUBPLAN_CODE_DATA_SINK</name></decl>,
  <decl><name>SUBPLAN_CODE_TAG_COND</name></decl>,
  <decl><name>SUBPLAN_CODE_TAG_INDEX_COND</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>subplanInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSubplan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSubplan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>subplanIdInlineToMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueEnum</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subplanType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>queryNodeAddrInlineToMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueBool</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>subplanToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSubplan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSubplan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>SUBPLAN_CODE_INLINE_ATTRS</name></expr></argument>, <argument><expr><name>subplanInlineToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>SUBPLAN_CODE_ROOT_NODE</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>SUBPLAN_CODE_DATA_SINK</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>SUBPLAN_CODE_TAG_COND</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>SUBPLAN_CODE_TAG_INDEX_COND</name></expr></argument>, <argument><expr><name>nodeToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTagIndexCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToSubplanInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSubplan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>msgToSubplanIdInline</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueEnum</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>subplanType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subplanType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueCStr</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueCStr</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToQueryNodeAddrInline</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueBool</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToSubplan</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSubplan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>SUBPLAN_CODE_INLINE_ATTRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToSubplanInline</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SUBPLAN_CODE_ROOT_NODE</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SUBPLAN_CODE_DATA_SINK</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SUBPLAN_CODE_TAG_COND</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SUBPLAN_CODE_TAG_INDEX_COND</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTagIndexCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>QUERY_PLAN_CODE_INLINE_ATTRS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>QUERY_PLAN_CODE_SUBPLANS</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>queryPlanInlineToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SQueryPlan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SQueryPlan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeValueU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeValueI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>queryPlanToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SQueryPlan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SQueryPlan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>QUERY_PLAN_CODE_INLINE_ATTRS</name></expr></argument>, <argument><expr><name>queryPlanInlineToMsg</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>QUERY_PLAN_CODE_SUBPLANS</name></expr></argument>, <argument><expr><name>nodeListToMsg</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToQueryPlanInline</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SQueryPlan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tlvDecodeValueU64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeValueI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToQueryPlan</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SQueryPlan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STlv</name><modifier>*</modifier></type>   <name>pTlv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>tlvForEach</name><argument_list>(<argument>pDecoder</argument>, <argument>pTlv</argument>, <argument>code</argument>)</argument_list></macro> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pTlv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>QUERY_PLAN_CODE_INLINE_ATTRS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tlvDecodeObjFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><name>msgToQueryPlanInline</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>QUERY_PLAN_CODE_SUBPLANS</name></expr>:</case>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListFromTlv</name><argument_list>(<argument><expr><name>pTlv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>specificNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// nodesWarn("specificNodeToMsg node = %s, before tlv count = %d", nodesNodeName(nodeType(pObj)), pEncoder-&gt;tlvCount);</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>columnNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>valueNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>operatorNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>logicConditionNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>functionNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ORDER_BY_EXPR</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>orderByExprNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LIMIT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>limitNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_NODE_LIST</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_TARGET</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>targetNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DATABLOCK_DESC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dataBlockDescNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SLOT_DESC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>slotDescNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DOWNSTREAM_SOURCE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>downstreamSourceNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LEFT_VALUE</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_WHEN_THEN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>whenThenNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CASE_WHEN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>caseWhenNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TAG_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_BLOCK_DIST_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiScanNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_LAST_ROW_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_COUNT_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiLastRowScanNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_MERGE_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiTableScanNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SYSTABLE_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiSysTableScanNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PROJECT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiProjectNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_JOIN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiJoinNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_AGG</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiAggNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiExchangeNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiMergeNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SORT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_GROUP_SORT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiSortNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiIntervalNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_FILL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FILL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiFillNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiSessionWindowNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_STATE</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_STATE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiStateWindowNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PARTITION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiPartitionNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_PARTITION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiStreamPartitionNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INDEF_ROWS_FUNC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiIndefRowsFuncNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INTERP_FUNC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiInterpFuncNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DISPATCH</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiDispatchNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_QUERY_INSERT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiQueryInsertNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DELETE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>physiDeleteNodeToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_SUBPLAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>subplanToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>queryPlanToMsg</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesError</name><argument_list>(<argument><expr><literal type="string">"specificNodeToMsg error node = %s"</literal></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// nodesWarn("specificNodeToMsg node = %s, after tlv count = %d", nodesNodeName(nodeType(pObj)), pEncoder-&gt;tlvCount);</comment>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToSpecificNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToColumnNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToValueNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToOperatorNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToLogicConditionNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToFunctionNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ORDER_BY_EXPR</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToOrderByExprNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_LIMIT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToLimitNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_NODE_LIST</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNodeListNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_TARGET</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToTargetNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DATABLOCK_DESC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToDataBlockDescNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_SLOT_DESC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToSlotDescNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DOWNSTREAM_SOURCE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToDownstreamSourceNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case>case <expr><name>QUERY_NODE_LEFT_VALUE</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_WHEN_THEN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToWhenThenNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CASE_WHEN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToCaseWhenNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TAG_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_BLOCK_DIST_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiScanNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_LAST_ROW_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_COUNT_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiLastRowScanNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_MERGE_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiTableScanNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SYSTABLE_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiSysTableScanNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PROJECT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiProjectNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_JOIN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiJoinNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_AGG</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiAggNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiExchangeNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiMergeNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SORT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_GROUP_SORT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiSortNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiIntervalNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_FILL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FILL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiFillNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiSessionWindowNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_STATE</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_STATE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiStateWindowNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PARTITION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiPartitionNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_PARTITION</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiStreamPartitionNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INDEF_ROWS_FUNC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiIndefRowsFuncNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INTERP_FUNC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiInterpFuncNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DISPATCH</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiDispatchNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_QUERY_INSERT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiQueryInsertNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DELETE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToPhysiDeleteNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_SUBPLAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToSubplan</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToQueryPlan</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesError</name><argument_list>(<argument><expr><literal type="string">"msgToSpecificNode error node = %s"</literal></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvEncodeObj</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>specificNodeToMsg</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToNode</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tlvDecodeDynObj</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>(</operator><name>FMakeObject</name><operator>)</operator><name>nodesMakeNode</name></expr></argument>, <argument><expr><name>msgToSpecificNode</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToNodeFromTlv</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STlvDecoder</name></type> <name>decoder</name> <init>= <expr><block>{<expr><operator>.</operator><name>bufSize</name> <operator>=</operator> <name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>pBuf</name> <operator>=</operator> <name><name>pTlv</name><operator>-&gt;</operator><name>value</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>msgToNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nodeListToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>STlvEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SNodeList</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodeToMsg</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToNodeList</name><parameter_list>(<parameter><decl><type><name>STlvDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tlvDecodeEnd</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>msgToNode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListAppend</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pObj</name> <operator>=</operator> <name>pList</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>msgToNodeListFromTlv</name><parameter_list>(<parameter><decl><type><name>STlv</name><modifier>*</modifier></type> <name>pTlv</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STlvDecoder</name></type> <name>decoder</name> <init>= <expr><block>{<expr><operator>.</operator><name>bufSize</name> <operator>=</operator> <name><name>pTlv</name><operator>-&gt;</operator><name>len</name></name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>pBuf</name> <operator>=</operator> <name><name>pTlv</name><operator>-&gt;</operator><name>value</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>msgToNodeList</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>nodesNodeToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pMsg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pLen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FAILED</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STlvEncoder</name></type> <name>encoder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>initTlvEncoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeToMsg</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>endTlvEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>clearTlvEncoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>nodesMsgToNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMsg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STlvDecoder</name></type> <name>decoder</name> <init>= <expr><block>{<expr><operator>.</operator><name>bufSize</name> <operator>=</operator> <name>len</name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>pBuf</name> <operator>=</operator> <name>pMsg</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>msgToNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
