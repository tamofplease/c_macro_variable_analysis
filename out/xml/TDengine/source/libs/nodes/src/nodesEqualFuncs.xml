<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/nodes/src/nodesEqualFuncs.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_SCALAR_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>           \
  <cpp:value>do {                                          \
    if (a-&gt;fldname != b-&gt;fldname) return false; \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_STRING</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) != NULL &amp;&amp; (b) != NULL) ? (strcmp((a), (b)) == 0) : (a) == (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_VARDATA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                                                                                   \
  <cpp:value>(((a) != NULL &amp;&amp; (b) != NULL)                                                                                 \
       ? (varDataLen((a)) == varDataLen((b)) &amp;&amp; memcmp(varDataVal((a)), varDataVal((b)), varDataLen((a))) == 0) \
       : (a) == (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_STRING_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>                          \
  <cpp:value>do {                                                         \
    if (!COMPARE_STRING(a-&gt;fldname, b-&gt;fldname)) return false; \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_VARDATA_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>                          \
  <cpp:value>do {                                                          \
    if (!COMPARE_VARDATA(a-&gt;fldname, b-&gt;fldname)) return false; \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_OBJECT_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>equalFunc</name></type></parameter>)</parameter_list></cpp:macro>          \
  <cpp:value>do {                                                    \
    if (!equalFunc(a-&gt;fldname, b-&gt;fldname)) return false; \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_NODE_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>                            \
  <cpp:value>do {                                                         \
    if (!nodesEqualNode(a-&gt;fldname, b-&gt;fldname)) return false; \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_NODE_LIST_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>                          \
  <cpp:value>do {                                                            \
    if (!nodeNodeListEqual(a-&gt;fldname, b-&gt;fldname)) return false; \
  } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>nodeNodeListEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>a</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>na</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nb</name></decl>;</decl_stmt>
  <macro><name>FORBOTH</name><argument_list>(<argument>na</argument>, <argument>a</argument>, <argument>nb</argument>, <argument>b</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nodesEqualNode</name><argument_list>(<argument><expr><name>na</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>dataTypeEqual</name><parameter_list>(<parameter><decl><type><name>SDataType</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SDataType</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>a</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>precision</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>precision</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>scale</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>scale</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>columnNodeEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SColumnNode</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SColumnNode</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COMPARE_STRING_FIELD</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COMPARE_STRING_FIELD</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COMPARE_STRING_FIELD</name><argument_list>(<argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>tableId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>COMPARE_STRING_FIELD</name><argument_list>(<argument><expr><name>tableAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>valueNodeEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COMPARE_OBJECT_FIELD</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><name>dataTypeEqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COMPARE_STRING_FIELD</name><argument_list>(<argument><expr><name>literal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><call><name>COMPARE_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typeData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <expr_stmt><expr><call><name>COMPARE_VARDATA_FIELD</name><argument_list>(<argument><expr><name><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_DECIMAL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BLOB</name></expr>:</case>
      <return>return <expr><name>false</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>operatorNodeEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SOperatorNode</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SOperatorNode</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COMPARE_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COMPARE_NODE_FIELD</name><argument_list>(<argument><expr><name>pLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COMPARE_NODE_FIELD</name><argument_list>(<argument><expr><name>pRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>logicConditionNodeEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SLogicConditionNode</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SLogicConditionNode</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COMPARE_SCALAR_FIELD</name><argument_list>(<argument><expr><name>condType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COMPARE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>functionNodeEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COMPARE_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COMPARE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>whenThenNodeEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SWhenThenNode</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SWhenThenNode</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COMPARE_NODE_FIELD</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COMPARE_NODE_FIELD</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>caseWhenNodeEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SCaseWhenNode</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SCaseWhenNode</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>COMPARE_NODE_FIELD</name><argument_list>(<argument><expr><name>pCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COMPARE_NODE_FIELD</name><argument_list>(<argument><expr><name>pElse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>COMPARE_NODE_LIST_FIELD</name><argument_list>(<argument><expr><name>pWhenThenList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>nodesEqualNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>a</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case>
      <return>return <expr><call><name>columnNodeEqual</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SColumnNode</name><operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SColumnNode</name><operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case>
      <return>return <expr><call><name>valueNodeEqual</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SValueNode</name><operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SValueNode</name><operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
      <return>return <expr><call><name>operatorNodeEqual</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case>
      <return>return <expr><call><name>logicConditionNodeEqual</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case>
      <return>return <expr><call><name>functionNodeEqual</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_WHEN_THEN</name></expr>:</case>
      <return>return <expr><call><name>whenThenNodeEqual</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SWhenThenNode</name><operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SWhenThenNode</name><operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CASE_WHEN</name></expr>:</case>
      <return>return <expr><call><name>caseWhenNodeEqual</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_REAL_TABLE</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_TEMP_TABLE</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_JOIN_TABLE</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_GROUPING_SET</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_ORDER_BY_EXPR</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_LIMIT</name></expr>:</case>
      <return>return <expr><name>false</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
