<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/nodes/src/nodesCodeFuncs.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmdnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodesUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tjson.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>nodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToNodeObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>makeNodeByJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>nodesNodeName</name><parameter_list>(<parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case>
      <return>return <expr><literal type="string">"Column"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case>
      <return>return <expr><literal type="string">"Value"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
      <return>return <expr><literal type="string">"Operator"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicCondition"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case>
      <return>return <expr><literal type="string">"Function"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_REAL_TABLE</name></expr>:</case>
      <return>return <expr><literal type="string">"RealTable"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_TEMP_TABLE</name></expr>:</case>
      <return>return <expr><literal type="string">"TempTable"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_JOIN_TABLE</name></expr>:</case>
      <return>return <expr><literal type="string">"JoinTable"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_GROUPING_SET</name></expr>:</case>
      <return>return <expr><literal type="string">"GroupingSet"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ORDER_BY_EXPR</name></expr>:</case>
      <return>return <expr><literal type="string">"OrderByExpr"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LIMIT</name></expr>:</case>
      <return>return <expr><literal type="string">"Limit"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_STATE_WINDOW</name></expr>:</case>
      <return>return <expr><literal type="string">"StateWindow"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SESSION_WINDOW</name></expr>:</case>
      <return>return <expr><literal type="string">"SessionWinow"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_INTERVAL_WINDOW</name></expr>:</case>
      <return>return <expr><literal type="string">"IntervalWindow"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_NODE_LIST</name></expr>:</case>
      <return>return <expr><literal type="string">"NodeList"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_FILL</name></expr>:</case>
      <return>return <expr><literal type="string">"Fill"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_RAW_EXPR</name></expr>:</case>
      <return>return <expr><literal type="string">"RawExpr"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_TARGET</name></expr>:</case>
      <return>return <expr><literal type="string">"Target"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DATABLOCK_DESC</name></expr>:</case>
      <return>return <expr><literal type="string">"DataBlockDesc"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SLOT_DESC</name></expr>:</case>
      <return>return <expr><literal type="string">"SlotDesc"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_COLUMN_DEF</name></expr>:</case>
      <return>return <expr><literal type="string">"ColumnDef"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DOWNSTREAM_SOURCE</name></expr>:</case>
      <return>return <expr><literal type="string">"DownstreamSource"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DATABASE_OPTIONS</name></expr>:</case>
      <return>return <expr><literal type="string">"DatabaseOptions"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_TABLE_OPTIONS</name></expr>:</case>
      <return>return <expr><literal type="string">"TableOptions"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_INDEX_OPTIONS</name></expr>:</case>
      <return>return <expr><literal type="string">"IndexOptions"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LEFT_VALUE</name></expr>:</case>
      <return>return <expr><literal type="string">"LeftValue"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_WHEN_THEN</name></expr>:</case>
      <return>return <expr><literal type="string">"WhenThen"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CASE_WHEN</name></expr>:</case>
      <return>return <expr><literal type="string">"CaseWhen"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SET_OPERATOR</name></expr>:</case>
      <return>return <expr><literal type="string">"SetOperator"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SELECT_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"SelectStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_VNODE_MODIF_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"VnodeModifStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_DATABASE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"CreateDatabaseStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_DATABASE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"DropDatabaseStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_DATABASE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"AlterDatabaseStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_TABLE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"CreateTableStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_SUBTABLE_CLAUSE</name></expr>:</case>
      <return>return <expr><literal type="string">"CreateSubtableClause"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_MULTI_TABLE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"CreateMultiTableStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_TABLE_CLAUSE</name></expr>:</case>
      <return>return <expr><literal type="string">"DropTableClause"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_TABLE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"DropTableStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_SUPER_TABLE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"DropSuperTableStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"AlterTableStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_SUPER_TABLE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"AlterSuperTableStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_USER_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"CreateUserStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_USER_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"AlterUserStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_USER_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"DropUserStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_USE_DATABASE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"UseDatabaseStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_DNODE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"CreateDnodeStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_DNODE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"DropDnodeStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_DNODE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"AlterDnodeStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_INDEX_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"CreateIndexStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_INDEX_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"DropIndexStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_QNODE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"CreateQnodeStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_QNODE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"DropQnodeStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_TOPIC_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"CreateTopicStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_TOPIC_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"DropTopicStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_LOCAL_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"AlterLocalStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_DNODES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowDnodesStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_MNODES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowMnodesStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_MODULES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowModulesStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_QNODES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowQnodesStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_SNODES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowSnodesStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_BNODES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowBnodesStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_DATABASES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowDatabaseStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_FUNCTIONS_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowFunctionsStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_INDEXES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowIndexesStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_STABLES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowStablesStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_STREAMS_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowStreamsStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_TABLES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowTablesStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_TAGS_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowTagsStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_USERS_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowUsersStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_LICENCES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowGrantsStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_VGROUPS_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowVgroupsStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_TOPICS_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowTopicsStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_CONSUMERS_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowConsumersStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_QUERIES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowQueriesStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_VNODES_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"ShowVnodeStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DELETE_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"DeleteStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_INSERT_STMT</name></expr>:</case>
      <return>return <expr><literal type="string">"InsertStmt"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_SCAN</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicScan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_JOIN</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicJoin"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_AGG</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicAgg"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_PROJECT</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicProject"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_VNODE_MODIFY</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicVnodeModify"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_EXCHANGE</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicExchange"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_MERGE</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicMerge"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_WINDOW</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicWindow"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_FILL</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicFill"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_SORT</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicSort"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_PARTITION</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicPartition"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_INDEF_ROWS_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicIndefRowsFunc"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_INTERP_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicInterpFunc"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_SUBPLAN</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicSubplan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN</name></expr>:</case>
      <return>return <expr><literal type="string">"LogicPlan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TAG_SCAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiTagScan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiTableScan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SEQ_SCAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiTableSeqScan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_MERGE_SCAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiTableMergeScan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiSreamScan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SYSTABLE_SCAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiSystemTableScan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_BLOCK_DIST_SCAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiBlockDistScan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_LAST_ROW_SCAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiLastRowScan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_COUNT_SCAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiTableCountScan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PROJECT</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiProject"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_JOIN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiJoin"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_AGG</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiAgg"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiExchange"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiMerge"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SORT</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiSort"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_GROUP_SORT</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiGroupSort"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiHashInterval"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiMergeAlignedInterval"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiStreamInterval"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiStreamFinalInterval"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiStreamSemiInterval"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_FILL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FILL</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiFill"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_SESSION</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiSessionWindow"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SESSION</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiStreamSessionWindow"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_SESSION</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiStreamSemiSessionWindow"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiStreamFinalSessionWindow"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_STATE</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiStateWindow"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_STATE</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiStreamStateWindow"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PARTITION</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiPartition"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_PARTITION</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiStreamPartition"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INDEF_ROWS_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiIndefRowsFunc"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INTERP_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiInterpFunc"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DISPATCH</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiDispatch"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INSERT</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiInsert"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_QUERY_INSERT</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiQueryInsert"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DELETE</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiDelete"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_SUBPLAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiSubplan"</literal></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN</name></expr>:</case>
      <return>return <expr><literal type="string">"PhysiPlan"</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>nodesWarn</name><argument_list>(<argument><expr><literal type="string">"nodesNodeName unknown node = %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="string">"UnknownNode"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nodeListToJson</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>jList</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>jList</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddItem</name><argument_list>(<argument><expr><name>jList</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToNodeListImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJsonArray</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>==</operator> <name>pJsonArray</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>tjsonGetArraySize</name><argument_list>(<argument><expr><name>pJsonArray</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pList</name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pList</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJsonItem</name> <init>= <expr><call><name>tjsonGetArrayItem</name><argument_list>(<argument><expr><name>pJsonArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>makeNodeByJson</name><argument_list>(<argument><expr><name>pJsonItem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListAppend</name><argument_list>(<argument><expr><operator>*</operator><name>pList</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToNodeList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jsonToNodeListImpl</name><argument_list>(<argument><expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableComInfoNumOfTags</name> <init>= <expr><literal type="string">"NumOfTags"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableComInfoPrecision</name> <init>= <expr><literal type="string">"Precision"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableComInfoNumOfColumns</name> <init>= <expr><literal type="string">"NumOfColumns"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableComInfoRowSize</name> <init>= <expr><literal type="string">"RowSize"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tableComInfoToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STableComInfo</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STableComInfo</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableComInfoNumOfTags</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableComInfoPrecision</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableComInfoNumOfColumns</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableComInfoRowSize</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>rowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToTableComInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableComInfo</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STableComInfo</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableComInfoNumOfTags</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableComInfoPrecision</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableComInfoNumOfColumns</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableComInfoRowSize</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>rowSize</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSchemaType</name> <init>= <expr><literal type="string">"Type"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSchemaColId</name> <init>= <expr><literal type="string">"ColId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSchemaBytes</name> <init>= <expr><literal type="string">"bytes"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSchemaName</name> <init>= <expr><literal type="string">"Name"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>schemaToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSchema</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSchemaType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSchemaColId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSchemaBytes</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSchemaName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToSchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSchema</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSchemaType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSchemaColId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSchemaBytes</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSchemaName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableMetaVgId</name> <init>= <expr><literal type="string">"VgId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableMetaTableType</name> <init>= <expr><literal type="string">"TableType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableMetaUid</name> <init>= <expr><literal type="string">"Uid"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableMetaSuid</name> <init>= <expr><literal type="string">"Suid"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableMetaSversion</name> <init>= <expr><literal type="string">"Sversion"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableMetaTversion</name> <init>= <expr><literal type="string">"Tversion"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableMetaComInfo</name> <init>= <expr><literal type="string">"ComInfo"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableMetaColSchemas</name> <init>= <expr><literal type="string">"ColSchemas"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tableMetaToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STableMeta</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STableMeta</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaVgId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaTableType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaUid</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaSuid</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaSversion</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaTversion</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaComInfo</name></expr></argument>, <argument><expr><name>tableComInfoToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaColSchemas</name></expr></argument>, <argument><expr><name>schemaToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                         <argument><expr><call><name>TABLE_TOTAL_COL_NUM</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToTableMeta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STableMeta</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaVgId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaTableType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaUid</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaSuid</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaSversion</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaTversion</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tversion</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaComInfo</name></expr></argument>, <argument><expr><name>jsonToTableComInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableMetaColSchemas</name></expr></argument>, <argument><expr><name>jsonToSchema</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicPlanTargets</name> <init>= <expr><literal type="string">"Targets"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicPlanConditions</name> <init>= <expr><literal type="string">"Conditions"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicPlanChildren</name> <init>= <expr><literal type="string">"Children"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicPlanLimit</name> <init>= <expr><literal type="string">"Limit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicPlanSlimit</name> <init>= <expr><literal type="string">"SLimit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicPlanRequireDataOrder</name> <init>= <expr><literal type="string">"RequireDataOrder"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicPlanResultDataOrder</name> <init>= <expr><literal type="string">"ResultDataOrder"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicPlanGroupAction</name> <init>= <expr><literal type="string">"GroupAction"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicPlanNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanTargets</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanConditions</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanChildren</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanLimit</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanSlimit</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanRequireDataOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>requireDataOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanResultDataOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>resultDataOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanGroupAction</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicPlanNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanTargets</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanConditions</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanLimit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanSlimit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanRequireDataOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>requireDataOrder</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanResultDataOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>resultDataOrder</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanGroupAction</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupAction</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanScanCols</name> <init>= <expr><literal type="string">"ScanCols"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanScanPseudoCols</name> <init>= <expr><literal type="string">"ScanPseudoCols"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanTableType</name> <init>= <expr><literal type="string">"TableType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanTableId</name> <init>= <expr><literal type="string">"TableId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanStableId</name> <init>= <expr><literal type="string">"StableId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanScanType</name> <init>= <expr><literal type="string">"ScanType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanScanCount</name> <init>= <expr><literal type="string">"ScanCount"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanReverseScanCount</name> <init>= <expr><literal type="string">"ReverseScanCount"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanDynamicScanFuncs</name> <init>= <expr><literal type="string">"DynamicScanFuncs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanDataRequired</name> <init>= <expr><literal type="string">"DataRequired"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanTagCond</name> <init>= <expr><literal type="string">"TagCond"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanLogicPlanGroupTags</name> <init>= <expr><literal type="string">"GroupTags"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicScanNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SScanLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SScanLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanScanCols</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanScanPseudoCols</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanTableType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanTableId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanStableId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>stableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanScanType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanScanCount</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanReverseScanCount</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanDynamicScanFuncs</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pDynamicScanFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanDataRequired</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataRequired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanTagCond</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanGroupTags</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicScanNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SScanLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>objSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanScanCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanScanPseudoCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanTableType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanTableId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanStableId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>stableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanScanType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanScanCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanReverseScanCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanDynamicScanFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pDynamicScanFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanDataRequired</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataRequired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanTagCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanLogicPlanGroupTags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkProjectLogicPlanProjections</name> <init>= <expr><literal type="string">"Projections"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkProjectLogicPlanIgnoreGroupId</name> <init>= <expr><literal type="string">"IgnoreGroupId"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicProjectNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SProjectLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SProjectLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkProjectLogicPlanProjections</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkProjectLogicPlanIgnoreGroupId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>ignoreGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicProjectNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SProjectLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SProjectLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkProjectLogicPlanProjections</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkProjectLogicPlanIgnoreGroupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>ignoreGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkVnodeModifyLogicPlanModifyType</name> <init>= <expr><literal type="string">"ModifyType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkVnodeModifyLogicPlanMsgType</name> <init>= <expr><literal type="string">"MsgType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkVnodeModifyLogicPlanAffectedRows</name> <init>= <expr><literal type="string">"AffectedRows"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicVnodeModifyNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SVnodeModifyLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVnodeModifyLogicPlanModifyType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>modifyType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVnodeModifyLogicPlanMsgType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVnodeModifyLogicPlanAffectedRows</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pAffectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicVnodeModifyNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SVnodeModifyLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVnodeModifyLogicPlanModifyType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>modifyType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVnodeModifyLogicPlanMsgType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVnodeModifyLogicPlanAffectedRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pAffectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkExchangeLogicPlanSrcStartGroupId</name> <init>= <expr><literal type="string">"SrcStartGroupId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkExchangeLogicPlanSrcEndGroupId</name> <init>= <expr><literal type="string">"SrcEndGroupId"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicExchangeNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SExchangeLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SExchangeLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangeLogicPlanSrcStartGroupId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangeLogicPlanSrcEndGroupId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>srcEndGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicExchangeNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangeLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SExchangeLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangeLogicPlanSrcStartGroupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangeLogicPlanSrcEndGroupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>srcEndGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkMergeLogicPlanMergeKeys</name> <init>= <expr><literal type="string">"MergeKeys"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkMergeLogicPlanInputs</name> <init>= <expr><literal type="string">"Inputs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkMergeLogicPlanNumOfChannels</name> <init>= <expr><literal type="string">"NumOfChannels"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkMergeLogicPlanSrcGroupId</name> <init>= <expr><literal type="string">"SrcGroupId"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicMergeNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SMergeLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SMergeLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergeLogicPlanMergeKeys</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergeLogicPlanInputs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pInputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergeLogicPlanNumOfChannels</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergeLogicPlanSrcGroupId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>srcGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicMergeNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergeLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SMergeLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergeLogicPlanMergeKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergeLogicPlanInputs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pInputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergeLogicPlanNumOfChannels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergeLogicPlanSrcGroupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>srcGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanWinType</name> <init>= <expr><literal type="string">"WinType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanFuncs</name> <init>= <expr><literal type="string">"Funcs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanInterval</name> <init>= <expr><literal type="string">"Interval"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanOffset</name> <init>= <expr><literal type="string">"Offset"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanSliding</name> <init>= <expr><literal type="string">"Sliding"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanIntervalUnit</name> <init>= <expr><literal type="string">"IntervalUnit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanSlidingUnit</name> <init>= <expr><literal type="string">"SlidingUnit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanSessionGap</name> <init>= <expr><literal type="string">"SessionGap"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanTspk</name> <init>= <expr><literal type="string">"Tspk"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanStateExpr</name> <init>= <expr><literal type="string">"StateExpr"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanTriggerType</name> <init>= <expr><literal type="string">"TriggerType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanWatermark</name> <init>= <expr><literal type="string">"Watermark"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowLogicPlanDeleteMark</name> <init>= <expr><literal type="string">"DeleteMark"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicWindowNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SWindowLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SWindowLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanWinType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>winType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanFuncs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanInterval</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanOffset</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanSliding</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanIntervalUnit</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanSlidingUnit</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanSessionGap</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sessionGap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanTspk</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTspk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanStateExpr</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pStateExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanTriggerType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanWatermark</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanDeleteMark</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicWindowNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWindowLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SWindowLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanWinType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>winType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanOffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanSliding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanIntervalUnit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanSlidingUnit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanSessionGap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sessionGap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanTspk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTspk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanStateExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pStateExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanTriggerType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanWatermark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowLogicPlanDeleteMark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillLogicPlanMode</name> <init>= <expr><literal type="string">"Mode"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillLogicPlanWStartTs</name> <init>= <expr><literal type="string">"WStartTs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillLogicPlanValues</name> <init>= <expr><literal type="string">"Values"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillLogicPlanStartTime</name> <init>= <expr><literal type="string">"StartTime"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillLogicPlanEndTime</name> <init>= <expr><literal type="string">"EndTime"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicFillNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SFillLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SFillLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillLogicPlanMode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillLogicPlanWStartTs</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillLogicPlanValues</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillLogicPlanStartTime</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillLogicPlanEndTime</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicFillNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SFillLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillLogicPlanMode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillLogicPlanWStartTs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillLogicPlanValues</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillLogicPlanStartTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillLogicPlanEndTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSortLogicPlanSortKeys</name> <init>= <expr><literal type="string">"SortKeys"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicSortNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSortLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSortLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSortLogicPlanSortKeys</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicSortNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSortLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSortLogicPlanSortKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPartitionLogicPlanPartitionKeys</name> <init>= <expr><literal type="string">"PartitionKeys"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicPartitionNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SPartitionLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SPartitionLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPartitionLogicPlanPartitionKeys</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pPartitionKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicPartitionNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPartitionLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SPartitionLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPartitionLogicPlanPartitionKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pPartitionKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIndefRowsFuncLogicPlanFuncs</name> <init>= <expr><literal type="string">"Funcs"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicIndefRowsFuncNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SIndefRowsFuncLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SIndefRowsFuncLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIndefRowsFuncLogicPlanFuncs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicIndefRowsFuncNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndefRowsFuncLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SIndefRowsFuncLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIndefRowsFuncLogicPlanFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncLogicPlanFuncs</name> <init>= <expr><literal type="string">"Funcs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncLogicPlanStartTime</name> <init>= <expr><literal type="string">"StartTime"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncLogicPlanEndTime</name> <init>= <expr><literal type="string">"EndTime"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncLogicPlanInterval</name> <init>= <expr><literal type="string">"Interval"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicInterpFuncNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SInterpFuncLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SInterpFuncLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncLogicPlanFuncs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncLogicPlanStartTime</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncLogicPlanEndTime</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncLogicPlanInterval</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicInterpFuncNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInterpFuncLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SInterpFuncLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncLogicPlanFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncLogicPlanStartTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncLogicPlanEndTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncLogicPlanInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanIdQueryId</name> <init>= <expr><literal type="string">"QueryId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanIdGroupId</name> <init>= <expr><literal type="string">"GroupId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanIdSubplanId</name> <init>= <expr><literal type="string">"SubplanId"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>subplanIdToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSubplanId</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSubplanId</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanIdQueryId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanIdGroupId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanIdSubplanId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subplanId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToSubplanId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubplanId</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSubplanId</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanIdQueryId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanIdGroupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanIdSubplanId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>subplanId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkEndPointFqdn</name> <init>= <expr><literal type="string">"Fqdn"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkEndPointPort</name> <init>= <expr><literal type="string">"Port"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>epToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SEp</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SEp</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkEndPointFqdn</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkEndPointPort</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToEp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEp</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SEp</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkEndPointFqdn</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetSmallIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkEndPointPort</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkEpSetInUse</name> <init>= <expr><literal type="string">"InUse"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkEpSetNumOfEps</name> <init>= <expr><literal type="string">"NumOfEps"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkEpSetEps</name> <init>= <expr><literal type="string">"Eps"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>epSetToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SEpSet</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SEpSet</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkEpSetInUse</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkEpSetNumOfEps</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkEpSetEps</name></expr></argument>, <argument><expr><name>epToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToEpSet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SEpSet</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkEpSetInUse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkEpSetNumOfEps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkEpSetEps</name></expr></argument>, <argument><expr><name>jsonToEp</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkVgroupInfoVgId</name> <init>= <expr><literal type="string">"VgId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkVgroupInfoHashBegin</name> <init>= <expr><literal type="string">"HashBegin"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkVgroupInfoHashEnd</name> <init>= <expr><literal type="string">"HashEnd"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkVgroupInfoEpSet</name> <init>= <expr><literal type="string">"EpSet"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkVgroupInfoNumOfTable</name> <init>= <expr><literal type="string">"NumOfTable"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vgroupInfoToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SVgroupInfo</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SVgroupInfo</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupInfoVgId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupInfoHashBegin</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>hashBegin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupInfoHashEnd</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>hashEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupInfoEpSet</name></expr></argument>, <argument><expr><name>epSetToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupInfoNumOfTable</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToVgroupInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SVgroupInfo</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupInfoVgId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupInfoHashBegin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>hashBegin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupInfoHashEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>hashEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupInfoEpSet</name></expr></argument>, <argument><expr><name>jsonToEpSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupInfoNumOfTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkVgroupsInfoNum</name> <init>= <expr><literal type="string">"Num"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkVgroupsInfoVgroups</name> <init>= <expr><literal type="string">"Vgroups"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vgroupsInfoToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SVgroupsInfo</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SVgroupsInfo</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupsInfoNum</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupsInfoVgroups</name></expr></argument>, <argument><expr><name>vgroupInfoToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                         <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToVgroupsInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupsInfo</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SVgroupsInfo</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupsInfoNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkVgroupsInfoVgroups</name></expr></argument>, <argument><expr><name>jsonToVgroupInfo</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicSubplanId</name> <init>= <expr><literal type="string">"Id"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicSubplanChildren</name> <init>= <expr><literal type="string">"Children"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicSubplanRootNode</name> <init>= <expr><literal type="string">"RootNode"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicSubplanType</name> <init>= <expr><literal type="string">"SubplanType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicSubplanVgroupsSize</name> <init>= <expr><literal type="string">"VgroupsSize"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicSubplanVgroups</name> <init>= <expr><literal type="string">"Vgroups"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicSubplanLevel</name> <init>= <expr><literal type="string">"Level"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicSubplanSplitFlag</name> <init>= <expr><literal type="string">"SplitFlag"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicSubplanNumOfComputeNodes</name> <init>= <expr><literal type="string">"NumOfComputeNodes"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicSubplanToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SLogicSubplan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanId</name></expr></argument>, <argument><expr><name>subplanIdToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanChildren</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanRootNode</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subplanType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanVgroupsSize</name></expr></argument>, <argument><expr><call><name>VGROUPS_INFO_SIZE</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanVgroups</name></expr></argument>, <argument><expr><name>vgroupsInfoToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanLevel</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanSplitFlag</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>splitFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanNumOfComputeNodes</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfComputeNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicSubplan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanId</name></expr></argument>, <argument><expr><name>jsonToSubplanId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanRootNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subplanType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>objSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanVgroupsSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>objSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonMakeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanVgroups</name></expr></argument>, <argument><expr><name>jsonToVgroupsInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr></argument>, <argument><expr><name>objSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanLevel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanSplitFlag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>splitFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicSubplanNumOfComputeNodes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfComputeNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicPlanSubplans</name> <init>= <expr><literal type="string">"Subplans"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicPlanToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SQueryLogicPlan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SQueryLogicPlan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanSubplans</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTopSubplans</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicPlan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryLogicPlan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SQueryLogicPlan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>           <name>pChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicPlanSubplans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTopSubplans</name></name></expr></argument>, <argument><expr><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkJoinLogicPlanJoinType</name> <init>= <expr><literal type="string">"JoinType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkJoinLogicPlanOnConditions</name> <init>= <expr><literal type="string">"OnConditions"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkJoinLogicPlanMergeCondition</name> <init>= <expr><literal type="string">"MergeConditions"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicJoinNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SJoinLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SJoinLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinLogicPlanJoinType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>joinType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinLogicPlanMergeCondition</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pMergeCondition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinLogicPlanOnConditions</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPhysiPlanOutputDataBlockDesc</name> <init>= <expr><literal type="string">"OutputDataBlockDesc"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPhysiPlanConditions</name> <init>= <expr><literal type="string">"Conditions"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPhysiPlanChildren</name> <init>= <expr><literal type="string">"Children"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPhysiPlanLimit</name> <init>= <expr><literal type="string">"Limit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPhysiPlanSlimit</name> <init>= <expr><literal type="string">"SLimit"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physicPlanNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPhysiPlanOutputDataBlockDesc</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPhysiPlanConditions</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPhysiPlanChildren</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPhysiPlanLimit</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPhysiPlanSlimit</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysicPlanNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPhysiPlanOutputDataBlockDesc</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPhysiPlanConditions</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPhysiPlanChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPhysiPlanLimit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPhysiPlanSlimit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkNameType</name> <init>= <expr><literal type="string">"NameType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkNameAcctId</name> <init>= <expr><literal type="string">"AcctId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkNameDbName</name> <init>= <expr><literal type="string">"DbName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkNameTableName</name> <init>= <expr><literal type="string">"TableName"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nameToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SName</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNameType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNameAcctId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNameDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNameTableName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SName</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetUTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNameType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNameAcctId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNameDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNameTableName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanPhysiPlanScanCols</name> <init>= <expr><literal type="string">"ScanCols"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanPhysiPlanScanPseudoCols</name> <init>= <expr><literal type="string">"ScanPseudoCols"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanPhysiPlanTableId</name> <init>= <expr><literal type="string">"TableId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanPhysiPlanSTableId</name> <init>= <expr><literal type="string">"STableId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanPhysiPlanTableType</name> <init>= <expr><literal type="string">"TableType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkScanPhysiPlanTableName</name> <init>= <expr><literal type="string">"TableName"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiScanNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STagScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STagScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanScanCols</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanScanPseudoCols</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanTableId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanSTableId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanTableType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanTableName</name></expr></argument>, <argument><expr><name>nameToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiScanNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STagScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STagScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanScanCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanScanPseudoCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanTableId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanSTableId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanTableType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkScanPhysiPlanTableName</name></expr></argument>, <argument><expr><name>jsonToName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLastRowScanPhysiPlanGroupTags</name> <init>= <expr><literal type="string">"GroupTags"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLastRowScanPhysiPlanGroupSort</name> <init>= <expr><literal type="string">"GroupSort"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiLastRowScanNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SLastRowScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SLastRowScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physiScanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLastRowScanPhysiPlanGroupTags</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLastRowScanPhysiPlanGroupSort</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiLastRowScanNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLastRowScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLastRowScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysiScanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLastRowScanPhysiPlanGroupTags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLastRowScanPhysiPlanGroupSort</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanScanCount</name> <init>= <expr><literal type="string">"ScanCount"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanReverseScanCount</name> <init>= <expr><literal type="string">"ReverseScanCount"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanStartKey</name> <init>= <expr><literal type="string">"StartKey"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanEndKey</name> <init>= <expr><literal type="string">"EndKey"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanRatio</name> <init>= <expr><literal type="string">"Ratio"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanDataRequired</name> <init>= <expr><literal type="string">"DataRequired"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanDynamicScanFuncs</name> <init>= <expr><literal type="string">"DynamicScanFuncs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanInterval</name> <init>= <expr><literal type="string">"Interval"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanOffset</name> <init>= <expr><literal type="string">"Offset"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanSliding</name> <init>= <expr><literal type="string">"Sliding"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanIntervalUnit</name> <init>= <expr><literal type="string">"IntervalUnit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanSlidingUnit</name> <init>= <expr><literal type="string">"SlidingUnit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanTriggerType</name> <init>= <expr><literal type="string">"TriggerType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanWatermark</name> <init>= <expr><literal type="string">"Watermark"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanIgnoreExpired</name> <init>= <expr><literal type="string">"IgnoreExpired"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanGroupTags</name> <init>= <expr><literal type="string">"GroupTags"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanGroupSort</name> <init>= <expr><literal type="string">"GroupSort"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanTags</name> <init>= <expr><literal type="string">"Tags"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanSubtable</name> <init>= <expr><literal type="string">"Subtable"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableScanPhysiPlanAssignBlockUid</name> <init>= <expr><literal type="string">"AssignBlockUid"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiTableScanNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physiScanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanScanCount</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanReverseScanCount</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanStartKey</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanEndKey</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scanRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanRatio</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanDataRequired</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataRequired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanDynamicScanFuncs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pDynamicScanFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanInterval</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanOffset</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanSliding</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanIntervalUnit</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanSlidingUnit</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanTriggerType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanWatermark</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanIgnoreExpired</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>igExpired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanGroupTags</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanGroupSort</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanTags</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanSubtable</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanAssignBlockUid</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>assignBlockUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiTableScanNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysiScanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanScanCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanReverseScanCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanStartKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scanRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanEndKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scanRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetDoubleValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanRatio</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanDataRequired</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataRequired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanDynamicScanFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pDynamicScanFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanOffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanSliding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanIntervalUnit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanSlidingUnit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanTriggerType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanWatermark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanIgnoreExpired</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>igExpired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanGroupTags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanGroupSort</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanTags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanSubtable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableScanPhysiPlanAssignBlockUid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>assignBlockUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSysTableScanPhysiPlanMnodeEpSet</name> <init>= <expr><literal type="string">"MnodeEpSet"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSysTableScanPhysiPlanShowRewrite</name> <init>= <expr><literal type="string">"ShowRewrite"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSysTableScanPhysiPlanAccountId</name> <init>= <expr><literal type="string">"AccountId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSysTableScanPhysiPlanSysInfo</name> <init>= <expr><literal type="string">"SysInfo"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiSysTableScanNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSystemTableScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSystemTableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physiScanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSysTableScanPhysiPlanMnodeEpSet</name></expr></argument>, <argument><expr><name>epSetToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSysTableScanPhysiPlanShowRewrite</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSysTableScanPhysiPlanAccountId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>accountId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSysTableScanPhysiPlanSysInfo</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiSysTableScanNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSystemTableScanPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSystemTableScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysiScanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSysTableScanPhysiPlanMnodeEpSet</name></expr></argument>, <argument><expr><name>jsonToEpSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSysTableScanPhysiPlanShowRewrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSysTableScanPhysiPlanAccountId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>accountId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSysTableScanPhysiPlanSysInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkProjectPhysiPlanProjections</name> <init>= <expr><literal type="string">"Projections"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkProjectPhysiPlanMergeDataBlock</name> <init>= <expr><literal type="string">"MergeDataBlock"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkProjectPhysiPlanIgnoreGroupId</name> <init>= <expr><literal type="string">"IgnoreGroupId"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiProjectNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SProjectPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SProjectPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkProjectPhysiPlanProjections</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkProjectPhysiPlanMergeDataBlock</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkProjectPhysiPlanIgnoreGroupId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>ignoreGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiProjectNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SProjectPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SProjectPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkProjectPhysiPlanProjections</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkProjectPhysiPlanMergeDataBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkProjectPhysiPlanIgnoreGroupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>ignoreGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkJoinPhysiPlanJoinType</name> <init>= <expr><literal type="string">"JoinType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkJoinPhysiPlanInputTsOrder</name> <init>= <expr><literal type="string">"InputTsOrder"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkJoinPhysiPlanMergeCondition</name> <init>= <expr><literal type="string">"MergeCondition"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkJoinPhysiPlanOnConditions</name> <init>= <expr><literal type="string">"OnConditions"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkJoinPhysiPlanTargets</name> <init>= <expr><literal type="string">"Targets"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiJoinNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSortMergeJoinPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSortMergeJoinPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinPhysiPlanJoinType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>joinType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinPhysiPlanInputTsOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinPhysiPlanMergeCondition</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pMergeCondition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinPhysiPlanOnConditions</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinPhysiPlanTargets</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiJoinNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortMergeJoinPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSortMergeJoinPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinPhysiPlanJoinType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>joinType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinPhysiPlanInputTsOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinPhysiPlanOnConditions</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinPhysiPlanMergeCondition</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pMergeCondition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkJoinPhysiPlanTargets</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAggPhysiPlanExprs</name> <init>= <expr><literal type="string">"Exprs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAggPhysiPlanGroupKeys</name> <init>= <expr><literal type="string">"GroupKeys"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAggPhysiPlanAggFuncs</name> <init>= <expr><literal type="string">"AggFuncs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAggPhysiPlanMergeDataBlock</name> <init>= <expr><literal type="string">"MergeDataBlock"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiAggNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SAggPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SAggPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggPhysiPlanExprs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggPhysiPlanGroupKeys</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggPhysiPlanAggFuncs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggPhysiPlanMergeDataBlock</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiAggNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAggPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SAggPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggPhysiPlanExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggPhysiPlanGroupKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggPhysiPlanAggFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggPhysiPlanMergeDataBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkExchangePhysiPlanSrcStartGroupId</name> <init>= <expr><literal type="string">"SrcStartGroupId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkExchangePhysiPlanSrcEndGroupId</name> <init>= <expr><literal type="string">"SrcEndGroupId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkExchangePhysiPlanSrcEndPoints</name> <init>= <expr><literal type="string">"SrcEndPoints"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkExchangePhysiPlanSeqRecvData</name> <init>= <expr><literal type="string">"SeqRecvData"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiExchangeNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SExchangePhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangePhysiPlanSrcStartGroupId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangePhysiPlanSrcEndGroupId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>srcEndGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangePhysiPlanSrcEndPoints</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSrcEndPoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangePhysiPlanSeqRecvData</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>seqRecvData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiExchangeNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SExchangePhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangePhysiPlanSrcStartGroupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangePhysiPlanSrcEndGroupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>srcEndGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangePhysiPlanSrcEndPoints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSrcEndPoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExchangePhysiPlanSeqRecvData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>seqRecvData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkMergePhysiPlanMergeKeys</name> <init>= <expr><literal type="string">"MergeKeys"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkMergePhysiPlanTargets</name> <init>= <expr><literal type="string">"Targets"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkMergePhysiPlanNumOfChannels</name> <init>= <expr><literal type="string">"NumOfChannels"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkMergePhysiPlanSrcGroupId</name> <init>= <expr><literal type="string">"SrcGroupId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkMergePhysiPlanGroupSort</name> <init>= <expr><literal type="string">"GroupSort"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiMergeNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SMergePhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SMergePhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergePhysiPlanMergeKeys</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergePhysiPlanTargets</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergePhysiPlanNumOfChannels</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergePhysiPlanSrcGroupId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>srcGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergePhysiPlanGroupSort</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiMergeNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergePhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SMergePhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergePhysiPlanMergeKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergePhysiPlanTargets</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergePhysiPlanNumOfChannels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergePhysiPlanSrcGroupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>srcGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkMergePhysiPlanGroupSort</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSortPhysiPlanExprs</name> <init>= <expr><literal type="string">"Exprs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSortPhysiPlanSortKeys</name> <init>= <expr><literal type="string">"SortKeys"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSortPhysiPlanTargets</name> <init>= <expr><literal type="string">"Targets"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiSortNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSortPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSortPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSortPhysiPlanExprs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSortPhysiPlanSortKeys</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSortPhysiPlanTargets</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiSortNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSortPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSortPhysiPlanExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSortPhysiPlanSortKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSortPhysiPlanTargets</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanExprs</name> <init>= <expr><literal type="string">"Exprs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanFuncs</name> <init>= <expr><literal type="string">"Funcs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanTsPk</name> <init>= <expr><literal type="string">"TsPk"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanTsEnd</name> <init>= <expr><literal type="string">"TsEnd"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanTriggerType</name> <init>= <expr><literal type="string">"TriggerType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanWatermark</name> <init>= <expr><literal type="string">"Watermark"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanDeleteMark</name> <init>= <expr><literal type="string">"DeleteMark"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanIgnoreExpired</name> <init>= <expr><literal type="string">"IgnoreExpired"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanInputTsOrder</name> <init>= <expr><literal type="string">"InputTsOrder"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanOutputTsOrder</name> <init>= <expr><literal type="string">"outputTsOrder"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWindowPhysiPlanMergeDataBlock</name> <init>= <expr><literal type="string">"MergeDataBlock"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiWindowNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanExprs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanFuncs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanTsPk</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTspk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanTsEnd</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTsEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanTriggerType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanWatermark</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanDeleteMark</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanIgnoreExpired</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>igExpired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanInputTsOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanOutputTsOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>outputTsOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanMergeDataBlock</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiWindowNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanTsPk</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTspk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanTsEnd</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTsEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanTriggerType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanWatermark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanDeleteMark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanIgnoreExpired</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>igExpired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanInputTsOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanOutputTsOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>outputTsOrder</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWindowPhysiPlanMergeDataBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIntervalPhysiPlanInterval</name> <init>= <expr><literal type="string">"Interval"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIntervalPhysiPlanOffset</name> <init>= <expr><literal type="string">"Offset"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIntervalPhysiPlanSliding</name> <init>= <expr><literal type="string">"Sliding"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIntervalPhysiPlanIntervalUnit</name> <init>= <expr><literal type="string">"intervalUnit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIntervalPhysiPlanSlidingUnit</name> <init>= <expr><literal type="string">"slidingUnit"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiIntervalNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SIntervalPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physiWindowNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalPhysiPlanInterval</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalPhysiPlanOffset</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalPhysiPlanSliding</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalPhysiPlanIntervalUnit</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalPhysiPlanSlidingUnit</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiIntervalNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SIntervalPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysiWindowNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalPhysiPlanInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalPhysiPlanOffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalPhysiPlanSliding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalPhysiPlanIntervalUnit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalPhysiPlanSlidingUnit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillPhysiPlanMode</name> <init>= <expr><literal type="string">"Mode"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillPhysiPlanFillExprs</name> <init>= <expr><literal type="string">"FillExprs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillPhysiPlanNotFillExprs</name> <init>= <expr><literal type="string">"NotFillExprs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillPhysiPlanWStartTs</name> <init>= <expr><literal type="string">"WStartTs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillPhysiPlanValues</name> <init>= <expr><literal type="string">"Values"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillPhysiPlanStartTime</name> <init>= <expr><literal type="string">"StartTime"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillPhysiPlanEndTime</name> <init>= <expr><literal type="string">"EndTime"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillPhysiPlanInputTsOrder</name> <init>= <expr><literal type="string">"inputTsOrder"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiFillNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SFillPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SFillPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanMode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanFillExprs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanNotFillExprs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNotFillExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanWStartTs</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanValues</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanStartTime</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanEndTime</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanInputTsOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiFillNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SFillPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanMode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanFillExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanNotFillExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pNotFillExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanWStartTs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanValues</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanStartTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanEndTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillPhysiPlanInputTsOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSessionWindowPhysiPlanGap</name> <init>= <expr><literal type="string">"Gap"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiSessionWindowNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSessionWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSessionWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physiWindowNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSessionWindowPhysiPlanGap</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>gap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiSessionWindowNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSessionWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSessionWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysiWindowNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSessionWindowPhysiPlanGap</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>gap</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkStateWindowPhysiPlanStateKey</name> <init>= <expr><literal type="string">"StateKey"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiStateWindowNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SStateWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStateWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physiWindowNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkStateWindowPhysiPlanStateKey</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pStateKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiStateWindowNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateWinodwPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SStateWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysiWindowNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkStateWindowPhysiPlanStateKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pStateKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPartitionPhysiPlanExprs</name> <init>= <expr><literal type="string">"Exprs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPartitionPhysiPlanPartitionKeys</name> <init>= <expr><literal type="string">"PartitionKeys"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPartitionPhysiPlanTargets</name> <init>= <expr><literal type="string">"Targets"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiPartitionNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SPartitionPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SPartitionPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPartitionPhysiPlanExprs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPartitionPhysiPlanPartitionKeys</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pPartitionKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPartitionPhysiPlanTargets</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiPartitionNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPartitionPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SPartitionPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPartitionPhysiPlanExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPartitionPhysiPlanPartitionKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pPartitionKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPartitionPhysiPlanTargets</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkStreamPartitionPhysiPlanTags</name> <init>= <expr><literal type="string">"Tags"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkStreamPartitionPhysiPlanSubtable</name> <init>= <expr><literal type="string">"Subtable"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiStreamPartitionNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SStreamPartitionPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStreamPartitionPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physiPartitionNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkStreamPartitionPhysiPlanTags</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkStreamPartitionPhysiPlanSubtable</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiStreamPartitionNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamPartitionPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SStreamPartitionPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysiPartitionNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkStreamPartitionPhysiPlanTags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkStreamPartitionPhysiPlanSubtable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIndefRowsFuncPhysiPlanExprs</name> <init>= <expr><literal type="string">"Exprs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIndefRowsFuncPhysiPlanFuncs</name> <init>= <expr><literal type="string">"Funcs"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiIndefRowsFuncNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SIndefRowsFuncPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SIndefRowsFuncPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIndefRowsFuncPhysiPlanExprs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIndefRowsFuncPhysiPlanFuncs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiIndefRowsFuncNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndefRowsFuncPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SIndefRowsFuncPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIndefRowsFuncPhysiPlanExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIndefRowsFuncPhysiPlanFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncPhysiPlanExprs</name> <init>= <expr><literal type="string">"Exprs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncPhysiPlanFuncs</name> <init>= <expr><literal type="string">"Funcs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncPhysiPlanStartTime</name> <init>= <expr><literal type="string">"StartTime"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncPhysiPlanEndTime</name> <init>= <expr><literal type="string">"EndTime"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncPhysiPlanInterval</name> <init>= <expr><literal type="string">"Interval"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncPhysiPlanFillMode</name> <init>= <expr><literal type="string">"FillMode"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncPhysiPlanFillValues</name> <init>= <expr><literal type="string">"FillValues"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkInterpFuncPhysiPlanTimeSeries</name> <init>= <expr><literal type="string">"TimeSeries"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiInterpFuncNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SInterpFuncPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SInterpFuncPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanExprs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanFuncs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanStartTime</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanEndTime</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanInterval</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanFillMode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fillMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanFillValues</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFillValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanTimeSeries</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTimeSeries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiInterpFuncNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInterpFuncPhysiNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SInterpFuncPhysiNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanStartTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanEndTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanFillMode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fillMode</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanFillValues</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFillValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkInterpFuncPhysiPlanTimeSeries</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTimeSeries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDataSinkInputDataBlockDesc</name> <init>= <expr><literal type="string">"InputDataBlockDesc"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physicDataSinkNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataSinkNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataSinkNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataSinkInputDataBlockDesc</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pInputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysicDataSinkNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataSinkNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataSinkNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataSinkInputDataBlockDesc</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pInputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiDispatchNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>physicDataSinkNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiDispatchNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>jsonToPhysicDataSinkNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryInsertPhysiPlanInsertCols</name> <init>= <expr><literal type="string">"InsertCols"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryInsertPhysiPlanStableId</name> <init>= <expr><literal type="string">"StableId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryInsertPhysiPlanTableId</name> <init>= <expr><literal type="string">"TableId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryInsertPhysiPlanTableType</name> <init>= <expr><literal type="string">"TableType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryInsertPhysiPlanTableFName</name> <init>= <expr><literal type="string">"TableFName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryInsertPhysiPlanVgId</name> <init>= <expr><literal type="string">"VgId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryInsertPhysiPlanEpSet</name> <init>= <expr><literal type="string">"EpSet"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiQueryInsertNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SQueryInserterNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SQueryInserterNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicDataSinkNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanInsertCols</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanStableId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>stableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanTableId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanTableType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanTableFName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanVgId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanEpSet</name></expr></argument>, <argument><expr><name>epSetToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiQueryInsertNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryInserterNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SQueryInserterNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicDataSinkNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanInsertCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanStableId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>stableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanTableId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanTableType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanTableFName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanVgId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryInsertPhysiPlanEpSet</name></expr></argument>, <argument><expr><name>jsonToEpSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeletePhysiPlanTableId</name> <init>= <expr><literal type="string">"TableId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeletePhysiPlanTableType</name> <init>= <expr><literal type="string">"TableType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeletePhysiPlanTableFName</name> <init>= <expr><literal type="string">"TableFName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeletePhysiPlanTsColName</name> <init>= <expr><literal type="string">"TsColName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeletePhysiPlanDeleteTimeRangeStartKey</name> <init>= <expr><literal type="string">"DeleteTimeRangeStartKey"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeletePhysiPlanDeleteTimeRangeEndKey</name> <init>= <expr><literal type="string">"DeleteTimeRangeEndKey"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeletePhysiPlanAffectedRows</name> <init>= <expr><literal type="string">"AffectedRows"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeletePhysiPlanStartTs</name> <init>= <expr><literal type="string">"StartTs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeletePhysiPlanEndTs</name> <init>= <expr><literal type="string">"EndTs"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>physiDeleteNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataDeleterNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataDeleterNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>physicDataSinkNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanTableId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanTableType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanTableFName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanTsColName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanDeleteTimeRangeStartKey</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>deleteTimeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanDeleteTimeRangeEndKey</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>deleteTimeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanAffectedRows</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pAffectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanStartTs</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanEndTs</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pEndTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPhysiDeleteNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDeleterNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataDeleterNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToPhysicDataSinkNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanTableId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanTableType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanTableFName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanTsColName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanDeleteTimeRangeStartKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>deleteTimeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanDeleteTimeRangeEndKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>deleteTimeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanAffectedRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pAffectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanStartTs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeletePhysiPlanEndTs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pEndTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryNodeAddrId</name> <init>= <expr><literal type="string">"Id"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryNodeAddrInUse</name> <init>= <expr><literal type="string">"InUse"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryNodeAddrNumOfEps</name> <init>= <expr><literal type="string">"NumOfEps"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkQueryNodeAddrEps</name> <init>= <expr><literal type="string">"Eps"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>queryNodeAddrToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SQueryNodeAddr</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SQueryNodeAddr</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryNodeAddrId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryNodeAddrInUse</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryNodeAddrNumOfEps</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryNodeAddrEps</name></expr></argument>, <argument><expr><name>epToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToQueryNodeAddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryNodeAddr</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SQueryNodeAddr</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryNodeAddrId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryNodeAddrInUse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryNodeAddrNumOfEps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkQueryNodeAddrEps</name></expr></argument>, <argument><expr><name>jsonToEp</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanId</name> <init>= <expr><literal type="string">"Id"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanType</name> <init>= <expr><literal type="string">"SubplanType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanMsgType</name> <init>= <expr><literal type="string">"MsgType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanLevel</name> <init>= <expr><literal type="string">"Level"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanDbFName</name> <init>= <expr><literal type="string">"DbFName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanUser</name> <init>= <expr><literal type="string">"User"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanNodeAddr</name> <init>= <expr><literal type="string">"NodeAddr"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanRootNode</name> <init>= <expr><literal type="string">"RootNode"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanDataSink</name> <init>= <expr><literal type="string">"DataSink"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanTagCond</name> <init>= <expr><literal type="string">"TagCond"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanTagIndexCond</name> <init>= <expr><literal type="string">"TagIndexCond"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSubplanShowRewrite</name> <init>= <expr><literal type="string">"ShowRewrite"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>subplanToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSubplan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSubplan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanId</name></expr></argument>, <argument><expr><name>subplanIdToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subplanType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanMsgType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanLevel</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanDbFName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanUser</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanNodeAddr</name></expr></argument>, <argument><expr><name>queryNodeAddrToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanRootNode</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanDataSink</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanTagCond</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanTagIndexCond</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTagIndexCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanShowRewrite</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToSubplan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSubplan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanId</name></expr></argument>, <argument><expr><name>jsonToSubplanId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subplanType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanMsgType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanLevel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanDbFName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanUser</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanNodeAddr</name></expr></argument>, <argument><expr><name>jsonToQueryNodeAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanRootNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanDataSink</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanTagCond</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanTagIndexCond</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTagIndexCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSubplanShowRewrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPlanQueryId</name> <init>= <expr><literal type="string">"QueryId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPlanNumOfSubplans</name> <init>= <expr><literal type="string">"NumOfSubplans"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkPlanSubplans</name> <init>= <expr><literal type="string">"Subplans"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>planToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SQueryPlan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SQueryPlan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPlanQueryId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPlanNumOfSubplans</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPlanSubplans</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToPlan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SQueryPlan</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPlanQueryId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPlanNumOfSubplans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkPlanSubplans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAggLogicPlanGroupKeys</name> <init>= <expr><literal type="string">"GroupKeys"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAggLogicPlanAggFuncs</name> <init>= <expr><literal type="string">"AggFuncs"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicAggNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SAggLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SAggLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>logicPlanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggLogicPlanGroupKeys</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggLogicPlanAggFuncs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicAggNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAggLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SAggLogicNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToLogicPlanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggLogicPlanGroupKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAggLogicPlanAggFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDataTypeType</name> <init>= <expr><literal type="string">"Type"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDataTypePrecision</name> <init>= <expr><literal type="string">"Precision"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDataTypeScale</name> <init>= <expr><literal type="string">"Scale"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDataTypeDataBytes</name> <init>= <expr><literal type="string">"Bytes"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dataTypeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataType</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataType</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataTypeType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataTypePrecision</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataTypeScale</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataTypeDataBytes</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToDataType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataType</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetUTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataTypeType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataTypePrecision</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataTypeScale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataTypeDataBytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkExprDataType</name> <init>= <expr><literal type="string">"DataType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkExprAliasName</name> <init>= <expr><literal type="string">"AliasName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkExprUserAlias</name> <init>= <expr><literal type="string">"UserAlias"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>exprNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SExprNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SExprNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExprDataType</name></expr></argument>, <argument><expr><name>dataTypeToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExprAliasName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExprUserAlias</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToExprNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExprDataType</name></expr></argument>, <argument><expr><name>jsonToDataType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExprAliasName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkExprUserAlias</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>userAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkColumnTableId</name> <init>= <expr><literal type="string">"TableId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkColumnTableType</name> <init>= <expr><literal type="string">"TableType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkColumnColId</name> <init>= <expr><literal type="string">"ColId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkColumnColType</name> <init>= <expr><literal type="string">"ColType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkColumnDbName</name> <init>= <expr><literal type="string">"DbName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkColumnTableName</name> <init>= <expr><literal type="string">"TableName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkColumnTableAlias</name> <init>= <expr><literal type="string">"TableAlias"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkColumnColName</name> <init>= <expr><literal type="string">"ColName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkColumnDataBlockId</name> <init>= <expr><literal type="string">"DataBlockId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkColumnSlotId</name> <init>= <expr><literal type="string">"SlotId"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>columnNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SColumnNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>exprNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnTableId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnTableType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnColId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnColType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnTableName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnTableAlias</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnColName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnDataBlockId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnSlotId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToColumnNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToExprNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnTableId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnTableType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetSmallIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnColId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnColType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnTableName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnTableAlias</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnColName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetSmallIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnDataBlockId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetSmallIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkColumnSlotId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkValueLiteralSize</name> <init>= <expr><literal type="string">"LiteralSize"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkValueLiteral</name> <init>= <expr><literal type="string">"Literal"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkValueDuration</name> <init>= <expr><literal type="string">"Duration"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkValueTranslate</name> <init>= <expr><literal type="string">"Translate"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkValueNotReserved</name> <init>= <expr><literal type="string">"NotReserved"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkValueIsNull</name> <init>= <expr><literal type="string">"IsNull"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkValueUnit</name> <init>= <expr><literal type="string">"Unit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkValueDatum</name> <init>= <expr><literal type="string">"Datum"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>datumToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SValueNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
      <comment type="line">// cJSON only support utf-8 encoding. Convert memory content to hex string.</comment>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHexEncode</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHexEncode</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DECIMAL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BLOB</name></expr>:</case>
      <comment type="line">// todo</comment>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>valueNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SValueNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>exprNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueLiteralSize</name></expr></argument>, <argument><expr><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>literal</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>literal</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueLiteral</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDuration</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>isDuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueTranslate</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>translate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueNotReserved</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>notReserved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueIsNull</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>isNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueUnit</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>translate</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pNode</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>datumToJson</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetDoubleValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetDoubleValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHexDecode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDatum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHexDecode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DECIMAL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BLOB</name></expr>:</case>
      <comment type="line">// todo</comment>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToValueNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToExprNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>literalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueLiteralSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>literalSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>literalSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonDupStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueLiteral</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueDuration</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>isDuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueTranslate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>translate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueNotReserved</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>notReserved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueIsNull</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>isNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkValueUnit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>translate</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pNode</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToDatum</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkOperatorType</name> <init>= <expr><literal type="string">"OpType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkOperatorLeft</name> <init>= <expr><literal type="string">"Left"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkOperatorRight</name> <init>= <expr><literal type="string">"Right"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>operatorNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SOperatorNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>exprNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOperatorType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOperatorLeft</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOperatorRight</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToOperatorNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToExprNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOperatorType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOperatorLeft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOperatorRight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicCondType</name> <init>= <expr><literal type="string">"CondType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLogicCondParameters</name> <init>= <expr><literal type="string">"Parameters"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>logicConditionNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>exprNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicCondType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>condType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicCondParameters</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLogicConditionNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToExprNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicCondType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>condType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLogicCondParameters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFunctionName</name> <init>= <expr><literal type="string">"Name"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFunctionId</name> <init>= <expr><literal type="string">"Id"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFunctionType</name> <init>= <expr><literal type="string">"Type"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFunctionParameter</name> <init>= <expr><literal type="string">"Parameters"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFunctionUdfBufSize</name> <init>= <expr><literal type="string">"UdfBufSize"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>functionNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>exprNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFunctionName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFunctionId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFunctionType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>funcType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFunctionParameter</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFunctionUdfBufSize</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>udfBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToFunctionNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToExprNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFunctionName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFunctionId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFunctionType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>funcType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFunctionParameter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFunctionUdfBufSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>udfBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableDbName</name> <init>= <expr><literal type="string">"DbName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableTableName</name> <init>= <expr><literal type="string">"tableName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableTableAlias</name> <init>= <expr><literal type="string">"tableAlias"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tableNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STableNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STableNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>exprNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableTableName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableTableAlias</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToTableNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STableNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToExprNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableTableName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableTableAlias</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableIndexInfoIntervalUnit</name> <init>= <expr><literal type="string">"IntervalUnit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableIndexInfoSlidingUnit</name> <init>= <expr><literal type="string">"SlidingUnit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableIndexInfoInterval</name> <init>= <expr><literal type="string">"Interval"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableIndexInfoOffset</name> <init>= <expr><literal type="string">"Offset"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableIndexInfoSliding</name> <init>= <expr><literal type="string">"Sliding"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableIndexInfoDstTbUid</name> <init>= <expr><literal type="string">"DstTbUid"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableIndexInfoDstVgId</name> <init>= <expr><literal type="string">"DstVgId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableIndexInfoEpSet</name> <init>= <expr><literal type="string">"EpSet"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTableIndexInfoExpr</name> <init>= <expr><literal type="string">"Expr"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tableIndexInfoToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STableIndexInfo</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STableIndexInfo</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoIntervalUnit</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoSlidingUnit</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoInterval</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoOffset</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoSliding</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoDstTbUid</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dstTbUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoDstVgId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dstVgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoEpSet</name></expr></argument>, <argument><expr><name>epSetToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoExpr</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToTableIndexInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableIndexInfo</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STableIndexInfo</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoIntervalUnit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoSlidingUnit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoOffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoSliding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoDstTbUid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dstTbUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoDstVgId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dstVgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoEpSet</name></expr></argument>, <argument><expr><name>jsonToEpSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonDupStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTableIndexInfoExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkRealTableMetaSize</name> <init>= <expr><literal type="string">"MetaSize"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkRealTableMeta</name> <init>= <expr><literal type="string">"Meta"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkRealTableVgroupsInfoSize</name> <init>= <expr><literal type="string">"VgroupsInfoSize"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkRealTableVgroupsInfo</name> <init>= <expr><literal type="string">"VgroupsInfo"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkRealTableSmaIndexes</name> <init>= <expr><literal type="string">"SmaIndexes"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>realTableNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SRealTableNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tableNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkRealTableMetaSize</name></expr></argument>, <argument><expr><call><name>TABLE_META_SIZE</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkRealTableMeta</name></expr></argument>, <argument><expr><name>tableMetaToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkRealTableVgroupsInfoSize</name></expr></argument>, <argument><expr><call><name>VGROUPS_INFO_SIZE</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkRealTableVgroupsInfo</name></expr></argument>, <argument><expr><name>vgroupsInfoToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddTArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkRealTableSmaIndexes</name></expr></argument>, <argument><expr><name>tableIndexInfoToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSmaIndexes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToRealTableNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRealTableNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>objSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToTableNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkRealTableMetaSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>objSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonMakeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkRealTableMeta</name></expr></argument>, <argument><expr><name>jsonToTableMeta</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>objSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkRealTableVgroupsInfoSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>objSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonMakeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkRealTableVgroupsInfo</name></expr></argument>, <argument><expr><name>jsonToVgroupsInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr></argument>, <argument><expr><name>objSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator>
        <call><name>tjsonToTArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkRealTableSmaIndexes</name></expr></argument>, <argument><expr><name>jsonToTableIndexInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSmaIndexes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableIndexInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTempTableSubquery</name> <init>= <expr><literal type="string">"Subquery"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tempTableNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STempTableNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STempTableNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tableNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTempTableSubquery</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSubquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToTempTableNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STempTableNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToTableNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTempTableSubquery</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSubquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkGroupingSetType</name> <init>= <expr><literal type="string">"GroupingSetType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkGroupingSetParameter</name> <init>= <expr><literal type="string">"Parameters"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>groupingSetNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SGroupingSetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SGroupingSetNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkGroupingSetType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupingSetType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkGroupingSetParameter</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToGroupingSetNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupingSetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SGroupingSetNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkGroupingSetType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>groupingSetType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkGroupingSetParameter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkOrderByExprExpr</name> <init>= <expr><literal type="string">"Expr"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkOrderByExprOrder</name> <init>= <expr><literal type="string">"Order"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkOrderByExprNullOrder</name> <init>= <expr><literal type="string">"NullOrder"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>orderByExprNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SOrderByExprNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOrderByExprExpr</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOrderByExprOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOrderByExprNullOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nullOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToOrderByExprNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOrderByExprNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOrderByExprExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOrderByExprOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkOrderByExprNullOrder</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nullOrder</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLimitLimit</name> <init>= <expr><literal type="string">"Limit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkLimitOffset</name> <init>= <expr><literal type="string">"Offset"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>limitNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SLimitNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SLimitNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLimitLimit</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLimitOffset</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToLimitNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLimitNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLimitNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLimitLimit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkLimitOffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkStateWindowCol</name> <init>= <expr><literal type="string">"StateWindowCol"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkStateWindowExpr</name> <init>= <expr><literal type="string">"StateWindowExpr"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>stateWindowNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SStateWindowNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SStateWindowNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                 <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkStateWindowCol</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pCol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkStateWindowExpr</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToStateWindowNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateWindowNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SStateWindowNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkStateWindowCol</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pCol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkStateWindowExpr</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSessionWindowTsPrimaryKey</name> <init>= <expr><literal type="string">"TsPrimaryKey"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSessionWindowGap</name> <init>= <expr><literal type="string">"Gap"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sessionWindowNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSessionWindowNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSessionWindowNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSessionWindowTsPrimaryKey</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pCol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSessionWindowGap</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pGap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToSessionWindowNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSessionWindowNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSessionWindowNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSessionWindowTsPrimaryKey</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pCol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSessionWindowGap</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pGap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIntervalWindowInterval</name> <init>= <expr><literal type="string">"Interval"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIntervalWindowOffset</name> <init>= <expr><literal type="string">"Offset"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIntervalWindowSliding</name> <init>= <expr><literal type="string">"Sliding"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIntervalWindowFill</name> <init>= <expr><literal type="string">"Fill"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkIntervalWindowTsPk</name> <init>= <expr><literal type="string">"TsPk"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>intervalWindowNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SIntervalWindowNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SIntervalWindowNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalWindowInterval</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pInterval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalWindowOffset</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalWindowSliding</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalWindowFill</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalWindowTsPk</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToIntervalWindowNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalWindowNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SIntervalWindowNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalWindowInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pInterval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalWindowOffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalWindowSliding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSliding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalWindowFill</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkIntervalWindowTsPk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkNodeListDataType</name> <init>= <expr><literal type="string">"DataType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkNodeListNodeList</name> <init>= <expr><literal type="string">"NodeList"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nodeListNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SNodeListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SNodeListNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNodeListDataType</name></expr></argument>, <argument><expr><name>dataTypeToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNodeListNodeList</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToNodeListNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNodeListDataType</name></expr></argument>, <argument><expr><name>jsonToDataType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNodeListNodeList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillMode</name> <init>= <expr><literal type="string">"Mode"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillValues</name> <init>= <expr><literal type="string">"Values"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillWStartTs</name> <init>= <expr><literal type="string">"WStartTs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillStartTime</name> <init>= <expr><literal type="string">"StartTime"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkFillEndTime</name> <init>= <expr><literal type="string">"EndTime"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>fillNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SFillNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SFillNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillMode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillValues</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillWStartTs</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillStartTime</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillEndTime</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToFillNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SFillNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillMode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillValues</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillWStartTs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillStartTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkFillEndTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTargetDataBlockId</name> <init>= <expr><literal type="string">"DataBlockId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTargetSlotId</name> <init>= <expr><literal type="string">"SlotId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkTargetExpr</name> <init>= <expr><literal type="string">"Expr"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>targetNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STargetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STargetNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTargetDataBlockId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTargetSlotId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTargetExpr</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToTargetNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetSmallIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTargetDataBlockId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetSmallIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTargetSlotId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkTargetExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSlotDescSlotId</name> <init>= <expr><literal type="string">"SlotId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSlotDescDataType</name> <init>= <expr><literal type="string">"DataType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSlotDescReserve</name> <init>= <expr><literal type="string">"Reserve"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSlotDescOutput</name> <init>= <expr><literal type="string">"Output"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSlotDescName</name> <init>= <expr><literal type="string">"Name"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>slotDescNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSlotDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSlotDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSlotDescSlotId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSlotDescDataType</name></expr></argument>, <argument><expr><name>dataTypeToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSlotDescReserve</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>reserve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSlotDescOutput</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSlotDescName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToSlotDescNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSlotDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSlotDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetSmallIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSlotDescSlotId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSlotDescDataType</name></expr></argument>, <argument><expr><name>jsonToDataType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSlotDescReserve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>reserve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSlotDescOutput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSlotDescName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDownstreamSourceAddr</name> <init>= <expr><literal type="string">"Addr"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDownstreamSourceTaskId</name> <init>= <expr><literal type="string">"TaskId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDownstreamSourceSchedId</name> <init>= <expr><literal type="string">"SchedId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDownstreamSourceExecId</name> <init>= <expr><literal type="string">"ExecId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDownstreamSourceFetchMsgType</name> <init>= <expr><literal type="string">"FetchMsgType"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>downstreamSourceNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDownstreamSourceNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDownstreamSourceAddr</name></expr></argument>, <argument><expr><name>queryNodeAddrToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDownstreamSourceTaskId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDownstreamSourceSchedId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>schedId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDownstreamSourceExecId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDownstreamSourceFetchMsgType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fetchMsgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToDownstreamSourceNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDownstreamSourceNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDownstreamSourceAddr</name></expr></argument>, <argument><expr><name>jsonToQueryNodeAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDownstreamSourceTaskId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDownstreamSourceSchedId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>schedId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDownstreamSourceExecId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDownstreamSourceFetchMsgType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>fetchMsgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsBuffer</name> <init>= <expr><literal type="string">"Buffer"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsCacheModel</name> <init>= <expr><literal type="string">"CacheModel"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsCompressionLevel</name> <init>= <expr><literal type="string">"CompressionLevel"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsDaysPerFileNode</name> <init>= <expr><literal type="string">"DaysPerFileNode"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsDaysPerFile</name> <init>= <expr><literal type="string">"DaysPerFile"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsFsyncPeriod</name> <init>= <expr><literal type="string">"FsyncPeriod"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsMaxRowsPerBlock</name> <init>= <expr><literal type="string">"MaxRowsPerBlock"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsMinRowsPerBlock</name> <init>= <expr><literal type="string">"MinRowsPerBlock"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsKeep</name> <init>= <expr><literal type="string">"Keep"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsPages</name> <init>= <expr><literal type="string">"Pages"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsPagesize</name> <init>= <expr><literal type="string">"Pagesize"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsPrecision</name> <init>= <expr><literal type="string">"Precision"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsReplica</name> <init>= <expr><literal type="string">"Replica"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsStrict</name> <init>= <expr><literal type="string">"Strict"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsWalLevel</name> <init>= <expr><literal type="string">"WalLevel"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsNumOfVgroups</name> <init>= <expr><literal type="string">"NumOfVgroups"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsSingleStable</name> <init>= <expr><literal type="string">"SingleStable"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsRetentions</name> <init>= <expr><literal type="string">"Retentions"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDatabaseOptionsSchemaless</name> <init>= <expr><literal type="string">"Schemaless"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>databaseOptionsToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDatabaseOptions</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsBuffer</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsCacheModel</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>cacheModel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsCompressionLevel</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>compressionLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsDaysPerFileNode</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pDaysPerFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsDaysPerFile</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>daysPerFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsFsyncPeriod</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>fsyncPeriod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsMaxRowsPerBlock</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>maxRowsPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsMinRowsPerBlock</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>minRowsPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsKeep</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pKeep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsPages</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsPagesize</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsPrecision</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>precisionStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsReplica</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>replica</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsStrict</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>strict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsWalLevel</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>walLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsNumOfVgroups</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsSingleStable</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>singleStable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsRetentions</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRetentions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsSchemaless</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>schemaless</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToDatabaseOptions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDatabaseOptions</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDatabaseOptions</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsCacheModel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>cacheModel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsCompressionLevel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>compressionLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsDaysPerFileNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pDaysPerFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsDaysPerFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>daysPerFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsFsyncPeriod</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>fsyncPeriod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsMaxRowsPerBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>maxRowsPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsMinRowsPerBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>minRowsPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsKeep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pKeep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsPages</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsPagesize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsPrecision</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>precisionStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsReplica</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>replica</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsStrict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>strict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsWalLevel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>walLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsNumOfVgroups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsSingleStable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>singleStable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsRetentions</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pRetentions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDatabaseOptionsSchemaless</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>schemaless</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWhenThenWhen</name> <init>= <expr><literal type="string">"When"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkWhenThenThen</name> <init>= <expr><literal type="string">"Then"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>whenThenNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SWhenThenNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SWhenThenNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>exprNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWhenThenWhen</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWhenThenThen</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pThen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToWhenThenNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWhenThenNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SWhenThenNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToExprNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWhenThenWhen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkWhenThenThen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pThen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkCaseWhenCase</name> <init>= <expr><literal type="string">"Case"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkCaseWhenWhenThenList</name> <init>= <expr><literal type="string">"WhenThenList"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkCaseWhenElse</name> <init>= <expr><literal type="string">"Else"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>caseWhenNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SCaseWhenNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>exprNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCaseWhenCase</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCaseWhenWhenThenList</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWhenThenList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCaseWhenElse</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pElse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToCaseWhenNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCaseWhenNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToExprNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCaseWhenCase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCaseWhenWhenThenList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWhenThenList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCaseWhenElse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pElse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDataBlockDescDataBlockId</name> <init>= <expr><literal type="string">"DataBlockId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDataBlockDescSlots</name> <init>= <expr><literal type="string">"Slots"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDataBlockTotalRowSize</name> <init>= <expr><literal type="string">"TotalRowSize"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDataBlockOutputRowSize</name> <init>= <expr><literal type="string">"OutputRowSize"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDataBlockPrecision</name> <init>= <expr><literal type="string">"Precision"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dataBlockDescNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataBlockDescDataBlockId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataBlockTotalRowSize</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataBlockOutputRowSize</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataBlockDescSlots</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataBlockPrecision</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToDataBlockDescNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetSmallIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataBlockDescDataBlockId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataBlockTotalRowSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataBlockOutputRowSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataBlockDescSlots</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDataBlockPrecision</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSetOperatorOpType</name> <init>= <expr><literal type="string">"OpType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSetOperatorProjections</name> <init>= <expr><literal type="string">"Projections"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSetOperatorLeft</name> <init>= <expr><literal type="string">"Left"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSetOperatorRight</name> <init>= <expr><literal type="string">"Right"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSetOperatorOrderByList</name> <init>= <expr><literal type="string">"OrderByList"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSetOperatorLimit</name> <init>= <expr><literal type="string">"Limit"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setOperatorToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSetOperator</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorOpType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorProjections</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorLeft</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorRight</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorOrderByList</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorLimit</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToSetOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSetOperator</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorOpType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorProjections</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorLeft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorRight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorOrderByList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSetOperatorLimit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtDistinct</name> <init>= <expr><literal type="string">"Distinct"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtProjections</name> <init>= <expr><literal type="string">"Projections"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtFrom</name> <init>= <expr><literal type="string">"From"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtWhere</name> <init>= <expr><literal type="string">"Where"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtPartitionBy</name> <init>= <expr><literal type="string">"PartitionBy"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtTags</name> <init>= <expr><literal type="string">"Tags"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtSubtable</name> <init>= <expr><literal type="string">"Subtable"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtWindow</name> <init>= <expr><literal type="string">"Window"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtGroupBy</name> <init>= <expr><literal type="string">"GroupBy"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtHaving</name> <init>= <expr><literal type="string">"Having"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtOrderBy</name> <init>= <expr><literal type="string">"OrderBy"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtLimit</name> <init>= <expr><literal type="string">"Limit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtSlimit</name> <init>= <expr><literal type="string">"Slimit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtStmtName</name> <init>= <expr><literal type="string">"StmtName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkSelectStmtHasAggFuncs</name> <init>= <expr><literal type="string">"HasAggFuncs"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>selectStmtToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSelectStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtDistinct</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>isDistinct</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtProjections</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtFrom</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtWhere</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtPartitionBy</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtTags</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtSubtable</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtWindow</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtGroupBy</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pGroupByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtHaving</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pHaving</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodeListToJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtOrderBy</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtLimit</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtSlimit</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtStmtName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>stmtName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtHasAggFuncs</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>hasAggFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToSelectStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtDistinct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>isDistinct</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtProjections</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtFrom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtWhere</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtPartitionBy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pPartitionByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtTags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtSubtable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtWindow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtGroupBy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pGroupByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtHaving</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pHaving</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeList</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtOrderBy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pOrderByList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtLimit</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtSlimit</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtStmtName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>stmtName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkSelectStmtHasAggFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>hasAggFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterDatabaseStmtDbName</name> <init>= <expr><literal type="string">"DbName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterDatabaseStmtOptions</name> <init>= <expr><literal type="string">"Options"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>alterDatabaseStmtToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SAlterDatabaseStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SAlterDatabaseStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterDatabaseStmtDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterDatabaseStmtOptions</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToAlterDatabaseStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAlterDatabaseStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SAlterDatabaseStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterDatabaseStmtDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterDatabaseStmtOptions</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterTableStmtDbName</name> <init>= <expr><literal type="string">"DbName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterTableStmtTableName</name> <init>= <expr><literal type="string">"TableName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterTableStmtAlterType</name> <init>= <expr><literal type="string">"AlterType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterTableStmtColName</name> <init>= <expr><literal type="string">"ColName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterTableStmtNewColName</name> <init>= <expr><literal type="string">"NewColName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterTableStmtOptions</name> <init>= <expr><literal type="string">"Options"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterTableStmtNewDataType</name> <init>= <expr><literal type="string">"NewDataType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterTableStmtNewTagVal</name> <init>= <expr><literal type="string">"NewTagVal"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>alterTableStmtToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SAlterTableStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtTableName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtAlterType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>alterType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtColName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtNewColName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>newColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtOptions</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtNewDataType</name></expr></argument>, <argument><expr><name>dataTypeToJson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtOptions</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToAlterTableStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAlterTableStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SAlterTableStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtTableName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtAlterType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>alterType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtColName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtNewColName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>newColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtOptions</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtNewDataType</name></expr></argument>, <argument><expr><name>jsonToDataType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterTableStmtOptions</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterDnodeStmtDnodeId</name> <init>= <expr><literal type="string">"DnodeId"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterDnodeStmtConfig</name> <init>= <expr><literal type="string">"Config"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkAlterDnodeStmtValue</name> <init>= <expr><literal type="string">"Value"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>alterDnodeStmtToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SAlterDnodeStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SAlterDnodeStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterDnodeStmtDnodeId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterDnodeStmtConfig</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterDnodeStmtValue</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToAlterDnodeStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAlterDnodeStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SAlterDnodeStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterDnodeStmtDnodeId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterDnodeStmtConfig</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkAlterDnodeStmtValue</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkCreateTopicStmtTopicName</name> <init>= <expr><literal type="string">"TopicName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkCreateTopicStmtSubscribeDbName</name> <init>= <expr><literal type="string">"SubscribeDbName"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkCreateTopicStmtIgnoreExists</name> <init>= <expr><literal type="string">"IgnoreExists"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkCreateTopicStmtQuery</name> <init>= <expr><literal type="string">"Query"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createTopicStmtToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SCreateTopicStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SCreateTopicStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCreateTopicStmtTopicName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCreateTopicStmtSubscribeDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subDbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCreateTopicStmtIgnoreExists</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>ignoreExists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCreateTopicStmtQuery</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToCreateTopicStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCreateTopicStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SCreateTopicStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCreateTopicStmtTopicName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCreateTopicStmtSubscribeDbName</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>subDbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCreateTopicStmtIgnoreExists</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>ignoreExists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkCreateTopicStmtQuery</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeleteStmtFromTable</name> <init>= <expr><literal type="string">"FromTable"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeleteStmtWhere</name> <init>= <expr><literal type="string">"Where"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeleteStmtCountFunc</name> <init>= <expr><literal type="string">"CountFunc"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeleteStmtTagIndexCond</name> <init>= <expr><literal type="string">"TagIndexCond"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeleteStmtTimeRangeStartKey</name> <init>= <expr><literal type="string">"TimeRangeStartKey"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeleteStmtTimeRangeEndKey</name> <init>= <expr><literal type="string">"TimeRangeEndKey"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeleteStmtPrecision</name> <init>= <expr><literal type="string">"Precision"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkDeleteStmtDeleteZeroRows</name> <init>= <expr><literal type="string">"DeleteZeroRows"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>deleteStmtToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDeleteStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SDeleteStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtFromTable</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtWhere</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtCountFunc</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pCountFunc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtTagIndexCond</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtTimeRangeStartKey</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtTimeRangeEndKey</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtPrecision</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddBoolToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtDeleteZeroRows</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>deleteZeroRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToDeleteStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDeleteStmt</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDeleteStmt</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtFromTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pFromTable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtWhere</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtCountFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pCountFunc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNodeObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtTagIndexCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtTimeRangeStartKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtTimeRangeEndKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetUTinyIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtPrecision</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonGetBoolValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkDeleteStmtDeleteZeroRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>deleteZeroRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>specificNodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case>
      <return>return <expr><call><name>columnNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case>
      <return>return <expr><call><name>valueNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
      <return>return <expr><call><name>operatorNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case>
      <return>return <expr><call><name>logicConditionNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case>
      <return>return <expr><call><name>functionNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_REAL_TABLE</name></expr>:</case>
      <return>return <expr><call><name>realTableNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_TEMP_TABLE</name></expr>:</case>
      <return>return <expr><call><name>tempTableNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_JOIN_TABLE</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_GROUPING_SET</name></expr>:</case>
      <return>return <expr><call><name>groupingSetNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ORDER_BY_EXPR</name></expr>:</case>
      <return>return <expr><call><name>orderByExprNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LIMIT</name></expr>:</case>
      <return>return <expr><call><name>limitNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_STATE_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>stateWindowNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SESSION_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>sessionWindowNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_INTERVAL_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>intervalWindowNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_NODE_LIST</name></expr>:</case>
      <return>return <expr><call><name>nodeListNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_FILL</name></expr>:</case>
      <return>return <expr><call><name>fillNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_RAW_EXPR</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_TARGET</name></expr>:</case>
      <return>return <expr><call><name>targetNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DATABLOCK_DESC</name></expr>:</case>
      <return>return <expr><call><name>dataBlockDescNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SLOT_DESC</name></expr>:</case>
      <return>return <expr><call><name>slotDescNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_COLUMN_DEF</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_DOWNSTREAM_SOURCE</name></expr>:</case>
      <return>return <expr><call><name>downstreamSourceNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DATABASE_OPTIONS</name></expr>:</case>
      <return>return <expr><call><name>databaseOptionsToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LEFT_VALUE</name></expr>:</case>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>  <comment type="line">// SLeftValueNode has no fields to serialize.</comment>
    <case>case <expr><name>QUERY_NODE_WHEN_THEN</name></expr>:</case>
      <return>return <expr><call><name>whenThenNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CASE_WHEN</name></expr>:</case>
      <return>return <expr><call><name>caseWhenNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SET_OPERATOR</name></expr>:</case>
      <return>return <expr><call><name>setOperatorToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SELECT_STMT</name></expr>:</case>
      <return>return <expr><call><name>selectStmtToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_VNODE_MODIF_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_CREATE_DATABASE_STMT</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ALTER_DATABASE_STMT</name></expr>:</case>
      <return>return <expr><call><name>alterDatabaseStmtToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_TABLE_STMT</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr>:</case>
      <return>return <expr><call><name>alterTableStmtToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_USE_DATABASE_STMT</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_ALTER_DNODE_STMT</name></expr>:</case>
      <return>return <expr><call><name>alterDnodeStmtToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_DATABASES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_TABLES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_TAGS_STMT</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_CREATE_TOPIC_STMT</name></expr>:</case>
      <return>return <expr><call><name>createTopicStmtToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DELETE_STMT</name></expr>:</case>
      <return>return <expr><call><name>deleteStmtToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_SCAN</name></expr>:</case>
      <return>return <expr><call><name>logicScanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_JOIN</name></expr>:</case>
      <return>return <expr><call><name>logicJoinNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_AGG</name></expr>:</case>
      <return>return <expr><call><name>logicAggNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_PROJECT</name></expr>:</case>
      <return>return <expr><call><name>logicProjectNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_VNODE_MODIFY</name></expr>:</case>
      <return>return <expr><call><name>logicVnodeModifyNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_EXCHANGE</name></expr>:</case>
      <return>return <expr><call><name>logicExchangeNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_MERGE</name></expr>:</case>
      <return>return <expr><call><name>logicMergeNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>logicWindowNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_FILL</name></expr>:</case>
      <return>return <expr><call><name>logicFillNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_SORT</name></expr>:</case>
      <return>return <expr><call><name>logicSortNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_PARTITION</name></expr>:</case>
      <return>return <expr><call><name>logicPartitionNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_INDEF_ROWS_FUNC</name></expr>:</case>
      <return>return <expr><call><name>logicIndefRowsFuncNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_INTERP_FUNC</name></expr>:</case>
      <return>return <expr><call><name>logicInterpFuncNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_SUBPLAN</name></expr>:</case>
      <return>return <expr><call><name>logicSubplanToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN</name></expr>:</case>
      <return>return <expr><call><name>logicPlanToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TAG_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_BLOCK_DIST_SCAN</name></expr>:</case>
      <return>return <expr><call><name>physiScanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_LAST_ROW_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_COUNT_SCAN</name></expr>:</case>
      <return>return <expr><call><name>physiLastRowScanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_MERGE_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>:</case>
      <return>return <expr><call><name>physiTableScanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SYSTABLE_SCAN</name></expr>:</case>
      <return>return <expr><call><name>physiSysTableScanNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PROJECT</name></expr>:</case>
      <return>return <expr><call><name>physiProjectNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_JOIN</name></expr>:</case>
      <return>return <expr><call><name>physiJoinNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_AGG</name></expr>:</case>
      <return>return <expr><call><name>physiAggNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr>:</case>
      <return>return <expr><call><name>physiExchangeNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name></expr>:</case>
      <return>return <expr><call><name>physiMergeNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SORT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_GROUP_SORT</name></expr>:</case>
      <return>return <expr><call><name>physiSortNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name></expr>:</case>
      <return>return <expr><call><name>physiIntervalNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_FILL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FILL</name></expr>:</case>
      <return>return <expr><call><name>physiFillNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name></expr>:</case>
      <return>return <expr><call><name>physiSessionWindowNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_STATE</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_STATE</name></expr>:</case>
      <return>return <expr><call><name>physiStateWindowNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PARTITION</name></expr>:</case>
      <return>return <expr><call><name>physiPartitionNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_PARTITION</name></expr>:</case>
      <return>return <expr><call><name>physiStreamPartitionNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INDEF_ROWS_FUNC</name></expr>:</case>
      <return>return <expr><call><name>physiIndefRowsFuncNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INTERP_FUNC</name></expr>:</case>
      <return>return <expr><call><name>physiInterpFuncNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DISPATCH</name></expr>:</case>
      <return>return <expr><call><name>physiDispatchNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INSERT</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_QUERY_INSERT</name></expr>:</case>
      <return>return <expr><call><name>physiQueryInsertNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DELETE</name></expr>:</case>
      <return>return <expr><call><name>physiDeleteNodeToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_SUBPLAN</name></expr>:</case>
      <return>return <expr><call><name>subplanToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN</name></expr>:</case>
      <return>return <expr><call><name>planToJson</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>nodesWarn</name><argument_list>(<argument><expr><literal type="string">"specificNodeToJson unknown node = %s"</literal></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToSpecificNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case>
      <return>return <expr><call><name>jsonToColumnNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case>
      <return>return <expr><call><name>jsonToValueNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
      <return>return <expr><call><name>jsonToOperatorNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicConditionNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case>
      <return>return <expr><call><name>jsonToFunctionNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_REAL_TABLE</name></expr>:</case>
      <return>return <expr><call><name>jsonToRealTableNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_TEMP_TABLE</name></expr>:</case>
      <return>return <expr><call><name>jsonToTempTableNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_GROUPING_SET</name></expr>:</case>
      <return>return <expr><call><name>jsonToGroupingSetNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ORDER_BY_EXPR</name></expr>:</case>
      <return>return <expr><call><name>jsonToOrderByExprNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LIMIT</name></expr>:</case>
      <return>return <expr><call><name>jsonToLimitNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_STATE_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>jsonToStateWindowNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SESSION_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>jsonToSessionWindowNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_INTERVAL_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>jsonToIntervalWindowNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_NODE_LIST</name></expr>:</case>
      <return>return <expr><call><name>jsonToNodeListNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_FILL</name></expr>:</case>
      <return>return <expr><call><name>jsonToFillNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_TARGET</name></expr>:</case>
      <return>return <expr><call><name>jsonToTargetNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DATABLOCK_DESC</name></expr>:</case>
      <return>return <expr><call><name>jsonToDataBlockDescNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SLOT_DESC</name></expr>:</case>
      <return>return <expr><call><name>jsonToSlotDescNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DOWNSTREAM_SOURCE</name></expr>:</case>
      <return>return <expr><call><name>jsonToDownstreamSourceNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DATABASE_OPTIONS</name></expr>:</case>
      <return>return <expr><call><name>jsonToDatabaseOptions</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LEFT_VALUE</name></expr>:</case>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>  <comment type="line">// SLeftValueNode has no fields to deserialize.</comment>
    <case>case <expr><name>QUERY_NODE_WHEN_THEN</name></expr>:</case>
      <return>return <expr><call><name>jsonToWhenThenNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CASE_WHEN</name></expr>:</case>
      <return>return <expr><call><name>jsonToCaseWhenNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SET_OPERATOR</name></expr>:</case>
      <return>return <expr><call><name>jsonToSetOperator</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SELECT_STMT</name></expr>:</case>
      <return>return <expr><call><name>jsonToSelectStmt</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_DATABASE_STMT</name></expr>:</case>
      <return>return <expr><call><name>jsonToAlterDatabaseStmt</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr>:</case>
      <return>return <expr><call><name>jsonToAlterTableStmt</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_DNODE_STMT</name></expr>:</case>
      <return>return <expr><call><name>jsonToAlterDnodeStmt</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_CREATE_TOPIC_STMT</name></expr>:</case>
      <return>return <expr><call><name>jsonToCreateTopicStmt</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DELETE_STMT</name></expr>:</case>
      <return>return <expr><call><name>jsonToDeleteStmt</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_SCAN</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicScanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_AGG</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicAggNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_PROJECT</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicProjectNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_VNODE_MODIFY</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicVnodeModifyNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_EXCHANGE</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicExchangeNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_MERGE</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicMergeNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicWindowNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_FILL</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicFillNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_SORT</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicSortNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_PARTITION</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicPartitionNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_INDEF_ROWS_FUNC</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicIndefRowsFuncNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_INTERP_FUNC</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicInterpFuncNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_SUBPLAN</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicSubplan</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN</name></expr>:</case>
      <return>return <expr><call><name>jsonToLogicPlan</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TAG_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_BLOCK_DIST_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_COUNT_SCAN</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiScanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_LAST_ROW_SCAN</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiLastRowScanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_MERGE_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiTableScanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SYSTABLE_SCAN</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiSysTableScanNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PROJECT</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiProjectNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_JOIN</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiJoinNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_AGG</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiAggNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiExchangeNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiMergeNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SORT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_GROUP_SORT</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiSortNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiIntervalNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_FILL</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FILL</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiFillNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_SESSION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiSessionWindowNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_STATE</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_STATE</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiStateWindowNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PARTITION</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiPartitionNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_PARTITION</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiStreamPartitionNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INDEF_ROWS_FUNC</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiIndefRowsFuncNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INTERP_FUNC</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiInterpFuncNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DISPATCH</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiDispatchNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_QUERY_INSERT</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiQueryInsertNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DELETE</name></expr>:</case>
      <return>return <expr><call><name>jsonToPhysiDeleteNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_SUBPLAN</name></expr>:</case>
      <return>return <expr><call><name>jsonToSubplan</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN</name></expr>:</case>
      <return>return <expr><call><name>jsonToPlan</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>nodesWarn</name><argument_list>(<argument><expr><literal type="string">"jsonToSpecificNode unknown node = %s"</literal></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkNodeType</name> <init>= <expr><literal type="string">"NodeType"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jkNodeName</name> <init>= <expr><literal type="string">"Name"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nodeToJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNodeType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNodeName</name></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>specificNodeToJson</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>nodesError</name><argument_list>(<argument><expr><literal type="string">"%s ToJson error"</literal></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNodeType</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jsonToSpecificNode</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>nodesError</name><argument_list>(<argument><expr><literal type="string">"%s toNode error"</literal></expr></argument>, <argument><expr><call><name>nodesNodeName</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>makeNodeByJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>jkNodeType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pNode</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>jsonToNode</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>jsonToNodeObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJsonNode</name> <init>= <expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJsonNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>makeNodeByJson</name><argument_list>(<argument><expr><name>pJsonNode</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>nodesNodeToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pStr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pStr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FAILED</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodeToJson</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pStr</name> <operator>=</operator> <ternary><condition><expr><name>format</name></expr> ?</condition><then> <expr><call><name>tjsonToString</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tjsonToUnformattedString</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pLen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>pStr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>nodesStringToNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStr</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pStr</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>tjsonParse</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJson</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>makeNodeByJson</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>nodesListToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pStr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pList</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pStr</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pLen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_FAILED</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>tjsonCreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>nodeToJson</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <expr_stmt><expr><operator>*</operator><name>pStr</name> <operator>=</operator> <ternary><condition><expr><name>format</name></expr> ?</condition><then> <expr><call><name>tjsonToString</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tjsonToUnformattedString</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>pStr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>nodesStringToList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStr</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pStr</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>tjsonParse</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJson</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>jsonToNodeListImpl</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><operator>*</operator><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pList</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
